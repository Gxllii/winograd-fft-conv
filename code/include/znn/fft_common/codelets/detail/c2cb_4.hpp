//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cb_traits<4, 0>
{
    static constexpr long_t flops           = 16;
    static constexpr long_t operations      = 16;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 16;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -skip-k 0 -name c2cb
 * -standalone */

/*
 * This function contains 16 FP additions, 0 FP multiplications,
 * (or, 16 additions, 0 multiplications, 0 fused multiply/add),
 * 16 stack variables, 0 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && SkippedOutputs == 0>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    {
        SIMD_FLOAT T1, T2, T7, T8, T4, T5, Tc, Td, T3, Tb, T9, Tf, T6, Ta, Te;
        SIMD_FLOAT Tg;
        T1            = ri[0];
        T2            = ri[WS(is, 2)];
        T7            = ii[0];
        T8            = ii[WS(is, 2)];
        T4            = ri[WS(is, 1)];
        T5            = ri[WS(is, 3)];
        Tc            = ii[WS(is, 1)];
        Td            = ii[WS(is, 3)];
        T3            = T1 + T2;
        Tb            = T1 - T2;
        T9            = T7 - T8;
        Tf            = T7 + T8;
        T6            = T4 + T5;
        Ta            = T4 - T5;
        Te            = Tc - Td;
        Tg            = Tc + Td;
        io[WS(os, 3)] = Ta + T9;
        io[WS(os, 1)] = T9 - Ta;
        ro[0]         = T3 + T6;
        ro[WS(os, 2)] = T3 - T6;
        io[0]         = Tf + Tg;
        io[WS(os, 2)] = Tf - Tg;
        ro[WS(os, 3)] = Tb - Te;
        ro[WS(os, 1)] = Tb + Te;
    }
}

template <>
struct c2cb_traits<4, 1>
{
    static constexpr long_t flops           = 14;
    static constexpr long_t operations      = 14;
    static constexpr long_t memory_accesses = 14;
    static constexpr long_t stack_vars      = 12;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -skip-k 1 -name c2cb
 * -standalone */

/*
 * This function contains 14 FP additions, 0 FP multiplications,
 * (or, 14 additions, 0 multiplications, 0 fused multiply/add),
 * 12 stack variables, 0 constants, and 14 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && SkippedOutputs == 1>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    {
        SIMD_FLOAT T1, T2, T7, T8, T4, T5, Ta, Tb, T3, T9, T6, Tc;
        T1            = ri[0];
        T2            = ri[WS(is, 2)];
        T7            = ii[0];
        T8            = ii[WS(is, 2)];
        T4            = ii[WS(is, 1)];
        T5            = ii[WS(is, 3)];
        Ta            = ri[WS(is, 1)];
        Tb            = ri[WS(is, 3)];
        T3            = T1 - T2;
        T9            = T7 - T8;
        io[WS(os, 1)] = T7 + T8 - T5 - T4;
        T6            = T4 - T5;
        ro[WS(os, 1)] = T1 + T2 - Tb - Ta;
        Tc            = Ta - Tb;
        ro[0]         = T3 + T6;
        ro[WS(os, 2)] = T3 - T6;
        io[0]         = T9 - Tc;
        io[WS(os, 2)] = T9 + Tc;
    }
}

template <>
struct c2cb_traits<4, 2>
{
    static constexpr long_t flops           = 12;
    static constexpr long_t operations      = 12;
    static constexpr long_t memory_accesses = 12;
    static constexpr long_t stack_vars      = 8;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -skip-k 2 -name c2cb
 * -standalone */

/*
 * This function contains 12 FP additions, 0 FP multiplications,
 * (or, 12 additions, 0 multiplications, 0 fused multiply/add),
 * 8 stack variables, 0 constants, and 12 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && SkippedOutputs == 2>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    {
        SIMD_FLOAT T1, T5, T2, T6, T3, T7, T4, T8;
        T1            = ri[0];
        T5            = ii[0];
        T2            = ri[WS(is, 2)];
        T6            = ii[WS(is, 2)];
        T3            = ri[WS(is, 3)];
        T7            = ii[WS(is, 3)];
        T4            = ri[WS(is, 1)];
        T8            = ii[WS(is, 1)];
        io[WS(os, 1)] = T4 + T5 - T6 - T3;
        ro[0]         = T1 + T2 - T3 - T4;
        ro[WS(os, 1)] = T1 + T7 - T8 - T2;
        io[0]         = T5 + T6 - T7 - T8;
    }
}

template <>
struct c2cb_traits<4, 3>
{
    static constexpr long_t flops           = 6;
    static constexpr long_t operations      = 6;
    static constexpr long_t memory_accesses = 10;
    static constexpr long_t stack_vars      = 8;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -skip-k 3 -name c2cb
 * -standalone */

/*
 * This function contains 6 FP additions, 0 FP multiplications,
 * (or, 6 additions, 0 multiplications, 0 fused multiply/add),
 * 8 stack variables, 0 constants, and 10 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && SkippedOutputs == 3>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    {
        SIMD_FLOAT T1, T4, T2, T3, T5, T8, T6, T7;
        T1    = ri[0];
        T4    = ii[WS(is, 1)];
        T2    = ii[WS(is, 3)];
        T3    = ri[WS(is, 2)];
        T5    = ii[0];
        T8    = ri[WS(is, 3)];
        T6    = ri[WS(is, 1)];
        T7    = ii[WS(is, 2)];
        ro[0] = T1 + T2 - (T3 + T4);
        io[0] = T5 + T6 - (T7 + T8);
    }
}

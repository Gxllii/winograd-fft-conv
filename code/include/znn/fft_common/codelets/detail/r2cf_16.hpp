//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<16, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 10;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 10 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1            = R0[0];
        Cr[WS(cs, 5)] = T1;
        Cr[WS(cs, 3)] = T1;
        Cr[WS(cs, 6)] = T1;
        Cr[WS(cs, 4)] = T1;
        Cr[WS(cs, 2)] = T1;
        Cr[WS(cs, 1)] = T1;
        Cr[WS(cs, 8)] = T1;
        Cr[WS(cs, 7)] = T1;
        Cr[0]         = T1;
    }
}

template <>
struct r2cf_traits<16, 2>
{
    static constexpr long_t flops           = 20;
    static constexpr long_t operations      = 14;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 5;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 8 FP additions, 12 FP multiplications,
 * (or, 2 additions, 6 multiplications, 6 fused multiply/add),
 * 5 stack variables, 3 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP382683432, +0.382683432365089771728459984030398866761344562);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    {
        SIMD_FLOAT T1, T2;
        T1            = R0[0];
        T2            = R0[WS(rs, 1)];
        Cr[WS(cs, 4)] = T1;
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, T2, T1);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, T2, T1);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP382683432, T2, T1);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP382683432, T2, T1);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, T2, T1);
        Cr[0]         = T1 + T2;
        Cr[WS(cs, 8)] = T1 - T2;
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, T2, T1);
        Ci[WS(cs, 7)] = -(KP382683432 * T2);
        Ci[WS(cs, 2)] = -(KP707106781 * T2);
        Ci[WS(cs, 3)] = -(KP923879532 * T2);
        Ci[WS(cs, 5)] = -(KP923879532 * T2);
        Ci[WS(cs, 6)] = -(KP707106781 * T2);
        Ci[WS(cs, 1)] = -(KP382683432 * T2);
        Ci[WS(cs, 4)] = -T2;
    }
}

template <>
struct r2cf_traits<16, 3>
{
    static constexpr long_t flops           = 36;
    static constexpr long_t operations      = 22;
    static constexpr long_t memory_accesses = 19;
    static constexpr long_t stack_vars      = 11;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 18 FP additions, 18 FP multiplications,
 * (or, 4 additions, 4 multiplications, 14 fused multiply/add),
 * 11 stack variables, 5 constants, and 19 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP382683432, +0.382683432365089771728459984030398866761344562);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    {
        SIMD_FLOAT T3, T1, T2, T5, T6, T4;
        T3            = R0[WS(rs, 1)];
        T1            = R0[0];
        T2            = R0[WS(rs, 2)];
        Ci[WS(cs, 4)] = -T3;
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, T3, T1);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, T3, T1);
        Ci[WS(cs, 3)] = -(KP923879532 * (SIMD_FMADD(KP765366864, T2, T3)));
        Ci[WS(cs, 7)] = KP707106781 * (SIMD_FNMADD(KP541196100, T3, T2));
        Ci[WS(cs, 1)] = -(KP707106781 * (SIMD_FMADD(KP541196100, T3, T2)));
        Ci[WS(cs, 2)] = -(SIMD_FMADD(KP707106781, T3, T2));
        Ci[WS(cs, 6)] = SIMD_FNMADD(KP707106781, T3, T2);
        Ci[WS(cs, 5)] = KP923879532 * (SIMD_FMSUB(KP765366864, T2, T3));
        Cr[WS(cs, 4)] = T1 - T2;
        T5            = SIMD_FNMADD(KP707106781, T2, T1);
        T6            = SIMD_FMADD(KP707106781, T2, T1);
        T4            = T1 + T2;
        Cr[WS(cs, 3)] = SIMD_FMADD(KP382683432, T3, T5);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP382683432, T3, T5);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, T3, T6);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, T3, T6);
        Cr[0]         = T4 + T3;
        Cr[WS(cs, 8)] = T4 - T3;
    }
}

template <>
struct r2cf_traits<16, 4>
{
    static constexpr long_t flops           = 46;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 17;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 24 FP additions, 22 FP multiplications,
 * (or, 6 additions, 4 multiplications, 18 fused multiply/add),
 * 17 stack variables, 4 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    {
        SIMD_FLOAT T1, T2, T4, T5, T9, Tb, T3, T6, T7, Td, Tc, Ta, T8;
        T1            = R0[0];
        T2            = R0[WS(rs, 2)];
        T4            = R0[WS(rs, 1)];
        T5            = R0[WS(rs, 3)];
        Cr[WS(cs, 4)] = T1 - T2;
        T9            = T1 + T2;
        Tb            = SIMD_FNMADD(KP707106781, T2, T1);
        T3            = SIMD_FMADD(KP707106781, T2, T1);
        T6            = SIMD_FMADD(KP414213562, T5, T4);
        T7            = SIMD_FMSUB(KP414213562, T5, T4);
        Td            = T5 - T4;
        Tc            = SIMD_FMSUB(KP414213562, T4, T5);
        Ta            = T4 + T5;
        T8            = SIMD_FMADD(KP414213562, T4, T5);
        Ci[WS(cs, 1)] = -(KP923879532 * (SIMD_FMADD(KP765366864, T2, T8)));
        Ci[WS(cs, 7)] = -(KP923879532 * (SIMD_FNMADD(KP765366864, T2, T8)));
        Ci[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Ta, T2);
        Ci[WS(cs, 2)] = -(SIMD_FMADD(KP707106781, Ta, T2));
        Cr[0]         = T9 + Ta;
        Cr[WS(cs, 8)] = T9 - Ta;
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, Tc, Tb);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tc, Tb);
        Cr[WS(cs, 6)] = SIMD_FMADD(KP707106781, Td, T1);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP707106781, Td, T1);
        Ci[WS(cs, 4)] = Td;
        Ci[WS(cs, 5)] = KP923879532 * (SIMD_FMADD(KP765366864, T2, T7));
        Ci[WS(cs, 3)] = KP923879532 * (SIMD_FNMADD(KP765366864, T2, T7));
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, T6, T3);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, T6, T3);
    }
}

template <>
struct r2cf_traits<16, 5>
{
    static constexpr long_t flops           = 48;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 21;
    static constexpr long_t stack_vars      = 21;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 5 -name r2cf
 * -standalone */

/*
 * This function contains 28 FP additions, 20 FP multiplications,
 * (or, 8 additions, 0 multiplications, 20 fused multiply/add),
 * 21 stack variables, 3 constants, and 21 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 5>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T6, T7, T1, T4, T2, Tc, Te, Tg, Ti, Ta, T8, Tf, T5, T9, Tb;
        SIMD_FLOAT Th, T3, Td;
        T6            = R0[WS(rs, 1)];
        T7            = R0[WS(rs, 3)];
        T1            = R0[0];
        T4            = R0[WS(rs, 2)];
        T2            = R0[WS(rs, 4)];
        Tc            = SIMD_FMADD(KP414213562, T6, T7);
        Te            = T6 + T7;
        Tg            = SIMD_FMSUB(KP414213562, T6, T7);
        Ti            = T7 - T6;
        Ta            = SIMD_FMSUB(KP414213562, T7, T6);
        T8            = SIMD_FMADD(KP414213562, T7, T6);
        Tf            = SIMD_FNMADD(KP707106781, T4, T1);
        T5            = SIMD_FMADD(KP707106781, T4, T1);
        T9            = SIMD_FNMADD(KP707106781, T4, T2);
        Tb            = SIMD_FMADD(KP707106781, T4, T2);
        Th            = T1 - T2;
        T3            = T1 + T2;
        Ci[WS(cs, 2)] = -(SIMD_FMADD(KP707106781, Te, T4));
        Ci[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Te, T4);
        Ci[WS(cs, 4)] = Ti;
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, Tg, Tf);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tg, Tf);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, T8, T5);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, T8, T5);
        Ci[WS(cs, 5)] = SIMD_FMSUB(KP923879532, Ta, T9);
        Ci[WS(cs, 3)] = SIMD_FMADD(KP923879532, Ta, T9);
        Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, Tc, Tb));
        Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tc, Tb);
        Cr[WS(cs, 6)] = SIMD_FMADD(KP707106781, Ti, Th);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP707106781, Ti, Th);
        Td            = T3 + T4;
        Cr[WS(cs, 4)] = T3 - T4;
        Cr[0]         = Td + Te;
        Cr[WS(cs, 8)] = Td - Te;
    }
}

template <>
struct r2cf_traits<16, 6>
{
    static constexpr long_t flops           = 54;
    static constexpr long_t operations      = 34;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 27;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 6 -name r2cf
 * -standalone */

/*
 * This function contains 34 FP additions, 20 FP multiplications,
 * (or, 14 additions, 0 multiplications, 20 fused multiply/add),
 * 27 stack variables, 3 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 6>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T9, T6, T7, T1, T4, T2, T8, Tn, Td, Tg, T5, Tk, Tf, Tb, T3;
        SIMD_FLOAT Ti, Th, Tl, Te, Tj, To, Ta, Tc, Tm;
        T9            = R0[WS(rs, 3)];
        T6            = R0[WS(rs, 1)];
        T7            = R0[WS(rs, 5)];
        T1            = R0[0];
        T4            = R0[WS(rs, 2)];
        T2            = R0[WS(rs, 4)];
        T8            = SIMD_FNMADD(KP414213562, T7, T6);
        Tn            = T6 + T7;
        Td            = T6 - T7;
        Tg            = SIMD_FMADD(KP414213562, T6, T7);
        T5            = SIMD_FMADD(KP707106781, T4, T1);
        Tk            = SIMD_FNMADD(KP707106781, T4, T1);
        Tf            = SIMD_FMADD(KP707106781, T4, T2);
        Tb            = SIMD_FNMADD(KP707106781, T4, T2);
        T3            = T1 + T2;
        Ti            = T1 - T2;
        Th            = Tg + T9;
        Tl            = Tg - T9;
        Te            = Td + T9;
        Tj            = Td - T9;
        To            = Tn + T9;
        Ci[WS(cs, 4)] = T9 - Tn;
        Ta            = SIMD_FMADD(KP414213562, T9, T8);
        Tc            = SIMD_FNMADD(KP414213562, T9, T8);
        Tm            = T3 + T4;
        Cr[WS(cs, 4)] = T3 - T4;
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tl, Tk);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, Tl, Tk);
        Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Th, Tf);
        Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, Th, Tf));
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tj, Ti);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tj, Ti);
        Ci[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Te, T4);
        Ci[WS(cs, 2)] = -(SIMD_FMADD(KP707106781, Te, T4));
        Ci[WS(cs, 5)] = -(SIMD_FMADD(KP923879532, Tc, Tb));
        Ci[WS(cs, 3)] = SIMD_FNMADD(KP923879532, Tc, Tb);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, Ta, T5);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Ta, T5);
        Cr[0]         = Tm + To;
        Cr[WS(cs, 8)] = Tm - To;
    }
}

template <>
struct r2cf_traits<16, 7>
{
    static constexpr long_t flops           = 56;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 30;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 7 -name r2cf
 * -standalone */

/*
 * This function contains 36 FP additions, 20 FP multiplications,
 * (or, 16 additions, 0 multiplications, 20 fused multiply/add),
 * 30 stack variables, 3 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 7>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tc, T4, T5, T1, T2, T9, Ta, T7, T6, Tl, T3, Tj, Tg, Tq, Tb;
        SIMD_FLOAT Tn, T8, Te, Ti, Tp, To, Tk, Tm, Th, Tr, Tf, Td;
        Tc            = R0[WS(rs, 3)];
        T4            = R0[WS(rs, 2)];
        T5            = R0[WS(rs, 6)];
        T1            = R0[0];
        T2            = R0[WS(rs, 4)];
        T9            = R0[WS(rs, 1)];
        Ta            = R0[WS(rs, 5)];
        T7            = T4 - T5;
        T6            = T4 + T5;
        Tl            = T1 - T2;
        T3            = T1 + T2;
        Tj            = SIMD_FMADD(KP414213562, T9, Ta);
        Tg            = T9 - Ta;
        Tq            = T9 + Ta;
        Tb            = SIMD_FNMADD(KP414213562, Ta, T9);
        Tn            = SIMD_FNMADD(KP707106781, T7, T1);
        T8            = SIMD_FMADD(KP707106781, T7, T1);
        Te            = SIMD_FNMADD(KP707106781, T6, T2);
        Ti            = SIMD_FMADD(KP707106781, T6, T2);
        Tp            = T3 + T6;
        Cr[WS(cs, 4)] = T3 - T6;
        To            = Tj - Tc;
        Tk            = Tj + Tc;
        Tm            = Tg - Tc;
        Th            = Tg + Tc;
        Tr            = Tq + Tc;
        Ci[WS(cs, 4)] = Tc - Tq;
        Tf            = SIMD_FNMADD(KP414213562, Tc, Tb);
        Td            = SIMD_FMADD(KP414213562, Tc, Tb);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, To, Tn);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, To, Tn);
        Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tk, Ti);
        Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, Tk, Ti));
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tm, Tl);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tm, Tl);
        Ci[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Th, T7);
        Ci[WS(cs, 2)] = -(SIMD_FMADD(KP707106781, Th, T7));
        Cr[0]         = Tp + Tr;
        Cr[WS(cs, 8)] = Tp - Tr;
        Ci[WS(cs, 5)] = -(SIMD_FMADD(KP923879532, Tf, Te));
        Ci[WS(cs, 3)] = SIMD_FNMADD(KP923879532, Tf, Te);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, Td, T8);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Td, T8);
    }
}

template <>
struct r2cf_traits<16, 8>
{
    static constexpr long_t flops           = 60;
    static constexpr long_t operations      = 40;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 35;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 8 -name r2cf
 * -standalone */

/*
 * This function contains 40 FP additions, 20 FP multiplications,
 * (or, 20 additions, 0 multiplications, 20 fused multiply/add),
 * 35 stack variables, 3 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 8>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1, T2, T4, T5, T9, Ta, Tc, Td, T3, Ti, T6, T7, Tb, Tu, Tj;
        SIMD_FLOAT To, Te, Tv, Tk, Tp, T8, Tr, Tt, Tg, Tn, Tq, Ts, Tl, Tm, Tw;
        SIMD_FLOAT Tf, Th;
        T1            = R0[0];
        T2            = R0[WS(rs, 4)];
        T4            = R0[WS(rs, 2)];
        T5            = R0[WS(rs, 6)];
        T9            = R0[WS(rs, 1)];
        Ta            = R0[WS(rs, 5)];
        Tc            = R0[WS(rs, 7)];
        Td            = R0[WS(rs, 3)];
        T3            = T1 + T2;
        Ti            = T1 - T2;
        T6            = T4 + T5;
        T7            = T4 - T5;
        Tb            = SIMD_FNMADD(KP414213562, Ta, T9);
        Tu            = T9 + Ta;
        Tj            = T9 - Ta;
        To            = SIMD_FMADD(KP414213562, T9, Ta);
        Te            = SIMD_FMSUB(KP414213562, Td, Tc);
        Tv            = Tc + Td;
        Tk            = Tc - Td;
        Tp            = SIMD_FMADD(KP414213562, Tc, Td);
        T8            = SIMD_FMADD(KP707106781, T7, T1);
        Tr            = SIMD_FNMADD(KP707106781, T7, T1);
        Tt            = T3 + T6;
        Tg            = SIMD_FNMADD(KP707106781, T6, T2);
        Tn            = SIMD_FMADD(KP707106781, T6, T2);
        Cr[WS(cs, 4)] = T3 - T6;
        Tq            = To + Tp;
        Ts            = To - Tp;
        Tl            = Tj + Tk;
        Tm            = Tk - Tj;
        Tw            = Tu + Tv;
        Ci[WS(cs, 4)] = Tv - Tu;
        Tf            = Tb + Te;
        Th            = Te - Tb;
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, Ts, Tr);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, Ts, Tr);
        Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tq, Tn);
        Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, Tq, Tn));
        Ci[WS(cs, 6)] = SIMD_FMADD(KP707106781, Tm, T7);
        Ci[WS(cs, 2)] = SIMD_FMSUB(KP707106781, Tm, T7);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tl, Ti);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tl, Ti);
        Cr[0]         = Tt + Tw;
        Cr[WS(cs, 8)] = Tt - Tw;
        Ci[WS(cs, 5)] = SIMD_FMSUB(KP923879532, Th, Tg);
        Ci[WS(cs, 3)] = SIMD_FMADD(KP923879532, Th, Tg);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, Tf, T8);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tf, T8);
    }
}

template <>
struct r2cf_traits<16, 9>
{
    static constexpr long_t flops           = 62;
    static constexpr long_t operations      = 42;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 38;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 9 -name r2cf
 * -standalone */

/*
 * This function contains 42 FP additions, 20 FP multiplications,
 * (or, 22 additions, 0 multiplications, 20 fused multiply/add),
 * 38 stack variables, 3 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 9>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T6, T7, Tf, Tg, Tc, Td, T4, T1, T2, Ta, T8, Ts, Tn, Ty, Th;
        SIMD_FLOAT Tr, Tm, Tx, Te, T9, T3, Tj, Tq, Tv, Tt, To, Tp, Tz, Tk, Ti;
        SIMD_FLOAT Tu, Tb, Tl, T5, Tw;
        T6            = R0[WS(rs, 2)];
        T7            = R0[WS(rs, 6)];
        Tf            = R0[WS(rs, 7)];
        Tg            = R0[WS(rs, 3)];
        Tc            = R0[WS(rs, 1)];
        Td            = R0[WS(rs, 5)];
        T4            = R0[WS(rs, 4)];
        T1            = R0[0];
        T2            = R0[WS(rs, 8)];
        Ta            = T6 - T7;
        T8            = T6 + T7;
        Ts            = SIMD_FMADD(KP414213562, Tf, Tg);
        Tn            = Tf - Tg;
        Ty            = Tf + Tg;
        Th            = SIMD_FMSUB(KP414213562, Tg, Tf);
        Tr            = SIMD_FMADD(KP414213562, Tc, Td);
        Tm            = Tc - Td;
        Tx            = Tc + Td;
        Te            = SIMD_FNMADD(KP414213562, Td, Tc);
        T9            = T1 - T2;
        T3            = T1 + T2;
        Tj            = SIMD_FNMADD(KP707106781, T8, T4);
        Tq            = SIMD_FMADD(KP707106781, T8, T4);
        Tv            = Tr - Ts;
        Tt            = Tr + Ts;
        To            = Tm + Tn;
        Tp            = Tn - Tm;
        Tz            = Tx + Ty;
        Ci[WS(cs, 4)] = Ty - Tx;
        Tk            = Th - Te;
        Ti            = Te + Th;
        Tu            = SIMD_FNMADD(KP707106781, Ta, T9);
        Tb            = SIMD_FMADD(KP707106781, Ta, T9);
        Tl            = T3 - T4;
        T5            = T3 + T4;
        Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tt, Tq);
        Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, Tt, Tq));
        Ci[WS(cs, 6)] = SIMD_FMADD(KP707106781, Tp, Ta);
        Ci[WS(cs, 2)] = SIMD_FMSUB(KP707106781, Tp, Ta);
        Ci[WS(cs, 5)] = SIMD_FMSUB(KP923879532, Tk, Tj);
        Ci[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tk, Tj);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tv, Tu);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, Tv, Tu);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, Ti, Tb);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Ti, Tb);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, To, Tl);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, To, Tl);
        Tw            = T5 + T8;
        Cr[WS(cs, 4)] = T5 - T8;
        Cr[0]         = Tw + Tz;
        Cr[WS(cs, 8)] = Tw - Tz;
    }
}

template <>
struct r2cf_traits<16, 10>
{
    static constexpr long_t flops           = 64;
    static constexpr long_t operations      = 44;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 41;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 10 -name r2cf
 * -standalone */

/*
 * This function contains 44 FP additions, 20 FP multiplications,
 * (or, 24 additions, 0 multiplications, 20 fused multiply/add),
 * 41 stack variables, 3 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 10>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T6, T7, Th, Ti, T4, T1, T2, Tf, Tc, Td, T8, Ta, Tj, TB, Tq;
        SIMD_FLOAT Tv, T3, T9, Te, To, Tt, Tl, Tb, Tx, T5, Tn, TA, Tp, Tg, Tu;
        SIMD_FLOAT Tz, Ts, Tr, TC, Tw, Ty, Tk, Tm;
        T6            = R0[WS(rs, 2)];
        T7            = R0[WS(rs, 6)];
        Th            = R0[WS(rs, 7)];
        Ti            = R0[WS(rs, 3)];
        T4            = R0[WS(rs, 4)];
        T1            = R0[0];
        T2            = R0[WS(rs, 8)];
        Tf            = R0[WS(rs, 5)];
        Tc            = R0[WS(rs, 1)];
        Td            = R0[WS(rs, 9)];
        T8            = T6 + T7;
        Ta            = T6 - T7;
        Tj            = SIMD_FMSUB(KP414213562, Ti, Th);
        TB            = Th + Ti;
        Tq            = Th - Ti;
        Tv            = SIMD_FMADD(KP414213562, Th, Ti);
        T3            = T1 + T2;
        T9            = T1 - T2;
        Te            = Tc - Td;
        To            = Tc + Td;
        Tt            = SIMD_FMADD(KP707106781, T8, T4);
        Tl            = SIMD_FNMADD(KP707106781, T8, T4);
        Tb            = SIMD_FMADD(KP707106781, Ta, T9);
        Tx            = SIMD_FNMADD(KP707106781, Ta, T9);
        T5            = T3 + T4;
        Tn            = T3 - T4;
        TA            = To + Tf;
        Tp            = To - Tf;
        Tg            = SIMD_FNMADD(KP414213562, Tf, Te);
        Tu            = SIMD_FMADD(KP414213562, Te, Tf);
        Tz            = T5 + T8;
        Cr[WS(cs, 4)] = T5 - T8;
        Ts            = Tq - Tp;
        Tr            = Tp + Tq;
        TC            = TA + TB;
        Ci[WS(cs, 4)] = TB - TA;
        Tw            = Tu + Tv;
        Ty            = Tu - Tv;
        Tk            = Tg + Tj;
        Tm            = Tj - Tg;
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tr, Tn);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tr, Tn);
        Ci[WS(cs, 6)] = SIMD_FMADD(KP707106781, Ts, Ta);
        Ci[WS(cs, 2)] = SIMD_FMSUB(KP707106781, Ts, Ta);
        Cr[0]         = Tz + TC;
        Cr[WS(cs, 8)] = Tz - TC;
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, Ty, Tx);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, Ty, Tx);
        Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tw, Tt);
        Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, Tw, Tt));
        Ci[WS(cs, 5)] = SIMD_FMSUB(KP923879532, Tm, Tl);
        Ci[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tm, Tl);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, Tk, Tb);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tk, Tb);
    }
}

template <>
struct r2cf_traits<16, 11>
{
    static constexpr long_t flops           = 68;
    static constexpr long_t operations      = 48;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 46;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 11 -name r2cf
 * -standalone */

/*
 * This function contains 48 FP additions, 20 FP multiplications,
 * (or, 28 additions, 0 multiplications, 20 fused multiply/add),
 * 46 stack variables, 3 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 11>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tk, Tl, T4, T1, T2, T9, T6, T7, Ti, Tf, Tg;
        Tk = R0[WS(rs, 7)];
        Tl = R0[WS(rs, 3)];
        T4 = R0[WS(rs, 4)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        T9 = R0[WS(rs, 6)];
        T6 = R0[WS(rs, 2)];
        T7 = R0[WS(rs, 10)];
        Ti = R0[WS(rs, 5)];
        Tf = R0[WS(rs, 1)];
        Tg = R0[WS(rs, 9)];
        {
            SIMD_FLOAT TA, Tu, TG, Tm, Tb, T3, Tc, T8, Ts, Th, Tr, T5, Td, To,
                Tw;
            SIMD_FLOAT Ta, Tt, TF, Tz, Tj, TC, Te, Tp, Ty, TE, Tx, Tv, TH, TD,
                TB;
            SIMD_FLOAT Tq, Tn;
            TA            = SIMD_FMADD(KP414213562, Tk, Tl);
            Tu            = Tk - Tl;
            TG            = Tk + Tl;
            Tm            = SIMD_FMSUB(KP414213562, Tl, Tk);
            Tb            = T1 - T2;
            T3            = T1 + T2;
            Tc            = T6 - T7;
            T8            = T6 + T7;
            Ts            = Tf + Tg;
            Th            = Tf - Tg;
            Tr            = T3 - T4;
            T5            = T3 + T4;
            Td            = Tc - T9;
            To            = Tc + T9;
            Tw            = T9 - T8;
            Ta            = T8 + T9;
            Tt            = Ts - Ti;
            TF            = Ts + Ti;
            Tz            = SIMD_FMADD(KP414213562, Th, Ti);
            Tj            = SIMD_FNMADD(KP414213562, Ti, Th);
            TC            = SIMD_FNMADD(KP707106781, Td, Tb);
            Te            = SIMD_FMADD(KP707106781, Td, Tb);
            Tp            = SIMD_FNMADD(KP707106781, To, T4);
            Ty            = SIMD_FMADD(KP707106781, To, T4);
            TE            = T5 + Ta;
            Cr[WS(cs, 4)] = T5 - Ta;
            Tx            = Tu - Tt;
            Tv            = Tt + Tu;
            TH            = TF + TG;
            Ci[WS(cs, 4)] = TG - TF;
            TD            = Tz - TA;
            TB            = Tz + TA;
            Tq            = Tm - Tj;
            Tn            = Tj + Tm;
            Ci[WS(cs, 6)] = SIMD_FMSUB(KP707106781, Tx, Tw);
            Ci[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tx, Tw);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tv, Tr);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tv, Tr);
            Cr[0]         = TE + TH;
            Cr[WS(cs, 8)] = TE - TH;
            Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, TD, TC);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, TD, TC);
            Ci[WS(cs, 7)] = SIMD_FNMADD(KP923879532, TB, Ty);
            Ci[WS(cs, 1)] = -(SIMD_FMADD(KP923879532, TB, Ty));
            Ci[WS(cs, 5)] = SIMD_FMSUB(KP923879532, Tq, Tp);
            Ci[WS(cs, 3)] = SIMD_FMADD(KP923879532, Tq, Tp);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, Tn, Te);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, Tn, Te);
        }
    }
}

template <>
struct r2cf_traits<16, 12>
{
    static constexpr long_t flops           = 70;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 49;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 12 -name r2cf
 * -standalone */

/*
 * This function contains 50 FP additions, 20 FP multiplications,
 * (or, 30 additions, 0 multiplications, 20 fused multiply/add),
 * 49 stack variables, 3 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 12>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T4, T1, T2, T9, T6, T7, Tf, Tc, Td, Th, Ti, Tj, T3, Tt, T8;
        SIMD_FLOAT Tu;
        T4 = R0[WS(rs, 4)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        T9 = R0[WS(rs, 6)];
        T6 = R0[WS(rs, 2)];
        T7 = R0[WS(rs, 10)];
        Tf = R0[WS(rs, 5)];
        Tc = R0[WS(rs, 1)];
        Td = R0[WS(rs, 9)];
        Th = R0[WS(rs, 7)];
        Ti = R0[WS(rs, 3)];
        Tj = R0[WS(rs, 11)];
        T3 = T1 + T2;
        Tt = T1 - T2;
        T8 = T6 + T7;
        Tu = T6 - T7;
        {
            SIMD_FLOAT Te, Tx, Tk, Tz, Tb, Tn, TH, Ty, Tg, Tq, TG, TA, Tl, Tr,
                Tw;
            SIMD_FLOAT TJ, TF, TD, Tp, T5, TC, Tv, Ta, TB, TE, TI, TK, Ts, Tm,
                To;
            Te            = Tc + Td;
            Tx            = Tc - Td;
            Tk            = Ti + Tj;
            Tz            = Tj - Ti;
            T5            = T3 + T4;
            Tb            = T3 - T4;
            TC            = Tu + T9;
            Tv            = Tu - T9;
            Ta            = T8 + T9;
            Tn            = T9 - T8;
            TH            = SIMD_FMADD(KP414213562, Tx, Tf);
            Ty            = SIMD_FNMADD(KP414213562, Tf, Tx);
            Tg            = Te - Tf;
            Tq            = Te + Tf;
            TG            = SIMD_FNMADD(KP414213562, Th, Tz);
            TA            = SIMD_FMADD(KP414213562, Tz, Th);
            Tl            = Th - Tk;
            Tr            = Th + Tk;
            Tw            = SIMD_FMADD(KP707106781, Tv, Tt);
            TJ            = SIMD_FNMADD(KP707106781, Tv, Tt);
            TF            = SIMD_FMADD(KP707106781, TC, T4);
            TD            = SIMD_FNMADD(KP707106781, TC, T4);
            Tp            = T5 + Ta;
            Cr[WS(cs, 4)] = T5 - Ta;
            TB            = Ty - TA;
            TE            = Ty + TA;
            TI            = TG - TH;
            TK            = TH + TG;
            Ts            = Tq + Tr;
            Ci[WS(cs, 4)] = Tr - Tq;
            Tm            = Tg + Tl;
            To            = Tl - Tg;
            Ci[WS(cs, 5)] = -(SIMD_FMADD(KP923879532, TE, TD));
            Ci[WS(cs, 3)] = SIMD_FNMADD(KP923879532, TE, TD);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, TB, Tw);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, TB, Tw);
            Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, TK, TJ);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, TK, TJ);
            Ci[WS(cs, 7)] = SIMD_FMADD(KP923879532, TI, TF);
            Ci[WS(cs, 1)] = SIMD_FMSUB(KP923879532, TI, TF);
            Cr[0]         = Tp + Ts;
            Cr[WS(cs, 8)] = Tp - Ts;
            Ci[WS(cs, 6)] = SIMD_FMSUB(KP707106781, To, Tn);
            Ci[WS(cs, 2)] = SIMD_FMADD(KP707106781, To, Tn);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tm, Tb);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tm, Tb);
        }
    }
}

template <>
struct r2cf_traits<16, 13>
{
    static constexpr long_t flops           = 72;
    static constexpr long_t operations      = 52;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 52;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 13 -name r2cf
 * -standalone */

/*
 * This function contains 52 FP additions, 20 FP multiplications,
 * (or, 32 additions, 0 multiplications, 20 fused multiply/add),
 * 52 stack variables, 3 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 13>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tb, T8, T9, Tj, Tk, Tl, Th, Te, Tf, T1, T2, T4, T5, Tw, Ta;
        SIMD_FLOAT TB, Tm;
        Tb = R0[WS(rs, 6)];
        T8 = R0[WS(rs, 2)];
        T9 = R0[WS(rs, 10)];
        Tj = R0[WS(rs, 7)];
        Tk = R0[WS(rs, 3)];
        Tl = R0[WS(rs, 11)];
        Th = R0[WS(rs, 5)];
        Te = R0[WS(rs, 1)];
        Tf = R0[WS(rs, 9)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        T4 = R0[WS(rs, 4)];
        T5 = R0[WS(rs, 12)];
        Tw = T8 - T9;
        Ta = T8 + T9;
        TB = Tl - Tk;
        Tm = Tk + Tl;
        {
            SIMD_FLOAT Tp, Tc, TC, TJ, Tt, Tn, TA, TK, Ts, Ti, Td, T7, TM, Ty,
                TG;
            SIMD_FLOAT TI, Tz, Tg, Tv, T3, TE, T6, Tx, TF, TH, TD, TN, TL, Tu,
                Tq;
            SIMD_FLOAT To, Tr;
            Tz            = Te - Tf;
            Tg            = Te + Tf;
            Tv            = T1 - T2;
            T3            = T1 + T2;
            TE            = T4 - T5;
            T6            = T4 + T5;
            Tx            = Tw - Tb;
            TF            = Tw + Tb;
            Tp            = Tb - Ta;
            Tc            = Ta + Tb;
            TC            = SIMD_FMADD(KP414213562, TB, Tj);
            TJ            = SIMD_FNMADD(KP414213562, Tj, TB);
            Tt            = Tj + Tm;
            Tn            = Tj - Tm;
            TA            = SIMD_FNMADD(KP414213562, Th, Tz);
            TK            = SIMD_FMADD(KP414213562, Tz, Th);
            Ts            = Tg + Th;
            Ti            = Tg - Th;
            Td            = T3 - T6;
            T7            = T3 + T6;
            TM            = SIMD_FNMADD(KP707106781, Tx, Tv);
            Ty            = SIMD_FMADD(KP707106781, Tx, Tv);
            TG            = SIMD_FNMADD(KP707106781, TF, TE);
            TI            = SIMD_FMADD(KP707106781, TF, TE);
            TH            = TA + TC;
            TD            = TA - TC;
            TN            = TK + TJ;
            TL            = TJ - TK;
            Tu            = Ts + Tt;
            Ci[WS(cs, 4)] = Tt - Ts;
            Tq            = Tn - Ti;
            To            = Ti + Tn;
            Tr            = T7 + Tc;
            Cr[WS(cs, 4)] = T7 - Tc;
            Ci[WS(cs, 5)] = -(SIMD_FMADD(KP923879532, TH, TG));
            Ci[WS(cs, 3)] = SIMD_FNMADD(KP923879532, TH, TG);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, TD, Ty);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, TD, Ty);
            Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, TN, TM);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, TN, TM);
            Ci[WS(cs, 7)] = SIMD_FMADD(KP923879532, TL, TI);
            Ci[WS(cs, 1)] = SIMD_FMSUB(KP923879532, TL, TI);
            Ci[WS(cs, 6)] = SIMD_FMSUB(KP707106781, Tq, Tp);
            Ci[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tq, Tp);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, To, Td);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, To, Td);
            Cr[0]         = Tr + Tu;
            Cr[WS(cs, 8)] = Tr - Tu;
        }
    }
}

template <>
struct r2cf_traits<16, 14>
{
    static constexpr long_t flops           = 74;
    static constexpr long_t operations      = 54;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 55;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 14 -name r2cf
 * -standalone */

/*
 * This function contains 54 FP additions, 20 FP multiplications,
 * (or, 34 additions, 0 multiplications, 20 fused multiply/add),
 * 55 stack variables, 3 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 14>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tb, Tl, Tm, Tn, T1, T2, T4, T5, Te, Tf, Th, Ti, Ta, Ty, T8;
        SIMD_FLOAT T9;
        Tb = R0[WS(rs, 6)];
        T8 = R0[WS(rs, 2)];
        T9 = R0[WS(rs, 10)];
        Tl = R0[WS(rs, 7)];
        Tm = R0[WS(rs, 3)];
        Tn = R0[WS(rs, 11)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        T4 = R0[WS(rs, 4)];
        T5 = R0[WS(rs, 12)];
        Te = R0[WS(rs, 1)];
        Tf = R0[WS(rs, 9)];
        Th = R0[WS(rs, 5)];
        Ti = R0[WS(rs, 13)];
        Ta = T8 + T9;
        Ty = T8 - T9;
        {
            SIMD_FLOAT Tc, Tr, TM, TF, Tp, Tv, T7, Td, TN, TD, Tk, Tu, TA, TP,
                TL;
            SIMD_FLOAT TJ, To, TE, T3, Tx, T6, TH, Tg, TB, Tj, TC, TI, Tz, Tt,
                TG;
            SIMD_FLOAT TK, TO, TQ, Tw, Tq, Ts;
            To            = Tm + Tn;
            TE            = Tn - Tm;
            T3            = T1 + T2;
            Tx            = T1 - T2;
            T6            = T4 + T5;
            TH            = T4 - T5;
            Tg            = Te + Tf;
            TB            = Te - Tf;
            Tj            = Th + Ti;
            TC            = Th - Ti;
            TI            = Ty + Tb;
            Tz            = Ty - Tb;
            Tc            = Ta + Tb;
            Tr            = Tb - Ta;
            TM            = SIMD_FNMADD(KP414213562, Tl, TE);
            TF            = SIMD_FMADD(KP414213562, TE, Tl);
            Tp            = Tl - To;
            Tv            = Tl + To;
            T7            = T3 + T6;
            Td            = T3 - T6;
            TN            = SIMD_FMADD(KP414213562, TB, TC);
            TD            = SIMD_FNMADD(KP414213562, TC, TB);
            Tk            = Tg - Tj;
            Tu            = Tg + Tj;
            TA            = SIMD_FMADD(KP707106781, Tz, Tx);
            TP            = SIMD_FNMADD(KP707106781, Tz, Tx);
            TL            = SIMD_FMADD(KP707106781, TI, TH);
            TJ            = SIMD_FNMADD(KP707106781, TI, TH);
            Tt            = T7 + Tc;
            Cr[WS(cs, 4)] = T7 - Tc;
            TG            = TD - TF;
            TK            = TD + TF;
            TO            = TM - TN;
            TQ            = TN + TM;
            Tw            = Tu + Tv;
            Ci[WS(cs, 4)] = Tv - Tu;
            Tq            = Tk + Tp;
            Ts            = Tp - Tk;
            Ci[WS(cs, 5)] = -(SIMD_FMADD(KP923879532, TK, TJ));
            Ci[WS(cs, 3)] = SIMD_FNMADD(KP923879532, TK, TJ);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, TG, TA);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, TG, TA);
            Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, TQ, TP);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, TQ, TP);
            Ci[WS(cs, 7)] = SIMD_FMADD(KP923879532, TO, TL);
            Ci[WS(cs, 1)] = SIMD_FMSUB(KP923879532, TO, TL);
            Cr[0]         = Tt + Tw;
            Cr[WS(cs, 8)] = Tt - Tw;
            Ci[WS(cs, 6)] = SIMD_FMSUB(KP707106781, Ts, Tr);
            Ci[WS(cs, 2)] = SIMD_FMADD(KP707106781, Ts, Tr);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tq, Td);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tq, Td);
        }
    }
}

template <>
struct r2cf_traits<16, 15>
{
    static constexpr long_t flops           = 76;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 31;
    static constexpr long_t stack_vars      = 58;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 15 -name r2cf
 * -standalone */

/*
 * This function contains 56 FP additions, 20 FP multiplications,
 * (or, 36 additions, 0 multiplications, 20 fused multiply/add),
 * 58 stack variables, 3 constants, and 31 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 15>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tj, Tz, TK, Ta, TA, Td, TB, Ti, TE, TP, TI, Tr, Tx, Tk, T7;
        SIMD_FLOAT Tf, Tn, To, Tp, T1, T2, T4, T5, T8, T9, Tb, Tc, Tg, Th, T3;
        SIMD_FLOAT T6, Tq, TH, TC, TL, Tt, Te, TF, Tl, TS, TD, TM, TO, Tv, TG;
        SIMD_FLOAT TQ, Tw, Tm, TN, TJ, TT, TR, Ty, Tu, Ts;
        Tn            = R0[WS(rs, 7)];
        To            = R0[WS(rs, 3)];
        Tp            = R0[WS(rs, 11)];
        T1            = R0[0];
        T2            = R0[WS(rs, 8)];
        T4            = R0[WS(rs, 4)];
        T5            = R0[WS(rs, 12)];
        T8            = R0[WS(rs, 2)];
        T9            = R0[WS(rs, 10)];
        Tb            = R0[WS(rs, 14)];
        Tc            = R0[WS(rs, 6)];
        Tg            = R0[WS(rs, 1)];
        Th            = R0[WS(rs, 9)];
        Tj            = R0[WS(rs, 5)];
        Tq            = To + Tp;
        TH            = Tp - To;
        T3            = T1 + T2;
        Tz            = T1 - T2;
        T6            = T4 + T5;
        TK            = T4 - T5;
        Ta            = T8 + T9;
        TA            = T8 - T9;
        Td            = Tb + Tc;
        TB            = Tb - Tc;
        Ti            = Tg + Th;
        TE            = Tg - Th;
        TP            = SIMD_FNMADD(KP414213562, Tn, TH);
        TI            = SIMD_FMADD(KP414213562, TH, Tn);
        Tr            = Tn - Tq;
        Tx            = Tn + Tq;
        Tk            = R0[WS(rs, 13)];
        T7            = T3 + T6;
        Tf            = T3 - T6;
        TC            = TA + TB;
        TL            = TB - TA;
        Tt            = Td - Ta;
        Te            = Ta + Td;
        TF            = Tj - Tk;
        Tl            = Tj + Tk;
        TS            = SIMD_FNMADD(KP707106781, TC, Tz);
        TD            = SIMD_FMADD(KP707106781, TC, Tz);
        TM            = SIMD_FMADD(KP707106781, TL, TK);
        TO            = SIMD_FNMADD(KP707106781, TL, TK);
        Tv            = T7 + Te;
        Cr[WS(cs, 4)] = T7 - Te;
        TG            = SIMD_FNMADD(KP414213562, TF, TE);
        TQ            = SIMD_FMADD(KP414213562, TE, TF);
        Tw            = Ti + Tl;
        Tm            = Ti - Tl;
        TN            = TG + TI;
        TJ            = TG - TI;
        TT            = TQ + TP;
        TR            = TP - TQ;
        Ty            = Tw + Tx;
        Ci[WS(cs, 4)] = Tx - Tw;
        Tu            = Tr - Tm;
        Ts            = Tm + Tr;
        Ci[WS(cs, 5)] = -(SIMD_FMADD(KP923879532, TN, TM));
        Ci[WS(cs, 3)] = SIMD_FNMADD(KP923879532, TN, TM);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, TJ, TD);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, TJ, TD);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, TT, TS);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, TT, TS);
        Ci[WS(cs, 7)] = SIMD_FMADD(KP923879532, TR, TO);
        Ci[WS(cs, 1)] = SIMD_FMSUB(KP923879532, TR, TO);
        Cr[0]         = Tv + Ty;
        Cr[WS(cs, 8)] = Tv - Ty;
        Ci[WS(cs, 6)] = SIMD_FMSUB(KP707106781, Tu, Tt);
        Ci[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tu, Tt);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Ts, Tf);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Ts, Tf);
    }
}

template <>
struct r2cf_traits<16, 16>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 58;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 61;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 16 -name r2cf
 * -standalone */

/*
 * This function contains 58 FP additions, 20 FP multiplications,
 * (or, 38 additions, 0 multiplications, 20 fused multiply/add),
 * 61 stack variables, 3 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 16>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tn, TB, TN, TC, Ta, TD, Td, TG, Ti, TH, Tl, To, Tq, Tr, Tf;
        SIMD_FLOAT T7, T1, T2, T4, T5, T8, T9, Tb, Tc, Tg, Th, Tj, Tk, T3, T6;
        SIMD_FLOAT Tv, TT, TI, Tm, Ty, Tp, TJ, Ts, TK, TF, TV, TR, TP, Tx, TO;
        SIMD_FLOAT TE, Te, TS, TL, Tt, Tz, TM, TQ, TU, TW, TA, Tu, Tw;
        T1            = R0[0];
        T2            = R0[WS(rs, 8)];
        T4            = R0[WS(rs, 4)];
        T5            = R0[WS(rs, 12)];
        T8            = R0[WS(rs, 2)];
        T9            = R0[WS(rs, 10)];
        Tb            = R0[WS(rs, 14)];
        Tc            = R0[WS(rs, 6)];
        Tg            = R0[WS(rs, 1)];
        Th            = R0[WS(rs, 9)];
        Tj            = R0[WS(rs, 5)];
        Tk            = R0[WS(rs, 13)];
        Tn            = R0[WS(rs, 15)];
        TB            = T1 - T2;
        T3            = T1 + T2;
        TN            = T4 - T5;
        T6            = T4 + T5;
        TC            = T8 - T9;
        Ta            = T8 + T9;
        TD            = Tb - Tc;
        Td            = Tb + Tc;
        TG            = Tg - Th;
        Ti            = Tg + Th;
        TH            = Tj - Tk;
        Tl            = Tj + Tk;
        To            = R0[WS(rs, 7)];
        Tq            = R0[WS(rs, 3)];
        Tr            = R0[WS(rs, 11)];
        Tf            = T3 - T6;
        T7            = T3 + T6;
        TO            = TD - TC;
        TE            = TC + TD;
        Te            = Ta + Td;
        Tv            = Td - Ta;
        TT            = SIMD_FMADD(KP414213562, TG, TH);
        TI            = SIMD_FNMADD(KP414213562, TH, TG);
        Tm            = Ti - Tl;
        Ty            = Ti + Tl;
        Tp            = Tn + To;
        TJ            = Tn - To;
        Ts            = Tq + Tr;
        TK            = Tr - Tq;
        TF            = SIMD_FMADD(KP707106781, TE, TB);
        TV            = SIMD_FNMADD(KP707106781, TE, TB);
        TR            = SIMD_FNMADD(KP707106781, TO, TN);
        TP            = SIMD_FMADD(KP707106781, TO, TN);
        Tx            = T7 + Te;
        Cr[WS(cs, 4)] = T7 - Te;
        TS            = SIMD_FMADD(KP414213562, TJ, TK);
        TL            = SIMD_FNMADD(KP414213562, TK, TJ);
        Tt            = Tp - Ts;
        Tz            = Tp + Ts;
        TM            = TI + TL;
        TQ            = TL - TI;
        TU            = TS - TT;
        TW            = TT + TS;
        TA            = Ty + Tz;
        Ci[WS(cs, 4)] = Tz - Ty;
        Tu            = Tm + Tt;
        Tw            = Tt - Tm;
        Ci[WS(cs, 5)] = SIMD_FMSUB(KP923879532, TQ, TP);
        Ci[WS(cs, 3)] = SIMD_FMADD(KP923879532, TQ, TP);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP923879532, TM, TF);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP923879532, TM, TF);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP923879532, TW, TV);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP923879532, TW, TV);
        Ci[WS(cs, 7)] = SIMD_FMADD(KP923879532, TU, TR);
        Ci[WS(cs, 1)] = SIMD_FMSUB(KP923879532, TU, TR);
        Cr[0]         = Tx + TA;
        Cr[WS(cs, 8)] = Tx - TA;
        Ci[WS(cs, 6)] = SIMD_FMSUB(KP707106781, Tw, Tv);
        Ci[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tw, Tv);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP707106781, Tu, Tf);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP707106781, Tu, Tf);
    }
}

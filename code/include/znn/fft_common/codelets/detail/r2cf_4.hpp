//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<4, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 4;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 4 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1            = R0[0];
        Cr[WS(cs, 1)] = T1;
        Cr[WS(cs, 2)] = T1;
        Cr[0]         = T1;
    }
}

template <>
struct r2cf_traits<4, 2>
{
    static constexpr long_t flops           = 2;
    static constexpr long_t operations      = 2;
    static constexpr long_t memory_accesses = 6;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 2 FP additions, 0 FP multiplications,
 * (or, 2 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 6 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1, T2;
        T1            = R0[0];
        T2            = R0[WS(rs, 1)];
        Cr[WS(cs, 1)] = T1;
        Cr[0]         = T1 + T2;
        Cr[WS(cs, 2)] = T1 - T2;
        Ci[WS(cs, 1)] = -T2;
    }
}

template <>
struct r2cf_traits<4, 3>
{
    static constexpr long_t flops           = 4;
    static constexpr long_t operations      = 4;
    static constexpr long_t memory_accesses = 7;
    static constexpr long_t stack_vars      = 4;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 4 FP additions, 0 FP multiplications,
 * (or, 4 additions, 0 multiplications, 0 fused multiply/add),
 * 4 stack variables, 0 constants, and 7 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T3, T1, T2, T4;
        T3            = R0[WS(rs, 1)];
        T1            = R0[0];
        T2            = R0[WS(rs, 2)];
        Ci[WS(cs, 1)] = -T3;
        Cr[WS(cs, 1)] = T1 - T2;
        T4            = T1 + T2;
        Cr[0]         = T4 + T3;
        Cr[WS(cs, 2)] = T4 - T3;
    }
}

template <>
struct r2cf_traits<4, 4>
{
    static constexpr long_t flops           = 6;
    static constexpr long_t operations      = 6;
    static constexpr long_t memory_accesses = 8;
    static constexpr long_t stack_vars      = 6;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 4 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 6 FP additions, 0 FP multiplications,
 * (or, 6 additions, 0 multiplications, 0 fused multiply/add),
 * 6 stack variables, 0 constants, and 8 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 4 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1, T2, T4, T5, T3, T6;
        T1            = R0[0];
        T2            = R0[WS(rs, 2)];
        T4            = R0[WS(rs, 1)];
        T5            = R0[WS(rs, 3)];
        Cr[WS(cs, 1)] = T1 - T2;
        T3            = T1 + T2;
        Ci[WS(cs, 1)] = T5 - T4;
        T6            = T4 + T5;
        Cr[0]         = T3 + T6;
        Cr[WS(cs, 2)] = T3 - T6;
    }
}

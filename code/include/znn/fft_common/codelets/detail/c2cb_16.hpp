//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cb_traits<16, 0>
{
    static constexpr long_t flops           = 184;
    static constexpr long_t operations      = 144;
    static constexpr long_t memory_accesses = 64;
    static constexpr long_t stack_vars      = 108;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 0 -name c2cb
 * -standalone */

/*
 * This function contains 144 FP additions, 40 FP multiplications,
 * (or, 104 additions, 0 multiplications, 40 fused multiply/add),
 * 108 stack variables, 3 constants, and 64 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 0>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1H, T1I, T1z, T1L, T1M, T1C, T1F, T1N, T1J, T1P, T1G, T1K,
            T1O, T1Q;
        {
            SIMD_FLOAT T1l, T1R, T7, T1x, TN, TC, T25, T1E, T1b, T1Z, Tt, T2h,
                T22, T1D, T1g;
            SIMD_FLOAT T1n, TQ, Te, T26, T1m, TT, T1S, TJ, Ti, T11, TZ, T1V, Tl,
                TW, T1W;
            SIMD_FLOAT T14, T2f, Tf, T2j, TK;
            {
                SIMD_FLOAT Tq, TL, T3, T1k, Ty, T1j, T6, TM, TB, T1c, Tp, T20,
                    T1a, Tr, T1d;
                SIMD_FLOAT T1e, T1, T2, Tw, Tx, T4, T5, Tz, TA, Tn, To, T18,
                    T19, T8, T17;
                SIMD_FLOAT Ts, T21, T1f, T9, TD, TE, Tb, Tc, TG, TH, Tg, TP, Ta,
                    TO, TF;
                SIMD_FLOAT TR, Td, TS, TI, Th, TX, TY, Tj, Tk, T12, T13;
                T1  = ri[0];
                T2  = ri[WS(is, 8)];
                Tw  = ii[0];
                Tx  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                Tz  = ii[WS(is, 4)];
                TA  = ii[WS(is, 12)];
                Tn  = ri[WS(is, 15)];
                To  = ri[WS(is, 7)];
                T18 = ii[WS(is, 15)];
                T19 = ii[WS(is, 7)];
                Tq  = ri[WS(is, 3)];
                TL  = T1 - T2;
                T3  = T1 + T2;
                T1k = Tw - Tx;
                Ty  = Tw + Tx;
                T1j = T4 - T5;
                T6  = T4 + T5;
                TM  = Tz - TA;
                TB  = Tz + TA;
                T1c = Tn - To;
                Tp  = Tn + To;
                T20 = T18 + T19;
                T1a = T18 - T19;
                Tr  = ri[WS(is, 11)];
                T1d = ii[WS(is, 3)];
                T1e = ii[WS(is, 11)];
                T8  = ri[WS(is, 2)];
                T1l = T1j + T1k;
                T1H = T1k - T1j;
                T1R = T3 - T6;
                T7  = T3 + T6;
                T1x = TL + TM;
                TN  = TL - TM;
                TC  = Ty + TB;
                T25 = Ty - TB;
                T17 = Tq - Tr;
                Ts  = Tq + Tr;
                T21 = T1d + T1e;
                T1f = T1d - T1e;
                T9  = ri[WS(is, 10)];
                TD  = ii[WS(is, 2)];
                TE  = ii[WS(is, 10)];
                Tb  = ri[WS(is, 14)];
                Tc  = ri[WS(is, 6)];
                TG  = ii[WS(is, 14)];
                TH  = ii[WS(is, 6)];
                Tg  = ri[WS(is, 1)];
                T1E = T1a - T17;
                T1b = T17 + T1a;
                T1Z = Tp - Ts;
                Tt  = Tp + Ts;
                T2h = T20 + T21;
                T22 = T20 - T21;
                T1D = T1c + T1f;
                T1g = T1c - T1f;
                TP  = T8 - T9;
                Ta  = T8 + T9;
                TO  = TD - TE;
                TF  = TD + TE;
                TR  = Tb - Tc;
                Td  = Tb + Tc;
                TS  = TG - TH;
                TI  = TG + TH;
                Th  = ri[WS(is, 9)];
                TX  = ii[WS(is, 1)];
                TY  = ii[WS(is, 9)];
                Tj  = ri[WS(is, 5)];
                Tk  = ri[WS(is, 13)];
                T12 = ii[WS(is, 5)];
                T1n = TP + TO;
                TQ  = TO - TP;
                T13 = ii[WS(is, 13)];
                Te  = Ta + Td;
                T26 = Td - Ta;
                T1m = TR - TS;
                TT  = TR + TS;
                T1S = TF - TI;
                TJ  = TF + TI;
                Ti  = Tg + Th;
                T11 = Tg - Th;
                TZ  = TX - TY;
                T1V = TX + TY;
                Tl  = Tj + Tk;
                TW  = Tj - Tk;
                T1W = T12 + T13;
                T14 = T12 - T13;
            }
            T2f = T7 - Te;
            Tf  = T7 + Te;
            T2j = TC + TJ;
            TK  = TC - TJ;
            {
                SIMD_FLOAT T29, T1T, T27, T2d, T2b, T23, T10, T1B, Tm, T1U, T15,
                    T1A, T1X, T2g, TU;
                SIMD_FLOAT T1o, T1y, T1s, T1h, Tv, Tu, T1t, T16, T2i, T2k, T2a,
                    T1Y, T1v, TV, T1r;
                SIMD_FLOAT T1p, T1w, T1u, T1q, T1i, T2e, T2c, T28, T24;
                T29            = T1R - T1S;
                T1T            = T1R + T1S;
                T27            = T25 - T26;
                T2d            = T26 + T25;
                T2b            = T1Z + T22;
                T23            = T1Z - T22;
                T10            = TW + TZ;
                T1B            = TZ - TW;
                Tm             = Ti + Tl;
                T1U            = Ti - Tl;
                T15            = T11 - T14;
                T1A            = T11 + T14;
                T1X            = T1V - T1W;
                T2g            = T1V + T1W;
                T1I            = TQ + TT;
                TU             = TQ - TT;
                T1o            = T1m - T1n;
                T1y            = T1n + T1m;
                T1s            = SIMD_FMADD(KP414213562, T1b, T1g);
                T1h            = SIMD_FNMADD(KP414213562, T1g, T1b);
                Tv             = Tt - Tm;
                Tu             = Tm + Tt;
                T1t            = SIMD_FNMADD(KP414213562, T10, T15);
                T16            = SIMD_FMADD(KP414213562, T15, T10);
                T2i            = T2g - T2h;
                T2k            = T2g + T2h;
                T2a            = T1X - T1U;
                T1Y            = T1U + T1X;
                T1v            = SIMD_FNMADD(KP707106781, TU, TN);
                TV             = SIMD_FMADD(KP707106781, TU, TN);
                T1r            = SIMD_FMADD(KP707106781, T1o, T1l);
                T1p            = SIMD_FNMADD(KP707106781, T1o, T1l);
                io[WS(os, 12)] = TK - Tv;
                io[WS(os, 4)]  = Tv + TK;
                ro[0]          = Tf + Tu;
                ro[WS(os, 8)]  = Tf - Tu;
                T1w            = T1t + T1s;
                T1u            = T1s - T1t;
                T1q            = T16 + T1h;
                T1i            = T16 - T1h;
                ro[WS(os, 4)]  = T2f + T2i;
                ro[WS(os, 12)] = T2f - T2i;
                io[0]          = T2j + T2k;
                io[WS(os, 8)]  = T2j - T2k;
                T2e            = T2a + T2b;
                T2c            = T2a - T2b;
                T28            = T23 - T1Y;
                T24            = T1Y + T23;
                ro[WS(os, 15)] = SIMD_FMADD(KP923879532, T1w, T1v);
                ro[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1w, T1v);
                io[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1u, T1r);
                io[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1u, T1r);
                io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1q, T1p);
                io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1q, T1p);
                ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1i, TV);
                ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1i, TV);
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T2e, T2d);
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T2e, T2d);
                ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T2c, T29);
                ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T2c, T29);
                io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T28, T27);
                io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T28, T27);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T24, T1T);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T24, T1T);
                T1z            = SIMD_FMADD(KP707106781, T1y, T1x);
                T1L            = SIMD_FNMADD(KP707106781, T1y, T1x);
                T1M            = SIMD_FNMADD(KP414213562, T1A, T1B);
                T1C            = SIMD_FMADD(KP414213562, T1B, T1A);
                T1F            = SIMD_FNMADD(KP414213562, T1E, T1D);
                T1N            = SIMD_FMADD(KP414213562, T1D, T1E);
            }
        }
        T1J            = SIMD_FNMADD(KP707106781, T1I, T1H);
        T1P            = SIMD_FMADD(KP707106781, T1I, T1H);
        T1G            = T1C + T1F;
        T1K            = T1F - T1C;
        T1O            = T1M - T1N;
        T1Q            = T1M + T1N;
        io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1K, T1J);
        io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1K, T1J);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1G, T1z);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1G, T1z);
        io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1Q, T1P);
        io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1Q, T1P);
        ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1O, T1L);
        ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1O, T1L);
    }
}

template <>
struct c2cb_traits<16, 1>
{
    static constexpr long_t flops           = 184;
    static constexpr long_t operations      = 144;
    static constexpr long_t memory_accesses = 62;
    static constexpr long_t stack_vars      = 111;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 1 -name c2cb
 * -standalone */

/*
 * This function contains 144 FP additions, 40 FP multiplications,
 * (or, 104 additions, 0 multiplications, 40 fused multiply/add),
 * 111 stack variables, 3 constants, and 62 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 1>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT TX, T1X, TS, T10, T1Y, T1T, Tn, TT, T1U, TW, T1a, T14, T17,
            T1b, T11;
        SIMD_FLOAT T19, T1Z, T21, T18, T22, T1c, T20;
        {
            SIMD_FLOAT T1p, T1q, T1t, T1o, T1M, T13, Tu, T1r, TB, T12, T1u, T8,
                T3, T24, T1v;
            SIMD_FLOAT T16, TJ, T1y, T1F, T15, TQ, T1N, T1i, T1j, T6, T25, T1Q,
                T9, Tb, Tc;
            SIMD_FLOAT Tf, Tg, Ti, Tj, T1G, T1H, T1k, T7, T2c, T26, T1R, T1e,
                Ta, T1I, Td;
            SIMD_FLOAT T1d, Th, T1J, Tk, T2b;
            {
                SIMD_FLOAT TG, Tq, T1m, Tx, T1n, Tt, TA, T1w, TF, TM, TH, TN,
                    TO, To, Tp;
                SIMD_FLOAT Tv, Tw, Tr, Ts, Ty, Tz, TD, TE, TK, TL, T1, T2, TI,
                    T1x, TP;
                SIMD_FLOAT T1g, T1h, T4, T5, T1O, T1P;
                To  = ri[WS(is, 1)];
                Tp  = ri[WS(is, 9)];
                Tv  = ii[WS(is, 1)];
                Tw  = ii[WS(is, 9)];
                Tr  = ii[WS(is, 5)];
                Ts  = ii[WS(is, 13)];
                Ty  = ri[WS(is, 5)];
                Tz  = ri[WS(is, 13)];
                TD  = ri[WS(is, 15)];
                TE  = ri[WS(is, 7)];
                TK  = ii[WS(is, 15)];
                TL  = ii[WS(is, 7)];
                TG  = ii[WS(is, 3)];
                T1p = To + Tp;
                Tq  = To - Tp;
                T1m = Tv + Tw;
                Tx  = Tv - Tw;
                T1n = Tr + Ts;
                Tt  = Tr - Ts;
                T1q = Ty + Tz;
                TA  = Ty - Tz;
                T1w = TD + TE;
                TF  = TD - TE;
                T1t = TK + TL;
                TM  = TK - TL;
                TH  = ii[WS(is, 11)];
                TN  = ri[WS(is, 3)];
                TO  = ri[WS(is, 11)];
                T1  = ri[0];
                T1o = T1m - T1n;
                T1M = T1n + T1m;
                T13 = Tq - Tt;
                Tu  = Tq + Tt;
                T1r = T1p - T1q;
                TB  = Tx - TA;
                T12 = Tx + TA;
                T2  = ri[WS(is, 8)];
                T1u = TG + TH;
                TI  = TG - TH;
                T1x = TN + TO;
                TP  = TN - TO;
                T1g = ii[0];
                T1h = ii[WS(is, 8)];
                T4  = ii[WS(is, 4)];
                T5  = ii[WS(is, 12)];
                T1O = ri[WS(is, 4)];
                T1P = ri[WS(is, 12)];
                T8  = ri[WS(is, 2)];
                T3  = T1 - T2;
                T24 = T1 + T2;
                T1v = T1t - T1u;
                T16 = TF - TI;
                TJ  = TF + TI;
                T1y = T1w - T1x;
                T1F = T1w + T1x;
                T15 = TM + TP;
                TQ  = TM - TP;
                T1N = T1g - T1h;
                T1i = T1g + T1h;
                T1j = T4 + T5;
                T6  = T4 - T5;
                T25 = T1O + T1P;
                T1Q = T1O - T1P;
                T9  = ri[WS(is, 10)];
                Tb  = ii[WS(is, 2)];
                Tc  = ii[WS(is, 10)];
                Tf  = ri[WS(is, 14)];
                Tg  = ri[WS(is, 6)];
                Ti  = ii[WS(is, 14)];
                Tj  = ii[WS(is, 6)];
            }
            T1G = T1F - (T1p + T1q);
            T1H = T1j + T1i;
            T1k = T1i - T1j;
            TX  = T3 - T6;
            T7  = T3 + T6;
            T2c = T24 + T25;
            T26 = T24 - T25;
            T1X = T1N + T1Q;
            T1R = T1N - T1Q;
            T1e = T8 + T9;
            Ta  = T8 - T9;
            T1I = Tb + Tc;
            Td  = Tb - Tc;
            T1d = Tf + Tg;
            Th  = Tf - Tg;
            T1J = Ti + Tj;
            Tk  = Ti - Tj;
            T2b = T1M - (T1u + T1t);
            {
                SIMD_FLOAT T1D, T1s, T1z, T1C, T1W, T1V, TU, TV, Te, TY, T2d,
                    T1f, T23, T1K, Tl;
                SIMD_FLOAT TZ, T1A, T2a, T1E, T28, TC, TR, T1l, T1B, T2e, T1L,
                    T29, T27, T1S, Tm;
                T1D            = T1o + T1r;
                T1s            = T1o - T1r;
                T1z            = T1v + T1y;
                T1C            = T1y - T1v;
                TU             = SIMD_FNMADD(KP414213562, Tu, TB);
                TC             = SIMD_FMADD(KP414213562, TB, Tu);
                TR             = SIMD_FNMADD(KP414213562, TQ, TJ);
                TV             = SIMD_FMADD(KP414213562, TJ, TQ);
                Te             = Ta + Td;
                TY             = Td - Ta;
                T2d            = T1e + T1d;
                T1f            = T1d - T1e;
                T23            = T1I - T1J;
                T1K            = T1I + T1J;
                Tl             = Th - Tk;
                TZ             = Th + Tk;
                T1A            = T1s + T1z;
                T2a            = T1s - T1z;
                T1E            = T1C - T1D;
                T28            = T1D + T1C;
                T1W            = TR - TC;
                TS             = TC + TR;
                T1l            = T1f + T1k;
                T1B            = T1k - T1f;
                T2e            = T2c - T2d;
                ro[WS(os, 7)]  = T2d + T2c - T1F - (T1p + T1q);
                T1L            = T1H - T1K;
                io[WS(os, 7)]  = T1K + T1H - (T1u + T1t) - T1M;
                T29            = T26 - T23;
                T27            = T23 + T26;
                T10            = TY - TZ;
                T1S            = TY + TZ;
                Tm             = Te + Tl;
                T1Y            = Tl - Te;
                io[WS(os, 13)] = SIMD_FNMADD(KP707106781, T1E, T1B);
                io[WS(os, 5)]  = SIMD_FMADD(KP707106781, T1E, T1B);
                io[WS(os, 9)]  = SIMD_FNMADD(KP707106781, T1A, T1l);
                io[WS(os, 1)]  = SIMD_FMADD(KP707106781, T1A, T1l);
                ro[WS(os, 11)] = T2e - T2b;
                ro[WS(os, 3)]  = T2b + T2e;
                io[WS(os, 11)] = T1L - T1G;
                io[WS(os, 3)]  = T1G + T1L;
                ro[WS(os, 1)]  = SIMD_FMADD(KP707106781, T28, T27);
                ro[WS(os, 9)]  = SIMD_FNMADD(KP707106781, T28, T27);
                ro[WS(os, 5)]  = SIMD_FMADD(KP707106781, T2a, T29);
                ro[WS(os, 13)] = SIMD_FNMADD(KP707106781, T2a, T29);
                T1T            = SIMD_FMADD(KP707106781, T1S, T1R);
                T1V            = SIMD_FNMADD(KP707106781, T1S, T1R);
                Tn             = SIMD_FMADD(KP707106781, Tm, T7);
                TT             = SIMD_FNMADD(KP707106781, Tm, T7);
                T1U            = TU + TV;
                TW             = TU - TV;
                T1a            = SIMD_FNMADD(KP414213562, T12, T13);
                T14            = SIMD_FMADD(KP414213562, T13, T12);
                T17            = SIMD_FNMADD(KP414213562, T16, T15);
                T1b            = SIMD_FMADD(KP414213562, T15, T16);
                io[WS(os, 4)]  = SIMD_FMADD(KP923879532, T1W, T1V);
                io[WS(os, 12)] = SIMD_FNMADD(KP923879532, T1W, T1V);
            }
        }
        ro[0]          = SIMD_FMADD(KP923879532, TS, Tn);
        ro[WS(os, 8)]  = SIMD_FNMADD(KP923879532, TS, Tn);
        ro[WS(os, 4)]  = SIMD_FMADD(KP923879532, TW, TT);
        ro[WS(os, 12)] = SIMD_FNMADD(KP923879532, TW, TT);
        io[0]          = SIMD_FMADD(KP923879532, T1U, T1T);
        io[WS(os, 8)]  = SIMD_FNMADD(KP923879532, T1U, T1T);
        T11            = SIMD_FMADD(KP707106781, T10, TX);
        T19            = SIMD_FNMADD(KP707106781, T10, TX);
        T1Z            = SIMD_FMADD(KP707106781, T1Y, T1X);
        T21            = SIMD_FNMADD(KP707106781, T1Y, T1X);
        T18            = T14 - T17;
        T22            = T14 + T17;
        T1c            = T1a + T1b;
        T20            = T1b - T1a;
        io[WS(os, 14)] = SIMD_FMADD(KP923879532, T22, T21);
        io[WS(os, 6)]  = SIMD_FNMADD(KP923879532, T22, T21);
        ro[WS(os, 2)]  = SIMD_FMADD(KP923879532, T18, T11);
        ro[WS(os, 10)] = SIMD_FNMADD(KP923879532, T18, T11);
        io[WS(os, 2)]  = SIMD_FMADD(KP923879532, T20, T1Z);
        io[WS(os, 10)] = SIMD_FNMADD(KP923879532, T20, T1Z);
        ro[WS(os, 14)] = SIMD_FMADD(KP923879532, T1c, T19);
        ro[WS(os, 6)]  = SIMD_FNMADD(KP923879532, T1c, T19);
    }
}

template <>
struct c2cb_traits<16, 2>
{
    static constexpr long_t flops           = 180;
    static constexpr long_t operations      = 142;
    static constexpr long_t memory_accesses = 60;
    static constexpr long_t stack_vars      = 105;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 2 -name c2cb
 * -standalone */

/*
 * This function contains 142 FP additions, 38 FP multiplications,
 * (or, 104 additions, 0 multiplications, 38 fused multiply/add),
 * 105 stack variables, 4 constants, and 60 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 2>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1w, T1x, T1v, T1T, T1y, T1U;
        {
            SIMD_FLOAT T1B, T1P, T2c, T7, T1X, T13, TX, T23, T1R, T18, Te, TY,
                T26, T2d, T1Q;
            SIMD_FLOAT T1d, Ti, Tl, T1n, Tx, T1l, T1F, Tm, T1E, T1i, T10, Tt,
                T1r, TE, T1q;
            SIMD_FLOAT TA, TH, T1o, TZ, T2e, T1M, T1G, T1C, T1e, T1S, T1Y;
            {
                SIMD_FLOAT Tb, T11, T3, T1z, TT, T1A, T6, T12, TW, T14, Ta, T25,
                    T17, Tc, T1a;
                SIMD_FLOAT T1b, T1, T2, TR, TS, T4, T5, TU, TV, T8, T9, T15,
                    T16, Tg, T19;
                SIMD_FLOAT Td, T24, T1c, Th, Tn, To, Tj, Tk, Tq, Tr, T1g, Tp,
                    T1k, T1j, Ts;
                SIMD_FLOAT T1h, TC, TD, Tv, Tw, Ty, Tz, TF, TG;
                T1  = ri[0];
                T2  = ri[WS(is, 8)];
                TR  = ii[0];
                TS  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                TU  = ii[WS(is, 4)];
                TV  = ii[WS(is, 12)];
                T8  = ii[WS(is, 2)];
                T9  = ii[WS(is, 10)];
                T15 = ri[WS(is, 2)];
                T16 = ri[WS(is, 10)];
                Tb  = ii[WS(is, 14)];
                T11 = T1 - T2;
                T3  = T1 + T2;
                T1z = TR - TS;
                TT  = TR + TS;
                T1A = T4 - T5;
                T6  = T4 + T5;
                T12 = TU - TV;
                TW  = TU + TV;
                T14 = T8 - T9;
                Ta  = T8 + T9;
                T25 = T15 + T16;
                T17 = T15 - T16;
                Tc  = ii[WS(is, 6)];
                T1a = ri[WS(is, 14)];
                T1b = ri[WS(is, 6)];
                Tg  = ri[WS(is, 1)];
                T1B = T1z - T1A;
                T1P = T1A + T1z;
                T2c = T3 + T6;
                T7  = T3 - T6;
                T1X = T11 + T12;
                T13 = T11 - T12;
                TX  = TT + TW;
                T23 = TT - TW;
                T1R = T14 + T17;
                T18 = T14 - T17;
                T19 = Tb - Tc;
                Td  = Tb + Tc;
                T24 = T1a + T1b;
                T1c = T1a - T1b;
                Th  = ri[WS(is, 9)];
                Tn  = ii[WS(is, 1)];
                To  = ii[WS(is, 9)];
                Tj  = ri[WS(is, 5)];
                Tk  = ri[WS(is, 13)];
                Tq  = ii[WS(is, 5)];
                Tr  = ii[WS(is, 13)];
                Tv  = ri[WS(is, 15)];
                Tw  = ri[WS(is, 7)];
                Te  = Ta - Td;
                TY  = Ta + Td;
                T26 = T24 - T25;
                T2d = T25 + T24;
                T1Q = T1c - T19;
                T1d = T19 + T1c;
                Ti  = Tg + Th;
                T1g = Tg - Th;
                Tp  = Tn + To;
                T1k = Tn - To;
                Tl  = Tj + Tk;
                T1j = Tj - Tk;
                Ts  = Tq + Tr;
                T1h = Tr - Tq;
                T1n = Tv - Tw;
                Tx  = Tv + Tw;
                TC  = ii[WS(is, 15)];
                TD  = ii[WS(is, 7)];
                Ty  = ri[WS(is, 3)];
                Tz  = ri[WS(is, 11)];
                TF  = ii[WS(is, 3)];
                TG  = ii[WS(is, 11)];
                T1l = T1j + T1k;
                T1F = T1k - T1j;
                Tm  = Ti - Tl;
                T1E = T1h - T1g;
                T1i = T1g + T1h;
                T10 = Tp + Ts;
                Tt  = Tp - Ts;
                T1r = TC - TD;
                TE  = TC + TD;
                T1q = Ty - Tz;
                TA  = Ty + Tz;
                TH  = TF + TG;
                T1o = TF - TG;
            }
            TZ  = TX - TY;
            T2e = T2c - T2d;
            T1M = SIMD_FMADD(KP414213562, T1E, T1F);
            T1G = SIMD_FNMADD(KP414213562, T1F, T1E);
            T1C = T18 + T1d;
            T1e = T18 - T1d;
            T1S = T1Q - T1R;
            T1Y = T1R + T1Q;
            {
                SIMD_FLOAT Tf, TL, T29, T27, T1I, T1s, TP, TB, T2b, TI, T1p,
                    T1H, T1D, T1Z, TM;
                SIMD_FLOAT Tu, TQ, TJ, TN, T1J, T1L, T1f, T1V, T1W, T1u, T1O,
                    T22, T1m, T1t, T28;
                SIMD_FLOAT TK, T20, T1N, T21, T1K, T2a, TO;
                Tf             = T7 + Te;
                TL             = T7 - Te;
                T29            = T23 + T26;
                T27            = T23 - T26;
                T1I            = T1q - T1r;
                T1s            = T1q + T1r;
                TP             = Tx + TA;
                TB             = Tx - TA;
                T2b            = T10 - (TE + TH);
                io[WS(os, 6)]  = TY + TX - (TE + TH) - T10;
                TI             = TE - TH;
                T1p            = T1n - T1o;
                T1H            = T1n + T1o;
                T1D            = SIMD_FNMADD(KP707106781, T1C, T1B);
                T1Z            = SIMD_FNMADD(KP707106781, T1Y, T1X);
                TM             = Tt - Tm;
                Tu             = Tm + Tt;
                TQ             = TP - (Ti + Tl);
                ro[WS(os, 6)]  = T2c + T2d - TP - (Ti + Tl);
                ro[WS(os, 10)] = T2e - T2b;
                ro[WS(os, 2)]  = T2b + T2e;
                TJ             = TB - TI;
                TN             = TB + TI;
                T1J            = SIMD_FMADD(KP414213562, T1I, T1H);
                T1L            = SIMD_FNMADD(KP414213562, T1H, T1I);
                T1w            = SIMD_FMADD(KP414213562, T1i, T1l);
                T1m            = SIMD_FNMADD(KP414213562, T1l, T1i);
                io[WS(os, 10)] = TZ - TQ;
                io[WS(os, 2)]  = TQ + TZ;
                T1t            = SIMD_FMADD(KP414213562, T1s, T1p);
                T1x            = SIMD_FNMADD(KP414213562, T1p, T1s);
                T28            = TJ - Tu;
                TK             = Tu + TJ;
                T20            = T1M + T1L;
                T1N            = T1L - T1M;
                T21            = T1G - T1J;
                T1K            = T1G + T1J;
                T2a            = TM + TN;
                TO             = TM - TN;
                T1v            = SIMD_FMADD(KP707106781, T1e, T13);
                T1f            = SIMD_FNMADD(KP707106781, T1e, T13);
                T1V            = SIMD_FMADD(KP707106781, T1S, T1P);
                T1T            = SIMD_FNMADD(KP707106781, T1S, T1P);
                T1W            = T1t - T1m;
                T1u            = T1m + T1t;
                io[WS(os, 4)]  = SIMD_FMADD(KP707106781, T28, T27);
                io[WS(os, 12)] = SIMD_FNMADD(KP707106781, T28, T27);
                ro[0]          = SIMD_FMADD(KP707106781, TK, Tf);
                ro[WS(os, 8)]  = SIMD_FNMADD(KP707106781, TK, Tf);
                ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T20, T1Z);
                ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T20, T1Z);
                T1O            = SIMD_FMADD(KP765366864, T1C, T1N);
                T22            = SIMD_FMADD(KP765366864, T1Y, T21);
                io[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1K, T1D);
                io[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1K, T1D);
                io[0]          = SIMD_FMADD(KP707106781, T2a, T29);
                io[WS(os, 8)]  = SIMD_FNMADD(KP707106781, T2a, T29);
                ro[WS(os, 4)]  = SIMD_FMADD(KP707106781, TO, TL);
                ro[WS(os, 12)] = SIMD_FNMADD(KP707106781, TO, TL);
                ro[WS(os, 5)]  = SIMD_FNMADD(KP923879532, T1u, T1f);
                ro[WS(os, 13)] = SIMD_FMADD(KP923879532, T1u, T1f);
                io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1W, T1V);
                io[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1O, T1B);
                ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T22, T1X);
                io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1W, T1V);
            }
        }
        T1y            = T1w - T1x;
        T1U            = T1w + T1x;
        io[WS(os, 13)] = SIMD_FMADD(KP923879532, T1U, T1T);
        io[WS(os, 5)]  = SIMD_FNMADD(KP923879532, T1U, T1T);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1y, T1v);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1y, T1v);
    }
}

template <>
struct c2cb_traits<16, 3>
{
    static constexpr long_t flops           = 178;
    static constexpr long_t operations      = 140;
    static constexpr long_t memory_accesses = 58;
    static constexpr long_t stack_vars      = 100;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 3 -name c2cb
 * -standalone */

/*
 * This function contains 140 FP additions, 38 FP multiplications,
 * (or, 102 additions, 0 multiplications, 38 fused multiply/add),
 * 100 stack variables, 4 constants, and 58 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 3>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT TX, T1P, T10, T1Q, T1B, T25, T11, T1R, TU, TV, Tn, TT, T1X,
            T1Z, T26;
        SIMD_FLOAT T1I, T1b, T1S, T18, T1T, T20, TS, T1c, T1U, TW, T1Y;
        {
            SIMD_FLOAT T1A, T1n, T7, T28, T24, T1V, TY, Te, TD, T1z, T29, T1q,
                T21, TZ, Tl;
            SIMD_FLOAT T1v, Tq, T1g, Tx, T1h, Tt, T1u, TA, TE, TK, TL, TG, TH,
                TN, TO;
            {
                SIMD_FLOAT Tf, T22, T3, T1L, T1m, T1j, T6, T23, T1O, T1o, Ta,
                    T1x, Td, Tg, Ti;
                SIMD_FLOAT Tj, T1, T2, T1k, T1l, T4, T5, T1M, T1N, T8, T9, Tb,
                    Tc, To, T1y;
                SIMD_FLOAT Th, T1p, Tk, Tp, Tv, Tw, Tr, Ts, Ty, Tz;
                T1  = ri[0];
                T2  = ri[WS(is, 8)];
                T1k = ii[0];
                T1l = ii[WS(is, 8)];
                T4  = ii[WS(is, 4)];
                T5  = ii[WS(is, 12)];
                T1M = ri[WS(is, 4)];
                T1N = ri[WS(is, 12)];
                T8  = ii[WS(is, 2)];
                T9  = ii[WS(is, 10)];
                Tb  = ri[WS(is, 2)];
                Tc  = ri[WS(is, 10)];
                Tf  = ri[WS(is, 14)];
                T22 = T1 + T2;
                T3  = T1 - T2;
                T1L = T1k - T1l;
                T1m = T1k + T1l;
                T1j = T4 + T5;
                T6  = T4 - T5;
                T23 = T1M + T1N;
                T1O = T1M - T1N;
                T1o = T8 + T9;
                Ta  = T8 - T9;
                T1x = Tb + Tc;
                Td  = Tb - Tc;
                Tg  = ri[WS(is, 6)];
                Ti  = ii[WS(is, 14)];
                Tj  = ii[WS(is, 6)];
                To  = ii[WS(is, 1)];
                T1A = T1m - T1j;
                T1n = T1j + T1m;
                TX  = T3 + T6;
                T7  = T3 - T6;
                T28 = T22 + T23;
                T24 = T22 - T23;
                T1V = T1L + T1O;
                T1P = T1L - T1O;
                TY  = Ta + Td;
                Te  = Ta - Td;
                T1y = Tf + Tg;
                Th  = Tf - Tg;
                T1p = Ti + Tj;
                Tk  = Ti - Tj;
                Tp  = ii[WS(is, 9)];
                Tv  = ri[WS(is, 1)];
                Tw  = ri[WS(is, 9)];
                Tr  = ri[WS(is, 5)];
                Ts  = ri[WS(is, 13)];
                Ty  = ii[WS(is, 13)];
                Tz  = ii[WS(is, 5)];
                TD  = ii[WS(is, 15)];
                T1z = T1x - T1y;
                T29 = T1x + T1y;
                T1q = T1o + T1p;
                T21 = T1p - T1o;
                TZ  = Th - Tk;
                Tl  = Th + Tk;
                T1v = To + Tp;
                Tq  = To - Tp;
                T1g = Tv + Tw;
                Tx  = Tv - Tw;
                T1h = Tr + Ts;
                Tt  = Tr - Ts;
                T1u = Ty + Tz;
                TA  = Ty - Tz;
                TE  = ii[WS(is, 7)];
                TK  = ri[WS(is, 15)];
                TL  = ri[WS(is, 7)];
                TG  = ri[WS(is, 3)];
                TH  = ri[WS(is, 11)];
                TN  = ii[WS(is, 3)];
                TO  = ii[WS(is, 11)];
            }
            {
                SIMD_FLOAT T1r, T1C, Tu, T12, T1D, T1w, TB, T13, TF, T1s, TM,
                    T1e, TI, T1d, TP;
                SIMD_FLOAT T1t, T2a, T1W, T14, T19, Tm, T1K, T1E, T1F, TJ, T15,
                    T27, T1G, T16, TQ;
                SIMD_FLOAT T1i, T1f, T1H, T1J, T17, T1a, TC, TR;
                T1r           = T1n - T1q;
                T1C           = T1h - T1g;
                Tu            = Tq + Tt;
                T12           = Tq - Tt;
                T1D           = T1v - T1u;
                T1w           = T1u + T1v;
                TB            = Tx + TA;
                T13           = TA - Tx;
                TF            = TD - TE;
                T1s           = TD + TE;
                TM            = TK - TL;
                T1e           = TK + TL;
                TI            = TG - TH;
                T1d           = TG + TH;
                TP            = TN - TO;
                T1t           = TN + TO;
                T2a           = T28 - T29;
                T10           = TY + TZ;
                T1W           = TZ - TY;
                T14           = SIMD_FMADD(KP414213562, T13, T12);
                T19           = SIMD_FNMADD(KP414213562, T12, T13);
                Tm            = Te - Tl;
                T1Q           = Te + Tl;
                T1B           = T1z + T1A;
                T1K           = T1D + T1C;
                T1E           = T1C - T1D;
                T25           = T21 + T24;
                T1F           = T1e - T1d;
                T1f           = T1d + T1e;
                TJ            = TF + TI;
                T15           = TI - TF;
                T27           = T1w - (T1s + T1t);
                io[WS(os, 5)] = T1q + T1n - (T1s + T1t) - T1w;
                T1G           = T1t - T1s;
                T16           = TM + TP;
                TQ            = TM - TP;
                T11           = SIMD_FNMADD(KP707106781, T10, TX);
                T1R           = SIMD_FNMADD(KP707106781, T1Q, T1P);
                T1i           = T1f - (T1g + T1h);
                ro[WS(os, 5)] = T29 + T28 - T1f - (T1g + T1h);
                ro[WS(os, 9)] = T2a - T27;
                ro[WS(os, 1)] = T27 + T2a;
                T1H           = T1F + T1G;
                T1J           = T1G - T1F;
                T17           = SIMD_FNMADD(KP414213562, T16, T15);
                T1a           = SIMD_FMADD(KP414213562, T15, T16);
                TU            = SIMD_FNMADD(KP414213562, Tu, TB);
                TC            = SIMD_FMADD(KP414213562, TB, Tu);
                TR            = SIMD_FNMADD(KP414213562, TQ, TJ);
                TV            = SIMD_FMADD(KP414213562, TJ, TQ);
                io[WS(os, 9)] = T1r - T1i;
                io[WS(os, 1)] = T1i + T1r;
                Tn            = SIMD_FMADD(KP707106781, Tm, T7);
                TT            = SIMD_FNMADD(KP707106781, Tm, T7);
                T1X           = SIMD_FMADD(KP707106781, T1W, T1V);
                T1Z           = SIMD_FNMADD(KP707106781, T1W, T1V);
                io[WS(os, 7)] = SIMD_FMADD(KP707106781, T1J, T1A) -
                                (SIMD_FMADD(KP707106781, T1K, T1z));
                T26           = T1K + T1J;
                ro[WS(os, 7)] = SIMD_FMADD(KP707106781, T1E, T24) -
                                (SIMD_FMADD(KP707106781, T1H, T21));
                T1I = T1E + T1H;
                T1b = T19 - T1a;
                T1S = T19 + T1a;
                T18 = T14 + T17;
                T1T = T17 - T14;
                T20 = TC + TR;
                TS  = TC - TR;
            }
        }
        ro[WS(os, 11)] = SIMD_FNMADD(KP707106781, T26, T25);
        ro[WS(os, 3)]  = SIMD_FMADD(KP707106781, T26, T25);
        io[WS(os, 11)] = SIMD_FNMADD(KP707106781, T1I, T1B);
        io[WS(os, 3)]  = SIMD_FMADD(KP707106781, T1I, T1B);
        io[WS(os, 10)] = SIMD_FNMADD(KP923879532, T1S, T1R);
        io[WS(os, 2)]  = SIMD_FMADD(KP923879532, T1S, T1R);
        T1c            = SIMD_FMADD(KP765366864, T10, T1b);
        T1U            = SIMD_FMADD(KP765366864, T1Q, T1T);
        ro[WS(os, 2)]  = SIMD_FMADD(KP923879532, T18, T11);
        ro[WS(os, 10)] = SIMD_FNMADD(KP923879532, T18, T11);
        ro[0]          = SIMD_FMADD(KP923879532, TS, Tn);
        ro[WS(os, 8)]  = SIMD_FNMADD(KP923879532, TS, Tn);
        io[WS(os, 12)] = SIMD_FMADD(KP923879532, T20, T1Z);
        io[WS(os, 4)]  = SIMD_FNMADD(KP923879532, T20, T1Z);
        TW             = TU + TV;
        T1Y            = TV - TU;
        ro[WS(os, 6)]  = SIMD_FMADD(KP923879532, T1c, TX);
        io[WS(os, 6)]  = SIMD_FMADD(KP923879532, T1U, T1P);
        io[0]          = SIMD_FMADD(KP923879532, T1Y, T1X);
        io[WS(os, 8)]  = SIMD_FNMADD(KP923879532, T1Y, T1X);
        ro[WS(os, 12)] = SIMD_FMADD(KP923879532, TW, TT);
        ro[WS(os, 4)]  = SIMD_FNMADD(KP923879532, TW, TT);
    }
}

template <>
struct c2cb_traits<16, 4>
{
    static constexpr long_t flops           = 174;
    static constexpr long_t operations      = 138;
    static constexpr long_t memory_accesses = 56;
    static constexpr long_t stack_vars      = 101;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 4 -name c2cb
 * -standalone */

/*
 * This function contains 138 FP additions, 36 FP multiplications,
 * (or, 102 additions, 0 multiplications, 36 fused multiply/add),
 * 101 stack variables, 4 constants, and 56 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 4>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1Z, T1P, T1X, T20, T1U, T1R, T24, T26, T25, T21, T1Y;
        {
            SIMD_FLOAT TZ, TW, Tp, T1x, T1V, TT, Tm, T1A, T1W, T10, Ts, T8, T3,
                T1D, T1S;
            SIMD_FLOAT T1q, TJ, T1t, T1T, T1b, TQ, T1d, Tw, T1e, T6, T1E, Tz,
                T9, TB, TC;
            SIMD_FLOAT Tb, Tc, TE, TF, Tt, T1f, T12, T7, T1F, TI, TA, T1g, Ta,
                T1h, TD;
            SIMD_FLOAT T1j, Td, T1k, TG, T1c;
            {
                SIMD_FLOAT Tq, T1y, Ti, T1w, T1v, Tl, T1z, T1s, T1p, TM, Tr, TN,
                    TO, Tg, Th;
                SIMD_FLOAT TX, TY, Tj, Tk, TU, TV, Tn, To, TK, TL, T1, T2, T1o,
                    T1r, TP;
                SIMD_FLOAT Tu, Tv, T4, T5, Tx, Ty;
                Tg  = ii[WS(is, 1)];
                Th  = ii[WS(is, 9)];
                TX  = ri[WS(is, 1)];
                TY  = ri[WS(is, 9)];
                Tj  = ii[WS(is, 5)];
                Tk  = ii[WS(is, 13)];
                TU  = ri[WS(is, 5)];
                TV  = ri[WS(is, 13)];
                Tn  = ii[WS(is, 15)];
                To  = ii[WS(is, 7)];
                TK  = ri[WS(is, 15)];
                TL  = ri[WS(is, 7)];
                Tq  = ii[WS(is, 3)];
                T1y = Tg - Th;
                Ti  = Tg + Th;
                T1w = TX - TY;
                TZ  = TX + TY;
                T1v = Tk - Tj;
                Tl  = Tj + Tk;
                T1z = TU - TV;
                TW  = TU + TV;
                T1s = Tn - To;
                Tp  = Tn + To;
                T1p = TK - TL;
                TM  = TK + TL;
                Tr  = ii[WS(is, 11)];
                TN  = ri[WS(is, 3)];
                TO  = ri[WS(is, 11)];
                T1  = ri[0];
                T1x = T1v - T1w;
                T1V = T1v + T1w;
                TT  = Ti - Tl;
                Tm  = Ti + Tl;
                T1A = T1y - T1z;
                T1W = T1y + T1z;
                T10 = TW - TZ;
                T2  = ri[WS(is, 8)];
                T1o = Tq - Tr;
                Ts  = Tq + Tr;
                T1r = TN - TO;
                TP  = TN + TO;
                Tu  = ii[0];
                Tv  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                Tx  = ii[WS(is, 4)];
                Ty  = ii[WS(is, 12)];
                T8  = ri[WS(is, 2)];
                T3  = T1 + T2;
                T1D = T1 - T2;
                T1S = T1p - T1o;
                T1q = T1o + T1p;
                TJ  = Ts - Tp;
                T1t = T1r - T1s;
                T1T = T1s + T1r;
                T1b = TM + TP;
                TQ  = TM - TP;
                T1d = Tu - Tv;
                Tw  = Tu + Tv;
                T1e = T4 - T5;
                T6  = T4 + T5;
                T1E = Tx - Ty;
                Tz  = Tx + Ty;
                T9  = ri[WS(is, 10)];
                TB  = ii[WS(is, 2)];
                TC  = ii[WS(is, 10)];
                Tb  = ri[WS(is, 14)];
                Tc  = ri[WS(is, 6)];
                TE  = ii[WS(is, 14)];
                TF  = ii[WS(is, 6)];
            }
            Tt  = Tm - (Tp + Ts);
            T1f = T1d - T1e;
            T1Z = T1e + T1d;
            T12 = T3 - T6;
            T7  = T3 + T6;
            T1F = T1D + T1E;
            T1P = T1D - T1E;
            TI  = Tw - Tz;
            TA  = Tw + Tz;
            T1g = T8 - T9;
            Ta  = T8 + T9;
            T1h = TB - TC;
            TD  = TB + TC;
            T1j = Tb - Tc;
            Td  = Tb + Tc;
            T1k = TE - TF;
            TG  = TE + TF;
            T1c = T1b - (TW + TZ);
            {
                SIMD_FLOAT T17, TR, T11, T18, T1B, T1L, T1i, T1H, T1K, T1u, Te,
                    TS, T1G, T1l, TH;
                SIMD_FLOAT T13, T15, T19, T23, T1O, T1Q, T1C, T22, T1M, T1n,
                    T1J, T1N, T1m, T1I, T14;
                SIMD_FLOAT T1a, T16, Tf;
                T17           = TJ + TQ;
                TR            = TJ - TQ;
                T11           = TT + T10;
                T18           = T10 - TT;
                T1B           = SIMD_FNMADD(KP414213562, T1A, T1x);
                T1L           = SIMD_FMADD(KP414213562, T1x, T1A);
                T1i           = T1g - T1h;
                T1H           = T1g + T1h;
                T1K           = SIMD_FNMADD(KP414213562, T1q, T1t);
                T1u           = SIMD_FMADD(KP414213562, T1t, T1q);
                Te            = Ta + Td;
                TS            = Ta - Td;
                T1G           = T1k - T1j;
                T1l           = T1j + T1k;
                TH            = TD + TG;
                T13           = TG - TD;
                T15           = TR + T11;
                T19           = T17 + T18;
                T1X           = SIMD_FNMADD(KP414213562, T1W, T1V);
                T23           = SIMD_FMADD(KP414213562, T1V, T1W);
                T1O           = T1K + T1L;
                T16           = TS + TI;
                io[WS(os, 6)] = SIMD_FMADD(KP707106781, TR, TI) -
                                (SIMD_FMADD(KP707106781, T11, TS));
                Tf            = T7 - Te;
                ro[WS(os, 4)] = T7 + Te - (TW + TZ) - T1b;
                T1m           = T1i - T1l;
                T1Q           = T1i + T1l;
                T20           = T1H + T1G;
                T1I           = T1G - T1H;
                ro[WS(os, 6)] = SIMD_FMADD(KP707106781, T18, T12) -
                                (SIMD_FMADD(KP707106781, T17, T13));
                T14            = T12 + T13;
                T1a            = TA - TH;
                io[WS(os, 4)]  = TA + TH - (Tp + Ts) - Tm;
                T1C            = T1u + T1B;
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T19, T16);
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T19, T16);
                ro[0]          = Tf + Tt;
                ro[WS(os, 8)]  = Tf - Tt;
                T1U            = SIMD_FMADD(KP414213562, T1T, T1S);
                T22            = SIMD_FNMADD(KP414213562, T1S, T1T);
                T1M            = T1K - (SIMD_FMADD(KP765366864, T1m, T1L));
                T1n            = SIMD_FMADD(KP707106781, T1m, T1f);
                T1J            = T1B - (SIMD_FMADD(KP765366864, T1I, T1u));
                T1N            = SIMD_FMADD(KP707106781, T1I, T1F);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T15, T14);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T15, T14);
                io[0]          = T1a + T1c;
                io[WS(os, 8)]  = T1a - T1c;
                T1R            = SIMD_FMADD(KP707106781, T1Q, T1P);
                T24            = T22 - (SIMD_FMADD(KP765366864, T1Q, T23));
                T26            = T22 + T23;
                io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1M, T1f);
                io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1C, T1n);
                io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1C, T1n);
                ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1J, T1F);
                ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1O, T1N);
                ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1O, T1N);
            }
        }
        T25            = SIMD_FMADD(KP707106781, T20, T1Z);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T24, T1P);
        T21            = T1X - (SIMD_FMADD(KP765366864, T20, T1U));
        T1Y            = T1U + T1X;
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T26, T25);
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T26, T25);
        io[WS(os, 7)]  = SIMD_FMADD(KP923879532, T21, T1Z);
        ro[WS(os, 11)] = SIMD_FMADD(KP923879532, T1Y, T1R);
        ro[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1Y, T1R);
    }
}

template <>
struct c2cb_traits<16, 5>
{
    static constexpr long_t flops           = 172;
    static constexpr long_t operations      = 136;
    static constexpr long_t memory_accesses = 54;
    static constexpr long_t stack_vars      = 93;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 5 -name c2cb
 * -standalone */

/*
 * This function contains 136 FP additions, 36 FP multiplications,
 * (or, 100 additions, 0 multiplications, 36 fused multiply/add),
 * 93 stack variables, 4 constants, and 54 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 5>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1i, T1E, T7, TW, T22, T1Y, T1L, T1Q, TI, TX, T1s, Ta, T21,
            T1d, Tn;
        SIMD_FLOAT T1D, T1V, TY, TP, T1u, Tk, T1v, Td, To, Tx, T1r, Th, Ty, Tq,
            Tr;
        SIMD_FLOAT Tu, Tv, T1j, T1w, T1F, Te, T14, Tp, T1n, T1t, T15, Tl, T1l,
            Tz, T1k;
        SIMD_FLOAT Ts, T1o, Tw, T1Z;
        {
            SIMD_FLOAT TJ, T1W, T3, T1H, T1g, T1h, T6, T1X, T1K, T1B, TE, T1c,
                TH, TK, TM;
            SIMD_FLOAT TN, T1, T2, T1e, T1f, T4, T5, T1I, T1J, TC, TD, TF, TG,
                TL, TO;
            SIMD_FLOAT T1C, Ti, Tj, Tb, Tc, Tf, Tg, T8, T9, T1b;
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            T1e = ii[0];
            T1f = ii[WS(is, 8)];
            T4  = ii[WS(is, 4)];
            T5  = ii[WS(is, 12)];
            T1I = ri[WS(is, 4)];
            T1J = ri[WS(is, 12)];
            TC  = ii[WS(is, 14)];
            TD  = ii[WS(is, 6)];
            TF  = ri[WS(is, 14)];
            TG  = ri[WS(is, 6)];
            TJ  = ri[WS(is, 2)];
            T1W = T1 + T2;
            T3  = T1 - T2;
            T1H = T1e - T1f;
            T1g = T1e + T1f;
            T1h = T4 + T5;
            T6  = T4 - T5;
            T1X = T1I + T1J;
            T1K = T1I - T1J;
            T1B = TC + TD;
            TE  = TC - TD;
            T1c = TF + TG;
            TH  = TF - TG;
            TK  = ri[WS(is, 10)];
            TM  = ii[WS(is, 2)];
            TN  = ii[WS(is, 10)];
            T8  = ri[WS(is, 3)];
            T1i = T1g - T1h;
            T1E = T1h + T1g;
            T7  = T3 - T6;
            TW  = T3 + T6;
            T22 = T1W + T1X;
            T1Y = T1W - T1X;
            T1L = T1H - T1K;
            T1Q = T1H + T1K;
            T9  = ri[WS(is, 11)];
            TI  = TE + TH;
            TX  = TE - TH;
            TL  = TJ - TK;
            T1b = TJ + TK;
            TO  = TM - TN;
            T1C = TM + TN;
            Ti  = ii[WS(is, 3)];
            Tj  = ii[WS(is, 11)];
            Tb  = ii[WS(is, 15)];
            Tc  = ii[WS(is, 7)];
            Tf  = ri[WS(is, 15)];
            T1s = T8 + T9;
            Ta  = T8 - T9;
            Tg  = ri[WS(is, 7)];
            T21 = T1c + T1b;
            T1d = T1b - T1c;
            Tn  = ii[WS(is, 1)];
            T1D = T1B + T1C;
            T1V = T1B - T1C;
            TY  = TL + TO;
            TP  = TL - TO;
            T1u = Ti + Tj;
            Tk  = Ti - Tj;
            T1v = Tb + Tc;
            Td  = Tb - Tc;
            To  = ii[WS(is, 9)];
            Tx  = ri[WS(is, 1)];
            T1r = Tf + Tg;
            Th  = Tf - Tg;
            Ty  = ri[WS(is, 9)];
            Tq  = ri[WS(is, 5)];
            Tr  = ri[WS(is, 13)];
            Tu  = ii[WS(is, 13)];
            Tv  = ii[WS(is, 5)];
        }
        T1j = T1d + T1i;
        T1w = T1u - T1v;
        T1F = T1v + T1u;
        Te  = Ta + Td;
        T14 = Ta - Td;
        Tp  = Tn - To;
        T1n = Tn + To;
        T1t = T1r - T1s;
        T15 = Th + Tk;
        Tl  = Th - Tk;
        T1l = Tx + Ty;
        Tz  = Tx - Ty;
        T1k = Tq + Tr;
        Ts  = Tq - Tr;
        T1o = Tu + Tv;
        Tw  = Tu - Tv;
        T1Z = T1V + T1Y;
        {
            SIMD_FLOAT T1x, T1z, T1G, T1m, T11, Tt, T1p, TA, T12, TU, Tm, TQ,
                T1M, TZ, T1R;
            SIMD_FLOAT TS, T1S, T10, T20, T1y, T1U, TV, TR, T1T, T1a, T1O, T17,
                T1N, T1P, T1A;
            SIMD_FLOAT T1q, TT, TB, T19, T16, T13, T18;
            T1x           = T1t + T1w;
            T1z           = T1w - T1t;
            T1G           = T1k + T1l;
            T1m           = T1k - T1l;
            T11           = Tp - Ts;
            Tt            = Tp + Ts;
            T1p           = T1n - T1o;
            TA            = Tw + Tz;
            T12           = Tw - Tz;
            TU            = SIMD_FMADD(KP414213562, Te, Tl);
            Tm            = SIMD_FNMADD(KP414213562, Tl, Te);
            TQ            = TI + TP;
            T1M           = TP - TI;
            TZ            = TX - TY;
            T1R           = TX + TY;
            ro[WS(os, 7)] = T1F + T22 - (T1n + T1o) - T21;
            io[WS(os, 3)] = T1D + T1E - T1F - (T1n + T1o);
            io[WS(os, 7)] = T1G + T1E - (T1s + T1r) - T1D;
            ro[WS(os, 3)] = T21 + T22 - (T1s + T1r) - T1G;
            T1A           = T1p + T1m;
            T1q           = T1m - T1p;
            TT            = SIMD_FNMADD(KP414213562, Tt, TA);
            TB            = SIMD_FMADD(KP414213562, TA, Tt);
            TS            = SIMD_FMADD(KP707106781, TQ, T7);
            T1S           = SIMD_FMADD(KP707106781, T1R, T1Q);
            T19           = SIMD_FMADD(KP414213562, T14, T15);
            T16           = SIMD_FNMADD(KP414213562, T15, T14);
            T13           = SIMD_FMADD(KP414213562, T12, T11);
            T18           = SIMD_FNMADD(KP414213562, T11, T12);
            T10           = SIMD_FMADD(KP707106781, TZ, TW);
            io[WS(os, 5)] = SIMD_FMADD(KP707106781, T1z, T1i) -
                            (SIMD_FMADD(KP707106781, T1A, T1d));
            T20           = T1A + T1z;
            ro[WS(os, 5)] = SIMD_FMADD(KP707106781, T1q, T1Y) -
                            (SIMD_FMADD(KP707106781, T1x, T1V));
            T1y            = T1q + T1x;
            T1U            = TT - (SIMD_FMADD(KP765366864, T1R, TU));
            TV             = TT + TU;
            TR             = Tm - (SIMD_FMADD(KP765366864, TQ, TB));
            T1T            = TB + Tm;
            T1a            = T18 - (SIMD_FMADD(KP765366864, TZ, T19));
            T1O            = T18 + T19;
            T17            = T13 + T16;
            T1N            = SIMD_FMADD(KP707106781, T1M, T1L);
            T1P            = T16 - (SIMD_FMADD(KP765366864, T1M, T13));
            ro[WS(os, 9)]  = SIMD_FNMADD(KP707106781, T20, T1Z);
            ro[WS(os, 1)]  = SIMD_FMADD(KP707106781, T20, T1Z);
            io[WS(os, 9)]  = SIMD_FNMADD(KP707106781, T1y, T1j);
            io[WS(os, 1)]  = SIMD_FMADD(KP707106781, T1y, T1j);
            io[WS(os, 6)]  = SIMD_FMADD(KP923879532, T1U, T1Q);
            ro[WS(os, 10)] = SIMD_FMADD(KP923879532, TV, TS);
            ro[WS(os, 2)]  = SIMD_FNMADD(KP923879532, TV, TS);
            ro[WS(os, 6)]  = SIMD_FMADD(KP923879532, TR, T7);
            io[WS(os, 10)] = SIMD_FMADD(KP923879532, T1T, T1S);
            io[WS(os, 2)]  = SIMD_FNMADD(KP923879532, T1T, T1S);
            ro[WS(os, 8)]  = SIMD_FNMADD(KP923879532, T17, T10);
            io[WS(os, 8)]  = SIMD_FNMADD(KP923879532, T1O, T1N);
            ro[0]          = SIMD_FMADD(KP923879532, T17, T10);
            io[0]          = SIMD_FMADD(KP923879532, T1O, T1N);
            io[WS(os, 4)]  = SIMD_FMADD(KP923879532, T1P, T1L);
            ro[WS(os, 4)]  = SIMD_FMADD(KP923879532, T1a, TW);
        }
    }
}

template <>
struct c2cb_traits<16, 6>
{
    static constexpr long_t flops           = 168;
    static constexpr long_t operations      = 134;
    static constexpr long_t memory_accesses = 52;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 6 -name c2cb
 * -standalone */

/*
 * This function contains 134 FP additions, 34 FP multiplications,
 * (or, 100 additions, 0 multiplications, 34 fused multiply/add),
 * 92 stack variables, 4 constants, and 52 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 6>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1R, T1K, TZ, Tf, T21, T1G, T1Q, T22, TK, T1J, T1P, T1U, T1u,
            T1W, T1q;
        SIMD_FLOAT T1O, T1x, T23, T7, TU, T1X, T1M, T1o, T11, Ti, T14, Ts, Tv,
            Te, TN;
        SIMD_FLOAT T24, T20, T1L, T1j, T13, Tl, Tw, TF, TG, Ty, T10, Tp, Tz, TC,
            TD;
        {
            SIMD_FLOAT Tb, TX, T3, T1w, TQ, T1v, T6, TY, TT, T1k, Ta, T1Z, T1n,
                Tc, T1g;
            SIMD_FLOAT T1h, T1, T2, TO, TP, T4, T5, TR, TS, T8, T9, T1l, T1m,
                Td, T1f;
            SIMD_FLOAT T1i, T1Y, Tj, Tk, Tn, To, Tg, Th, Tq, Tr;
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            TO  = ii[0];
            TP  = ii[WS(is, 8)];
            T4  = ri[WS(is, 4)];
            T5  = ri[WS(is, 12)];
            TR  = ii[WS(is, 4)];
            TS  = ii[WS(is, 12)];
            T8  = ii[WS(is, 14)];
            T9  = ii[WS(is, 6)];
            T1l = ri[WS(is, 14)];
            T1m = ri[WS(is, 6)];
            Tb  = ii[WS(is, 2)];
            TX  = T1 - T2;
            T3  = T1 + T2;
            T1w = TO - TP;
            TQ  = TO + TP;
            T1v = T4 - T5;
            T6  = T4 + T5;
            TY  = TR - TS;
            TT  = TR + TS;
            T1k = T8 - T9;
            Ta  = T8 + T9;
            T1Z = T1l + T1m;
            T1n = T1l - T1m;
            Tc  = ii[WS(is, 10)];
            T1g = ri[WS(is, 2)];
            T1h = ri[WS(is, 10)];
            Tg  = ii[WS(is, 1)];
            T1x = T1v + T1w;
            T1R = T1w - T1v;
            T23 = T3 + T6;
            T7  = T3 - T6;
            T1K = TX - TY;
            TZ  = TX + TY;
            TU  = TQ + TT;
            T1X = TQ - TT;
            Th  = ii[WS(is, 9)];
            Tq  = ri[WS(is, 1)];
            Tr  = ri[WS(is, 9)];
            T1M = T1k + T1n;
            T1o = T1k - T1n;
            Td  = Tb + Tc;
            T1f = Tb - Tc;
            T1i = T1g - T1h;
            T1Y = T1g + T1h;
            Tj  = ii[WS(is, 5)];
            Tk  = ii[WS(is, 13)];
            Tn  = ri[WS(is, 5)];
            T11 = Tg - Th;
            Ti  = Tg + Th;
            T14 = Tq - Tr;
            Ts  = Tq + Tr;
            To  = ri[WS(is, 13)];
            Tv  = ii[WS(is, 3)];
            Te  = Ta - Td;
            TN  = Ta + Td;
            T24 = T1Y + T1Z;
            T20 = T1Y - T1Z;
            T1L = T1i - T1f;
            T1j = T1f + T1i;
            T13 = Tj - Tk;
            Tl  = Tj + Tk;
            Tw  = ii[WS(is, 11)];
            TF  = ri[WS(is, 3)];
            TG  = ri[WS(is, 11)];
            Ty  = ii[WS(is, 15)];
            T10 = Tn - To;
            Tp  = Tn + To;
            Tz  = ii[WS(is, 7)];
            TC  = ri[WS(is, 15)];
            TD  = ri[WS(is, 7)];
        }
        {
            SIMD_FLOAT T15, T1y, Tm, Tx, T1a, TH, T18, T1z, T12, TW, Tt, T17,
                TA, T1b, TE;
            SIMD_FLOAT T1p, T1E, T1T, T1N, T16, T1s, Tu, TL, T1C, T19, TV, TB,
                T1c, T1B, TI;
            SIMD_FLOAT T1F, T1H, T1A, T1r, T1d, T1D, T1I, TJ, TM, T1S, T1t, T1V,
                T1e;
            Tf            = T7 + Te;
            T15           = T13 + T14;
            T1y           = T14 - T13;
            Tm            = Ti - Tl;
            Tx            = Tv + Tw;
            T1a           = Tw - Tv;
            TH            = TF + TG;
            T18           = TF - TG;
            T1z           = T11 + T10;
            T12           = T10 - T11;
            TW            = Tp + Ts;
            Tt            = Tp - Ts;
            T17           = Ty - Tz;
            TA            = Ty + Tz;
            T1b           = TC - TD;
            TE            = TC + TD;
            T21           = T1X + T20;
            T1p           = T1j - T1o;
            T1E           = T1j + T1o;
            T1T           = T1M - T1L;
            T1N           = T1L + T1M;
            T16           = SIMD_FMADD(KP414213562, T15, T12);
            T1s           = SIMD_FNMADD(KP414213562, T12, T15);
            Tu            = Tm + Tt;
            TL            = Tt - Tm;
            T1C           = T17 + T18;
            T19           = T17 - T18;
            TV            = Tx + TA;
            TB            = Tx - TA;
            T1c           = T1a - T1b;
            T1B           = T1a + T1b;
            TI            = TE - TH;
            T1H           = SIMD_FMADD(KP414213562, T1y, T1z);
            T1A           = SIMD_FNMADD(KP414213562, T1z, T1y);
            T1r           = SIMD_FMADD(KP414213562, T19, T1c);
            T1d           = SIMD_FNMADD(KP414213562, T1c, T19);
            T1D           = SIMD_FMADD(KP414213562, T1C, T1B);
            T1I           = SIMD_FNMADD(KP414213562, T1B, T1C);
            TJ            = TB - TI;
            TM            = TB + TI;
            io[WS(os, 6)] = TW + TU - (TE + TH) - TN;
            ro[WS(os, 2)] = T23 + T24 - (TE + TH) - TW;
            ro[WS(os, 6)] = T23 + TV - T24 - (Ti + Tl);
            io[WS(os, 2)] = TN + TU - TV - (Ti + Tl);
            T1G           = SIMD_FMADD(KP707106781, T1E, T1x);
            T1S           = T1s + T1r;
            T1t           = T1r - T1s;
            T1V           = T16 - T1d;
            T1e           = T16 + T1d;
            T1F           = T1A - (SIMD_FMADD(KP765366864, T1E, T1D));
            T1Q           = T1A + T1D;
            ro[WS(os, 4)] = SIMD_FMADD(KP707106781, TL, T7) -
                            (SIMD_FMADD(KP707106781, TM, Te));
            T22           = TL + TM;
            io[WS(os, 4)] = SIMD_FMADD(KP707106781, TJ, T1X) -
                            (SIMD_FMADD(KP707106781, Tu, T20));
            TK            = Tu + TJ;
            T1J           = T1H + T1I;
            T1P           = SIMD_FMADD(KP707106781, T1N, T1K);
            T1U           = SIMD_FNMADD(KP765366864, T1T, T1S);
            T1u           = SIMD_FMADD(KP765366864, T1p, T1t);
            T1W           = SIMD_FMADD(KP765366864, T1T, T1V);
            T1q           = SIMD_FNMADD(KP765366864, T1p, T1e);
            T1O           = T1I - (SIMD_FMADD(KP765366864, T1N, T1H));
            io[WS(os, 5)] = SIMD_FMADD(KP923879532, T1F, T1x);
        }
        io[WS(os, 8)] = SIMD_FNMADD(KP707106781, T22, T21);
        io[0]         = SIMD_FMADD(KP707106781, T22, T21);
        ro[0]         = SIMD_FMADD(KP707106781, TK, Tf);
        ro[WS(os, 8)] = SIMD_FNMADD(KP707106781, TK, Tf);
        io[WS(os, 9)] = SIMD_FMADD(KP923879532, T1J, T1G);
        io[WS(os, 1)] = SIMD_FNMADD(KP923879532, T1J, T1G);
        ro[WS(os, 9)] = SIMD_FMADD(KP923879532, T1Q, T1P);
        ro[WS(os, 1)] = SIMD_FNMADD(KP923879532, T1Q, T1P);
        io[WS(os, 7)] = SIMD_FMADD(KP923879532, T1U, T1R);
        ro[WS(os, 3)] = SIMD_FMADD(KP923879532, T1u, TZ);
        io[WS(os, 3)] = SIMD_FMADD(KP923879532, T1W, T1R);
        ro[WS(os, 7)] = SIMD_FMADD(KP923879532, T1q, TZ);
        ro[WS(os, 5)] = SIMD_FMADD(KP923879532, T1O, T1K);
    }
}

template <>
struct c2cb_traits<16, 7>
{
    static constexpr long_t flops           = 162;
    static constexpr long_t operations      = 132;
    static constexpr long_t memory_accesses = 50;
    static constexpr long_t stack_vars      = 93;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 7 -name c2cb
 * -standalone */

/*
 * This function contains 132 FP additions, 30 FP multiplications,
 * (or, 102 additions, 0 multiplications, 30 fused multiply/add),
 * 93 stack variables, 4 constants, and 50 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 7>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T7, TX, T1K, T1Q, TR, T1M, T11, T1L, TV, T1O, TC, T1b, T1T,
            T18, T1S;
        SIMD_FLOAT T1U, T1W, T1f, T1i, T1X, T1v, T1c, TJ, TY, T1d, T1u, T1p,
            T1l, Tz, T1k;
        SIMD_FLOAT TZ, TQ, Tf, T1y, T15, Tt, Tw, T1q, Ta, T1m, Tg, T1t, Tk, T1s,
            Td;
        SIMD_FLOAT T1N, TW, T1P, TS;
        {
            SIMD_FLOAT T1, T2, T4, T5, T1g, T1h, T1H, T1I, TD, TE, TG, TH, TK,
                T1G, T1J;
            SIMD_FLOAT TF, TI, TL, TN, TO, T3, T6, TM, TP, Tp, Tu, Ts, Tv, Tn,
                To;
            SIMD_FLOAT Tx, Ty, Tq, Tr, T8, T9, Ti, Tj, Tb, Tc;
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            T4  = ii[WS(is, 4)];
            T5  = ii[WS(is, 12)];
            T1g = ii[0];
            T1h = ii[WS(is, 8)];
            T1H = ri[WS(is, 4)];
            T1I = ri[WS(is, 12)];
            TD  = ri[WS(is, 2)];
            TE  = ri[WS(is, 10)];
            TG  = ii[WS(is, 2)];
            TH  = ii[WS(is, 10)];
            TK  = ii[WS(is, 14)];
            T1W = T1 + T2;
            T3  = T1 - T2;
            T1f = T4 + T5;
            T6  = T4 - T5;
            T1i = T1g + T1h;
            T1G = T1g - T1h;
            T1X = T1H + T1I;
            T1J = T1H - T1I;
            T1v = TD + TE;
            TF  = TD - TE;
            T1c = TG + TH;
            TI  = TG - TH;
            TL  = ii[WS(is, 6)];
            TN  = ri[WS(is, 14)];
            TO  = ri[WS(is, 6)];
            T7  = T3 + T6;
            TX  = T3 - T6;
            Tn  = ri[WS(is, 1)];
            To  = ri[WS(is, 9)];
            Tx  = ii[WS(is, 1)];
            T1K = T1G - T1J;
            T1Q = T1G + T1J;
            Ty  = ii[WS(is, 9)];
            Tq  = ii[WS(is, 5)];
            Tr  = ii[WS(is, 13)];
            TJ  = TF + TI;
            TY  = TF - TI;
            TM  = TK - TL;
            T1d = TK + TL;
            TP  = TN - TO;
            T1u = TN + TO;
            Tp  = Tn - To;
            T1p = Tn + To;
            Tu  = ri[WS(is, 5)];
            T1l = Tx + Ty;
            Tz  = Tx - Ty;
            T1k = Tq + Tr;
            Ts  = Tq - Tr;
            Tv  = ri[WS(is, 13)];
            T8  = ii[WS(is, 11)];
            T9  = ii[WS(is, 3)];
            Ti  = ri[WS(is, 3)];
            TZ  = TM + TP;
            TQ  = TM - TP;
            Tj  = ri[WS(is, 11)];
            Tb  = ri[WS(is, 15)];
            Tc  = ri[WS(is, 7)];
            Tf  = ii[WS(is, 15)];
            T1y = T1l - T1k;
            T15 = Tp - Ts;
            Tt  = Tp + Ts;
            Tw  = Tu - Tv;
            T1q = Tu + Tv;
            Ta  = T8 - T9;
            T1m = T8 + T9;
            Tg  = ii[WS(is, 7)];
            T1t = Ti + Tj;
            Tk  = Ti - Tj;
            T1s = Tb + Tc;
            Td  = Tb - Tc;
        }
        {
            SIMD_FLOAT T1R, T1r, T1x, TA, T16, T10, Th, T1n, T1Z, T1w, T1B, T12,
                Te, T1e, T1V;
            SIMD_FLOAT T1Y, T20, T1F, T1z, TU, TB, T1o, T1A, Tl, T13, T1D, T1j,
                T1a, T17, T1C;
            SIMD_FLOAT T1E, Tm, TT, T14, T19;
            T1R           = TJ + TQ;
            TR            = TJ - TQ;
            T1r           = T1p + T1q;
            T1x           = T1p - T1q;
            TA            = Tw - Tz;
            T16           = Tw + Tz;
            T1M           = TZ - TY;
            T10           = TY + TZ;
            Th            = Tf - Tg;
            T1n           = Tf + Tg;
            T1Z           = T1v + T1u;
            T1w           = T1u - T1v;
            T1B           = T1s - T1t;
            T12           = Ta + Td;
            Te            = Ta - Td;
            T1e           = T1c + T1d;
            T1V           = T1c - T1d;
            T1Y           = T1W - T1X;
            T20           = T1W + T1X;
            T1F           = T1x + T1y;
            T1z           = T1x - T1y;
            TU            = SIMD_FMADD(KP414213562, Tt, TA);
            TB            = SIMD_FNMADD(KP414213562, TA, Tt);
            T1o           = T1m + T1n;
            T1A           = T1n - T1m;
            Tl            = Th - Tk;
            T13           = Th + Tk;
            T1D           = T1i - T1f;
            T1j           = T1f + T1i;
            T1a           = SIMD_FMADD(KP414213562, T15, T16);
            T17           = SIMD_FNMADD(KP414213562, T16, T15);
            T1C           = T1A + T1B;
            T1E           = T1A - T1B;
            Tm            = SIMD_FMADD(KP414213562, Tl, Te);
            TT            = SIMD_FNMADD(KP414213562, Te, Tl);
            T14           = SIMD_FMADD(KP414213562, T13, T12);
            T19           = SIMD_FNMADD(KP414213562, T12, T13);
            io[WS(os, 5)] = T1r + T1j - (T1s + T1t) - T1e;
            ro[WS(os, 1)] = T1Z + T20 - T1r - (T1s + T1t);
            ro[WS(os, 5)] = T1o + T20 - (T1k + T1l) - T1Z;
            io[WS(os, 1)] = T1e + T1j - (T1k + T1l) - T1o;
            T11           = SIMD_FMADD(KP707106781, T10, TX);
            io[WS(os, 7)] = SIMD_FMADD(KP707106781, T1E + T1F, T1D) - T1w;
            ro[WS(os, 3)] = SIMD_FMADD(KP707106781, T1E - T1F, T1V) + T1Y;
            ro[WS(os, 7)] = SIMD_FMADD(KP707106781, T1C + T1z, T1Y) - T1V;
            io[WS(os, 3)] = SIMD_FMADD(KP707106781, T1z - T1C, T1w) + T1D;
            T1L           = TU - TT;
            TV            = TT + TU;
            T1O           = Tm + TB;
            TC            = Tm - TB;
            T1b           = T19 - (SIMD_FMADD(KP765366864, T10, T1a));
            T1T           = T19 + T1a;
            T18           = T14 + T17;
            T1S           = SIMD_FMADD(KP707106781, T1R, T1Q);
            T1U           = T17 - (SIMD_FMADD(KP765366864, T1R, T14));
        }
        T1N           = SIMD_FMADD(KP765366864, T1M, T1L);
        TW            = SIMD_FNMADD(KP765366864, TR, TV);
        T1P           = SIMD_FNMADD(KP765366864, T1M, T1O);
        TS            = SIMD_FMADD(KP765366864, TR, TC);
        ro[WS(os, 4)] = SIMD_FMADD(KP923879532, T1b, TX);
        ro[WS(os, 8)] = SIMD_FMADD(KP923879532, T18, T11);
        ro[0]         = SIMD_FNMADD(KP923879532, T18, T11);
        io[WS(os, 8)] = SIMD_FMADD(KP923879532, T1T, T1S);
        io[0]         = SIMD_FNMADD(KP923879532, T1T, T1S);
        io[WS(os, 4)] = SIMD_FMADD(KP923879532, T1U, T1Q);
        io[WS(os, 2)] = SIMD_FMADD(KP923879532, T1N, T1K);
        ro[WS(os, 6)] = SIMD_FMADD(KP923879532, TW, T7);
        io[WS(os, 6)] = SIMD_FMADD(KP923879532, T1P, T1K);
        ro[WS(os, 2)] = SIMD_FMADD(KP923879532, TS, T7);
    }
}

template <>
struct c2cb_traits<16, 8>
{
    static constexpr long_t flops           = 158;
    static constexpr long_t operations      = 130;
    static constexpr long_t memory_accesses = 48;
    static constexpr long_t stack_vars      = 130;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 8 -name c2cb
 * -standalone */

/*
 * This function contains 130 FP additions, 28 FP multiplications,
 * (or, 102 additions, 0 multiplications, 28 fused multiply/add),
 * 130 stack variables, 4 constants, and 48 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 8>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Th, Tk, T14, TU, T1T, T17, T1t, T1R, T1M, T1Y, T1l, T1D, T1J,
            T1x, T1B;
        SIMD_FLOAT T1V, T1N, T1a, TR, Tr, TX, TG, T7, TQ, T13, TH, TF, T10, Ty,
            Te;
        SIMD_FLOAT T11, T1d, T1O, TY, T1P, T1X, T1e, T1E, T12, TZ, T20, T22,
            T1W, T1S, T1G;
        SIMD_FLOAT T1I, T1C, T1u, T21, T1Z, T1Q, T1U, T1H, T1F, T1m, T1y;
        {
            SIMD_FLOAT T1v, T3, T15, Tu, T16, T6, T1w, Tx, Ta, TB, T1z, T1p, Td,
                TE, T1s;
            SIMD_FLOAT T1A, T1h, T1K, TP, TO, T1k, T1L, Tn, T1b, TV, T19, T18,
                Tq, TW, T1;
            SIMD_FLOAT T2, Ts, Tt, T4, T5, Tv, Tw, T1c;
            T1 = ri[0];
            T2 = ri[WS(is, 8)];
            Ts = ii[0];
            Tt = ii[WS(is, 8)];
            T4 = ri[WS(is, 4)];
            T5 = ri[WS(is, 12)];
            Tv = ii[WS(is, 4)];
            Tw = ii[WS(is, 12)];
            {
                SIMD_FLOAT Tb, T1o, T1n, Tc, TC, TD, T8, T9, Tz, TA, T1q, T1r,
                    T1j, TK, T1f;
                SIMD_FLOAT T1g, T1i, TN, Tf, Tg, TI, TJ, Ti, Tj, TL, TM, Tl, Tm,
                    TS, TT;
                SIMD_FLOAT To, Tp;
                T8  = ri[WS(is, 2)];
                T9  = ri[WS(is, 10)];
                Tz  = ii[WS(is, 2)];
                TA  = ii[WS(is, 10)];
                Tb  = ri[WS(is, 14)];
                T1v = T1 - T2;
                T3  = T1 + T2;
                T15 = Ts - Tt;
                Tu  = Ts + Tt;
                T16 = T4 - T5;
                T6  = T4 + T5;
                T1w = Tv - Tw;
                Tx  = Tv + Tw;
                Ta  = T8 + T9;
                T1o = T8 - T9;
                TB  = Tz + TA;
                T1n = Tz - TA;
                Tc  = ri[WS(is, 6)];
                TC  = ii[WS(is, 14)];
                TD  = ii[WS(is, 6)];
                Tf  = ri[WS(is, 15)];
                Tg  = ri[WS(is, 7)];
                TI  = ii[WS(is, 15)];
                TJ  = ii[WS(is, 7)];
                Ti  = ri[WS(is, 3)];
                Tj  = ri[WS(is, 11)];
                TL  = ii[WS(is, 3)];
                TM  = ii[WS(is, 11)];
                T1z = T1o + T1n;
                T1p = T1n - T1o;
                T1q = Tb - Tc;
                Td  = Tb + Tc;
                T1r = TC - TD;
                TE  = TC + TD;
                Th  = Tf + Tg;
                T1j = Tf - Tg;
                TK  = TI + TJ;
                T1f = TI - TJ;
                Tk  = Ti + Tj;
                T1g = Ti - Tj;
                T1i = TM - TL;
                TN  = TL + TM;
                Tl  = ri[WS(is, 1)];
                Tm  = ri[WS(is, 9)];
                TS  = ii[WS(is, 1)];
                T1s = T1q + T1r;
                T1A = T1q - T1r;
                TT  = ii[WS(is, 9)];
                To  = ri[WS(is, 5)];
                Tp  = ri[WS(is, 13)];
                T1h = T1f - T1g;
                T1K = T1g + T1f;
                TP  = Th - Tk;
                TO  = TK - TN;
                T14 = TK + TN;
                T1k = T1i - T1j;
                T1L = T1j + T1i;
                Tn  = Tl + Tm;
                T1b = Tl - Tm;
                TV  = ii[WS(is, 5)];
                T19 = TS - TT;
                TU  = TS + TT;
                T18 = To - Tp;
                Tq  = To + Tp;
                TW  = ii[WS(is, 13)];
            }
            T1T = T16 + T15;
            T17 = T15 - T16;
            T1t = T1p + T1s;
            T1R = T1p - T1s;
            T1M = SIMD_FNMADD(KP414213562, T1L, T1K);
            T1Y = SIMD_FMADD(KP414213562, T1K, T1L);
            T1l = SIMD_FNMADD(KP414213562, T1k, T1h);
            T1D = SIMD_FMADD(KP414213562, T1h, T1k);
            T1J = T1v - T1w;
            T1x = T1v + T1w;
            T1B = T1z + T1A;
            T1V = T1A - T1z;
            T1N = T18 + T19;
            T1a = T18 - T19;
            TR  = Tn - Tq;
            Tr  = Tn + Tq;
            TX  = TV + TW;
            T1c = TV - TW;
            TG  = T3 - T6;
            T7  = T3 + T6;
            TQ  = TO - TP;
            T13 = TP + TO;
            TH  = TB - TE;
            TF  = TB + TE;
            T10 = Tu - Tx;
            Ty  = Tu + Tx;
            Te  = Ta + Td;
            T11 = Td - Ta;
            T1d = T1b + T1c;
            T1O = T1b - T1c;
            TY  = TU - TX;
        }
        T1P           = SIMD_FMADD(KP414213562, T1O, T1N);
        T1X           = SIMD_FNMADD(KP414213562, T1N, T1O);
        T1e           = SIMD_FMADD(KP414213562, T1d, T1a);
        T1E           = SIMD_FNMADD(KP414213562, T1a, T1d);
        T12           = TR - TY;
        TZ            = TR + TY;
        ro[WS(os, 4)] = T7 + T14 - (TU + TX) - Te;
        io[0]         = Ty + TF - T14 - (TU + TX);
        io[WS(os, 4)] = Tr + Ty - TF - (Th + Tk);
        ro[0]         = T7 + Te - (Th + Tk) - Tr;
        T21           = T1X + T1Y;
        T1Z           = T1X - T1Y;
        T1Q           = T1M - T1P;
        T1U           = T1P + T1M;
        T1H           = T1E + T1D;
        T1F           = T1D - T1E;
        T1m           = T1e - T1l;
        T1y           = T1e + T1l;
        io[WS(os, 6)] = SIMD_FMADD(KP707106781, TZ + TQ, T10) - T11;
        ro[WS(os, 2)] = TG + SIMD_FMADD(KP707106781, TQ - TZ, TH);
        ro[WS(os, 6)] = SIMD_FMADD(KP707106781, T12 + T13, TG) - TH;
        io[WS(os, 2)] = T11 + SIMD_FMADD(KP707106781, T12 - T13, T10);
        T20           = SIMD_FMADD(KP765366864, T1V, T1Z);
        T22           = SIMD_FNMADD(KP765366864, T1R, T21);
        T1W           = SIMD_FNMADD(KP765366864, T1V, T1U);
        T1S           = SIMD_FMADD(KP765366864, T1R, T1Q);
        T1G           = SIMD_FMADD(KP765366864, T1B, T1F);
        T1I           = SIMD_FNMADD(KP765366864, T1t, T1H);
        T1C           = SIMD_FNMADD(KP765366864, T1B, T1y);
        T1u           = SIMD_FMADD(KP765366864, T1t, T1m);
        io[WS(os, 3)] = SIMD_FMADD(KP923879532, T20, T1T);
        ro[WS(os, 7)] = SIMD_FMADD(KP923879532, T22, T1J);
        io[WS(os, 7)] = SIMD_FMADD(KP923879532, T1W, T1T);
        ro[WS(os, 3)] = SIMD_FMADD(KP923879532, T1S, T1J);
        ro[WS(os, 1)] = SIMD_FMADD(KP923879532, T1G, T1x);
        io[WS(os, 5)] = SIMD_FMADD(KP923879532, T1I, T17);
        ro[WS(os, 5)] = SIMD_FMADD(KP923879532, T1C, T1x);
        io[WS(os, 1)] = SIMD_FMADD(KP923879532, T1u, T17);
    }
}

template <>
struct c2cb_traits<16, 9>
{
    static constexpr long_t flops           = 154;
    static constexpr long_t operations      = 126;
    static constexpr long_t memory_accesses = 46;
    static constexpr long_t stack_vars      = 120;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 9 -name c2cb
 * -standalone */

/*
 * This function contains 126 FP additions, 28 FP multiplications,
 * (or, 98 additions, 0 multiplications, 28 fused multiply/add),
 * 120 stack variables, 4 constants, and 46 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 9>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T7, TX, TR, T1L, T1J, T1D, T1F, T17, T1a, T10, TU, Tm, T1h,
            T12, Tt;
        SIMD_FLOAT T1j, TA, T11, T1q, T1x, T1S, T1v, T1e, T1P, T1k, T1w, T13,
            T19, TB, TT;
        SIMD_FLOAT T1K, T1b, T1N, T14, TV, T1E, TC, T1H, T1c, T1M, T18, T1O,
            T1G, TW, T1I;
        SIMD_FLOAT TS;
        {
            SIMD_FLOAT TD, TE, T1Q, T3, T1z, T1t, T1u, T6, T1R, T1C, T1y, TN,
                TO, Ti, Tj;
            SIMD_FLOAT T1d, TJ, T15, Tk, Tq, T1m, T1o, Tr, Tn, TQ, T16, Th, T1l,
                To, Tx;
            SIMD_FLOAT T1p, TZ, Te, Ts, Tw, T1g, Ty, T1, T2, T1r, T1s, T4, T5,
                T1A, T1B;
            SIMD_FLOAT TK, TF, TL, TI, TG, TH, T8, T9, Tb, Tc, Tf, TM, TP, Tg,
                Ta;
            SIMD_FLOAT Td, Tu, Tv, T1n, TY, Tl, T1f, Tp, Tz, T1i;
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            T1r = ii[0];
            T1s = ii[WS(is, 8)];
            T4  = ii[WS(is, 4)];
            T5  = ii[WS(is, 12)];
            T1A = ri[WS(is, 4)];
            T1B = ri[WS(is, 12)];
            TD  = ri[WS(is, 2)];
            TE  = ri[WS(is, 10)];
            TG  = ii[WS(is, 2)];
            TH  = ii[WS(is, 10)];
            TK  = ri[WS(is, 14)];
            T1Q = T1 + T2;
            T3  = T1 - T2;
            T1z = T1r - T1s;
            T1t = T1r + T1s;
            T1u = T4 + T5;
            T6  = T4 - T5;
            T1R = T1A + T1B;
            T1C = T1A - T1B;
            TF  = TD - TE;
            TL  = ri[WS(is, 6)];
            T1y = TG + TH;
            TI  = TG - TH;
            TN  = ii[WS(is, 14)];
            TO  = ii[WS(is, 6)];
            Ti  = ri[WS(is, 3)];
            Tj  = ri[WS(is, 11)];
            T8  = ii[WS(is, 11)];
            T9  = ii[WS(is, 3)];
            Tb  = ri[WS(is, 15)];
            Tc  = ri[WS(is, 7)];
            Tf  = ii[WS(is, 15)];
            TM  = TK - TL;
            T1d = TK + TL;
            TJ  = TF + TI;
            T15 = TI - TF;
            TP  = TN - TO;
            Tg  = ii[WS(is, 7)];
            Tk  = Ti - Tj;
            Tq  = ii[WS(is, 5)];
            Ta  = T8 - T9;
            T1m = T9 + T8;
            Td  = Tb - Tc;
            T1o = Tb + Tc;
            Tr  = ii[WS(is, 13)];
            Tu  = ri[WS(is, 5)];
            Tv  = ri[WS(is, 13)];
            Tn  = ri[WS(is, 1)];
            TQ  = TM - TP;
            T16 = TM + TP;
            Th  = Tf - Tg;
            T1l = Tf + Tg;
            To  = ri[WS(is, 9)];
            Tx  = ii[WS(is, 1)];
            T1p = T1o - (Ti + Tj);
            TZ  = Td + Ta;
            Te  = Ta - Td;
            Ts  = Tq - Tr;
            Tw  = Tu - Tv;
            T1g = Tu + Tv;
            Ty  = ii[WS(is, 9)];
            T7  = T3 + T6;
            TX  = T3 - T6;
            T1n = T1l - T1m;
            TY  = Th + Tk;
            Tl  = Th - Tk;
            T1f = Tn + To;
            Tp  = Tn - To;
            TR  = TJ + TQ;
            T1L = TQ - TJ;
            T1J = T1z + T1C;
            T1D = T1z - T1C;
            T1F = T15 + T16;
            T17 = T15 - T16;
            Tz  = Tx - Ty;
            T1i = Tx + Ty;
            T1a = SIMD_FMADD(KP414213562, TY, TZ);
            T10 = SIMD_FNMADD(KP414213562, TZ, TY);
            TU  = SIMD_FNMADD(KP414213562, Te, Tl);
            Tm  = SIMD_FMADD(KP414213562, Tl, Te);
            io[WS(os, 3)] =
                T1u + T1f + T1g + T1t - (Ti + Tj) - T1o - (TN + TO) - T1y;
            T1h = T1f - T1g;
            T12 = Tp - Ts;
            Tt  = Tp + Ts;
            ro[WS(os, 3)] =
                T1Q + T1m + T1l + T1R - T1i - (Tq + Tr) - T1d - (TD + TE);
            T1j = T1i - (Tq + Tr);
            TA  = Tw - Tz;
            T11 = Tz + Tw;
            T1q = T1n + T1p;
            T1x = T1n - T1p;
            T1S = T1Q - T1R;
            T1v = T1t - T1u;
            T1e = T1d - (TD + TE);
            T1P = T1y - (TN + TO);
        }
        T1k           = T1h - T1j;
        T1w           = T1j + T1h;
        T13           = SIMD_FMADD(KP414213562, T12, T11);
        T19           = SIMD_FNMADD(KP414213562, T11, T12);
        TB            = SIMD_FNMADD(KP414213562, TA, Tt);
        TT            = SIMD_FMADD(KP414213562, Tt, TA);
        io[WS(os, 5)] = SIMD_FMADD(KP707106781, T1w + T1x, T1v) - T1e;
        ro[WS(os, 1)] = SIMD_FMADD(KP707106781, T1x - T1w, T1P) + T1S;
        ro[WS(os, 5)] = SIMD_FMADD(KP707106781, T1k + T1q, T1S) - T1P;
        io[WS(os, 1)] = SIMD_FMADD(KP707106781, T1k - T1q, T1e) + T1v;
        T1K           = T19 - T1a;
        T1b           = T19 + T1a;
        T1N           = T13 + T10;
        T14           = T10 - T13;
        TV            = TT + TU;
        T1E           = TT - TU;
        TC            = Tm - TB;
        T1H           = TB + Tm;
        T1c           = SIMD_FNMADD(KP765366864, T17, T1b);
        T1M           = SIMD_FMADD(KP765366864, T1L, T1K);
        T18           = SIMD_FMADD(KP765366864, T17, T14);
        T1O           = SIMD_FNMADD(KP765366864, T1L, T1N);
        T1G           = SIMD_FMADD(KP765366864, T1F, T1E);
        TW            = SIMD_FNMADD(KP765366864, TR, TV);
        T1I           = SIMD_FNMADD(KP765366864, T1F, T1H);
        TS            = SIMD_FMADD(KP765366864, TR, TC);
        ro[WS(os, 6)] = SIMD_FMADD(KP923879532, T1c, TX);
        io[WS(os, 2)] = SIMD_FMADD(KP923879532, T1M, T1J);
        ro[WS(os, 2)] = SIMD_FMADD(KP923879532, T18, TX);
        io[WS(os, 6)] = SIMD_FMADD(KP923879532, T1O, T1J);
        io[0]         = SIMD_FMADD(KP923879532, T1G, T1D);
        ro[WS(os, 4)] = SIMD_FMADD(KP923879532, TW, T7);
        io[WS(os, 4)] = SIMD_FMADD(KP923879532, T1I, T1D);
        ro[0]         = SIMD_FMADD(KP923879532, TS, T7);
    }
}

template <>
struct c2cb_traits<16, 10>
{
    static constexpr long_t flops           = 145;
    static constexpr long_t operations      = 120;
    static constexpr long_t memory_accesses = 44;
    static constexpr long_t stack_vars      = 111;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 10 -name c2cb
 * -standalone */

/*
 * This function contains 120 FP additions, 25 FP multiplications,
 * (or, 95 additions, 0 multiplications, 25 fused multiply/add),
 * 111 stack variables, 5 constants, and 44 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 10>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1a, T1b, T1f, T3, TO, T15, T6, T1g, T1y, T1H, Tw, Td, Ta,
            Tx, T1x;
        SIMD_FLOAT TW, TZ, T18, T11, T1v, T1z, T1h, T1r, T1k, T1e, T1p, T7, T1G,
            T10, Tv;
        SIMD_FLOAT T1l, TR, Ts, Tl, TG, TF, T1I, TD, TK, TN, TC, TE, Ti, Tj,
            T1d;
        SIMD_FLOAT Th, Tt, T1j, Te, T1i, Tk, TQ, Tr, Tu, To, TP, T1m, T12, Ty,
            T1E;
        SIMD_FLOAT T1n, T1s, T1D, T13, TH, Tz, T1F, T1t, T1w, T1o, T1B, T14,
            T1u, T1A, T1q;
        SIMD_FLOAT T1C;
        {
            SIMD_FLOAT T1, T2, TI, TJ, T4, T5, TL, TM, T19, T1c, TT, TU, TA, TB,
                Tb;
            SIMD_FLOAT Tc, T8, T9, Tf, Tg, TS, TV, TY, T16, TX, T17, Tp, Tq, Tm,
                Tn;
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            TI  = ii[0];
            TJ  = ii[WS(is, 8)];
            T4  = ri[WS(is, 4)];
            T5  = ri[WS(is, 12)];
            TL  = ii[WS(is, 4)];
            TM  = ii[WS(is, 12)];
            TA  = ii[WS(is, 2)];
            TB  = ii[WS(is, 10)];
            T1a = ri[WS(is, 10)];
            T1b = ri[WS(is, 2)];
            TD  = ii[WS(is, 14)];
            T1f = T1 - T2;
            T3  = T1 + T2;
            TO  = TI - TJ;
            TK  = TI + TJ;
            T15 = T4 - T5;
            T6  = T4 + T5;
            T1g = TL - TM;
            TN  = TL + TM;
            TC  = TA + TB;
            T19 = TA - TB;
            T1c = T1a - T1b;
            TE  = ii[WS(is, 6)];
            TT  = ri[WS(is, 14)];
            TU  = ri[WS(is, 6)];
            Ti  = ri[WS(is, 3)];
            Tj  = ri[WS(is, 11)];
            Tb  = ii[WS(is, 3)];
            Tc  = ii[WS(is, 11)];
            T8  = ii[WS(is, 15)];
            T9  = ii[WS(is, 7)];
            Tf  = ri[WS(is, 15)];
            Tg  = ri[WS(is, 7)];
            T1d = T19 + T1c;
            T1y = T1c - T19;
            TS  = TE - TD;
            TV  = TT - TU;
            T1H = TT + TU;
            TY  = Ti - Tj;
            Tw  = ii[WS(is, 5)];
            Td  = Tb + Tc;
            T16 = Tb - Tc;
            Ta  = T8 + T9;
            TX  = T8 - T9;
            Th  = Tf + Tg;
            T17 = Tf - Tg;
            Tx  = ii[WS(is, 13)];
            Tp  = ri[WS(is, 5)];
            Tq  = ri[WS(is, 13)];
            T1x = TS + TV;
            TW  = TS - TV;
            Tm  = ri[WS(is, 1)];
            Tn  = ri[WS(is, 9)];
            Tt  = ii[WS(is, 1)];
            TZ  = TX - TY;
            T1j = TX + TY;
            Te  = Ta - Td;
            T1i = T17 - T16;
            T18 = T16 + T17;
            Tk  = Th - (Ti + Tj);
            TQ  = Tw - Tx;
            T11 = Tp - Tq;
            Tr  = Tp + Tq;
            Tu  = ii[WS(is, 9)];
            To  = Tm + Tn;
            TP  = Tm - Tn;
        }
        T1v           = T15 + TO;
        T1z           = T1x + T1y;
        T1h           = T1f - T1g;
        T1r           = SIMD_FNMADD(KP414213562, T1i, T1j);
        T1k           = SIMD_FMADD(KP414213562, T1j, T1i);
        T1e           = SIMD_FMADD(KP765366864, T1d, T18);
        T1p           = TW + T1d;
        T7            = T3 - T6;
        T1G           = TK - TN;
        T10           = Tt - Tu;
        Tv            = Tt + Tu;
        T1l           = TP - TQ;
        TR            = TP + TQ;
        io[WS(os, 2)] = To + Tr + TK + TN - (TD + TE) - TC - (Ti + Tj) - Th;
        Ts            = To - Tr;
        Tl            = Te + Tk;
        TG            = Te - Tk;
        TF            = TC - (TD + TE);
        T1I           = T1H - (T1a + T1b);
        T1m           = T11 + T10;
        T12           = T10 - T11;
        ro[WS(os, 2)] = T3 + T6 + Ta + Td - (T1a + T1b) - T1H - (Tw + Tx) - Tv;
        Ty            = Tv - (Tw + Tx);
        T1E           = T18 + TR;
        T1n           = SIMD_FNMADD(KP414213562, T1m, T1l);
        T1s           = SIMD_FMADD(KP414213562, T1l, T1m);
        T1D           = TZ - (SIMD_FMADD(KP765366864, T1x, T12));
        T13           = TZ + T12;
        TH            = Ts + Ty;
        Tz            = Ts - Ty;
        T1F           = SIMD_FMADD(KP541196100, T1E, T1y);
        T1t           = T1r - T1s;
        T1w           = T1r + T1s;
        T1o           = T1k + T1n;
        T1B           = T1n - T1k;
        T14           = SIMD_FMADD(KP541196100, T13, TW);
        io[0]         = SIMD_FMADD(KP707106781, Tz - Tl, T1G) + T1I;
        ro[WS(os, 4)] = SIMD_FMADD(KP707106781, Tl + Tz, T7) - TF;
        ro[0]         = SIMD_FMADD(KP707106781, TG - TH, T7) + TF;
        io[WS(os, 4)] = SIMD_FMADD(KP707106781, TG + TH, T1G) - T1I;
        ro[WS(os, 3)] =
            T1f +
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T1F, T1D), T1g);
        T1u = SIMD_FMADD(KP765366864, T1p, T1t);
        T1A = SIMD_FNMADD(KP765366864, T1z, T1w);
        T1q = SIMD_FNMADD(KP765366864, T1p, T1o);
        T1C = SIMD_FMADD(KP765366864, T1z, T1B);
        io[WS(os, 3)] =
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T14, TR), TO) -
            (SIMD_FMADD(KP923879532, T1e, T15));
        ro[WS(os, 1)] = SIMD_FMADD(KP923879532, T1u, T1h);
        io[WS(os, 5)] = SIMD_FMADD(KP923879532, T1A, T1v);
        ro[WS(os, 5)] = SIMD_FMADD(KP923879532, T1q, T1h);
        io[WS(os, 1)] = SIMD_FMADD(KP923879532, T1C, T1v);
    }
}

template <>
struct c2cb_traits<16, 11>
{
    static constexpr long_t flops           = 136;
    static constexpr long_t operations      = 112;
    static constexpr long_t memory_accesses = 42;
    static constexpr long_t stack_vars      = 101;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 11 -name c2cb
 * -standalone */

/*
 * This function contains 112 FP additions, 24 FP multiplications,
 * (or, 88 additions, 0 multiplications, 24 fused multiply/add),
 * 101 stack variables, 5 constants, and 42 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 11>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT To, Tp, T1x, T3, T1k, T1b, T16, T6, T1y, T1p, T1d, Tw, Tx,
            TA, TB;
        SIMD_FLOAT TY, Tr, T1j, T1g, T1c, T1h, Tz, Td, TG, Tg, T17, TJ, T1r, Tj,
            T18;
        SIMD_FLOAT TM, T1t, TQ, T12, TT, T1q, T10, T1f, TZ, Th, Ti, TK, TL, TS,
            TR;
        SIMD_FLOAT T1e, T1i, TV, Tk, TU, TN, T1l, Ts, T13, TW, TO, T1m, T14,
            T1v, TX;
        SIMD_FLOAT T1s, TP, T15, T1w, T11, T1u;
        {
            SIMD_FLOAT T1, T2, T19, T1a, T4, T5, T1n, T1o, Tt, Tn, Tq, Tu, Tl,
                Tm, Ta;
            SIMD_FLOAT Tb, TD, TE, Tv, Ty, T9, TC, T7, T8, Te, Tc, TF, Tf, TH,
                TI;
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            T19 = ii[0];
            T1a = ii[WS(is, 8)];
            T4  = ii[WS(is, 4)];
            T5  = ii[WS(is, 12)];
            T1n = ri[WS(is, 4)];
            T1o = ri[WS(is, 12)];
            Tl  = ii[WS(is, 6)];
            Tm  = ii[WS(is, 14)];
            To  = ri[WS(is, 14)];
            Tp  = ri[WS(is, 6)];
            Tt  = ri[WS(is, 10)];
            T1x = T1 + T2;
            T3  = T1 - T2;
            T1k = T19 - T1a;
            T1b = T19 + T1a;
            T16 = T4 + T5;
            T6  = T4 - T5;
            T1y = T1n + T1o;
            T1p = T1n - T1o;
            T1d = Tl + Tm;
            Tn  = Tl - Tm;
            Tq  = To - Tp;
            Tu  = ri[WS(is, 2)];
            Tw  = ii[WS(is, 2)];
            Tx  = ii[WS(is, 10)];
            T7  = ii[WS(is, 15)];
            T8  = ii[WS(is, 7)];
            TA  = ri[WS(is, 15)];
            TB  = ri[WS(is, 7)];
            Ta  = ri[WS(is, 3)];
            Tb  = ri[WS(is, 11)];
            TD  = ii[WS(is, 3)];
            TE  = ii[WS(is, 11)];
            TY  = Tn - Tq;
            Tr  = Tn + Tq;
            T1j = Tt + Tu;
            Tv  = Tt - Tu;
            Ty  = Tw - Tx;
            T1g = T7 + T8;
            T9  = T7 - T8;
            TC  = TA - TB;
            Te  = ii[WS(is, 1)];
            Tc  = Ta - Tb;
            T1c = Ta + Tb;
            TF  = TD - TE;
            T1h = TD + TE;
            Tf  = ii[WS(is, 9)];
            TH  = ri[WS(is, 1)];
            TI  = ri[WS(is, 9)];
            TZ  = Tv + Ty;
            Tz  = Tv - Ty;
            Th  = ri[WS(is, 5)];
            Ti  = ri[WS(is, 13)];
            TK  = ii[WS(is, 5)];
            TL  = ii[WS(is, 13)];
            TS  = T9 + Tc;
            Td  = T9 - Tc;
            TR  = TC - TF;
            TG  = TC + TF;
            Tg  = Te - Tf;
            T1e = Te + Tf;
            T17 = TH + TI;
            TJ  = TH - TI;
        }
        T1r = T1k + T1p;
        Tj  = Th - Ti;
        T18 = Th + Ti;
        TM  = TK - TL;
        T1t = Tr + Tz;
        TQ  = T3 - T6;
        T12 = SIMD_FNMADD(KP414213562, TR, TS);
        TT  = SIMD_FMADD(KP414213562, TS, TR);
        T1q = SIMD_FMADD(KP765366864, TZ, TG);
        T10 = TY + TZ;
        ro[WS(os, 1)] =
            T1x + T1g + T1h + T1y - T1j - (To + Tp) - T1e - (TK + TL);
        T1f = T1c + T1e - (TK + TL) - (TA + TB);
        T1i = T1g + T17 - (T1h + T18);
        io[WS(os, 1)] =
            T16 + T17 + T18 + T1b - (Tw + Tx) - (T1c + T1d) - (TA + TB);
        TV            = Tg + Tj;
        Tk            = Tg - Tj;
        TU            = TJ - TM;
        TN            = TJ + TM;
        ro[WS(os, 3)] = SIMD_FMADD(KP707106781, T1i, T1x) + T1d -
                        (SIMD_FMADD(KP707106781, T1f, T1y)) - (Tw + Tx);
        io[WS(os, 3)] =
            SIMD_FMADD(KP707106781, T1f + T1i, T1j) + T1b - (To + Tp) - T16;
        T1l = Td + Tk;
        Ts  = Td - (SIMD_FMADD(KP765366864, Tr, Tk));
        T13 = SIMD_FMADD(KP414213562, TU, TV);
        TW  = SIMD_FNMADD(KP414213562, TV, TU);
        TO  = TG + TN;
        T1m = SIMD_FMADD(KP541196100, T1l, TY);
        T14 = T12 - T13;
        T1v = T12 + T13;
        TX  = TT + TW;
        T1s = TW - TT;
        TP  = SIMD_FMADD(KP541196100, TO, Tz);
        io[WS(os, 2)] =
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T1m, TN), T1k) -
            (SIMD_FMADD(KP923879532, T1q, T1p));
        T15 = SIMD_FMADD(KP765366864, T10, T14);
        T1w = SIMD_FNMADD(KP765366864, T1t, T1v);
        T11 = SIMD_FNMADD(KP765366864, T10, TX);
        T1u = SIMD_FMADD(KP765366864, T1t, T1s);
        ro[WS(os, 2)] =
            T3 + SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TP, Ts), T6);
        ro[0]         = SIMD_FMADD(KP923879532, T15, TQ);
        io[WS(os, 4)] = SIMD_FMADD(KP923879532, T1w, T1r);
        ro[WS(os, 4)] = SIMD_FMADD(KP923879532, T11, TQ);
        io[0]         = SIMD_FMADD(KP923879532, T1u, T1r);
    }
}

template <>
struct c2cb_traits<16, 12>
{
    static constexpr long_t flops           = 124;
    static constexpr long_t operations      = 106;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 12 -name c2cb
 * -standalone */

/*
 * This function contains 106 FP additions, 18 FP multiplications,
 * (or, 88 additions, 0 multiplications, 18 fused multiply/add),
 * 92 stack variables, 4 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 12>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    {
        SIMD_FLOAT Tz, TA, Tl, TL, T3, T18, Tp, T1c, T6, TM, Ts, T9, Tm, Tj, Tk;
        SIMD_FLOAT TH, TI, TP, T1j, TD, Ty, Tf, Ta, TZ, T1d, Tb, TE, TS, T1k,
            TF;
        SIMD_FLOAT T19, TV, T10, Ti, T11, Tv, T1, T2, Tn, To, T4, T5, Tq, Tr,
            T7;
        SIMD_FLOAT T8, TN, TO, TB, TC, Tw, Tx, Td, Te, TY, TX, TQ, Tg, TR, TT;
        SIMD_FLOAT TU, Th, Tt, Tu, T13, T1l, T1n, TG, T14, T1o, TW, T1i, T1f,
            T12, TJ;
        SIMD_FLOAT T1b, Tc, T1a, TK, T15, T1g, T1m, T1e, T16, T1p, T1h, T17,
            T1q;
        T1    = ri[0];
        T2    = ri[WS(is, 8)];
        Tn    = ii[0];
        To    = ii[WS(is, 8)];
        T4    = ri[WS(is, 4)];
        T5    = ri[WS(is, 12)];
        Tq    = ii[WS(is, 4)];
        Tr    = ii[WS(is, 12)];
        T7    = ii[WS(is, 15)];
        T8    = ii[WS(is, 7)];
        Tz    = ri[WS(is, 3)];
        TA    = ri[WS(is, 11)];
        Tl    = ri[WS(is, 14)];
        TL    = T1 - T2;
        T3    = T1 + T2;
        T18   = Tn - To;
        Tp    = Tn + To;
        T1c   = T4 - T5;
        T6    = T4 + T5;
        TM    = Tq - Tr;
        Ts    = Tq + Tr;
        T9    = T7 + T8;
        TN    = T7 - T8;
        TO    = Tz - TA;
        Tm    = ri[WS(is, 6)];
        TB    = ii[WS(is, 14)];
        TC    = ii[WS(is, 6)];
        Tj    = ii[WS(is, 1)];
        Tk    = ii[WS(is, 9)];
        Tw    = ri[WS(is, 5)];
        Tx    = ri[WS(is, 13)];
        Td    = ri[WS(is, 2)];
        Te    = ri[WS(is, 10)];
        TH    = ii[WS(is, 2)];
        TI    = ii[WS(is, 10)];
        TP    = TN - TO;
        T1j   = TN + TO;
        TY    = Tl - Tm;
        TX    = TB - TC;
        TD    = TB + TC;
        TQ    = Tj - Tk;
        Tg    = ii[WS(is, 5)];
        TR    = Tw - Tx;
        Ty    = Tw + Tx;
        TT    = Td - Te;
        Tf    = Td + Te;
        TU    = TH - TI;
        Th    = ii[WS(is, 13)];
        Tt    = ri[WS(is, 1)];
        Tu    = ri[WS(is, 9)];
        Ta    = ii[WS(is, 3)];
        TZ    = TX - TY;
        T1d   = TY + TX;
        Tb    = ii[WS(is, 11)];
        TE    = ri[WS(is, 15)];
        TS    = TQ - TR;
        T1k   = TQ + TR;
        TF    = ri[WS(is, 7)];
        T19   = TT - TU;
        TV    = TT + TU;
        T10   = Tg - Th;
        Ti    = Tg + Th;
        T11   = Tt - Tu;
        Tv    = Tt + Tu;
        T13   = Ta - Tb;
        Tc    = Ta + Tb;
        T1a   = TS + TP;
        T1l   = T1j - T1k;
        T1n   = T1k + T1j;
        TG    = TE + TF;
        T14   = TE - TF;
        T1o   = TV + TZ;
        TW    = TP - (SIMD_FMADD(KP765366864, TV, TS));
        T1i   = T19 + T1d;
        T1f   = T11 - T10;
        T12   = T10 + T11;
        TJ    = T9 + Tv - (Tc + Ty);
        ro[0] = T3 + T6 + T9 + Tc - (Tf + Ti) - (Tj + Tk) - (Tl + Tm);
        T1b   = SIMD_FMADD(KP541196100, T1a, T19);
        TK    = Ti + TG - (Tz + TA) - (Tj + Tk);
        io[0] = Tp + Ts + Tv + Ty - (Tz + TA) - (TD + TG) - (TH + TI);
        T15   = T13 + T14;
        T1g   = T14 - T13;
        T1m   = SIMD_FMADD(KP541196100, T1l, T1i);
        ro[WS(os, 2)] =
            T3 + SIMD_FMADD(KP707106781, TJ + TK, TD) - (TH + TI) - T6;
        io[WS(os, 2)] = Tf + SIMD_FMADD(KP707106781, TJ, Tp) -
                        (SIMD_FMADD(KP707106781, TK, Ts)) - (Tl + Tm);
        T1e = SIMD_FMADD(KP765366864, T1d, T15);
        T16 = T12 + T15;
        T1p = T1f - T1g;
        T1h = T1f + T1g;
        io[WS(os, 1)] =
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T1b, T12), T18) -
            (SIMD_FMADD(KP923879532, T1e, T1c));
        T17 = SIMD_FMADD(KP541196100, T16, TZ);
        ro[WS(os, 3)] =
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T1m, T1h), TL) - TM;
        T1q = SIMD_FMADD(KP541196100, T1p, T1o);
        ro[WS(os, 1)] =
            TL + SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T17, TW), TM);
        io[WS(os, 3)] =
            T1c +
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T1q, T1n), T18);
    }
}

template <>
struct c2cb_traits<16, 13>
{
    static constexpr long_t flops           = 106;
    static constexpr long_t operations      = 88;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 80;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 13 -name c2cb
 * -standalone */

/*
 * This function contains 88 FP additions, 18 FP multiplications,
 * (or, 70 additions, 0 multiplications, 18 fused multiply/add),
 * 80 stack variables, 4 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 13>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    {
        SIMD_FLOAT T1, T2, T12, T13, TO, TP, T17, T18, Tq, Tr, Tt, Tu, Tj, T3,
            Tk;
        SIMD_FLOAT T14, Tm, TQ, Tn, T19, T4, T5, Ty, Tz, T7, T8, TB, TC, Tb, Tc;
        SIMD_FLOAT T6, TT, Tw, TA, TF, TG, T9, Te, Tp, TV, TD, Td, Tf, TI, TJ;
        SIMD_FLOAT Ts, Tv, Tl, To, TH, Ta, TW, T1c, Tx, TE, TR, T11, Tg, T10,
            TK;
        SIMD_FLOAT T1a, Th, TX, TL, TS, Ti, T1d, TY, T1b, TM, T15, TU, T1e, TZ,
            TN;
        SIMD_FLOAT T16;
        T1            = ri[0];
        T2            = ri[WS(is, 8)];
        T12           = ii[0];
        T13           = ii[WS(is, 8)];
        TO            = ii[WS(is, 4)];
        TP            = ii[WS(is, 12)];
        T17           = ri[WS(is, 4)];
        T18           = ri[WS(is, 12)];
        Tq            = ri[WS(is, 2)];
        Tr            = ri[WS(is, 10)];
        Tt            = ii[WS(is, 2)];
        Tu            = ii[WS(is, 10)];
        Tj            = ii[WS(is, 14)];
        T3            = T1 - T2;
        Tk            = ii[WS(is, 6)];
        T14           = T12 - T13;
        Tm            = ri[WS(is, 14)];
        TQ            = TO - TP;
        Tn            = ri[WS(is, 6)];
        T19           = T17 - T18;
        T4            = ri[WS(is, 15)];
        Ts            = Tq - Tr;
        T5            = ri[WS(is, 7)];
        Tv            = Tt - Tu;
        Ty            = ii[WS(is, 15)];
        Tz            = ii[WS(is, 7)];
        Tl            = Tj - Tk;
        T7            = ii[WS(is, 3)];
        T8            = ii[WS(is, 11)];
        TB            = ri[WS(is, 3)];
        To            = Tm - Tn;
        TC            = ri[WS(is, 11)];
        Tb            = ri[WS(is, 1)];
        Tc            = ri[WS(is, 9)];
        T6            = T4 - T5;
        TT            = Ts + Tv;
        Tw            = Ts - Tv;
        TA            = Ty - Tz;
        TF            = ii[WS(is, 1)];
        TG            = ii[WS(is, 9)];
        T9            = T7 - T8;
        Te            = ii[WS(is, 5)];
        Tp            = Tl + To;
        TV            = Tl - To;
        TD            = TB - TC;
        Td            = Tb - Tc;
        Tf            = ii[WS(is, 13)];
        TI            = ri[WS(is, 5)];
        TJ            = ri[WS(is, 13)];
        TH            = TF - TG;
        Ta            = T6 - T9;
        TW            = T6 + T9;
        T1c           = TV + TT;
        Tx            = Tp + Tw;
        TE            = TA + TD;
        TR            = TA - TD;
        T11           = TB + TF - Tf - (T4 + Te - TG - TC) - T5;
        Tg            = Te - Tf;
        T10           = Ty + Tb - (T7 + TI - Tc - Tz) - TJ - T8;
        TK            = TI - TJ;
        T1a           = SIMD_FMADD(KP765366864, Tp, TW);
        Th            = Td - Tg;
        TX            = Td + Tg;
        ro[WS(os, 1)] = T1 + T2 + Tj + SIMD_FMADD(KP707106781, T10, Tk) - T18 -
                        (SIMD_FMADD(KP707106781, T11, T17)) - Tu - Tt;
        io[WS(os, 1)] = Tq + SIMD_FMADD(KP707106781, T10 + T11, Tr) + T12 +
                        T13 - Tn - Tm - TP - TO;
        TL  = TH + TK;
        TS  = TH - TK;
        Ti  = Ta + Th;
        T1d = Th - Ta;
        TY  = TW + TX;
        T1b = TE + TL;
        TM  = TE - TL;
        T15 = TR + TS;
        TU  = TR - (SIMD_FMADD(KP765366864, TT, TS));
        T1e = SIMD_FMADD(KP541196100, T1d, T1c);
        TZ  = SIMD_FMADD(KP541196100, TY, TV);
        TN  = SIMD_FMADD(KP541196100, TM, Tx);
        T16 = SIMD_FMADD(KP541196100, T15, Tw);
        io[WS(os, 2)] =
            T14 +
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T1e, T1b), T19);
        ro[0] =
            T3 + SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TZ, TU), TQ);
        ro[WS(os, 2)] =
            SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TN, Ti), T3) - TQ;
        io[0] = SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, T16, TX), T14) -
                (SIMD_FMADD(KP923879532, T1a, T19));
    }
}

template <>
struct c2cb_traits<16, 14>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 68;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 51;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 14 -name c2cb
 * -standalone */

/*
 * This function contains 68 FP additions, 10 FP multiplications,
 * (or, 58 additions, 0 multiplications, 10 fused multiply/add),
 * 51 stack variables, 4 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 14>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    {
        SIMD_FLOAT T1, Tr, T2, Ts, Tn, Ty, Tw, Tq, T3, Tu, T4, Tt, To, Tx, Tp;
        SIMD_FLOAT Tv, T5, Tj, Tb, Te, T8, Tl, Tc, TC, Tg, T6, Tk, TH, Ta, Th;
        SIMD_FLOAT T7, TD, Ti, T9, Tf, Tz, TJ, TE, Td, Tm, TA, TI, TF, TB, TK;
        SIMD_FLOAT TG, TL;
        T1    = ri[0];
        Tr    = ii[0];
        T2    = ri[WS(is, 8)];
        Ts    = ii[WS(is, 8)];
        Tn    = ri[WS(is, 4)];
        Ty    = ii[WS(is, 4)];
        Tw    = ii[WS(is, 12)];
        Tq    = ri[WS(is, 12)];
        T3    = ii[WS(is, 14)];
        Tu    = ri[WS(is, 10)];
        T4    = ii[WS(is, 6)];
        Tt    = ri[WS(is, 2)];
        To    = ii[WS(is, 10)];
        Tx    = ri[WS(is, 14)];
        Tp    = ii[WS(is, 2)];
        Tv    = ri[WS(is, 6)];
        T5    = ii[WS(is, 13)];
        Tj    = ri[WS(is, 9)];
        Tb    = ii[WS(is, 5)];
        Te    = ri[WS(is, 1)];
        T8    = ii[WS(is, 1)];
        Tl    = ri[WS(is, 13)];
        Tc    = ii[WS(is, 9)];
        TC    = T3 + Tt - (T4 + Tu);
        Tg    = ri[WS(is, 5)];
        T6    = ri[WS(is, 15)];
        Tk    = ii[WS(is, 3)];
        TH    = To + Tx - Tv - Tp;
        Ta    = ri[WS(is, 7)];
        Th    = ii[WS(is, 11)];
        T7    = ri[WS(is, 11)];
        TD    = Te + T5 - Tb - Tj;
        Ti    = ii[WS(is, 7)];
        T9    = ri[WS(is, 3)];
        Tf    = ii[WS(is, 15)];
        Tz    = Tg + T8 - Tc - Tl;
        TJ    = TC + TH;
        TE    = T6 + Th - Tk - Ta;
        Td    = T5 + T6 - T7 - (T8 + T9 - Ta - Tb) - Tc;
        Tm    = Te + Tf - (Tg + Th - Ti - Tj) - Tk - Tl;
        TA    = T9 + Tf - Ti - T7;
        TI    = TD + TE;
        TF    = TD - TE;
        io[0] = SIMD_FMADD(KP707106781, Tm, Tr) + Ts + Tt + Tu - Tv -
                (SIMD_FMADD(KP707106781, Td, Tw) + Tx) - Ty;
        ro[0] = T1 + T2 + T3 + SIMD_FMADD(KP707106781, Td + Tm, T4) -
                (Tn + To) - Tp - Tq;
        TB = Tz + TA;
        TK = TA - Tz;
        TG = SIMD_FMADD(KP541196100, TF, TC);
        TL = SIMD_FMADD(KP541196100, TK, TJ);
        io[WS(os, 1)] =
            Tn + SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TG, TB), Tr) -
            Tq - (SIMD_FMADD(KP707106781, TH, Ts));
        ro[WS(os, 1)] =
            T1 + SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TL, TI), Tw) -
            T2 - Ty;
    }
}

template <>
struct c2cb_traits<16, 15>
{
    static constexpr long_t flops           = 43;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 49;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -skip-k 15 -name c2cb
 * -standalone */

/*
 * This function contains 36 FP additions, 7 FP multiplications,
 * (or, 29 additions, 0 multiplications, 7 fused multiply/add),
 * 49 stack variables, 4 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 15>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    {
        SIMD_FLOAT T1, TD, T2, TJ, TB, TI, TC, TE, Tu, Tx, Tv, Ti, Tw, T3, T6;
        SIMD_FLOAT Tn, T4, T5, T8, Tt, Tb, T9, Ta, Te, Th, Tf, Tg, Tj, Tm, Tk;
        SIMD_FLOAT Tl, Tp, Ts, Tq, Tr, Ty, To, T7, Tc, TF, Tz, Td, TG, TA, TH;
        T1    = ri[0];
        TD    = ii[0];
        T2    = ii[WS(is, 12)];
        TJ    = ri[WS(is, 12)];
        TB    = ri[WS(is, 8)];
        TI    = ii[WS(is, 8)];
        TC    = ii[WS(is, 4)];
        TE    = ri[WS(is, 4)];
        Te    = ii[WS(is, 10)];
        Th    = ri[WS(is, 6)];
        Tf    = ri[WS(is, 14)];
        Tg    = ii[WS(is, 2)];
        Tj    = ri[WS(is, 2)];
        Tm    = ii[WS(is, 6)];
        Tk    = ii[WS(is, 14)];
        Tl    = ri[WS(is, 10)];
        Tp    = ii[WS(is, 15)];
        Ts    = ri[WS(is, 11)];
        Tq    = ri[WS(is, 3)];
        Tr    = ii[WS(is, 7)];
        Tu    = ii[WS(is, 1)];
        Tx    = ri[WS(is, 13)];
        Tv    = ri[WS(is, 5)];
        Ti    = Te + Tf - (Tg + Th);
        Tw    = ii[WS(is, 9)];
        T3    = ri[WS(is, 1)];
        T6    = ii[WS(is, 5)];
        Tn    = Tj + Tk - (Tl + Tm);
        T4    = ii[WS(is, 13)];
        T5    = ri[WS(is, 9)];
        T8    = ri[WS(is, 15)];
        Tt    = Tp + Tq - (Tr + Ts);
        Tb    = ii[WS(is, 3)];
        T9    = ii[WS(is, 11)];
        Ta    = ri[WS(is, 7)];
        Ty    = Tu + Tv - (Tw + Tx);
        To    = Ti + Tn;
        T7    = T3 + T4 - (T5 + T6);
        Tc    = T8 + T9 - (Ta + Tb);
        TF    = Ty + Tt;
        Tz    = Tt - Ty;
        Td    = T7 + Tc;
        TG    = T7 - Tc;
        TA    = SIMD_FMADD(KP541196100, Tz, To);
        TH    = SIMD_FMADD(KP541196100, TG, Tn);
        ro[0] = T1 +
                SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TA, Td), T2) -
                (TB + TC);
        io[0] = TD +
                SIMD_FMADD(KP923879532, SIMD_FMADD(KP765366864, TH, TF), TE) -
                (SIMD_FMADD(KP707106781, Ti, TI) + TJ);
    }
}

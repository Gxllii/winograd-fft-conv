//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<15, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 9;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 9 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1            = R0[0];
        Cr[WS(cs, 3)] = T1;
        Cr[WS(cs, 5)] = T1;
        Cr[WS(cs, 4)] = T1;
        Cr[WS(cs, 2)] = T1;
        Cr[WS(cs, 1)] = T1;
        Cr[WS(cs, 7)] = T1;
        Cr[WS(cs, 6)] = T1;
        Cr[0]         = T1;
    }
}

template <>
struct r2cf_traits<15, 2>
{
    static constexpr long_t flops           = 22;
    static constexpr long_t operations      = 15;
    static constexpr long_t memory_accesses = 17;
    static constexpr long_t stack_vars      = 16;
    static constexpr long_t constants       = 14;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 8 FP additions, 14 FP multiplications,
 * (or, 1 additions, 7 multiplications, 7 fused multiply/add),
 * 16 stack variables, 14 constants, and 17 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP669130606, +0.669130606358858213826273330686780473599583219);
    DK(KP978147600, +0.978147600733805637928566747869599532459737809);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP913545457, +0.913545457642600895502127571985317177940810459);
    DK(KP104528463, +0.104528463267653471399834154802498119080655869);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP207911690, +0.207911690817759337101742284405125166216584761);
    DK(KP994521895, +0.994521895368273336922691944980570381520792089);
    DK(KP743144825, +0.743144825477394235014697048974256977189113873);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP406736643, +0.406736643075800207753985990341497612923139651);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    {
        SIMD_FLOAT T1, T2;
        T1            = R0[WS(rs, 1)];
        T2            = R0[0];
        Ci[WS(cs, 6)] = -(KP587785252 * T1);
        Ci[WS(cs, 1)] = -(KP406736643 * T1);
        Ci[WS(cs, 3)] = -(KP951056516 * T1);
        Ci[WS(cs, 5)] = -(KP866025403 * T1);
        Ci[WS(cs, 2)] = -(KP743144825 * T1);
        Ci[WS(cs, 4)] = -(KP994521895 * T1);
        Ci[WS(cs, 7)] = -(KP207911690 * T1);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP309016994, T1, T2);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP104528463, T1, T2);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP913545457, T1, T2);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP809016994, T1, T2);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP500000000, T1, T2);
        Cr[0]         = T2 + T1;
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP978147600, T1, T2);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP669130606, T1, T2);
    }
}

template <>
struct r2cf_traits<15, 3>
{
    static constexpr long_t flops           = 52;
    static constexpr long_t operations      = 31;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 27;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 24 FP additions, 28 FP multiplications,
 * (or, 3 additions, 7 multiplications, 21 fused multiply/add),
 * 27 stack variables, 12 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP279508497, +0.279508497187473712051146708591409529430077295);
    DK(KP982246946, +0.982246946376846022815670275235202826693934316);
    DK(KP484122918, +0.484122918275927110647408174972799951354115213);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP447213595, +0.447213595499957939281834733746255247088123672);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP125000000, +0.125000000000000000000000000000000000000000000);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T6, T1, T2, T5, Ta, Tc, T4, T3, T7, T8, Td, Te, Tf, Tb, T9;
        T6            = R0[0];
        T1            = R0[WS(rs, 2)];
        T2            = R0[WS(rs, 1)];
        T5            = SIMD_FMADD(KP618033988, T1, T2);
        Ta            = SIMD_FMADD(KP618033988, T2, T1);
        Tc            = SIMD_FNMADD(KP618033988, T1, T2);
        T4            = T1 - T2;
        T3            = SIMD_FMSUB(KP618033988, T2, T1);
        T7            = T1 + T2;
        Ci[WS(cs, 3)] = -(KP951056516 * T5);
        Ci[WS(cs, 5)] = KP866025403 * T4;
        Ci[WS(cs, 6)] = -(KP951056516 * T3);
        T8            = SIMD_FMADD(KP125000000, T7, T6);
        Td            = SIMD_FNMADD(KP250000000, T7, T6);
        Te            = SIMD_FNMADD(KP447213595, T4, T7);
        Tf            = SIMD_FMADD(KP447213595, T4, T7);
        Cr[0]         = T6 + T7;
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP500000000, T7, T6);
        Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, T4, Td);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, T4, Td);
        Ci[WS(cs, 4)] = -(KP484122918 * (SIMD_FMADD(KP982246946, T3, Te)));
        Ci[WS(cs, 1)] = -(KP484122918 * (SIMD_FNMADD(KP982246946, T3, Te)));
        Ci[WS(cs, 7)] = KP484122918 * (SIMD_FNMADD(KP982246946, T5, Tf));
        Ci[WS(cs, 2)] = -(KP484122918 * (SIMD_FMADD(KP982246946, T5, Tf)));
        Tb            = SIMD_FMADD(KP279508497, T4, T8);
        T9            = SIMD_FNMADD(KP279508497, T4, T8);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, Ta, T9);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, Ta, T9);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, Tc, Tb);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, Tc, Tb);
    }
}

template <>
struct r2cf_traits<15, 4>
{
    static constexpr long_t flops           = 67;
    static constexpr long_t operations      = 41;
    static constexpr long_t memory_accesses = 19;
    static constexpr long_t stack_vars      = 36;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 34 FP additions, 33 FP multiplications,
 * (or, 8 additions, 7 multiplications, 26 fused multiply/add),
 * 36 stack variables, 12 constants, and 19 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP509036960, +0.509036960455127183450980863393907648510733164);
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP447213595, +0.447213595499957939281834733746255247088123672);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T5, T2, T3, T4, Tl, T7, Te, Tb, Tg, Td, Th, Tf, Tj, Ti;
        SIMD_FLOAT Tk, To, Tm, T9, T6, Tn, T8, Tc, Ta;
        T1            = R0[0];
        T5            = R0[WS(rs, 1)];
        T2            = R0[WS(rs, 3)];
        T3            = R0[WS(rs, 2)];
        T4            = SIMD_FNMADD(KP500000000, T3, T2);
        Tl            = T2 + T3;
        T7            = T2 - T3;
        Te            = SIMD_FMADD(KP500000000, T3, T2);
        Tb            = SIMD_FMADD(KP618033988, T5, T3);
        Tg            = T3 + T5;
        Td            = SIMD_FNMADD(KP618033988, T3, T5);
        Th            = T3 - T5;
        Tf            = SIMD_FNMADD(KP309016994, T5, Te);
        Tj            = SIMD_FMADD(KP809016994, T5, Te);
        Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMSUB(KP618033988, T7, T5));
        Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FMADD(KP618033988, T5, T7)));
        Ti            = SIMD_FNMADD(KP447213595, Th, Tg);
        Tk            = SIMD_FMADD(KP447213595, Th, Tg);
        Ci[WS(cs, 5)] = KP866025403 * Th;
        To            = Tl - T5;
        Tm            = Tl + T5;
        T9            = SIMD_FMADD(KP500000000, T5, T4);
        T6            = SIMD_FNMADD(KP500000000, T5, T4);
        Ci[WS(cs, 7)] = -(KP587785252 * (SIMD_FNMADD(KP823639103, Tk, Tj)));
        Ci[WS(cs, 2)] = -(KP587785252 * (SIMD_FMADD(KP823639103, Tk, Tj)));
        Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP509036960, Ti, Tf));
        Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP509036960, Ti, Tf)));
        Tn            = SIMD_FNMADD(KP250000000, Tm, T1);
        Cr[0]         = T1 + Tm;
        T8            = SIMD_FNMADD(KP250000000, T6, T1);
        Cr[WS(cs, 5)] = T1 + T6;
        Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, To, Tn);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, To, Tn);
        Tc            = SIMD_FNMADD(KP559016994, T9, T8);
        Ta            = SIMD_FMADD(KP559016994, T9, T8);
        Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, Td, Tc);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, Td, Tc);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, Tb, Ta);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, Tb, Ta);
    }
}

template <>
struct r2cf_traits<15, 5>
{
    static constexpr long_t flops           = 69;
    static constexpr long_t operations      = 43;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 39;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 5 -name r2cf
 * -standalone */

/*
 * This function contains 36 FP additions, 33 FP multiplications,
 * (or, 10 additions, 7 multiplications, 26 fused multiply/add),
 * 39 stack variables, 12 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 5>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP509036960, +0.509036960455127183450980863393907648510733164);
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP447213595, +0.447213595499957939281834733746255247088123672);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T5, T6, T2, T3, Tf, T7, Te, Tl, Ta, T4, Tr, Tp, Th, T9;
        SIMD_FLOAT Tj, Tg, Td, Tb, Tn, T8, Tk, Ti, Tc, Tm, To, Tq;
        T1            = R0[0];
        T5            = R0[WS(rs, 1)];
        T6            = R0[WS(rs, 4)];
        T2            = R0[WS(rs, 3)];
        T3            = R0[WS(rs, 2)];
        Tf            = T6 - T5;
        T7            = T5 + T6;
        Te            = SIMD_FMADD(KP500000000, T3, T2);
        Tl            = T2 - T3;
        Ta            = T2 + T3;
        T4            = SIMD_FNMADD(KP500000000, T3, T2);
        Tr            = SIMD_FMADD(KP618033988, T3, Tf);
        Tp            = SIMD_FNMADD(KP618033988, Tf, T3);
        Th            = T3 + T7;
        T9            = T3 - T7;
        Tj            = SIMD_FNMADD(KP809016994, Tf, Te);
        Tg            = SIMD_FMADD(KP309016994, Tf, Te);
        Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tf, Tl)));
        Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, Tl, Tf));
        Td            = Ta - T7;
        Tb            = Ta + T7;
        Tn            = SIMD_FMADD(KP500000000, T7, T4);
        T8            = SIMD_FNMADD(KP500000000, T7, T4);
        Tk            = SIMD_FMADD(KP447213595, T9, Th);
        Ti            = SIMD_FNMADD(KP447213595, T9, Th);
        Ci[WS(cs, 5)] = KP866025403 * T9;
        Tc            = SIMD_FNMADD(KP250000000, Tb, T1);
        Cr[0]         = T1 + Tb;
        Tm            = SIMD_FNMADD(KP250000000, T8, T1);
        Cr[WS(cs, 5)] = T1 + T8;
        Ci[WS(cs, 7)] = -(KP587785252 * (SIMD_FNMADD(KP823639103, Tk, Tj)));
        Ci[WS(cs, 2)] = -(KP587785252 * (SIMD_FMADD(KP823639103, Tk, Tj)));
        Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP509036960, Ti, Tg));
        Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP509036960, Ti, Tg)));
        Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, Td, Tc);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, Td, Tc);
        To            = SIMD_FMADD(KP559016994, Tn, Tm);
        Tq            = SIMD_FNMADD(KP559016994, Tn, Tm);
        Cr[WS(cs, 7)] = SIMD_FMADD(KP823639103, Tr, Tq);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP823639103, Tr, Tq);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, Tp, To);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, Tp, To);
    }
}

template <>
struct r2cf_traits<15, 6>
{
    static constexpr long_t flops           = 75;
    static constexpr long_t operations      = 47;
    static constexpr long_t memory_accesses = 21;
    static constexpr long_t stack_vars      = 42;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 6 -name r2cf
 * -standalone */

/*
 * This function contains 40 FP additions, 35 FP multiplications,
 * (or, 12 additions, 7 multiplications, 28 fused multiply/add),
 * 42 stack variables, 11 constants, and 21 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 6>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP678715947, +0.678715947273502911267974484525210198014310886);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T7, T8, T4, T5, T3, Tc, T9, Ti, T6, Td, Tp, Th, Tt;
        SIMD_FLOAT Tv, Tb, Tl, Tj, To, Te, Tg, Ta, Tr, Tk, Tf, Tq, Tm, Tn, Ts;
        SIMD_FLOAT Tu;
        T1            = R0[0];
        T2            = R0[WS(rs, 5)];
        T7            = R0[WS(rs, 1)];
        T8            = R0[WS(rs, 4)];
        T4            = R0[WS(rs, 3)];
        T5            = R0[WS(rs, 2)];
        T3            = SIMD_FNMADD(KP500000000, T2, T1);
        Tc            = T1 + T2;
        T9            = T7 + T8;
        Ti            = T8 - T7;
        T6            = SIMD_FNMADD(KP500000000, T5, T4);
        Td            = T4 + T5;
        Tp            = T4 - T5;
        Th            = SIMD_FMADD(KP500000000, T5, T4);
        Tt            = SIMD_FNMADD(KP618033988, Ti, T5);
        Tv            = SIMD_FMADD(KP618033988, T5, Ti);
        Tb            = T9 - T5;
        Tl            = T5 + T9;
        Tj            = SIMD_FMADD(KP309016994, Ti, Th);
        To            = SIMD_FNMADD(KP809016994, Ti, Th);
        Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Ti, Tp)));
        Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, Tp, Ti));
        Te            = Td + T9;
        Tg            = Td - T9;
        Ta            = SIMD_FNMADD(KP500000000, T9, T6);
        Tr            = SIMD_FMADD(KP500000000, T9, T6);
        Tk            = SIMD_FMADD(KP250000000, Tb, T2);
        Ci[WS(cs, 5)] = KP866025403 * (T2 - Tb);
        Tf            = SIMD_FNMADD(KP250000000, Te, Tc);
        Cr[0]         = Tc + Te;
        Tq            = SIMD_FNMADD(KP250000000, Ta, T3);
        Cr[WS(cs, 5)] = T3 + Ta;
        Tm            = SIMD_FMADD(KP559016994, Tl, Tk);
        Tn            = SIMD_FNMADD(KP559016994, Tl, Tk);
        Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, Tg, Tf);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, Tg, Tf);
        Ts            = SIMD_FMADD(KP559016994, Tr, Tq);
        Tu            = SIMD_FNMADD(KP559016994, Tr, Tq);
        Ci[WS(cs, 2)] = KP866025403 * (SIMD_FNMADD(KP678715947, To, Tn));
        Ci[WS(cs, 7)] = -(KP866025403 * (SIMD_FMADD(KP678715947, To, Tn)));
        Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP910592997, Tm, Tj));
        Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP910592997, Tm, Tj)));
        Cr[WS(cs, 7)] = SIMD_FMADD(KP823639103, Tv, Tu);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP823639103, Tv, Tu);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, Tt, Ts);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, Tt, Ts);
    }
}

template <>
struct r2cf_traits<15, 7>
{
    static constexpr long_t flops           = 82;
    static constexpr long_t operations      = 53;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 46;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 7 -name r2cf
 * -standalone */

/*
 * This function contains 46 FP additions, 36 FP multiplications,
 * (or, 17 additions, 7 multiplications, 29 fused multiply/add),
 * 46 stack variables, 8 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 7>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T4, T5, T7, Ta, T8;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 3)];
        T5 = R0[WS(rs, 2)];
        T7 = R0[WS(rs, 6)];
        Ta = R0[WS(rs, 4)];
        T8 = R0[WS(rs, 1)];
        {
            SIMD_FLOAT Tx, T3, Tw, Tf, Ty, T6, Tq, Td, Tu, T9, Tt, Tr, Tj, Te,
                Tv;
            SIMD_FLOAT Tz, Tb, Tg, Ti, TA, TC, To, Tc, Tl, Th, Tm, Tk, TB, Tn,
                Ts;
            SIMD_FLOAT Tp;
            Tx            = T1 + T2;
            T3            = SIMD_FNMADD(KP500000000, T2, T1);
            Tw            = T4 - T5;
            Tf            = SIMD_FMADD(KP500000000, T5, T4);
            Ty            = T4 + T5;
            T6            = SIMD_FNMADD(KP500000000, T5, T4);
            Tq            = T8 - Ta;
            Td            = T8 + Ta;
            Tu            = T7 + T8;
            T9            = SIMD_FNMADD(KP500000000, T8, T7);
            Tt            = SIMD_FNMADD(KP618033988, T5, Tq);
            Tr            = SIMD_FMADD(KP618033988, Tq, T5);
            Tj            = T5 + Td;
            Te            = Td - T5;
            Tv            = Ta - Tu;
            Tz            = Tu + Ta;
            Tb            = SIMD_FNMADD(KP500000000, Ta, T9);
            Tg            = SIMD_FMADD(KP500000000, Ta, T9);
            Ti            = SIMD_FMADD(KP250000000, Te, T2);
            Ci[WS(cs, 5)] = KP866025403 * (T2 - Te);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tv, Tw)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, Tw, Tv));
            TA            = Ty + Tz;
            TC            = Ty - Tz;
            To            = T6 - Tb;
            Tc            = T6 + Tb;
            Tl            = SIMD_FNMADD(KP618033988, Tf, Tg);
            Th            = SIMD_FMADD(KP618033988, Tg, Tf);
            Tm            = SIMD_FNMADD(KP559016994, Tj, Ti);
            Tk            = SIMD_FMADD(KP559016994, Tj, Ti);
            Cr[0]         = Tx + TA;
            TB            = SIMD_FNMADD(KP250000000, TA, Tx);
            Tn            = SIMD_FNMADD(KP250000000, Tc, T3);
            Cr[WS(cs, 5)] = T3 + Tc;
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FNMADD(KP910592997, Tm, Tl));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP910592997, Tm, Tl));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP910592997, Tk, Th));
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP910592997, Tk, Th)));
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TC, TB);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TC, TB);
            Ts            = SIMD_FNMADD(KP559016994, To, Tn);
            Tp            = SIMD_FMADD(KP559016994, To, Tn);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, Tt, Ts);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, Tt, Ts);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, Tr, Tp);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, Tr, Tp);
        }
    }
}

template <>
struct r2cf_traits<15, 8>
{
    static constexpr long_t flops           = 84;
    static constexpr long_t operations      = 55;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 49;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 8 -name r2cf
 * -standalone */

/*
 * This function contains 48 FP additions, 36 FP multiplications,
 * (or, 19 additions, 7 multiplications, 29 fused multiply/add),
 * 49 stack variables, 8 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 8>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T4, T5, T6, T9, Tc, Ta, T3, TA;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 3)];
        T5 = R0[WS(rs, 2)];
        T6 = R0[WS(rs, 7)];
        T9 = R0[WS(rs, 6)];
        Tc = R0[WS(rs, 4)];
        Ta = R0[WS(rs, 1)];
        T3 = SIMD_FNMADD(KP500000000, T2, T1);
        TA = T1 + T2;
        {
            SIMD_FLOAT T7, Tf, Tg, Tt, Tb, Tx, TB, Ti, T8, Tz, Tu, Tw, Th, Tm,
                TC;
            SIMD_FLOAT Ty, Tj, Td, Tl, TF, TD, Te, Tr, Tk, To, Tn, Tp, TE, Tq,
                Ts;
            SIMD_FLOAT Tv;
            T7            = T5 + T6;
            Tf            = T6 - T5;
            Tg            = Ta + Tc;
            Tt            = Ta - Tc;
            Tb            = SIMD_FNMADD(KP500000000, Ta, T9);
            Tx            = T9 + Ta;
            TB            = T4 + T7;
            Ti            = SIMD_FMADD(KP500000000, T7, T4);
            T8            = SIMD_FNMADD(KP500000000, T7, T4);
            Tz            = T4 - T7;
            Tu            = SIMD_FNMADD(KP618033988, Tt, Tf);
            Tw            = SIMD_FMADD(KP618033988, Tf, Tt);
            Th            = Tf + Tg;
            Tm            = Tf - Tg;
            TC            = Tx + Tc;
            Ty            = Tc - Tx;
            Tj            = SIMD_FMADD(KP500000000, Tc, Tb);
            Td            = SIMD_FNMADD(KP500000000, Tc, Tb);
            Tl            = SIMD_FMADD(KP250000000, Th, T2);
            Ci[WS(cs, 5)] = KP866025403 * (T2 - Th);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Ty, Tz)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, Tz, Ty));
            TF            = TB - TC;
            TD            = TB + TC;
            Te            = T8 + Td;
            Tr            = T8 - Td;
            Tk            = SIMD_FMADD(KP618033988, Tj, Ti);
            To            = SIMD_FNMADD(KP618033988, Ti, Tj);
            Tn            = SIMD_FNMADD(KP559016994, Tm, Tl);
            Tp            = SIMD_FMADD(KP559016994, Tm, Tl);
            Cr[0]         = TA + TD;
            TE            = SIMD_FNMADD(KP250000000, TD, TA);
            Tq            = SIMD_FNMADD(KP250000000, Te, T3);
            Cr[WS(cs, 5)] = T3 + Te;
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FNMADD(KP910592997, Tp, To));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP910592997, Tp, To));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP910592997, Tn, Tk));
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP910592997, Tn, Tk)));
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TF, TE);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TF, TE);
            Ts            = SIMD_FMADD(KP559016994, Tr, Tq);
            Tv            = SIMD_FNMADD(KP559016994, Tr, Tq);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, Tw, Tv);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, Tw, Tv);
            Cr[WS(cs, 4)] = SIMD_FMADD(KP823639103, Tu, Ts);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP823639103, Tu, Ts);
        }
    }
}

template <>
struct r2cf_traits<15, 9>
{
    static constexpr long_t flops           = 89;
    static constexpr long_t operations      = 59;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 54;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 9 -name r2cf
 * -standalone */

/*
 * This function contains 52 FP additions, 37 FP multiplications,
 * (or, 22 additions, 7 multiplications, 30 fused multiply/add),
 * 54 stack variables, 8 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 9>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T4, T5, T7, T8, Tb, Te, Tc, TF, T3, TD, T6, Th, T9;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 3)];
        T5 = R0[WS(rs, 8)];
        T7 = R0[WS(rs, 2)];
        T8 = R0[WS(rs, 7)];
        Tb = R0[WS(rs, 6)];
        Te = R0[WS(rs, 4)];
        Tc = R0[WS(rs, 1)];
        TF = T1 + T2;
        T3 = SIMD_FNMADD(KP500000000, T2, T1);
        TD = T4 + T5;
        T6 = SIMD_FNMADD(KP500000000, T5, T4);
        Th = T8 - T7;
        T9 = T7 + T8;
        {
            SIMD_FLOAT Tx, Tj, TB, Td, Ti, Tw, TE, TG, Tl, Ta, TC, TH, Tf, Tm,
                Tp;
            SIMD_FLOAT Tk, TA, Ty, TI, TK, Tu, Tg, Tr, Tn, To, TJ, Tt, Ts, Tq,
                Tz;
            SIMD_FLOAT Tv;
            Tx            = Tc - Te;
            Tj            = Tc + Te;
            TB            = Tb + Tc;
            Td            = SIMD_FNMADD(KP500000000, Tc, Tb);
            Ti            = Th - T5;
            Tw            = T5 + Th;
            TE            = TD - T9;
            TG            = TD + T9;
            Tl            = SIMD_FMADD(KP500000000, T9, T6);
            Ta            = SIMD_FNMADD(KP500000000, T9, T6);
            TC            = Te - TB;
            TH            = TB + Te;
            Tf            = SIMD_FNMADD(KP500000000, Te, Td);
            Tm            = SIMD_FMADD(KP500000000, Te, Td);
            Tp            = Ti - Tj;
            Tk            = Ti + Tj;
            TA            = SIMD_FMADD(KP618033988, Tw, Tx);
            Ty            = SIMD_FNMADD(KP618033988, Tx, Tw);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TC, TE)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, TE, TC));
            TI            = TG + TH;
            TK            = TG - TH;
            Tu            = Ta - Tf;
            Tg            = Ta + Tf;
            Tr            = SIMD_FNMADD(KP618033988, Tl, Tm);
            Tn            = SIMD_FMADD(KP618033988, Tm, Tl);
            To            = SIMD_FMADD(KP250000000, Tk, T2);
            Ci[WS(cs, 5)] = KP866025403 * (T2 - Tk);
            Cr[0]         = TF + TI;
            TJ            = SIMD_FNMADD(KP250000000, TI, TF);
            Tt            = SIMD_FNMADD(KP250000000, Tg, T3);
            Cr[WS(cs, 5)] = T3 + Tg;
            Ts            = SIMD_FMADD(KP559016994, Tp, To);
            Tq            = SIMD_FNMADD(KP559016994, Tp, To);
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TK, TJ);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TK, TJ);
            Tz            = SIMD_FNMADD(KP559016994, Tu, Tt);
            Tv            = SIMD_FMADD(KP559016994, Tu, Tt);
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FNMADD(KP910592997, Ts, Tr));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP910592997, Ts, Tr));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP910592997, Tq, Tn));
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP910592997, Tq, Tn)));
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, TA, Tz);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, TA, Tz);
            Cr[WS(cs, 4)] = SIMD_FMADD(KP823639103, Ty, Tv);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP823639103, Ty, Tv);
        }
    }
}

template <>
struct r2cf_traits<15, 10>
{
    static constexpr long_t flops           = 90;
    static constexpr long_t operations      = 61;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 57;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 10 -name r2cf
 * -standalone */

/*
 * This function contains 54 FP additions, 36 FP multiplications,
 * (or, 25 additions, 7 multiplications, 29 fused multiply/add),
 * 57 stack variables, 8 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 10>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T4, T5, T7, T8, Tb, Tf, Tc, Te, T3, TD, T6, TE, T9;
        SIMD_FLOAT Tm;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 3)];
        T5 = R0[WS(rs, 8)];
        T7 = R0[WS(rs, 2)];
        T8 = R0[WS(rs, 7)];
        Tb = R0[WS(rs, 6)];
        Tf = R0[WS(rs, 4)];
        Tc = R0[WS(rs, 1)];
        Te = R0[WS(rs, 9)];
        T3 = SIMD_FNMADD(KP500000000, T2, T1);
        TD = T1 + T2;
        T6 = SIMD_FNMADD(KP500000000, T5, T4);
        TE = T4 + T5;
        T9 = T7 + T8;
        Tm = T8 - T7;
        {
            SIMD_FLOAT Tt, To, TG, Td, TH, Tg, Tn, Ts, TF, TN, Ta, Tv, Tw, Th,
                TI;
            SIMD_FLOAT TM, Tu, Tz, Tp, Tr, Ti, Tk, Tx, TB, TL, TJ, Ty, Tj, TK,
                TA;
            SIMD_FLOAT TC, Tl, Tq;
            Tt            = Tc + Tf;
            To            = Tc - Tf;
            TG            = Tb + Tc;
            Td            = SIMD_FNMADD(KP500000000, Tc, Tb);
            TH            = Te + Tf;
            Tg            = SIMD_FNMADD(KP500000000, Tf, Te);
            Tn            = T5 + Tm;
            Ts            = Tm - T5;
            TF            = TE + T9;
            TN            = TE - T9;
            Ta            = SIMD_FNMADD(KP500000000, T9, T6);
            Tv            = SIMD_FMADD(KP500000000, T9, T6);
            Tw            = Td - Tg;
            Th            = Td + Tg;
            TI            = TG + TH;
            TM            = TH - TG;
            Tu            = Ts + Tt;
            Tz            = Ts - Tt;
            Tp            = SIMD_FNMADD(KP618033988, To, Tn);
            Tr            = SIMD_FMADD(KP618033988, Tn, To);
            Ti            = Ta + Th;
            Tk            = Ta - Th;
            Tx            = SIMD_FMADD(KP618033988, Tw, Tv);
            TB            = SIMD_FNMADD(KP618033988, Tv, Tw);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TM, TN)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, TN, TM));
            TL            = TF - TI;
            TJ            = TF + TI;
            Ty            = SIMD_FMADD(KP250000000, Tu, T2);
            Ci[WS(cs, 5)] = KP866025403 * (T2 - Tu);
            Tj            = SIMD_FNMADD(KP250000000, Ti, T3);
            Cr[WS(cs, 5)] = T3 + Ti;
            Cr[0]         = TD + TJ;
            TK            = SIMD_FNMADD(KP250000000, TJ, TD);
            TA            = SIMD_FNMADD(KP559016994, Tz, Ty);
            TC            = SIMD_FMADD(KP559016994, Tz, Ty);
            Tl            = SIMD_FMADD(KP559016994, Tk, Tj);
            Tq            = SIMD_FNMADD(KP559016994, Tk, Tj);
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TL, TK);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TL, TK);
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FNMADD(KP910592997, TC, TB));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP910592997, TC, TB));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FNMADD(KP910592997, TA, Tx));
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FMADD(KP910592997, TA, Tx)));
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, Tr, Tq);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, Tr, Tq);
            Cr[WS(cs, 4)] = SIMD_FMADD(KP823639103, Tp, Tl);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP823639103, Tp, Tl);
        }
    }
}

template <>
struct r2cf_traits<15, 11>
{
    static constexpr long_t flops           = 92;
    static constexpr long_t operations      = 63;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 60;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 11 -name r2cf
 * -standalone */

/*
 * This function contains 56 FP additions, 36 FP multiplications,
 * (or, 27 additions, 7 multiplications, 29 fused multiply/add),
 * 60 stack variables, 8 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 11>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T3, T6, T7, T9, Ta, Td, Th, Te, Tg, Tx, T4, TH, T8;
        SIMD_FLOAT To, Tb;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T3 = R0[WS(rs, 10)];
        T6 = R0[WS(rs, 3)];
        T7 = R0[WS(rs, 8)];
        T9 = R0[WS(rs, 2)];
        Ta = R0[WS(rs, 7)];
        Td = R0[WS(rs, 6)];
        Th = R0[WS(rs, 4)];
        Te = R0[WS(rs, 1)];
        Tg = R0[WS(rs, 9)];
        Tx = T3 - T2;
        T4 = T2 + T3;
        TH = T6 + T7;
        T8 = SIMD_FNMADD(KP500000000, T7, T6);
        To = T9 - Ta;
        Tb = T9 + Ta;
        {
            SIMD_FLOAT Tq, Tv, Tf, TJ, Ti, TK, TG, T5, Tu, Tp, TQ, TI, Tz, Tc,
                Tj;
            SIMD_FLOAT Ty, TP, TL, TC, Tw, Tt, Tr, Tm, Tk, TE, TA, TM, TO, TB,
                Tl;
            SIMD_FLOAT TN, TF, TD, Ts, Tn;
            Tq            = Te - Th;
            Tv            = Te + Th;
            Tf            = SIMD_FNMADD(KP500000000, Te, Td);
            TJ            = Td + Te;
            Ti            = SIMD_FNMADD(KP500000000, Th, Tg);
            TK            = Tg + Th;
            TG            = T1 + T4;
            T5            = SIMD_FNMADD(KP500000000, T4, T1);
            Tu            = T7 + To;
            Tp            = T7 - To;
            TQ            = TH - Tb;
            TI            = TH + Tb;
            Tz            = SIMD_FMADD(KP500000000, Tb, T8);
            Tc            = SIMD_FNMADD(KP500000000, Tb, T8);
            Tj            = Tf + Ti;
            Ty            = Tf - Ti;
            TP            = TK - TJ;
            TL            = TJ + TK;
            TC            = Tu + Tv;
            Tw            = Tu - Tv;
            Tt            = SIMD_FMADD(KP618033988, Tp, Tq);
            Tr            = SIMD_FNMADD(KP618033988, Tq, Tp);
            Tm            = Tc - Tj;
            Tk            = Tc + Tj;
            TE            = SIMD_FMADD(KP618033988, Ty, Tz);
            TA            = SIMD_FNMADD(KP618033988, Tz, Ty);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TP, TQ)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, TQ, TP));
            TM            = TI + TL;
            TO            = TI - TL;
            TB            = SIMD_FMADD(KP250000000, Tw, Tx);
            Ci[WS(cs, 5)] = KP866025403 * (Tw - Tx);
            Tl            = SIMD_FNMADD(KP250000000, Tk, T5);
            Cr[WS(cs, 5)] = T5 + Tk;
            Cr[0]         = TG + TM;
            TN            = SIMD_FNMADD(KP250000000, TM, TG);
            TF            = SIMD_FNMADD(KP559016994, TC, TB);
            TD            = SIMD_FMADD(KP559016994, TC, TB);
            Ts            = SIMD_FNMADD(KP559016994, Tm, Tl);
            Tn            = SIMD_FMADD(KP559016994, Tm, Tl);
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TO, TN);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TO, TN);
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FNMADD(KP910592997, TF, TE)));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP910592997, TF, TE));
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FMADD(KP910592997, TD, TA));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FNMADD(KP910592997, TD, TA));
            Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, Tt, Ts);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, Tt, Ts);
            Cr[WS(cs, 4)] = SIMD_FMADD(KP823639103, Tr, Tn);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP823639103, Tr, Tn);
        }
    }
}

template <>
struct r2cf_traits<15, 12>
{
    static constexpr long_t flops           = 94;
    static constexpr long_t operations      = 65;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 63;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 12 -name r2cf
 * -standalone */

/*
 * This function contains 58 FP additions, 36 FP multiplications,
 * (or, 29 additions, 7 multiplications, 29 fused multiply/add),
 * 63 stack variables, 8 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 12>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T3, Td, Ti, Tj, T6, T7, T9, Ta, Te, Tf, T4, TA, Tk;
        SIMD_FLOAT TN, T8, TK, Tb, Tq, Tg, Ts, T5, TJ;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T3 = R0[WS(rs, 10)];
        Td = R0[WS(rs, 6)];
        Ti = R0[WS(rs, 9)];
        Tj = R0[WS(rs, 4)];
        T6 = R0[WS(rs, 3)];
        T7 = R0[WS(rs, 8)];
        T9 = R0[WS(rs, 2)];
        Ta = R0[WS(rs, 7)];
        Te = R0[WS(rs, 11)];
        Tf = R0[WS(rs, 1)];
        T4 = T2 + T3;
        TA = T3 - T2;
        Tk = SIMD_FNMADD(KP500000000, Tj, Ti);
        TN = Ti + Tj;
        T8 = SIMD_FNMADD(KP500000000, T7, T6);
        TK = T6 + T7;
        Tb = T9 + Ta;
        Tq = T9 - Ta;
        Tg = Te + Tf;
        Ts = Te - Tf;
        T5 = SIMD_FNMADD(KP500000000, T4, T1);
        TJ = T1 + T4;
        {
            SIMD_FLOAT Tr, Tx, TL, TT, Tc, TC, Tt, Ty, Th, TM, Tz, TF, Tw, Tu,
                TO;
            SIMD_FLOAT TS, Tl, TB, TE, TR, TP, TD, TH, To, Tm, TG, TI, TQ, Tn,
                Tv;
            SIMD_FLOAT Tp;
            Tr            = T7 - Tq;
            Tx            = T7 + Tq;
            TL            = TK + Tb;
            TT            = TK - Tb;
            Tc            = SIMD_FNMADD(KP500000000, Tb, T8);
            TC            = SIMD_FMADD(KP500000000, Tb, T8);
            Tt            = Ts + Tj;
            Ty            = Ts - Tj;
            Th            = SIMD_FNMADD(KP500000000, Tg, Td);
            TM            = Td + Tg;
            Tz            = Tx + Ty;
            TF            = Ty - Tx;
            Tw            = SIMD_FNMADD(KP618033988, Tr, Tt);
            Tu            = SIMD_FMADD(KP618033988, Tt, Tr);
            TO            = TM + TN;
            TS            = TN - TM;
            Tl            = Th + Tk;
            TB            = Th - Tk;
            TE            = SIMD_FMADD(KP250000000, Tz, TA);
            Ci[WS(cs, 5)] = KP866025403 * (Tz - TA);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TS, TT)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, TT, TS));
            TR            = TL - TO;
            TP            = TL + TO;
            TD            = SIMD_FNMADD(KP618033988, TC, TB);
            TH            = SIMD_FMADD(KP618033988, TB, TC);
            To            = Tc - Tl;
            Tm            = Tc + Tl;
            TG            = SIMD_FNMADD(KP559016994, TF, TE);
            TI            = SIMD_FMADD(KP559016994, TF, TE);
            Cr[0]         = TJ + TP;
            TQ            = SIMD_FNMADD(KP250000000, TP, TJ);
            Cr[WS(cs, 5)] = T5 + Tm;
            Tn            = SIMD_FNMADD(KP250000000, Tm, T5);
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FNMADD(KP910592997, TI, TH)));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP910592997, TI, TH));
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FMADD(KP910592997, TG, TD));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FNMADD(KP910592997, TG, TD));
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TR, TQ);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TR, TQ);
            Tv            = SIMD_FNMADD(KP559016994, To, Tn);
            Tp            = SIMD_FMADD(KP559016994, To, Tn);
            Cr[WS(cs, 4)] = SIMD_FMADD(KP823639103, Tu, Tp);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP823639103, Tu, Tp);
            Cr[WS(cs, 7)] = SIMD_FMADD(KP823639103, Tw, Tv);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP823639103, Tw, Tv);
        }
    }
}

template <>
struct r2cf_traits<15, 13>
{
    static constexpr long_t flops           = 95;
    static constexpr long_t operations      = 67;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 13 -name r2cf
 * -standalone */

/*
 * This function contains 60 FP additions, 35 FP multiplications,
 * (or, 32 additions, 7 multiplications, 28 fused multiply/add),
 * 66 stack variables, 8 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 13>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T3, T9, Tf, T6, T7, Tk, Tl, Tg, Th, Ta, Tb, TC, T4;
        SIMD_FLOAT TM, T8, TQ, Tm, Tu, Ti, Ts, Tc, TL, T5;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T3 = R0[WS(rs, 10)];
        T9 = R0[WS(rs, 12)];
        Tf = R0[WS(rs, 6)];
        T6 = R0[WS(rs, 3)];
        T7 = R0[WS(rs, 8)];
        Tk = R0[WS(rs, 9)];
        Tl = R0[WS(rs, 4)];
        Tg = R0[WS(rs, 11)];
        Th = R0[WS(rs, 1)];
        Ta = R0[WS(rs, 2)];
        Tb = R0[WS(rs, 7)];
        TC = T3 - T2;
        T4 = T2 + T3;
        TM = T6 + T7;
        T8 = SIMD_FNMADD(KP500000000, T7, T6);
        TQ = Tk + Tl;
        Tm = SIMD_FNMADD(KP500000000, Tl, Tk);
        Tu = Tg - Th;
        Ti = Tg + Th;
        Ts = Ta - Tb;
        Tc = Ta + Tb;
        TL = T1 + T4;
        T5 = SIMD_FNMADD(KP500000000, T4, T1);
        {
            SIMD_FLOAT TA, Tv, Tj, TP, Tz, Tt, TN, Td, TD, Tn, TV, TR, TH, TB,
                Tw;
            SIMD_FLOAT Ty, TW, TO, TE, Te, TG, TS, TU, TJ, TF, To, Tq, TK, TI,
                TT;
            SIMD_FLOAT Tp, Tr, Tx;
            TA            = Tu - Tl;
            Tv            = Tu + Tl;
            Tj            = SIMD_FNMADD(KP500000000, Ti, Tf);
            TP            = Tf + Ti;
            Tz            = T7 + Ts;
            Tt            = T7 - Ts;
            TN            = T9 + Tc;
            Td            = SIMD_FNMADD(KP500000000, Tc, T9);
            TD            = Tj - Tm;
            Tn            = Tj + Tm;
            TV            = TQ - TP;
            TR            = TP + TQ;
            TH            = TA - Tz;
            TB            = Tz + TA;
            Tw            = SIMD_FMADD(KP618033988, Tv, Tt);
            Ty            = SIMD_FNMADD(KP618033988, Tt, Tv);
            TW            = TM - TN;
            TO            = TM + TN;
            TE            = T8 - Td;
            Te            = T8 + Td;
            TG            = SIMD_FMADD(KP250000000, TB, TC);
            Ci[WS(cs, 5)] = KP866025403 * (TB - TC);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TV, TW)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, TW, TV));
            TS            = TO + TR;
            TU            = TO - TR;
            TJ            = SIMD_FMADD(KP618033988, TD, TE);
            TF            = SIMD_FNMADD(KP618033988, TE, TD);
            To            = Te + Tn;
            Tq            = Te - Tn;
            TK            = SIMD_FMADD(KP559016994, TH, TG);
            TI            = SIMD_FNMADD(KP559016994, TH, TG);
            Cr[0]         = TL + TS;
            TT            = SIMD_FNMADD(KP250000000, TS, TL);
            Cr[WS(cs, 5)] = T5 + To;
            Tp            = SIMD_FNMADD(KP250000000, To, T5);
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FNMADD(KP910592997, TK, TJ)));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP910592997, TK, TJ));
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FMADD(KP910592997, TI, TF));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FNMADD(KP910592997, TI, TF));
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TU, TT);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TU, TT);
            Tr            = SIMD_FMADD(KP559016994, Tq, Tp);
            Tx            = SIMD_FNMADD(KP559016994, Tq, Tp);
            Cr[WS(cs, 4)] = SIMD_FMADD(KP823639103, Tw, Tr);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP823639103, Tw, Tr);
            Cr[WS(cs, 7)] = SIMD_FMADD(KP823639103, Ty, Tx);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP823639103, Ty, Tx);
        }
    }
}

template <>
struct r2cf_traits<15, 14>
{
    static constexpr long_t flops           = 97;
    static constexpr long_t operations      = 69;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 69;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 14 -name r2cf
 * -standalone */

/*
 * This function contains 62 FP additions, 35 FP multiplications,
 * (or, 34 additions, 7 multiplications, 28 fused multiply/add),
 * 69 stack variables, 8 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 14>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T6, Tb, Th, Tm, Tn, Tc, Td, T7, T8, Ti, Tj, T4, TF, T2;
        SIMD_FLOAT T3, To, TT, Te, Tu, T9, Tv, Tk, Tx, T5, TO;
        T1 = R0[0];
        T2 = R0[WS(rs, 5)];
        T3 = R0[WS(rs, 10)];
        T6 = R0[WS(rs, 3)];
        Tb = R0[WS(rs, 12)];
        Th = R0[WS(rs, 6)];
        Tm = R0[WS(rs, 9)];
        Tn = R0[WS(rs, 4)];
        Tc = R0[WS(rs, 2)];
        Td = R0[WS(rs, 7)];
        T7 = R0[WS(rs, 8)];
        T8 = R0[WS(rs, 13)];
        Ti = R0[WS(rs, 11)];
        Tj = R0[WS(rs, 1)];
        T4 = T2 + T3;
        TF = T3 - T2;
        To = SIMD_FNMADD(KP500000000, Tn, Tm);
        TT = Tm + Tn;
        Te = Tc + Td;
        Tu = Tc - Td;
        T9 = T7 + T8;
        Tv = T7 - T8;
        Tk = Ti + Tj;
        Tx = Ti - Tj;
        T5 = SIMD_FNMADD(KP500000000, T4, T1);
        TO = T1 + T4;
        {
            SIMD_FLOAT Tf, TQ, Tw, TC, Ta, TP, Ty, TD, Tl, TS, TR, TZ, Tg, TH,
                TE;
            SIMD_FLOAT TK, TB, Tz, TU, TY, Tp, TG, TJ, TX, TV, TI, TM, Ts, Tq,
                TL;
            SIMD_FLOAT TN, TW, Tr, TA, Tt;
            Tf            = SIMD_FNMADD(KP500000000, Te, Tb);
            TQ            = Tb + Te;
            Tw            = Tu - Tv;
            TC            = Tv + Tu;
            Ta            = SIMD_FNMADD(KP500000000, T9, T6);
            TP            = T6 + T9;
            Ty            = Tx + Tn;
            TD            = Tx - Tn;
            Tl            = SIMD_FNMADD(KP500000000, Tk, Th);
            TS            = Th + Tk;
            TR            = TP + TQ;
            TZ            = TP - TQ;
            Tg            = Ta + Tf;
            TH            = Ta - Tf;
            TE            = TC + TD;
            TK            = TD - TC;
            TB            = SIMD_FMADD(KP618033988, Tw, Ty);
            Tz            = SIMD_FNMADD(KP618033988, Ty, Tw);
            TU            = TS + TT;
            TY            = TT - TS;
            Tp            = Tl + To;
            TG            = Tl - To;
            TJ            = SIMD_FMADD(KP250000000, TE, TF);
            Ci[WS(cs, 5)] = KP866025403 * (TE - TF);
            Ci[WS(cs, 6)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TY, TZ)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, TZ, TY));
            TX            = TR - TU;
            TV            = TR + TU;
            TI            = SIMD_FNMADD(KP618033988, TH, TG);
            TM            = SIMD_FMADD(KP618033988, TG, TH);
            Ts            = Tg - Tp;
            Tq            = Tg + Tp;
            TL            = SIMD_FNMADD(KP559016994, TK, TJ);
            TN            = SIMD_FMADD(KP559016994, TK, TJ);
            Cr[0]         = TO + TV;
            TW            = SIMD_FNMADD(KP250000000, TV, TO);
            Cr[WS(cs, 5)] = T5 + Tq;
            Tr            = SIMD_FNMADD(KP250000000, Tq, T5);
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FNMADD(KP910592997, TN, TM)));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP910592997, TN, TM));
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FMADD(KP910592997, TL, TI));
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FNMADD(KP910592997, TL, TI));
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, TX, TW);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, TX, TW);
            TA            = SIMD_FNMADD(KP559016994, Ts, Tr);
            Tt            = SIMD_FMADD(KP559016994, Ts, Tr);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, Tz, Tt);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, Tz, Tt);
            Cr[WS(cs, 7)] = SIMD_FMADD(KP823639103, TB, TA);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP823639103, TB, TA);
        }
    }
}

template <>
struct r2cf_traits<15, 15>
{
    static constexpr long_t flops           = 99;
    static constexpr long_t operations      = 71;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 72;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 15 -first-k 15 -name r2cf
 * -standalone */

/*
 * This function contains 64 FP additions, 35 FP multiplications,
 * (or, 36 additions, 7 multiplications, 28 fused multiply/add),
 * 72 stack variables, 8 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && ProvidedElements == 15>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP823639103, +0.823639103546331925877420039278190003029660514);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TD, Tj, Tq, Tt, Tm, T1, T2, T8, T9, Tb, Tc, T4, TE, Ti, T5;
        SIMD_FLOAT Tg, Th, Tk, T3, Tr, Ta, Tu, Td, TF, TR, Tn, T6;
        TD = R0[0];
        Tg = R0[WS(rs, 10)];
        Th = R0[WS(rs, 5)];
        Tj = R0[WS(rs, 3)];
        Tq = R0[WS(rs, 6)];
        Tt = R0[WS(rs, 9)];
        Tm = R0[WS(rs, 12)];
        T1 = R0[WS(rs, 8)];
        T2 = R0[WS(rs, 13)];
        T8 = R0[WS(rs, 11)];
        T9 = R0[WS(rs, 1)];
        Tb = R0[WS(rs, 14)];
        Tc = R0[WS(rs, 4)];
        T4 = R0[WS(rs, 2)];
        TE = Th + Tg;
        Ti = Tg - Th;
        T5 = R0[WS(rs, 7)];
        Tk = T1 + T2;
        T3 = T1 - T2;
        Tr = T8 + T9;
        Ta = T8 - T9;
        Tu = Tb + Tc;
        Td = Tb - Tc;
        TF = SIMD_FNMADD(KP500000000, TE, TD);
        TR = TD + TE;
        Tn = T4 + T5;
        T6 = T4 - T5;
        {
            SIMD_FLOAT TS, Tl, Ts, TV, Tv, TW, Te, TN, TT, To, T7, TM, Tw, TH,
                T11;
            SIMD_FLOAT TX, T12, TU, Tp, TG, Tz, Tf, TO, TQ, TY, T10, TB, Tx, TI,
                TK;
            SIMD_FLOAT Ty, TZ, TJ, TC, TA, TL, TP;
            TS  = Tj + Tk;
            Tl  = SIMD_FNMADD(KP500000000, Tk, Tj);
            Ts  = SIMD_FNMADD(KP500000000, Tr, Tq);
            TV  = Tq + Tr;
            Tv  = SIMD_FNMADD(KP500000000, Tu, Tt);
            TW  = Tt + Tu;
            Te  = Ta + Td;
            TN  = Td - Ta;
            TT  = Tm + Tn;
            To  = SIMD_FNMADD(KP500000000, Tn, Tm);
            T7  = T3 + T6;
            TM  = T6 - T3;
            Tw  = Ts - Tv;
            TH  = Ts + Tv;
            T11 = TW - TV;
            TX  = TV + TW;
            T12 = TS - TT;
            TU  = TS + TT;
            Tp  = Tl - To;
            TG  = Tl + To;
            Tz  = Te - T7;
            Tf  = T7 + Te;
            TO  = SIMD_FMADD(KP618033988, TN, TM);
            TQ  = SIMD_FNMADD(KP618033988, TM, TN);
            Ci[WS(cs, 6)] =
                -(KP951056516 * (SIMD_FNMADD(KP618033988, T11, T12)));
            Ci[WS(cs, 3)] = KP951056516 * (SIMD_FMADD(KP618033988, T12, T11));
            TY            = TU + TX;
            T10           = TU - TX;
            TB            = SIMD_FNMADD(KP618033988, Tp, Tw);
            Tx            = SIMD_FMADD(KP618033988, Tw, Tp);
            TI            = TG + TH;
            TK            = TG - TH;
            Ty            = SIMD_FMADD(KP250000000, Tf, Ti);
            Ci[WS(cs, 5)] = KP866025403 * (Tf - Ti);
            Cr[0]         = TR + TY;
            TZ            = SIMD_FNMADD(KP250000000, TY, TR);
            Cr[WS(cs, 5)] = TF + TI;
            TJ            = SIMD_FNMADD(KP250000000, TI, TF);
            TC            = SIMD_FNMADD(KP559016994, Tz, Ty);
            TA            = SIMD_FMADD(KP559016994, Tz, Ty);
            Cr[WS(cs, 6)] = SIMD_FMADD(KP559016994, T10, TZ);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP559016994, T10, TZ);
            TL            = SIMD_FMADD(KP559016994, TK, TJ);
            TP            = SIMD_FNMADD(KP559016994, TK, TJ);
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FNMADD(KP910592997, TC, TB));
            Ci[WS(cs, 7)] = KP951056516 * (SIMD_FMADD(KP910592997, TC, TB));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP910592997, TA, Tx));
            Ci[WS(cs, 1)] = -(KP951056516 * (SIMD_FNMADD(KP910592997, TA, Tx)));
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP823639103, TO, TL);
            Cr[WS(cs, 1)] = SIMD_FMADD(KP823639103, TO, TL);
            Cr[WS(cs, 7)] = SIMD_FNMADD(KP823639103, TQ, TP);
            Cr[WS(cs, 2)] = SIMD_FMADD(KP823639103, TQ, TP);
        }
    }
}

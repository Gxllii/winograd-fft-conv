//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<20, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 12;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 12 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1             = R0[0];
        Cr[WS(cs, 7)]  = T1;
        Cr[WS(cs, 4)]  = T1;
        Cr[WS(cs, 6)]  = T1;
        Cr[WS(cs, 5)]  = T1;
        Cr[WS(cs, 3)]  = T1;
        Cr[WS(cs, 8)]  = T1;
        Cr[WS(cs, 9)]  = T1;
        Cr[WS(cs, 1)]  = T1;
        Cr[WS(cs, 10)] = T1;
        Cr[WS(cs, 2)]  = T1;
        Cr[0]          = T1;
    }
}

template <>
struct r2cf_traits<20, 2>
{
    static constexpr long_t flops           = 26;
    static constexpr long_t operations      = 18;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 6;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 10 FP additions, 16 FP multiplications,
 * (or, 2 additions, 8 multiplications, 8 fused multiply/add),
 * 6 stack variables, 4 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    {
        SIMD_FLOAT T1, T2;
        T1             = R0[0];
        T2             = R0[WS(rs, 1)];
        Cr[WS(cs, 5)]  = T1;
        Cr[WS(cs, 4)]  = SIMD_FMADD(KP309016994, T2, T1);
        Cr[WS(cs, 6)]  = SIMD_FNMADD(KP309016994, T2, T1);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP809016994, T2, T1);
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, T2, T1);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, T2, T1);
        Cr[WS(cs, 10)] = T1 - T2;
        Cr[WS(cs, 8)]  = SIMD_FNMADD(KP809016994, T2, T1);
        Cr[0]          = T1 + T2;
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP587785252, T2, T1);
        Cr[WS(cs, 3)]  = SIMD_FMADD(KP587785252, T2, T1);
        Ci[WS(cs, 4)]  = -(KP951056516 * T2);
        Ci[WS(cs, 7)]  = -(KP809016994 * T2);
        Ci[WS(cs, 9)]  = -(KP309016994 * T2);
        Ci[WS(cs, 2)]  = -(KP587785252 * T2);
        Ci[WS(cs, 8)]  = -(KP587785252 * T2);
        Ci[WS(cs, 6)]  = -(KP951056516 * T2);
        Ci[WS(cs, 3)]  = -(KP809016994 * T2);
        Ci[WS(cs, 1)]  = -(KP309016994 * T2);
        Ci[WS(cs, 5)]  = -T2;
    }
}

template <>
struct r2cf_traits<20, 3>
{
    static constexpr long_t flops           = 53;
    static constexpr long_t operations      = 33;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 18;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 25 FP additions, 28 FP multiplications,
 * (or, 5 additions, 8 multiplications, 20 fused multiply/add),
 * 18 stack variables, 9 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    {
        SIMD_FLOAT T1, T3, T2, T6, T7, T4, T5, T9, T8;
        T1             = R0[WS(rs, 1)];
        T3             = R0[0];
        T2             = R0[WS(rs, 2)];
        Ci[WS(cs, 5)]  = -T1;
        Ci[WS(cs, 6)]  = KP951056516 * (SIMD_FMSUB(KP618033988, T2, T1));
        Ci[WS(cs, 4)]  = -(KP951056516 * (SIMD_FMADD(KP618033988, T2, T1)));
        Ci[WS(cs, 9)]  = KP587785252 * (SIMD_FNMADD(KP525731112, T1, T2));
        Ci[WS(cs, 2)]  = -(KP951056516 * (SIMD_FMADD(KP618033988, T1, T2)));
        Ci[WS(cs, 7)]  = KP951056516 * (SIMD_FNMADD(KP850650808, T1, T2));
        Ci[WS(cs, 3)]  = -(KP951056516 * (SIMD_FMADD(KP850650808, T1, T2)));
        Ci[WS(cs, 1)]  = -(KP587785252 * (SIMD_FMADD(KP525731112, T1, T2)));
        Ci[WS(cs, 8)]  = KP951056516 * (SIMD_FNMADD(KP618033988, T1, T2));
        Cr[WS(cs, 5)]  = T3 - T2;
        T6             = T1 + T2;
        T7             = T2 - T1;
        T4             = SIMD_FNMADD(KP309016994, T2, T3);
        T5             = SIMD_FMADD(KP809016994, T2, T3);
        T9             = SIMD_FNMADD(KP250000000, T6, T3);
        Cr[0]          = T3 + T6;
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, T1, T5);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, T1, T5);
        T8             = SIMD_FNMADD(KP250000000, T7, T3);
        Cr[WS(cs, 10)] = T3 + T7;
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP587785252, T1, T4);
        Cr[WS(cs, 3)]  = SIMD_FMADD(KP587785252, T1, T4);
        Cr[WS(cs, 8)]  = SIMD_FMADD(KP559016994, T7, T9);
        Cr[WS(cs, 4)]  = SIMD_FNMADD(KP559016994, T7, T9);
        Cr[WS(cs, 6)]  = SIMD_FNMADD(KP559016994, T6, T8);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP559016994, T6, T8);
    }
}

template <>
struct r2cf_traits<20, 4>
{
    static constexpr long_t flops           = 67;
    static constexpr long_t operations      = 43;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 28;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 35 FP additions, 32 FP multiplications,
 * (or, 11 additions, 8 multiplications, 24 fused multiply/add),
 * 28 stack variables, 8 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP447213595, +0.447213595499957939281834733746255247088123672);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T2, T6, T1, T4, T3, Tf, Tc, Tb, Te, Ta, Th, T5, Ti, Tk, T7;
        SIMD_FLOAT T9, Td, Tg, Tj, T8;
        T2             = R0[WS(rs, 1)];
        T6             = R0[0];
        T1             = R0[WS(rs, 3)];
        T4             = R0[WS(rs, 2)];
        T3             = T1 - T2;
        Tf             = SIMD_FMADD(KP618033988, T1, T2);
        Tc             = T2 + T1;
        Tb             = SIMD_FNMADD(KP618033988, T2, T1);
        Cr[WS(cs, 5)]  = T6 - T4;
        Te             = SIMD_FMADD(KP809016994, T4, T6);
        Ta             = SIMD_FNMADD(KP309016994, T4, T6);
        Th             = T1 + T4;
        T5             = T1 - T4;
        Td             = SIMD_FMADD(KP447213595, T3, Tc);
        Tg             = SIMD_FNMADD(KP447213595, T3, Tc);
        Ci[WS(cs, 5)]  = T3;
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Tf, Te);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Tf, Te);
        Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tb, Ta);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tb, Ta);
        Ti             = T2 + Th;
        Tk             = T2 - Th;
        Ci[WS(cs, 2)]  = -(KP951056516 * (SIMD_FMADD(KP618033988, T2, Th)));
        Ci[WS(cs, 6)]  = KP951056516 * (SIMD_FMSUB(KP618033988, Th, T2));
        T7             = T2 + T5;
        T9             = T5 - T2;
        Ci[WS(cs, 8)]  = -(KP951056516 * (SIMD_FMADD(KP618033988, T2, T5)));
        Ci[WS(cs, 4)]  = KP951056516 * (SIMD_FMSUB(KP618033988, T5, T2));
        Ci[WS(cs, 9)]  = KP587785252 * (SIMD_FNMADD(KP951056516, Td, T4));
        Ci[WS(cs, 1)]  = -(KP587785252 * (SIMD_FMADD(KP951056516, Td, T4)));
        Ci[WS(cs, 7)]  = KP951056516 * (SIMD_FNMADD(KP587785252, Tg, T4));
        Ci[WS(cs, 3)]  = -(KP951056516 * (SIMD_FMADD(KP587785252, Tg, T4)));
        Tj             = SIMD_FNMADD(KP250000000, Ti, T6);
        Cr[0]          = T6 + Ti;
        T8             = SIMD_FMADD(KP250000000, T7, T6);
        Cr[WS(cs, 10)] = T6 - T7;
        Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, Tk, Tj);
        Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, Tk, Tj);
        Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, T9, T8);
        Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, T9, T8);
    }
}

template <>
struct r2cf_traits<20, 5>
{
    static constexpr long_t flops           = 77;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 34;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 5 -name r2cf
 * -standalone */

/*
 * This function contains 42 FP additions, 35 FP multiplications,
 * (or, 15 additions, 8 multiplications, 27 fused multiply/add),
 * 34 stack variables, 6 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 5>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP447213595, +0.447213595499957939281834733746255247088123672);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T8, T1, T6, T2, T4, T7, Tp, Tg, Ti, Tk, T3, Tj, Te, Tm, Tc;
        SIMD_FLOAT T5, To, Tn, Tl, Tq, Ts, Td, T9, Tb, Tr, Th, Tf, Ta;
        T8             = R0[0];
        T1             = R0[WS(rs, 3)];
        T6             = R0[WS(rs, 2)];
        T2             = R0[WS(rs, 1)];
        T4             = R0[WS(rs, 4)];
        T7             = T1 - T6;
        Tp             = T1 + T6;
        Tg             = SIMD_FNMADD(KP618033988, T2, T1);
        Ti             = SIMD_FMADD(KP618033988, T1, T2);
        Tk             = T2 + T1;
        T3             = T1 - T2;
        Tj             = SIMD_FMADD(KP618033988, T6, T4);
        Te             = T4 + T6;
        Tm             = SIMD_FNMADD(KP618033988, T4, T6);
        Tc             = T4 - T6;
        T5             = T4 - T2;
        To             = T4 + T2;
        Tn             = SIMD_FNMADD(KP447213595, T3, Tk);
        Tl             = SIMD_FMADD(KP447213595, T3, Tk);
        Ci[WS(cs, 5)]  = T3;
        Tq             = To + Tp;
        Ts             = To - Tp;
        Ci[WS(cs, 6)]  = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tp, To)));
        Ci[WS(cs, 2)]  = -(KP951056516 * (SIMD_FMADD(KP618033988, To, Tp)));
        Cr[WS(cs, 5)]  = T8 + Tc;
        Td             = SIMD_FNMADD(KP250000000, Tc, T8);
        T9             = T5 - T7;
        Tb             = T5 + T7;
        Ci[WS(cs, 8)]  = -(KP951056516 * (SIMD_FNMADD(KP618033988, T5, T7)));
        Ci[WS(cs, 4)]  = KP951056516 * (SIMD_FMADD(KP618033988, T7, T5));
        Ci[WS(cs, 7)]  = KP951056516 * (SIMD_FNMADD(KP587785252, Tn, Tm));
        Ci[WS(cs, 3)]  = -(KP951056516 * (SIMD_FMADD(KP587785252, Tn, Tm)));
        Ci[WS(cs, 9)]  = KP951056516 * (SIMD_FNMADD(KP587785252, Tl, Tj));
        Ci[WS(cs, 1)]  = -(KP951056516 * (SIMD_FMADD(KP587785252, Tl, Tj)));
        Tr             = SIMD_FNMADD(KP250000000, Tq, T8);
        Cr[0]          = T8 + Tq;
        Th             = SIMD_FMADD(KP559016994, Te, Td);
        Tf             = SIMD_FNMADD(KP559016994, Te, Td);
        Ta             = SIMD_FNMADD(KP250000000, T9, T8);
        Cr[WS(cs, 10)] = T8 + T9;
        Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, Ts, Tr);
        Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, Ts, Tr);
        Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tg, Tf);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tg, Tf);
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Ti, Th);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Ti, Th);
        Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Tb, Ta);
        Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Tb, Ta);
    }
}

template <>
struct r2cf_traits<20, 6>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 36;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 6 -name r2cf
 * -standalone */

/*
 * This function contains 46 FP additions, 32 FP multiplications,
 * (or, 18 additions, 4 multiplications, 28 fused multiply/add),
 * 36 stack variables, 4 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 6>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T4, T9, T1, T7, T2, T5, Ta, Tt, Ts, T8, T3, Tk, Tm, Ti, Te;
        SIMD_FLOAT Tq, Tg, To, T6, Tr, Tl, Tf, Tu, Tw, Tb, Td, Tn, Tp, Tj, Th;
        SIMD_FLOAT Tv, Tc;
        T4             = R0[WS(rs, 5)];
        T9             = R0[0];
        T1             = R0[WS(rs, 3)];
        T7             = R0[WS(rs, 2)];
        T2             = R0[WS(rs, 1)];
        T5             = R0[WS(rs, 4)];
        Ta             = T9 - T4;
        Tt             = T9 + T4;
        Ts             = T1 + T7;
        T8             = T1 - T7;
        T3             = T1 - T2;
        Tk             = SIMD_FMADD(KP618033988, T1, T2);
        Tm             = T2 + T1;
        Ti             = SIMD_FNMADD(KP618033988, T2, T1);
        Te             = T5 - T7;
        Tq             = SIMD_FNMADD(KP618033988, T5, T7);
        Tg             = T5 + T7;
        To             = SIMD_FMADD(KP618033988, T7, T5);
        T6             = T5 - T2;
        Tr             = T5 + T2;
        Ci[WS(cs, 5)]  = T3 - T4;
        Tl             = SIMD_FMADD(KP250000000, T3, T4);
        Cr[WS(cs, 5)]  = T9 + Te;
        Tf             = SIMD_FNMADD(KP250000000, Te, T9);
        Tu             = Tr + Ts;
        Tw             = Tr - Ts;
        Ci[WS(cs, 6)]  = -(KP951056516 * (SIMD_FNMADD(KP618033988, Ts, Tr)));
        Ci[WS(cs, 2)]  = -(KP951056516 * (SIMD_FMADD(KP618033988, Tr, Ts)));
        Tb             = T6 - T8;
        Td             = T6 + T8;
        Ci[WS(cs, 8)]  = -(KP951056516 * (SIMD_FNMADD(KP618033988, T6, T8)));
        Ci[WS(cs, 4)]  = KP951056516 * (SIMD_FMADD(KP618033988, T8, T6));
        Tn             = SIMD_FMADD(KP559016994, Tm, Tl);
        Tp             = SIMD_FNMADD(KP559016994, Tm, Tl);
        Tj             = SIMD_FMADD(KP559016994, Tg, Tf);
        Th             = SIMD_FNMADD(KP559016994, Tg, Tf);
        Tv             = SIMD_FNMADD(KP250000000, Tu, Tt);
        Cr[0]          = Tt + Tu;
        Tc             = SIMD_FNMADD(KP250000000, Tb, Ta);
        Cr[WS(cs, 10)] = Ta + Tb;
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tq, Tp);
        Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tq, Tp);
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, To, Tn);
        Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, To, Tn));
        Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Ti, Th);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Ti, Th);
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Tk, Tj);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Tk, Tj);
        Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, Tw, Tv);
        Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, Tw, Tv);
        Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Td, Tc);
        Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Td, Tc);
    }
}

template <>
struct r2cf_traits<20, 7>
{
    static constexpr long_t flops           = 84;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 43;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 7 -name r2cf
 * -standalone */

/*
 * This function contains 52 FP additions, 32 FP multiplications,
 * (or, 24 additions, 4 multiplications, 28 fused multiply/add),
 * 43 stack variables, 4 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 7>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T4, Tb, T9, T1, T6, T2, T5;
        T4 = R0[WS(rs, 5)];
        Tb = R0[0];
        T9 = R0[WS(rs, 2)];
        T1 = R0[WS(rs, 3)];
        T6 = R0[WS(rs, 6)];
        T2 = R0[WS(rs, 1)];
        T5 = R0[WS(rs, 4)];
        {
            SIMD_FLOAT Tc, Tz, Ty, Ta, Tn, Tr, Tp, T3, T7, Td, Tt, Ti, Tx, Te,
                T8;
            SIMD_FLOAT TA, Tq, Tw, Tu, Tl, Tj, Tf, Th, TB, TD, Tv, Ts, Tk, Tg,
                TC;
            SIMD_FLOAT To, Tm;
            Tc            = Tb - T4;
            Tz            = Tb + T4;
            Ty            = T1 + T9;
            Ta            = T1 - T9;
            Tn            = SIMD_FNMADD(KP618033988, T2, T1);
            Tr            = T2 + T1;
            Tp            = SIMD_FMADD(KP618033988, T1, T2);
            T3            = T1 - T2;
            T7            = T6 + T2;
            Td            = T6 - T2;
            Tt            = T5 + T6;
            Ti            = T5 - T6;
            Tx            = Td - T5;
            Te            = T5 + Td;
            T8            = T5 - T7;
            TA            = T5 + T7;
            Ci[WS(cs, 5)] = T3 - T4;
            Tq            = SIMD_FMADD(KP250000000, T3, T4);
            Tw            = SIMD_FNMADD(KP618033988, Tt, T9);
            Tu            = SIMD_FMADD(KP618033988, T9, Tt);
            Tl            = Ti + T9;
            Tj            = Ti - T9;
            Ci[WS(cs, 2)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tx, Ty)));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FMADD(KP618033988, Ty, Tx));
            Tf            = Te - Ta;
            Th            = Te + Ta;
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, T8, Ta)));
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, Ta, T8));
            TB            = TA + Ty;
            TD            = TA - Ty;
            Tv            = SIMD_FNMADD(KP559016994, Tr, Tq);
            Ts            = SIMD_FMADD(KP559016994, Tr, Tq);
            Tk            = SIMD_FNMADD(KP250000000, Tj, Tb);
            Cr[WS(cs, 5)] = Tb + Tj;
            Cr[WS(cs, 10)] = Tc + Tf;
            Tg             = SIMD_FNMADD(KP250000000, Tf, Tc);
            Cr[0]          = Tz + TB;
            TC             = SIMD_FNMADD(KP250000000, TB, Tz);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tw, Tv);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tw, Tv);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, Tu, Ts);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, Tu, Ts));
            To             = SIMD_FMADD(KP559016994, Tl, Tk);
            Tm             = SIMD_FNMADD(KP559016994, Tl, Tk);
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Th, Tg);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Th, Tg);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TD, TC);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TD, TC);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Tp, To);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Tp, To);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tn, Tm);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tn, Tm);
        }
    }
}

template <>
struct r2cf_traits<20, 8>
{
    static constexpr long_t flops           = 90;
    static constexpr long_t operations      = 62;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 50;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 8 -name r2cf
 * -standalone */

/*
 * This function contains 58 FP additions, 32 FP multiplications,
 * (or, 30 additions, 4 multiplications, 28 fused multiply/add),
 * 50 stack variables, 4 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 8>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, Th, T2, Ta, T3, T5, Tc, Tb, Ti, Tw;
        T1 = R0[0];
        Th = R0[WS(rs, 5)];
        T2 = R0[WS(rs, 4)];
        Ta = R0[WS(rs, 1)];
        T3 = R0[WS(rs, 6)];
        T5 = R0[WS(rs, 2)];
        Tc = R0[WS(rs, 7)];
        Tb = R0[WS(rs, 3)];
        Ti = T1 - Th;
        Tw = T1 + Th;
        {
            SIMD_FLOAT T4, TH, Tj, Tu, Tl, Ts, TC, Td, TI, TK, Tk, Tr, Tx, Tv,
                T6;
            SIMD_FLOAT T8, Ty, Tt, Tm, Tq, Te, Tg, TF, TD, TB, Tz, Tp, Tn, TE,
                T9;
            SIMD_FLOAT Tf, T7, TA, To, TG, TJ;
            T4            = T2 - T3;
            TH            = T2 + T3;
            Tj            = T3 - Ta;
            Tu            = T3 + Ta;
            Tl            = T5 - Tc;
            Ts            = T5 + Tc;
            TC            = Tb + Tc;
            Td            = Tb - Tc;
            TI            = SIMD_FMADD(KP618033988, T5, TH);
            TK            = SIMD_FNMADD(KP618033988, TH, T5);
            Tk            = T2 + Tj;
            Tr            = Tj - T2;
            Tx            = T2 + Tu;
            Tv            = T2 - Tu;
            T6            = T4 - T5;
            T8            = T4 + T5;
            Ty            = Tb + Ts;
            Tt            = Tb - Ts;
            Tm            = Tl - Tb;
            Tq            = Tb + Tl;
            Te            = SIMD_FMADD(KP618033988, Td, Ta);
            Tg            = SIMD_FNMADD(KP618033988, Ta, Td);
            TF            = Ta + TC;
            TD            = TC - Ta;
            T7            = SIMD_FNMADD(KP250000000, T6, T1);
            Cr[WS(cs, 5)] = T1 + T6;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, Tt, Tv));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tv, Tt)));
            TB            = Tx - Ty;
            Tz            = Tx + Ty;
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FMADD(KP618033988, Tq, Tr));
            Ci[WS(cs, 2)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tr, Tq)));
            Tp            = Tk - Tm;
            Tn            = Tk + Tm;
            TE            = SIMD_FMADD(KP250000000, TD, Th);
            Ci[WS(cs, 5)] = TD - Th;
            T9            = SIMD_FMADD(KP559016994, T8, T7);
            Tf            = SIMD_FNMADD(KP559016994, T8, T7);
            Cr[0]         = Tw + Tz;
            TA            = SIMD_FNMADD(KP250000000, Tz, Tw);
            Cr[WS(cs, 10)] = Ti + Tn;
            To             = SIMD_FNMADD(KP250000000, Tn, Ti);
            TG             = SIMD_FMADD(KP559016994, TF, TE);
            TJ             = SIMD_FNMADD(KP559016994, TF, TE);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tg, Tf);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tg, Tf);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Te, T9);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Te, T9);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TB, TA);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TB, TA);
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Tp, To);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Tp, To);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, TK, TJ);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, TK, TJ);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, TI, TG);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, TI, TG));
        }
    }
}

template <>
struct r2cf_traits<20, 9>
{
    static constexpr long_t flops           = 94;
    static constexpr long_t operations      = 66;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 55;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 9 -name r2cf
 * -standalone */

/*
 * This function contains 62 FP additions, 32 FP multiplications,
 * (or, 34 additions, 4 multiplications, 28 fused multiply/add),
 * 55 stack variables, 4 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 9>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, To, T2, Tc, T3, T5, Te, T6, Td, TA, Tp;
        T1 = R0[0];
        To = R0[WS(rs, 5)];
        T2 = R0[WS(rs, 4)];
        Tc = R0[WS(rs, 1)];
        T3 = R0[WS(rs, 6)];
        T5 = R0[WS(rs, 8)];
        Te = R0[WS(rs, 7)];
        T6 = R0[WS(rs, 2)];
        Td = R0[WS(rs, 3)];
        TA = T1 + To;
        Tp = T1 - To;
        {
            SIMD_FLOAT TL, T4, Ty, Tj, TM, T7, Tw, Tm, Tf, TG, Tl, Tv, Tk, Tq,
                Tz;
            SIMD_FLOAT TB, TP, TN, Ta, T8, Ti, Tg, Tx, TC, TH, TJ, Tn, Tr, T9,
                TD;
            SIMD_FLOAT TF, TI, Ts, Tu, Th, Tb, TE, TO, TK, Tt;
            TL            = T2 + T3;
            T4            = T2 - T3;
            Ty            = T3 + Tc;
            Tj            = T3 - Tc;
            TM            = T5 + T6;
            T7            = T5 - T6;
            Tw            = T6 + Te;
            Tm            = T6 - Te;
            Tf            = Td - Te;
            TG            = Td + Te;
            Tl            = T5 - Td;
            Tv            = T5 + Td;
            Tk            = Tj - T2;
            Tq            = T2 + Tj;
            Tz            = T2 - Ty;
            TB            = T2 + Ty;
            TP            = SIMD_FNMADD(KP618033988, TL, TM);
            TN            = SIMD_FMADD(KP618033988, TM, TL);
            Ta            = T4 - T7;
            T8            = T4 + T7;
            Ti            = SIMD_FNMADD(KP618033988, Tc, Tf);
            Tg            = SIMD_FMADD(KP618033988, Tf, Tc);
            Tx            = Tv - Tw;
            TC            = Tv + Tw;
            TH            = TG - Tc;
            TJ            = Tc + TG;
            Tn            = Tl - Tm;
            Tr            = Tl + Tm;
            T9            = SIMD_FNMADD(KP250000000, T8, T1);
            Cr[WS(cs, 5)] = T1 + T8;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, Tx, Tz));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, Tz, Tx)));
            TD            = TB + TC;
            TF            = TB - TC;
            TI            = SIMD_FMADD(KP250000000, TH, To);
            Ci[WS(cs, 5)] = TH - To;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tk, Tn));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tn, Tk));
            Ts            = Tq + Tr;
            Tu            = Tq - Tr;
            Th            = SIMD_FNMADD(KP559016994, Ta, T9);
            Tb            = SIMD_FMADD(KP559016994, Ta, T9);
            Cr[0]         = TA + TD;
            TE            = SIMD_FNMADD(KP250000000, TD, TA);
            TO            = SIMD_FNMADD(KP559016994, TJ, TI);
            TK            = SIMD_FMADD(KP559016994, TJ, TI);
            Cr[WS(cs, 10)] = Tp + Ts;
            Tt             = SIMD_FNMADD(KP250000000, Ts, Tp);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Ti, Th);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Ti, Th);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Tg, Tb);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Tg, Tb);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TF, TE);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TF, TE);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, TP, TO);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, TP, TO);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, TN, TK);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, TN, TK));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Tu, Tt);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Tu, Tt);
        }
    }
}

template <>
struct r2cf_traits<20, 10>
{
    static constexpr long_t flops           = 98;
    static constexpr long_t operations      = 70;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 60;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 10 -name r2cf
 * -standalone */

/*
 * This function contains 66 FP additions, 32 FP multiplications,
 * (or, 38 additions, 4 multiplications, 28 fused multiply/add),
 * 60 stack variables, 4 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 10>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, Tr, T2, Td, T3, Tc, T5, Tg, T6, Tf;
        T1 = R0[0];
        Tr = R0[WS(rs, 5)];
        T2 = R0[WS(rs, 4)];
        Td = R0[WS(rs, 9)];
        T3 = R0[WS(rs, 6)];
        Tc = R0[WS(rs, 1)];
        T5 = R0[WS(rs, 8)];
        Tg = R0[WS(rs, 7)];
        T6 = R0[WS(rs, 2)];
        Tf = R0[WS(rs, 3)];
        {
            SIMD_FLOAT Ts, TE, TB, Tm, T4, TQ, TL, Te, TC, Tl, T7, TR, Tp, Tz,
                TK;
            SIMD_FLOAT Th, Ty, To, TF, TD, Tt, Tn, TS, TU, T8, Ta, Ti, Tk, TG,
                TA;
            SIMD_FLOAT TO, TM, Tu, Tq, T9, TJ, TH, TN, Tx, Tv, Tb, Tj, TI, TP,
                TT;
            SIMD_FLOAT Tw;
            Ts            = T1 - Tr;
            TE            = T1 + Tr;
            TB            = T2 + Td;
            Tm            = T2 - Td;
            T4            = T2 - T3;
            TQ            = T2 + T3;
            TL            = Td + Tc;
            Te            = Tc - Td;
            TC            = T3 + Tc;
            Tl            = T3 - Tc;
            T7            = T5 - T6;
            TR            = T5 + T6;
            Tp            = T6 - Tg;
            Tz            = T6 + Tg;
            TK            = Tf + Tg;
            Th            = Tf - Tg;
            Ty            = T5 + Tf;
            To            = T5 - Tf;
            TF            = TB + TC;
            TD            = TB - TC;
            Tt            = Tm + Tl;
            Tn            = Tl - Tm;
            TS            = SIMD_FMADD(KP618033988, TR, TQ);
            TU            = SIMD_FNMADD(KP618033988, TQ, TR);
            T8            = T4 + T7;
            Ta            = T4 - T7;
            Ti            = SIMD_FMADD(KP618033988, Th, Te);
            Tk            = SIMD_FNMADD(KP618033988, Te, Th);
            TG            = Ty + Tz;
            TA            = Ty - Tz;
            TO            = TL + TK;
            TM            = TK - TL;
            Tu            = To + Tp;
            Tq            = To - Tp;
            T9            = SIMD_FNMADD(KP250000000, T8, T1);
            Cr[WS(cs, 5)] = T1 + T8;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TA, TD));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TD, TA)));
            TJ            = TF - TG;
            TH            = TF + TG;
            TN            = SIMD_FMADD(KP250000000, TM, Tr);
            Ci[WS(cs, 5)] = TM - Tr;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tn, Tq));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tq, Tn));
            Tx            = Tt - Tu;
            Tv            = Tt + Tu;
            Tb            = SIMD_FMADD(KP559016994, Ta, T9);
            Tj            = SIMD_FNMADD(KP559016994, Ta, T9);
            Cr[0]         = TE + TH;
            TI            = SIMD_FNMADD(KP250000000, TH, TE);
            TP            = SIMD_FMADD(KP559016994, TO, TN);
            TT            = SIMD_FNMADD(KP559016994, TO, TN);
            Cr[WS(cs, 10)] = Ts + Tv;
            Tw             = SIMD_FNMADD(KP250000000, Tv, Ts);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tk, Tj);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tk, Tj);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Ti, Tb);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Ti, Tb);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TJ, TI);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TJ, TI);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, TU, TT);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, TU, TT);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, TS, TP);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, TS, TP));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Tx, Tw);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Tx, Tw);
        }
    }
}

template <>
struct r2cf_traits<20, 11>
{
    static constexpr long_t flops           = 100;
    static constexpr long_t operations      = 72;
    static constexpr long_t memory_accesses = 31;
    static constexpr long_t stack_vars      = 63;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 11 -name r2cf
 * -standalone */

/*
 * This function contains 68 FP additions, 32 FP multiplications,
 * (or, 40 additions, 4 multiplications, 28 fused multiply/add),
 * 63 stack variables, 4 constants, and 31 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 11>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tu, T1, T2, T4, Tf, T5, Te, T7, Ti, T8, Th;
        Tu = R0[WS(rs, 5)];
        T1 = R0[0];
        T2 = R0[WS(rs, 10)];
        T4 = R0[WS(rs, 4)];
        Tf = R0[WS(rs, 9)];
        T5 = R0[WS(rs, 6)];
        Te = R0[WS(rs, 1)];
        T7 = R0[WS(rs, 8)];
        Ti = R0[WS(rs, 7)];
        T8 = R0[WS(rs, 2)];
        Th = R0[WS(rs, 3)];
        {
            SIMD_FLOAT T3, Tv, TH, TG, TI, Tp, Tw, TX, TV, Tc, Ta, Tm, Tk, TD,
                TJ;
            SIMD_FLOAT TP, TR, Ts, Tx, Tt, To, TE, TT, T6, Tg, TO, Tn, TF, TU,
                T9;
            SIMD_FLOAT TC, Tr, Tj, TN, Tq, TB, Tb, TK, TM, TQ, Ty, TA, Tl, Td,
                TL;
            SIMD_FLOAT TW, TS, Tz;
            T3            = T1 - T2;
            Tt            = T1 + T2;
            To            = T4 - Tf;
            TE            = T4 + Tf;
            TT            = T4 + T5;
            T6            = T4 - T5;
            Tg            = Te - Tf;
            TO            = Tf + Te;
            Tn            = T5 - Te;
            TF            = T5 + Te;
            TU            = T7 + T8;
            T9            = T7 - T8;
            TC            = T8 + Ti;
            Tr            = T8 - Ti;
            Tj            = Th - Ti;
            TN            = Th + Ti;
            Tq            = T7 - Th;
            TB            = T7 + Th;
            Tv            = Tt - Tu;
            TH            = Tt + Tu;
            TG            = TE - TF;
            TI            = TE + TF;
            Tp            = Tn - To;
            Tw            = To + Tn;
            TX            = SIMD_FNMADD(KP618033988, TT, TU);
            TV            = SIMD_FMADD(KP618033988, TU, TT);
            Tc            = T6 - T9;
            Ta            = T6 + T9;
            Tm            = SIMD_FNMADD(KP618033988, Tg, Tj);
            Tk            = SIMD_FMADD(KP618033988, Tj, Tg);
            TD            = TB - TC;
            TJ            = TB + TC;
            TP            = TN - TO;
            TR            = TO + TN;
            Ts            = Tq - Tr;
            Tx            = Tq + Tr;
            Tb            = SIMD_FNMADD(KP250000000, Ta, T3);
            Cr[WS(cs, 5)] = T3 + Ta;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TD, TG));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TG, TD)));
            TK            = TI + TJ;
            TM            = TI - TJ;
            TQ            = SIMD_FMADD(KP250000000, TP, Tu);
            Ci[WS(cs, 5)] = TP - Tu;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tp, Ts));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Ts, Tp));
            Ty            = Tw + Tx;
            TA            = Tw - Tx;
            Tl            = SIMD_FNMADD(KP559016994, Tc, Tb);
            Td            = SIMD_FMADD(KP559016994, Tc, Tb);
            Cr[0]         = TH + TK;
            TL            = SIMD_FNMADD(KP250000000, TK, TH);
            TW            = SIMD_FNMADD(KP559016994, TR, TQ);
            TS            = SIMD_FMADD(KP559016994, TR, TQ);
            Cr[WS(cs, 10)] = Tv + Ty;
            Tz             = SIMD_FNMADD(KP250000000, Ty, Tv);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tm, Tl);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tm, Tl);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, Tk, Td);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, Tk, Td);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TM, TL);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TM, TL);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, TX, TW);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, TX, TW);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, TV, TS);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, TV, TS));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TA, Tz);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TA, Tz);
        }
    }
}

template <>
struct r2cf_traits<20, 12>
{
    static constexpr long_t flops           = 102;
    static constexpr long_t operations      = 74;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 12 -name r2cf
 * -standalone */

/*
 * This function contains 70 FP additions, 32 FP multiplications,
 * (or, 42 additions, 4 multiplications, 28 fused multiply/add),
 * 66 stack variables, 4 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 12>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tx, T1, T2, Tf, Tg, T4, Te, T5, T7, Tk, T8, Tj;
        Tx = R0[WS(rs, 5)];
        T1 = R0[0];
        T2 = R0[WS(rs, 10)];
        Tf = R0[WS(rs, 11)];
        Tg = R0[WS(rs, 1)];
        T4 = R0[WS(rs, 4)];
        Te = R0[WS(rs, 9)];
        T5 = R0[WS(rs, 6)];
        T7 = R0[WS(rs, 8)];
        Tk = R0[WS(rs, 7)];
        T8 = R0[WS(rs, 2)];
        Tj = R0[WS(rs, 3)];
        {
            SIMD_FLOAT TK, Ty, TY, T10, Tc, TM, TG, TA, Tv, Tz, Ts, TL, TJ, TS,
                TU;
            SIMD_FLOAT Tm, To, Tb, Tw, T3, Th, Tp, TH, Tr, T6, TW, T9, TX, Tu,
                TF;
            SIMD_FLOAT TR, Tl, TE, Tt, TI, Tq, Ti, TQ, Ta, TD, TB, TP, TN, TT,
                Td;
            SIMD_FLOAT Tn, TC, TO, TV, TZ;
            Tw            = T1 + T2;
            T3            = T1 - T2;
            Th            = Tf - Tg;
            Tp            = Tg + Tf;
            TH            = T4 + Te;
            Tr            = T4 - Te;
            T6            = T4 - T5;
            TW            = T4 + T5;
            T9            = T7 - T8;
            TX            = T7 + T8;
            Tu            = T8 - Tk;
            TF            = T8 + Tk;
            TR            = Tj + Tk;
            Tl            = Tj - Tk;
            TE            = T7 + Tj;
            Tt            = T7 - Tj;
            TK            = Tw + Tx;
            Ty            = Tw - Tx;
            TI            = T5 + Tp;
            Tq            = T5 - Tp;
            Ti            = Te + Th;
            TQ            = Th - Te;
            TY            = SIMD_FMADD(KP618033988, TX, TW);
            T10           = SIMD_FNMADD(KP618033988, TW, TX);
            Ta            = T6 + T9;
            Tc            = T6 - T9;
            TM            = TE + TF;
            TG            = TE - TF;
            TA            = Tt + Tu;
            Tv            = Tt - Tu;
            Tz            = Tr + Tq;
            Ts            = Tq - Tr;
            TL            = TH + TI;
            TJ            = TH - TI;
            TS            = TQ + TR;
            TU            = TQ - TR;
            Tm            = SIMD_FNMADD(KP618033988, Tl, Ti);
            To            = SIMD_FMADD(KP618033988, Ti, Tl);
            Tb            = SIMD_FNMADD(KP250000000, Ta, T3);
            Cr[WS(cs, 5)] = T3 + Ta;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Ts, Tv));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tv, Ts));
            TD            = Tz - TA;
            TB            = Tz + TA;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TG, TJ));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TJ, TG)));
            TP            = TL - TM;
            TN            = TL + TM;
            TT            = SIMD_FMADD(KP250000000, TS, Tx);
            Ci[WS(cs, 5)] = TS - Tx;
            Td            = SIMD_FMADD(KP559016994, Tc, Tb);
            Tn            = SIMD_FNMADD(KP559016994, Tc, Tb);
            Cr[WS(cs, 10)] = Ty + TB;
            TC             = SIMD_FNMADD(KP250000000, TB, Ty);
            Cr[0]          = TK + TN;
            TO             = SIMD_FNMADD(KP250000000, TN, TK);
            TV             = SIMD_FNMADD(KP559016994, TU, TT);
            TZ             = SIMD_FMADD(KP559016994, TU, TT);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, To, Tn);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, To, Tn);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, Tm, Td);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, Tm, Td);
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TD, TC);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TD, TC);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TP, TO);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TP, TO);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T10, TZ);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T10, TZ);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, TY, TV);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, TY, TV));
        }
    }
}

template <>
struct r2cf_traits<20, 13>
{
    static constexpr long_t flops           = 104;
    static constexpr long_t operations      = 76;
    static constexpr long_t memory_accesses = 33;
    static constexpr long_t stack_vars      = 69;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 13 -name r2cf
 * -standalone */

/*
 * This function contains 72 FP additions, 32 FP multiplications,
 * (or, 44 additions, 4 multiplications, 28 fused multiply/add),
 * 69 stack variables, 4 constants, and 33 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 13>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT TA, T1, T2, T8, T9, Th, Ti, T4, Tg, T5, T7, Tm, Tl;
        TA = R0[WS(rs, 5)];
        T1 = R0[0];
        T2 = R0[WS(rs, 10)];
        T8 = R0[WS(rs, 12)];
        T9 = R0[WS(rs, 2)];
        Th = R0[WS(rs, 11)];
        Ti = R0[WS(rs, 1)];
        T4 = R0[WS(rs, 4)];
        Tg = R0[WS(rs, 9)];
        T5 = R0[WS(rs, 6)];
        T7 = R0[WS(rs, 8)];
        Tm = R0[WS(rs, 7)];
        Tl = R0[WS(rs, 3)];
        {
            SIMD_FLOAT T3, Tt, TK, TZ, T6, Tn, TU, Tv, TH, TB, TN, Tx, TI, Tb,
                T10;
            SIMD_FLOAT TL, Ts, TT, Tk, Tz, Tw, Ta, Tr, Tj, Ty, TD, TJ, TP, Te,
                Tc;
            SIMD_FLOAT T13, T11, TM, TO, Tu, TC, TX, TV, Tq, To, Td, TQ, TS, TE,
                TG;
            SIMD_FLOAT TW, Tp, Tf, TR, TF, T12, TY;
            T3            = T1 - T2;
            Tz            = T1 + T2;
            Tw            = T8 + T9;
            Ta            = T8 - T9;
            Tr            = Ti + Th;
            Tj            = Th - Ti;
            Tt            = T4 - Tg;
            TK            = T4 + Tg;
            TZ            = T4 + T5;
            T6            = T4 - T5;
            Tn            = Tl - Tm;
            TU            = Tl + Tm;
            Tv            = T7 - Tl;
            TH            = T7 + Tl;
            TB            = Tz - TA;
            TN            = Tz + TA;
            Tx            = Tw - Tm;
            TI            = Tw + Tm;
            Tb            = T7 + Ta;
            T10           = T7 - Ta;
            TL            = T5 + Tr;
            Ts            = T5 - Tr;
            TT            = Tj - Tg;
            Tk            = Tg + Tj;
            Ty            = Tv - Tx;
            TD            = Tv + Tx;
            TJ            = TH - TI;
            TP            = TH + TI;
            Te            = T6 - Tb;
            Tc            = T6 + Tb;
            T13           = SIMD_FNMADD(KP618033988, TZ, T10);
            T11           = SIMD_FMADD(KP618033988, T10, TZ);
            TM            = TK - TL;
            TO            = TK + TL;
            Tu            = Ts - Tt;
            TC            = Tt + Ts;
            TX            = TT - TU;
            TV            = TT + TU;
            Tq            = SIMD_FMADD(KP618033988, Tk, Tn);
            To            = SIMD_FNMADD(KP618033988, Tn, Tk);
            Td            = SIMD_FNMADD(KP250000000, Tc, T3);
            Cr[WS(cs, 5)] = T3 + Tc;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TJ, TM));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TM, TJ)));
            TQ            = TO + TP;
            TS            = TO - TP;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tu, Ty));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Ty, Tu));
            TE            = TC + TD;
            TG            = TC - TD;
            TW            = SIMD_FMADD(KP250000000, TV, TA);
            Ci[WS(cs, 5)] = TV - TA;
            Tp            = SIMD_FNMADD(KP559016994, Te, Td);
            Tf            = SIMD_FMADD(KP559016994, Te, Td);
            Cr[0]         = TN + TQ;
            TR            = SIMD_FNMADD(KP250000000, TQ, TN);
            Cr[WS(cs, 10)] = TB + TE;
            TF             = SIMD_FNMADD(KP250000000, TE, TB);
            T12            = SIMD_FMADD(KP559016994, TX, TW);
            TY             = SIMD_FNMADD(KP559016994, TX, TW);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, Tq, Tp);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, Tq, Tp);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, To, Tf);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, To, Tf);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TS, TR);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TS, TR);
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TG, TF);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TG, TF);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T13, T12);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T13, T12);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T11, TY);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T11, TY));
        }
    }
}

template <>
struct r2cf_traits<20, 14>
{
    static constexpr long_t flops           = 106;
    static constexpr long_t operations      = 78;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 72;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 14 -name r2cf
 * -standalone */

/*
 * This function contains 74 FP additions, 32 FP multiplications,
 * (or, 46 additions, 4 multiplications, 28 fused multiply/add),
 * 72 stack variables, 4 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 14>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tt, T7, Tp, T8, T9, Tk, Tl, Td, Te, T4, Th, T5, Ts, T3, T1;
        SIMD_FLOAT T2;
        Tt = R0[WS(rs, 5)];
        T1 = R0[0];
        T2 = R0[WS(rs, 10)];
        T7 = R0[WS(rs, 8)];
        Tp = R0[WS(rs, 7)];
        T8 = R0[WS(rs, 12)];
        T9 = R0[WS(rs, 2)];
        Tk = R0[WS(rs, 13)];
        Tl = R0[WS(rs, 3)];
        Td = R0[WS(rs, 1)];
        Te = R0[WS(rs, 11)];
        T4 = R0[WS(rs, 4)];
        Th = R0[WS(rs, 9)];
        T5 = R0[WS(rs, 6)];
        Ts = T1 + T2;
        T3 = T1 - T2;
        {
            SIMD_FLOAT TD, Ti, T6, T12, TG, Tu, Tq, TB, T13, Tb, TS, TX, Tn, TA,
                TQ;
            SIMD_FLOAT TW, TE, Tg, Ta, To, Tm, TR, Tf, TP, TN, T14, T16, TI, TC,
                Tw;
            SIMD_FLOAT Tr, TY, T10, TT, TV, Tv, Tj, TH, TF, TM, Tc, TZ, Tz, Tx,
                TL;
            SIMD_FLOAT TJ, TO, TU, T11, T15, Ty, TK;
            Ta            = T8 - T9;
            To            = T8 + T9;
            Tm            = Tk + Tl;
            TR            = Tl - Tk;
            Tf            = Td + Te;
            TP            = Te - Td;
            TD            = T4 + Th;
            Ti            = T4 - Th;
            T6            = T4 - T5;
            T12           = T4 + T5;
            TG            = Ts + Tt;
            Tu            = Ts - Tt;
            Tq            = To - Tp;
            TB            = To + Tp;
            T13           = T7 - Ta;
            Tb            = T7 + Ta;
            TS            = Tp - TR;
            TX            = TR + Tp;
            Tn            = T7 - Tm;
            TA            = T7 + Tm;
            TQ            = Th + TP;
            TW            = TP - Th;
            TE            = T5 + Tf;
            Tg            = T5 - Tf;
            Tc            = T6 + Tb;
            TN            = T6 - Tb;
            T14           = SIMD_FMADD(KP618033988, T13, T12);
            T16           = SIMD_FNMADD(KP618033988, T12, T13);
            TI            = TA + TB;
            TC            = TA - TB;
            Tw            = Tn + Tq;
            Tr            = Tn - Tq;
            TY            = TW + TX;
            T10           = TW - TX;
            TT            = SIMD_FMADD(KP618033988, TS, TQ);
            TV            = SIMD_FNMADD(KP618033988, TQ, TS);
            Tv            = Ti + Tg;
            Tj            = Tg - Ti;
            TH            = TD + TE;
            TF            = TD - TE;
            TM            = SIMD_FNMADD(KP250000000, Tc, T3);
            Cr[WS(cs, 5)] = T3 + Tc;
            TZ            = SIMD_FMADD(KP250000000, TY, Tt);
            Ci[WS(cs, 5)] = TY - Tt;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tj, Tr));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tr, Tj));
            Tz            = Tv - Tw;
            Tx            = Tv + Tw;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TC, TF));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TF, TC)));
            TL            = TH - TI;
            TJ            = TH + TI;
            TO            = SIMD_FMADD(KP559016994, TN, TM);
            TU            = SIMD_FNMADD(KP559016994, TN, TM);
            T11           = SIMD_FNMADD(KP559016994, T10, TZ);
            T15           = SIMD_FMADD(KP559016994, T10, TZ);
            Cr[WS(cs, 10)] = Tu + Tx;
            Ty             = SIMD_FNMADD(KP250000000, Tx, Tu);
            Cr[0]          = TG + TJ;
            TK             = SIMD_FNMADD(KP250000000, TJ, TG);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP951056516, TV, TU);
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP951056516, TV, TU);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, TT, TO);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, TT, TO);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T16, T15);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T16, T15);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T14, T11);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T14, T11));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, Tz, Ty);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, Tz, Ty);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TL, TK);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TL, TK);
        }
    }
}

template <>
struct r2cf_traits<20, 15>
{
    static constexpr long_t flops           = 108;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 35;
    static constexpr long_t stack_vars      = 75;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 15 -name r2cf
 * -standalone */

/*
 * This function contains 76 FP additions, 32 FP multiplications,
 * (or, 48 additions, 4 multiplications, 28 fused multiply/add),
 * 75 stack variables, 4 constants, and 35 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 15>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tw, T7, Tk, Ts, T9, T4, T5, Tf, Tg, Tn, To, Ta, Tv, T3, Tb;
        SIMD_FLOAT T1, T2, Tj, T6, TS, Th, TU, Tp, Tx, TJ, Tr, Tc;
        Tw = R0[WS(rs, 5)];
        T1 = R0[0];
        T2 = R0[WS(rs, 10)];
        T7 = R0[WS(rs, 6)];
        Tk = R0[WS(rs, 9)];
        Ts = R0[WS(rs, 7)];
        T9 = R0[WS(rs, 8)];
        T4 = R0[WS(rs, 4)];
        T5 = R0[WS(rs, 14)];
        Tf = R0[WS(rs, 1)];
        Tg = R0[WS(rs, 11)];
        Tn = R0[WS(rs, 13)];
        To = R0[WS(rs, 3)];
        Ta = R0[WS(rs, 12)];
        Tv = T1 + T2;
        T3 = T1 - T2;
        Tb = R0[WS(rs, 2)];
        Tj = T4 + T5;
        T6 = T4 - T5;
        TS = Tg - Tf;
        Th = Tf + Tg;
        TU = To - Tn;
        Tp = Tn + To;
        Tx = Tv - Tw;
        TJ = Tv + Tw;
        Tr = Ta + Tb;
        Tc = Ta - Tb;
        {
            SIMD_FLOAT TG, Tl, T8, T15, TZ, TT, TH, Ti, T10, TV, Tq, TD, Tt, TE,
                Td;
            SIMD_FLOAT T16, TI, TK, Tm, Ty, T13, T11, TY, TW, Tu, Tz, TF, TL,
                TQ, Te;
            SIMD_FLOAT T19, T17, T12, TA, TC, TM, TO, TP, T18, T14, TB, TN, TX,
                TR;
            TG            = Tj + Tk;
            Tl            = Tj - Tk;
            T8            = T6 - T7;
            T15           = T6 + T7;
            TZ            = TS - Tk;
            TT            = Tk + TS;
            TH            = T7 + Th;
            Ti            = T7 - Th;
            T10           = TU + Ts;
            TV            = Ts - TU;
            Tq            = T9 - Tp;
            TD            = T9 + Tp;
            Tt            = Tr - Ts;
            TE            = Tr + Ts;
            Td            = T9 + Tc;
            T16           = T9 - Tc;
            TI            = TG - TH;
            TK            = TG + TH;
            Tm            = Ti - Tl;
            Ty            = Tl + Ti;
            T13           = TZ - T10;
            T11           = TZ + T10;
            TY            = SIMD_FNMADD(KP618033988, TT, TV);
            TW            = SIMD_FMADD(KP618033988, TV, TT);
            Tu            = Tq - Tt;
            Tz            = Tq + Tt;
            TF            = TD - TE;
            TL            = TD + TE;
            TQ            = T8 - Td;
            Te            = T8 + Td;
            T19           = SIMD_FNMADD(KP618033988, T15, T16);
            T17           = SIMD_FMADD(KP618033988, T16, T15);
            T12           = SIMD_FMADD(KP250000000, T11, Tw);
            Ci[WS(cs, 5)] = T11 - Tw;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tm, Tu));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tu, Tm));
            TA            = Ty + Tz;
            TC            = Ty - Tz;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TF, TI));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TI, TF)));
            TM            = TK + TL;
            TO            = TK - TL;
            TP            = SIMD_FNMADD(KP250000000, Te, T3);
            Cr[WS(cs, 5)] = T3 + Te;
            T18           = SIMD_FMADD(KP559016994, T13, T12);
            T14           = SIMD_FNMADD(KP559016994, T13, T12);
            Cr[WS(cs, 10)] = Tx + TA;
            TB             = SIMD_FNMADD(KP250000000, TA, Tx);
            Cr[0]          = TJ + TM;
            TN             = SIMD_FNMADD(KP250000000, TM, TJ);
            TX             = SIMD_FNMADD(KP559016994, TQ, TP);
            TR             = SIMD_FMADD(KP559016994, TQ, TP);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T19, T18);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T19, T18);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T17, T14);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T17, T14));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TC, TB);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TC, TB);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TO, TN);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TO, TN);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP951056516, TY, TX);
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP951056516, TY, TX);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, TW, TR);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, TW, TR);
        }
    }
}

template <>
struct r2cf_traits<20, 16>
{
    static constexpr long_t flops           = 110;
    static constexpr long_t operations      = 82;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 78;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 16 -name r2cf
 * -standalone */

/*
 * This function contains 78 FP additions, 32 FP multiplications,
 * (or, 50 additions, 4 multiplications, 28 fused multiply/add),
 * 78 stack variables, 4 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 16>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T7, Tk, Ts, T9, T4, T5, Tf, Tg, Tn, T3, Tv, T11, Ty, To, Ta;
        SIMD_FLOAT Tb, T1, T2, Tw, Tx, T6, Tj, Th, TU;
        T1  = R0[0];
        T2  = R0[WS(rs, 10)];
        Tw  = R0[WS(rs, 5)];
        Tx  = R0[WS(rs, 15)];
        T7  = R0[WS(rs, 6)];
        Tk  = R0[WS(rs, 9)];
        Ts  = R0[WS(rs, 7)];
        T9  = R0[WS(rs, 8)];
        T4  = R0[WS(rs, 4)];
        T5  = R0[WS(rs, 14)];
        Tf  = R0[WS(rs, 1)];
        Tg  = R0[WS(rs, 11)];
        Tn  = R0[WS(rs, 13)];
        T3  = T1 - T2;
        Tv  = T1 + T2;
        T11 = Tw - Tx;
        Ty  = Tw + Tx;
        To  = R0[WS(rs, 3)];
        Ta  = R0[WS(rs, 12)];
        Tb  = R0[WS(rs, 2)];
        T6  = T4 - T5;
        Tj  = T4 + T5;
        Th  = Tf + Tg;
        TU  = Tg - Tf;
        {
            SIMD_FLOAT Tz, TL, Tl, TI, T18, T8, TV, T12, Ti, TJ, TX, T13, TF,
                Tq, TG;
            SIMD_FLOAT Tt, T19, Td, Tp, TW, Tc, Tr, TM, TK, TA, Tm, T14, T16,
                TY, T10;
            SIMD_FLOAT TB, Tu, TN, TH, Te, TS, T1a, T1c, T15, TE, TC, TQ, TO,
                TR, T17;
            SIMD_FLOAT T1b, TD, TP, TT, TZ;
            Tz            = Tv - Ty;
            TL            = Tv + Ty;
            Tp            = Tn + To;
            TW            = To - Tn;
            Tc            = Ta - Tb;
            Tr            = Ta + Tb;
            Tl            = Tj - Tk;
            TI            = Tj + Tk;
            T18           = T6 + T7;
            T8            = T6 - T7;
            TV            = Tk + TU;
            T12           = TU - Tk;
            Ti            = T7 - Th;
            TJ            = T7 + Th;
            TX            = Ts - TW;
            T13           = TW + Ts;
            TF            = T9 + Tp;
            Tq            = T9 - Tp;
            TG            = Tr + Ts;
            Tt            = Tr - Ts;
            T19           = T9 - Tc;
            Td            = T9 + Tc;
            TM            = TI + TJ;
            TK            = TI - TJ;
            TA            = Tl + Ti;
            Tm            = Ti - Tl;
            T14           = T12 + T13;
            T16           = T12 - T13;
            TY            = SIMD_FMADD(KP618033988, TX, TV);
            T10           = SIMD_FNMADD(KP618033988, TV, TX);
            TB            = Tq + Tt;
            Tu            = Tq - Tt;
            TN            = TF + TG;
            TH            = TF - TG;
            Te            = T8 + Td;
            TS            = T8 - Td;
            T1a           = SIMD_FMADD(KP618033988, T19, T18);
            T1c           = SIMD_FNMADD(KP618033988, T18, T19);
            T15           = SIMD_FMADD(KP250000000, T14, T11);
            Ci[WS(cs, 5)] = T14 - T11;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tm, Tu));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tu, Tm));
            TE            = TA - TB;
            TC            = TA + TB;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TH, TK));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TK, TH)));
            TQ            = TM - TN;
            TO            = TM + TN;
            TR            = SIMD_FNMADD(KP250000000, Te, T3);
            Cr[WS(cs, 5)] = T3 + Te;
            T17           = SIMD_FNMADD(KP559016994, T16, T15);
            T1b           = SIMD_FMADD(KP559016994, T16, T15);
            Cr[WS(cs, 10)] = Tz + TC;
            TD             = SIMD_FNMADD(KP250000000, TC, Tz);
            Cr[0]          = TL + TO;
            TP             = SIMD_FNMADD(KP250000000, TO, TL);
            TT             = SIMD_FMADD(KP559016994, TS, TR);
            TZ             = SIMD_FNMADD(KP559016994, TS, TR);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T1c, T1b);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T1c, T1b);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T1a, T17);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T1a, T17));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TE, TD);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TE, TD);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TQ, TP);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TQ, TP);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP951056516, T10, TZ);
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP951056516, T10, TZ);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, TY, TT);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, TY, TT);
        }
    }
}

template <>
struct r2cf_traits<20, 17>
{
    static constexpr long_t flops           = 112;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 37;
    static constexpr long_t stack_vars      = 81;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 17 -name r2cf
 * -standalone */

/*
 * This function contains 80 FP additions, 32 FP multiplications,
 * (or, 52 additions, 4 multiplications, 28 fused multiply/add),
 * 81 stack variables, 4 constants, and 37 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 17>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tb, Tn, Tv, T3, Ty, T14, TB, Ti, Tj, T7, Ts, TZ, T6, Tm, Te;
        SIMD_FLOAT Tu, T8, T1, T2, Tz, TA, Tq, Tr, T4, T5, Tc, Td, TO, TC, Tk;
        SIMD_FLOAT T16, T10, Tt, TI, TL, To, Tw, TJ, Tf, T1c, Th, T9, T15, TY,
            TX;
        T1  = R0[0];
        T2  = R0[WS(rs, 10)];
        Tz  = R0[WS(rs, 5)];
        TA  = R0[WS(rs, 15)];
        Tb  = R0[WS(rs, 8)];
        Tn  = R0[WS(rs, 9)];
        Tv  = R0[WS(rs, 7)];
        Tq  = R0[WS(rs, 13)];
        Tr  = R0[WS(rs, 3)];
        T4  = R0[WS(rs, 4)];
        T5  = R0[WS(rs, 14)];
        Tc  = R0[WS(rs, 12)];
        Td  = R0[WS(rs, 2)];
        T3  = T1 - T2;
        Ty  = T1 + T2;
        T14 = Tz - TA;
        TB  = Tz + TA;
        Ti  = R0[WS(rs, 1)];
        Tj  = R0[WS(rs, 11)];
        T7  = R0[WS(rs, 16)];
        Ts  = Tq + Tr;
        TZ  = Tr - Tq;
        T6  = T4 - T5;
        Tm  = T4 + T5;
        Te  = Tc - Td;
        Tu  = Tc + Td;
        T8  = R0[WS(rs, 6)];
        TO  = Ty + TB;
        TC  = Ty - TB;
        TX  = Tj - Ti;
        Tk  = Ti + Tj;
        T16 = TZ + Tv;
        T10 = Tv - TZ;
        Tt  = Tb - Ts;
        TI  = Tb + Ts;
        TL  = Tm + Tn;
        To  = Tm - Tn;
        Tw  = Tu - Tv;
        TJ  = Tu + Tv;
        Tf  = Tb + Te;
        T1c = Tb - Te;
        Th  = T7 + T8;
        T9  = T7 - T8;
        T15 = TX - Tn;
        TY  = Tn + TX;
        {
            SIMD_FLOAT Tx, TE, TK, TQ, TM, Tl, Ta, T1b, T19, T17, T13, T11, TN,
                TP, Tp;
            SIMD_FLOAT TD, TV, Tg, T1f, T1d, T18, TR, TT, TF, TH, TU, T1e, T1a,
                TS, TG;
            SIMD_FLOAT T12, TW;
            Tx            = Tt - Tw;
            TE            = Tt + Tw;
            TK            = TI - TJ;
            TQ            = TI + TJ;
            TM            = Th + Tk;
            Tl            = Th - Tk;
            Ta            = T6 + T9;
            T1b           = T6 - T9;
            T19           = T15 - T16;
            T17           = T15 + T16;
            T13           = SIMD_FNMADD(KP618033988, TY, T10);
            T11           = SIMD_FMADD(KP618033988, T10, TY);
            TN            = TL - TM;
            TP            = TL + TM;
            Tp            = Tl - To;
            TD            = To + Tl;
            TV            = Ta - Tf;
            Tg            = Ta + Tf;
            T1f           = SIMD_FNMADD(KP618033988, T1b, T1c);
            T1d           = SIMD_FMADD(KP618033988, T1c, T1b);
            T18           = SIMD_FMADD(KP250000000, T17, T14);
            Ci[WS(cs, 5)] = T17 - T14;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TK, TN));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TN, TK)));
            TR            = TP + TQ;
            TT            = TP - TQ;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tp, Tx));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tx, Tp));
            TF            = TD + TE;
            TH            = TD - TE;
            TU            = SIMD_FNMADD(KP250000000, Tg, T3);
            Cr[WS(cs, 5)] = T3 + Tg;
            T1e           = SIMD_FMADD(KP559016994, T19, T18);
            T1a           = SIMD_FNMADD(KP559016994, T19, T18);
            Cr[0]         = TO + TR;
            TS            = SIMD_FNMADD(KP250000000, TR, TO);
            Cr[WS(cs, 10)] = TC + TF;
            TG             = SIMD_FNMADD(KP250000000, TF, TC);
            T12            = SIMD_FNMADD(KP559016994, TV, TU);
            TW             = SIMD_FMADD(KP559016994, TV, TU);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T1f, T1e);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T1f, T1e);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T1d, T1a);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T1d, T1a));
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TT, TS);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TT, TS);
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TH, TG);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TH, TG);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP951056516, T13, T12);
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP951056516, T13, T12);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, T11, TW);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, T11, TW);
        }
    }
}

template <>
struct r2cf_traits<20, 18>
{
    static constexpr long_t flops           = 114;
    static constexpr long_t operations      = 86;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 84;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 18 -name r2cf
 * -standalone */

/*
 * This function contains 82 FP additions, 32 FP multiplications,
 * (or, 54 additions, 4 multiplications, 28 fused multiply/add),
 * 84 stack variables, 4 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 18>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tb, Tn, T3, T17, Tq, T6, T12, Tx, Th, T9, Tr, Tc, Td, TE, TQ;
        SIMD_FLOAT Tk, TZ, TN, To, T1, T2, TB, TC, Tm, T4, T5, Tv, Tw, T7, T8;
        SIMD_FLOAT Ti, TA, TD, Tj, T1e, Ta, Ts, T11, Te, Tu, T10, T18, Tl, TO;
        T1  = R0[0];
        T2  = R0[WS(rs, 10)];
        TB  = R0[WS(rs, 5)];
        TC  = R0[WS(rs, 15)];
        Tb  = R0[WS(rs, 8)];
        Tn  = R0[WS(rs, 9)];
        T4  = R0[WS(rs, 4)];
        T5  = R0[WS(rs, 14)];
        Tv  = R0[WS(rs, 17)];
        Tw  = R0[WS(rs, 7)];
        T7  = R0[WS(rs, 16)];
        T8  = R0[WS(rs, 6)];
        Ti  = R0[WS(rs, 1)];
        T3  = T1 - T2;
        TA  = T1 + T2;
        T17 = TB - TC;
        TD  = TB + TC;
        Tj  = R0[WS(rs, 11)];
        Tq  = R0[WS(rs, 13)];
        Tm  = T4 + T5;
        T6  = T4 - T5;
        T12 = Tw - Tv;
        Tx  = Tv + Tw;
        Th  = T7 + T8;
        T9  = T7 - T8;
        Tr  = R0[WS(rs, 3)];
        Tc  = R0[WS(rs, 12)];
        Td  = R0[WS(rs, 2)];
        TE  = TA - TD;
        TQ  = TA + TD;
        Tk  = Ti + Tj;
        TZ  = Tj - Ti;
        TN  = Tm + Tn;
        To  = Tm - Tn;
        T1e = T6 - T9;
        Ta  = T6 + T9;
        Ts  = Tq + Tr;
        T11 = Tr - Tq;
        Te  = Tc - Td;
        Tu  = Tc + Td;
        T10 = Tn + TZ;
        T18 = TZ - Tn;
        Tl  = Th - Tk;
        TO  = Th + Tk;
        {
            SIMD_FLOAT TR, TP, TF, Tp, T1a, T1c, T14, T16, TG, Tz, TS, TM, Tg,
                TX, T1g;
            SIMD_FLOAT T1i, T13, T19, TK, Tt, TL, Ty, T1f, Tf, T1b, TJ, TH, TV,
                TT, TW;
            SIMD_FLOAT T1d, T1h, TI, TU, TY, T15;
            T13           = T11 - T12;
            T19           = T11 + T12;
            TK            = Tb + Ts;
            Tt            = Tb - Ts;
            TL            = Tu + Tx;
            Ty            = Tu - Tx;
            T1f           = Tb - Te;
            Tf            = Tb + Te;
            TR            = TN + TO;
            TP            = TN - TO;
            TF            = To + Tl;
            Tp            = Tl - To;
            T1a           = T18 + T19;
            T1c           = T18 - T19;
            T14           = SIMD_FNMADD(KP618033988, T13, T10);
            T16           = SIMD_FMADD(KP618033988, T10, T13);
            TG            = Tt + Ty;
            Tz            = Tt - Ty;
            TS            = TK + TL;
            TM            = TK - TL;
            Tg            = Ta + Tf;
            TX            = Ta - Tf;
            T1g           = SIMD_FMADD(KP618033988, T1f, T1e);
            T1i           = SIMD_FNMADD(KP618033988, T1e, T1f);
            T1b           = SIMD_FMADD(KP250000000, T1a, T17);
            Ci[WS(cs, 5)] = T1a - T17;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tp, Tz));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, Tz, Tp));
            TJ            = TF - TG;
            TH            = TF + TG;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TM, TP));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TP, TM)));
            TV            = TR - TS;
            TT            = TR + TS;
            TW            = SIMD_FNMADD(KP250000000, Tg, T3);
            Cr[WS(cs, 5)] = T3 + Tg;
            T1d           = SIMD_FNMADD(KP559016994, T1c, T1b);
            T1h           = SIMD_FMADD(KP559016994, T1c, T1b);
            Cr[WS(cs, 10)] = TE + TH;
            TI             = SIMD_FNMADD(KP250000000, TH, TE);
            Cr[0]          = TQ + TT;
            TU             = SIMD_FNMADD(KP250000000, TT, TQ);
            TY             = SIMD_FMADD(KP559016994, TX, TW);
            T15            = SIMD_FNMADD(KP559016994, TX, TW);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T1i, T1h);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T1i, T1h);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T1g, T1d);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T1g, T1d));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TJ, TI);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TJ, TI);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TV, TU);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TV, TU);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T16, T15);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T16, T15);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, T14, TY);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, T14, TY);
        }
    }
}

template <>
struct r2cf_traits<20, 19>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 88;
    static constexpr long_t memory_accesses = 39;
    static constexpr long_t stack_vars      = 87;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 19 -name r2cf
 * -standalone */

/*
 * This function contains 84 FP additions, 32 FP multiplications,
 * (or, 56 additions, 4 multiplications, 28 fused multiply/add),
 * 87 stack variables, 4 constants, and 39 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 19>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tp, T3, T1a, Tv, TA, Tj, Tk, TH, TT, Tl, Tb, Tc, T16, T1c,
            Tq;
        SIMD_FLOAT TQ, Ta, T1h, Tx, Tg, T1, T2, TE, TF, Te, T14, T15, T6, To,
            T9;
        SIMD_FLOAT Tf, Tt, Tu, Ty, Tz, T4, T5, TD, TG, T7, T8, T12, Tm, Ts, Td;
        SIMD_FLOAT TB, TO;
        T1  = R0[0];
        T2  = R0[WS(rs, 10)];
        TE  = R0[WS(rs, 5)];
        TF  = R0[WS(rs, 15)];
        Tp  = R0[WS(rs, 9)];
        Tt  = R0[WS(rs, 13)];
        Tu  = R0[WS(rs, 3)];
        Ty  = R0[WS(rs, 17)];
        Tz  = R0[WS(rs, 7)];
        T4  = R0[WS(rs, 4)];
        T5  = R0[WS(rs, 14)];
        T7  = R0[WS(rs, 16)];
        T8  = R0[WS(rs, 6)];
        T3  = T1 - T2;
        TD  = T1 + T2;
        T1a = TE - TF;
        TG  = TE + TF;
        Te  = R0[WS(rs, 12)];
        Tv  = Tt + Tu;
        T14 = Tu - Tt;
        TA  = Ty + Tz;
        T15 = Tz - Ty;
        T6  = T4 - T5;
        To  = T4 + T5;
        T9  = T7 - T8;
        Tj  = T7 + T8;
        Tf  = R0[WS(rs, 2)];
        Tk  = R0[WS(rs, 1)];
        TH  = TD - TG;
        TT  = TD + TG;
        Tl  = R0[WS(rs, 11)];
        Tb  = R0[WS(rs, 8)];
        Tc  = R0[WS(rs, 18)];
        T16 = T14 - T15;
        T1c = T14 + T15;
        Tq  = To - Tp;
        TQ  = To + Tp;
        Ta  = T6 + T9;
        T1h = T6 - T9;
        Tx  = Te + Tf;
        Tg  = Te - Tf;
        T12 = Tl - Tk;
        Tm  = Tk + Tl;
        Ts  = Tb + Tc;
        Td  = Tb - Tc;
        TB  = Tx - TA;
        TO  = Tx + TA;
        {
            SIMD_FLOAT T1b, T13, TR, Tn, Tw, TN, Th, T1i, T1f, T19, T17, TS, TU,
                Tr, TI;
            SIMD_FLOAT TC, TJ, TP, TV, T10, Ti, T1l, T1j, T1e, T1d, TK, TM, TW,
                TY, TZ;
            SIMD_FLOAT T1k, T1g, TL, TX, T18, T11;
            T1b           = T12 - Tp;
            T13           = Tp + T12;
            TR            = Tj + Tm;
            Tn            = Tj - Tm;
            Tw            = Ts - Tv;
            TN            = Ts + Tv;
            Th            = Td + Tg;
            T1i           = Td - Tg;
            T1f           = T1b - T1c;
            T1d           = T1b + T1c;
            T19           = SIMD_FMADD(KP618033988, T13, T16);
            T17           = SIMD_FNMADD(KP618033988, T16, T13);
            TS            = TQ - TR;
            TU            = TQ + TR;
            Tr            = Tn - Tq;
            TI            = Tq + Tn;
            TC            = Tw - TB;
            TJ            = Tw + TB;
            TP            = TN - TO;
            TV            = TN + TO;
            T10           = Ta - Th;
            Ti            = Ta + Th;
            T1l           = SIMD_FNMADD(KP618033988, T1h, T1i);
            T1j           = SIMD_FMADD(KP618033988, T1i, T1h);
            T1e           = SIMD_FMADD(KP250000000, T1d, T1a);
            Ci[WS(cs, 5)] = T1d - T1a;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tr, TC));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, TC, Tr));
            TK            = TI + TJ;
            TM            = TI - TJ;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TP, TS));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TS, TP)));
            TW            = TU + TV;
            TY            = TU - TV;
            TZ            = SIMD_FNMADD(KP250000000, Ti, T3);
            Cr[WS(cs, 5)] = T3 + Ti;
            T1k           = SIMD_FMADD(KP559016994, T1f, T1e);
            T1g           = SIMD_FNMADD(KP559016994, T1f, T1e);
            Cr[WS(cs, 10)] = TH + TK;
            TL             = SIMD_FNMADD(KP250000000, TK, TH);
            Cr[0]          = TT + TW;
            TX             = SIMD_FNMADD(KP250000000, TW, TT);
            T18            = SIMD_FNMADD(KP559016994, T10, TZ);
            T11            = SIMD_FMADD(KP559016994, T10, TZ);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T1l, T1k);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T1l, T1k);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T1j, T1g);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T1j, T1g));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TM, TL);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TM, TL);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, TY, TX);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, TY, TX);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T19, T18);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T19, T18);
            Cr[WS(cs, 1)]  = SIMD_FNMADD(KP951056516, T17, T11);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP951056516, T17, T11);
        }
    }
}

template <>
struct r2cf_traits<20, 20>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 90;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 90;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 20 -first-k 20 -name r2cf
 * -standalone */

/*
 * This function contains 86 FP additions, 32 FP multiplications,
 * (or, 58 additions, 4 multiplications, 28 fused multiply/add),
 * 90 stack variables, 4 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && ProvidedElements == 20>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T3, T1d, To, Tx, TC, Tj, TJ, TV, Tp, Tq, Te, Tf, T1f, T19,
            T1k;
        SIMD_FLOAT Ta, Td, Tu, Tm, T15, T1, T2, TG, TH, Tb, T6, T17, T18, T9,
            Tc;
        SIMD_FLOAT Tk, Tl, T4, T5, Tv, Tw, TA, TB, T7, T8, TF, TI, Tr, T14, Tg;
        SIMD_FLOAT Tz, TP, Ty;
        T1  = R0[0];
        T2  = R0[WS(rs, 10)];
        TG  = R0[WS(rs, 5)];
        TH  = R0[WS(rs, 15)];
        T4  = R0[WS(rs, 4)];
        T5  = R0[WS(rs, 14)];
        Tv  = R0[WS(rs, 13)];
        Tw  = R0[WS(rs, 3)];
        TA  = R0[WS(rs, 17)];
        TB  = R0[WS(rs, 7)];
        T7  = R0[WS(rs, 16)];
        T8  = R0[WS(rs, 6)];
        Tb  = R0[WS(rs, 8)];
        T3  = T1 - T2;
        TF  = T1 + T2;
        T1d = TG - TH;
        TI  = TG + TH;
        To  = T4 + T5;
        T6  = T4 - T5;
        T17 = Tw - Tv;
        Tx  = Tv + Tw;
        T18 = TB - TA;
        TC  = TA + TB;
        Tj  = T7 + T8;
        T9  = T7 - T8;
        Tc  = R0[WS(rs, 18)];
        Tk  = R0[WS(rs, 1)];
        Tl  = R0[WS(rs, 11)];
        TJ  = TF - TI;
        TV  = TF + TI;
        Tp  = R0[WS(rs, 9)];
        Tq  = R0[WS(rs, 19)];
        Te  = R0[WS(rs, 12)];
        Tf  = R0[WS(rs, 2)];
        T1f = T17 + T18;
        T19 = T17 - T18;
        T1k = T6 - T9;
        Ta  = T6 + T9;
        Td  = Tb - Tc;
        Tu  = Tb + Tc;
        Tm  = Tk + Tl;
        T15 = Tl - Tk;
        Tr  = Tp + Tq;
        T14 = Tq - Tp;
        Tg  = Te - Tf;
        Tz  = Te + Tf;
        TP  = Tu + Tx;
        Ty  = Tu - Tx;
        {
            SIMD_FLOAT Tn, TT, T16, T1e, Ts, TS, TQ, TD, T1l, Th, T1i, T1a, T1c,
                TW, TU;
            SIMD_FLOAT TK, Tt, TL, TE, TX, TR, Ti, T12, T1m, T1o, T1h, T1g, TO,
                TM, T10;
            SIMD_FLOAT TY, T11, T1j, T1n, TN, TZ, T13, T1b;
            Tn            = Tj - Tm;
            TT            = Tj + Tm;
            T16           = T14 - T15;
            T1e           = T14 + T15;
            Ts            = To - Tr;
            TS            = To + Tr;
            TQ            = Tz + TC;
            TD            = Tz - TC;
            T1l           = Td - Tg;
            Th            = Td + Tg;
            T1g           = T1e + T1f;
            T1i           = T1e - T1f;
            T1a           = SIMD_FMADD(KP618033988, T19, T16);
            T1c           = SIMD_FNMADD(KP618033988, T16, T19);
            TW            = TS + TT;
            TU            = TS - TT;
            TK            = Ts + Tn;
            Tt            = Tn - Ts;
            TL            = Ty + TD;
            TE            = Ty - TD;
            TX            = TP + TQ;
            TR            = TP - TQ;
            Ti            = Ta + Th;
            T12           = Ta - Th;
            T1m           = SIMD_FMADD(KP618033988, T1l, T1k);
            T1o           = SIMD_FNMADD(KP618033988, T1k, T1l);
            T1h           = SIMD_FMADD(KP250000000, T1g, T1d);
            Ci[WS(cs, 5)] = T1g - T1d;
            Ci[WS(cs, 2)] = KP951056516 * (SIMD_FMADD(KP618033988, Tt, TE));
            Ci[WS(cs, 6)] = KP951056516 * (SIMD_FNMADD(KP618033988, TE, Tt));
            TO            = TK - TL;
            TM            = TK + TL;
            Ci[WS(cs, 4)] = KP951056516 * (SIMD_FMADD(KP618033988, TR, TU));
            Ci[WS(cs, 8)] = -(KP951056516 * (SIMD_FNMADD(KP618033988, TU, TR)));
            T10           = TW - TX;
            TY            = TW + TX;
            T11           = SIMD_FNMADD(KP250000000, Ti, T3);
            Cr[WS(cs, 5)] = T3 + Ti;
            T1j           = SIMD_FNMADD(KP559016994, T1i, T1h);
            T1n           = SIMD_FMADD(KP559016994, T1i, T1h);
            Cr[WS(cs, 10)] = TJ + TM;
            TN             = SIMD_FNMADD(KP250000000, TM, TJ);
            Cr[0]          = TV + TY;
            TZ             = SIMD_FNMADD(KP250000000, TY, TV);
            T13            = SIMD_FMADD(KP559016994, T12, T11);
            T1b            = SIMD_FNMADD(KP559016994, T12, T11);
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T1o, T1n);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T1o, T1n);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP951056516, T1m, T1j);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP951056516, T1m, T1j));
            Cr[WS(cs, 6)]  = SIMD_FMADD(KP559016994, TO, TN);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP559016994, TO, TN);
            Cr[WS(cs, 8)]  = SIMD_FNMADD(KP559016994, T10, TZ);
            Cr[WS(cs, 4)]  = SIMD_FMADD(KP559016994, T10, TZ);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP951056516, T1c, T1b);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP951056516, T1c, T1b);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP951056516, T1a, T13);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP951056516, T1a, T13);
        }
    }
}

//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<20, 0>
{
    static constexpr long_t flops           = 130;
    static constexpr long_t operations      = 86;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 61;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 0 -name
 * r2cb -standalone */

/*
 * This function contains 86 FP additions, 44 FP multiplications,
 * (or, 42 additions, 0 multiplications, 44 fused multiply/add),
 * 61 stack variables, 5 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tx, Tf, Tr, TD, Tl, T5, T1a, T1l, T10, TT, Tm, Tc, Tw, TE,
            T1c;
        SIMD_FLOAT TM, T1b, Ti, TN, TA;
        {
            SIMD_FLOAT T4, Tq, T1, T2, TK, Ts, T8, T19, TR, T18, Tb, TS, Tv, TL,
                Tg;
            SIMD_FLOAT Th, Ty, Tz, T6, T7, TP, TQ, T9, Ta, Tt, Tu, Td, Te, Tp,
                T3;
            T4  = Cr[WS(cs, 5)];
            Tq  = Ci[WS(cs, 5)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 10)];
            T6  = Cr[WS(cs, 4)];
            T7  = Cr[WS(cs, 6)];
            TP  = Ci[WS(cs, 4)];
            TQ  = Ci[WS(cs, 6)];
            T9  = Cr[WS(cs, 9)];
            Ta  = Cr[WS(cs, 1)];
            Tt  = Ci[WS(cs, 9)];
            Tu  = Ci[WS(cs, 1)];
            Td  = Cr[WS(cs, 8)];
            Te  = Cr[WS(cs, 2)];
            TK  = Ci[WS(cs, 8)];
            Tp  = T1 - T2;
            T3  = T1 + T2;
            Ts  = T6 - T7;
            T8  = T6 + T7;
            T19 = TP + TQ;
            TR  = TP - TQ;
            T18 = T9 - Ta;
            Tb  = T9 + Ta;
            TS  = Tt - Tu;
            Tv  = Tt + Tu;
            Tx  = Td - Te;
            Tf  = Td + Te;
            Tr  = SIMD_FMADD(KP2_000000000, Tq, Tp);
            TD  = SIMD_FNMADD(KP2_000000000, Tq, Tp);
            Tl  = SIMD_FMADD(KP2_000000000, T4, T3);
            T5  = SIMD_FNMADD(KP2_000000000, T4, T3);
            TL  = Ci[WS(cs, 2)];
            Tg  = Cr[WS(cs, 7)];
            Th  = Cr[WS(cs, 3)];
            Ty  = Ci[WS(cs, 7)];
            Tz  = Ci[WS(cs, 3)];
            T1a = T18 + T19;
            T1l = T19 - T18;
            T10 = TS + TR;
            TT  = TR - TS;
            Tm  = T8 + Tb;
            Tc  = T8 - Tb;
            Tw  = Ts + Tv;
            TE  = Ts - Tv;
            T1c = TK + TL;
            TM  = TK - TL;
            T1b = Tg - Th;
            Ti  = Tg + Th;
            TN  = Tz - Ty;
            TA  = Ty + Tz;
        }
        {
            SIMD_FLOAT T1d, T1k, Tj, Tn, TO, T11, TB, TF, T1m, T1o, T1e, T1g,
                To, TY, Tk;
            SIMD_FLOAT TI, T12, T14, TU, TW, TG, T16, TC, T1i, TX, TH, T15, T1h,
                TZ, T13;
            SIMD_FLOAT TJ, TV, T17, T1f, T1j, T1n;
            T1d            = T1b + T1c;
            T1k            = T1c - T1b;
            Tj             = Tf - Ti;
            Tn             = Tf + Ti;
            TO             = TM - TN;
            T11            = TN + TM;
            TB             = Tx - TA;
            TF             = Tx + TA;
            T1m            = SIMD_FNMADD(KP618033988, T1l, T1k);
            T1o            = SIMD_FMADD(KP618033988, T1k, T1l);
            T1e            = SIMD_FMADD(KP618033988, T1d, T1a);
            T1g            = SIMD_FNMADD(KP618033988, T1a, T1d);
            To             = Tm + Tn;
            TY             = Tm - Tn;
            Tk             = Tc + Tj;
            TI             = Tc - Tj;
            T12            = SIMD_FMADD(KP618033988, T11, T10);
            T14            = SIMD_FNMADD(KP618033988, T10, T11);
            TU             = SIMD_FNMADD(KP618033988, TT, TO);
            TW             = SIMD_FMADD(KP618033988, TO, TT);
            TG             = TE + TF;
            T16            = TE - TF;
            TC             = Tw + TB;
            T1i            = Tw - TB;
            TX             = SIMD_FNMADD(KP500000000, To, Tl);
            R0[0]          = SIMD_FMADD(KP2_000000000, To, Tl);
            TH             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 10)] = SIMD_FMADD(KP2_000000000, Tk, T5);
            T15            = SIMD_FNMADD(KP500000000, TG, TD);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, TG, TD);
            T1h            = SIMD_FNMADD(KP500000000, TC, Tr);
            R0[WS(rs, 15)] = SIMD_FMADD(KP2_000000000, TC, Tr);
            TZ             = SIMD_FMADD(KP1_118033988, TY, TX);
            T13            = SIMD_FNMADD(KP1_118033988, TY, TX);
            TJ             = SIMD_FNMADD(KP1_118033988, TI, TH);
            TV             = SIMD_FMADD(KP1_118033988, TI, TH);
            T17            = SIMD_FMADD(KP1_118033988, T16, T15);
            T1f            = SIMD_FNMADD(KP1_118033988, T16, T15);
            T1j            = SIMD_FNMADD(KP1_118033988, T1i, T1h);
            T1n            = SIMD_FMADD(KP1_118033988, T1i, T1h);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_902113032, T14, T13);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_902113032, T14, T13);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_902113032, T12, TZ);
            R0[WS(rs, 16)] = SIMD_FNMADD(KP1_902113032, T12, TZ);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_902113032, TW, TV);
            R0[WS(rs, 14)] = SIMD_FMADD(KP1_902113032, TW, TV);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_902113032, TU, TJ);
            R0[WS(rs, 18)] = SIMD_FNMADD(KP1_902113032, TU, TJ);
            R0[WS(rs, 13)] = SIMD_FNMADD(KP1_902113032, T1g, T1f);
            R0[WS(rs, 17)] = SIMD_FMADD(KP1_902113032, T1g, T1f);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, T1e, T17);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_902113032, T1e, T17);
            R0[WS(rs, 11)] = SIMD_FNMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 19)] = SIMD_FMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_902113032, T1m, T1j);
        }
    }
}

template <>
struct r2cb_traits<20, 1>
{
    static constexpr long_t flops           = 128;
    static constexpr long_t operations      = 85;
    static constexpr long_t memory_accesses = 39;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 1 -name
 * r2cb -standalone */

/*
 * This function contains 85 FP additions, 43 FP multiplications,
 * (or, 42 additions, 0 multiplications, 43 fused multiply/add),
 * 92 stack variables, 6 constants, and 39 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TS, TR, TU, Tf, TT, T5, Tl, T19, T1k, TF, TN, Tc, Tm, T1e,
            TZ;
        SIMD_FLOAT Tu, T14, Ti, T15, Tx, TV, T4, T1, T2, Ts, TX, T8, T17, TB,
            T18;
        SIMD_FLOAT Tb, TY, TE, Tt, Tg, Th, Tv, Tw, T6, T7, Tz, TA, T9, Ta, TC;
        SIMD_FLOAT TD, Td, Te, T3;
        T4  = Ci[WS(cs, 5)];
        TS  = Cr[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tz  = Ci[WS(cs, 4)];
        TA  = Ci[WS(cs, 6)];
        T9  = Ci[WS(cs, 9)];
        Ta  = Ci[WS(cs, 1)];
        TC  = Cr[WS(cs, 9)];
        TD  = Cr[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Ts  = Ci[WS(cs, 8)];
        TR  = T1 + T2;
        T3  = T1 - T2;
        TX  = T6 + T7;
        T8  = T6 - T7;
        T17 = Tz - TA;
        TB  = Tz + TA;
        T18 = T9 - Ta;
        Tb  = T9 + Ta;
        TY  = TC + TD;
        TE  = TC - TD;
        TU  = Td + Te;
        Tf  = Td - Te;
        TT  = SIMD_FNMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FMADD(KP2_000000000, T4, T3);
        Tl  = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tt  = Ci[WS(cs, 2)];
        Tg  = Ci[WS(cs, 7)];
        Th  = Ci[WS(cs, 3)];
        Tv  = Cr[WS(cs, 7)];
        Tw  = Cr[WS(cs, 3)];
        T19 = T17 - T18;
        T1k = T18 + T17;
        TF  = TB - TE;
        TN  = TB + TE;
        Tc  = T8 + Tb;
        Tm  = T8 - Tb;
        T1e = TX + TY;
        TZ  = TX - TY;
        Tu  = Ts + Tt;
        T14 = Ts - Tt;
        Ti  = Tg + Th;
        T15 = Th - Tg;
        Tx  = Tv - Tw;
        TV  = Tv + Tw;
        {
            SIMD_FLOAT T16, T1l, Tn, Tj, T1d, TW, TM, Ty, T1c, T1a, T1m, T1o,
                TK, To, Tq;
            SIMD_FLOAT Tk, T1i, T1f, T12, T10, TQ, TO, TI, TG, TJ, Tp, T1g, T11,
                TL, TP;
            SIMD_FLOAT Tr, TH, T1h, T1b, T13, T1n, T1j;
            T16            = T14 - T15;
            T1l            = T15 + T14;
            Tn             = Tf + Ti;
            Tj             = Tf - Ti;
            T1d            = TU + TV;
            TW             = TU - TV;
            TM             = Tu + Tx;
            Ty             = Tu - Tx;
            T1c            = SIMD_FMADD(KP618033988, T16, T19);
            T1a            = SIMD_FNMADD(KP618033988, T19, T16);
            T1m            = SIMD_FMADD(KP618033988, T1l, T1k);
            T1o            = SIMD_FNMADD(KP618033988, T1k, T1l);
            TK             = Tm - Tn;
            To             = Tm + Tn;
            Tq             = Tc - Tj;
            Tk             = Tc + Tj;
            T1i            = T1e - T1d;
            T1f            = T1d + T1e;
            T12            = TZ - TW;
            T10            = TW + TZ;
            TQ             = SIMD_FMADD(KP618033988, TM, TN);
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TI             = SIMD_FMADD(KP618033988, Ty, TF);
            TG             = SIMD_FNMADD(KP618033988, TF, Ty);
            TJ             = SIMD_FNMADD(KP500000000, To, Tl);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP2_000000000, To, Tl);
            Tp             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 14)] = SIMD_FMADD(KP2_000000000, Tk, T5);
            T1g            = SIMD_FNMADD(KP250000000, T1f, TS);
            T11            = SIMD_FNMADD(KP500000000, T10, TT);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP2_000000000, T10, TT);
            TL             = SIMD_FNMADD(KP1_118033988, TK, TJ);
            TP             = SIMD_FMADD(KP1_118033988, TK, TJ);
            Tr             = SIMD_FNMADD(KP1_118033988, Tq, Tp);
            TH             = SIMD_FMADD(KP1_118033988, Tq, Tp);
            T1h            = SIMD_FMADD(KP2_000000000, T1g, TR);
            T1b            = SIMD_FMADD(KP1_118033988, T12, T11);
            T13            = SIMD_FNMADD(KP1_118033988, T12, T11);
            R0[0]          = SIMD_FNMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 16)] = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 12)] = SIMD_FNMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 18)] = SIMD_FMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_902113032, TG, Tr);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_902113032, TG, Tr);
            T1n            = SIMD_FNMADD(KP1_118033988, T1i, T1h);
            T1j            = SIMD_FMADD(KP1_118033988, T1i, T1h);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 13)] = SIMD_FMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 17)] = SIMD_FNMADD(KP1_902113032, T1a, T13);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_902113032, T1a, T13);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 15)] = SIMD_FNMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_902113032, T1m, T1j);
        }
    }
}

template <>
struct r2cb_traits<20, 2>
{
    static constexpr long_t flops           = 126;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 93;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 2 -name
 * r2cb -standalone */

/*
 * This function contains 84 FP additions, 42 FP multiplications,
 * (or, 42 additions, 0 multiplications, 42 fused multiply/add),
 * 93 stack variables, 7 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, T3, TU, Tf, TT, T1d, T5, T1l, T14, TN, TB, Tc, TF, T1f,
            TZ;
        SIMD_FLOAT Tq, T16, Ti, T15, Tt, TV, TS, T1, T2, To, TX, T8, T13, Tx,
            T12;
        SIMD_FLOAT Tb, TY, TA, Tp, Tg, Th, Tr, Ts, T6, T7, Tv, Tw, T9, Ta, Ty;
        SIMD_FLOAT Tz, Td, Te, TR;
        T4  = Cr[WS(cs, 5)];
        TS  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tv  = Ci[WS(cs, 4)];
        Tw  = Ci[WS(cs, 6)];
        T9  = Cr[WS(cs, 9)];
        Ta  = Cr[WS(cs, 1)];
        Ty  = Ci[WS(cs, 9)];
        Tz  = Ci[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        To  = Ci[WS(cs, 8)];
        TR  = T1 - T2;
        T3  = T1 + T2;
        TX  = T6 - T7;
        T8  = T6 + T7;
        T13 = Tv + Tw;
        Tx  = Tv - Tw;
        T12 = T9 - Ta;
        Tb  = T9 + Ta;
        TY  = Ty + Tz;
        TA  = Ty - Tz;
        TU  = Td - Te;
        Tf  = Td + Te;
        TT  = SIMD_FNMADD(KP2_000000000, TS, TR);
        T1d = SIMD_FMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tp  = Ci[WS(cs, 2)];
        Tg  = Cr[WS(cs, 7)];
        Th  = Cr[WS(cs, 3)];
        Tr  = Ci[WS(cs, 3)];
        Ts  = Ci[WS(cs, 7)];
        T1l = T13 - T12;
        T14 = T12 + T13;
        TN  = Tx + TA;
        TB  = Tx - TA;
        Tc  = T8 - Tb;
        TF  = T8 + Tb;
        T1f = TX + TY;
        TZ  = TX - TY;
        Tq  = To - Tp;
        T16 = To + Tp;
        Ti  = Tg + Th;
        T15 = Tg - Th;
        Tt  = Tr - Ts;
        TV  = Tr + Ts;
        {
            SIMD_FLOAT T1k, T17, TG, Tj, TW, T1e, TM, Tu, T1o, T1m, T1c, TH, TK,
                Tk, Tm;
            SIMD_FLOAT T10, T18, T1g, T1i, TQ, TO, TC, TE, TI, Tl, T19, T11,
                T1h, TJ, TD;
            SIMD_FLOAT Tn, T1a, T1b, T1n, T1j, TP, TL;
            T1k            = T16 - T15;
            T17            = T15 + T16;
            TG             = Tf + Ti;
            Tj             = Tf - Ti;
            TW             = TU + TV;
            T1e            = TU - TV;
            TM             = Tq + Tt;
            Tu             = Tq - Tt;
            T1o            = SIMD_FMADD(KP618033988, T1k, T1l);
            T1m            = SIMD_FNMADD(KP618033988, T1l, T1k);
            T1c            = SIMD_FNMADD(KP618033988, T14, T17);
            TH             = TF + TG;
            TK             = TF - TG;
            Tk             = Tc + Tj;
            Tm             = Tc - Tj;
            T10            = TW + TZ;
            T18            = TZ - TW;
            T1g            = T1e + T1f;
            T1i            = T1f - T1e;
            TQ             = SIMD_FMADD(KP618033988, TM, TN);
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TC             = SIMD_FNMADD(KP618033988, TB, Tu);
            TE             = SIMD_FMADD(KP618033988, Tu, TB);
            TI             = SIMD_FNMADD(KP250000000, TH, T4);
            Tl             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP2_000000000, Tk, T5);
            T19            = SIMD_FMADD(KP951056516, T18, T17);
            T11            = SIMD_FNMADD(KP500000000, T10, TT);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP2_000000000, T10, TT);
            T1h            = SIMD_FNMADD(KP500000000, T1g, T1d);
            R0[WS(rs, 13)] = SIMD_FMADD(KP2_000000000, T1g, T1d);
            TJ             = SIMD_FMADD(KP2_000000000, TI, T3);
            TD             = SIMD_FMADD(KP1_118033988, Tm, Tl);
            Tn             = SIMD_FNMADD(KP1_118033988, Tm, Tl);
            T1a            = SIMD_FMADD(KP618033988, T19, T14);
            T1b            = SIMD_FNMADD(KP1_118033988, T18, T11);
            T1n            = SIMD_FMADD(KP1_118033988, T1i, T1h);
            T1j            = SIMD_FNMADD(KP1_118033988, T1i, T1h);
            TP             = SIMD_FMADD(KP1_118033988, TK, TJ);
            TL             = SIMD_FNMADD(KP1_118033988, TK, TJ);
            R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_902113032, TE, TD);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_902113032, TE, TD);
            R0[0]          = SIMD_FMADD(KP1_902113032, TC, Tn);
            R0[WS(rs, 16)] = SIMD_FNMADD(KP1_902113032, TC, Tn);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, T1a, T11);
            R0[WS(rs, 11)] = SIMD_FNMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 15)] = SIMD_FMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 17)] = SIMD_FMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 14)] = SIMD_FNMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_902113032, TO, TL);
        }
    }
}

template <>
struct r2cb_traits<20, 3>
{
    static constexpr long_t flops           = 124;
    static constexpr long_t operations      = 83;
    static constexpr long_t memory_accesses = 37;
    static constexpr long_t stack_vars      = 94;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 3 -name
 * r2cb -standalone */

/*
 * This function contains 83 FP additions, 41 FP multiplications,
 * (or, 42 additions, 0 multiplications, 41 fused multiply/add),
 * 94 stack variables, 8 constants, and 37 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TS, TR, TU, Tf, TT, T5, Tl, T1k, T16, TN, TF, Tc, Tm, TZ,
            T1e;
        SIMD_FLOAT Tu, T17, Ti, T18, Tx, TV, T4, T1, T2, Ts, TX, T8, T14, TB,
            T15;
        SIMD_FLOAT Tb, TY, TE, Tt, Tg, Th, Tv, Tw, T6, T7, Tz, TA, T9, Ta, TC;
        SIMD_FLOAT TD, Td, Te, T3;
        T4  = Ci[WS(cs, 5)];
        TS  = Cr[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tz  = Ci[WS(cs, 4)];
        TA  = Ci[WS(cs, 6)];
        T9  = Ci[WS(cs, 9)];
        Ta  = Ci[WS(cs, 1)];
        TC  = Cr[WS(cs, 9)];
        TD  = Cr[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Ts  = Ci[WS(cs, 8)];
        TR  = T1 + T2;
        T3  = T1 - T2;
        TX  = T6 + T7;
        T8  = T6 - T7;
        T14 = Tz - TA;
        TB  = Tz + TA;
        T15 = T9 - Ta;
        Tb  = T9 + Ta;
        TY  = TC + TD;
        TE  = TC - TD;
        TU  = Td + Te;
        Tf  = Td - Te;
        TT  = SIMD_FNMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FMADD(KP2_000000000, T4, T3);
        Tl  = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tt  = Ci[WS(cs, 2)];
        Tg  = Ci[WS(cs, 7)];
        Th  = Ci[WS(cs, 3)];
        Tv  = Cr[WS(cs, 7)];
        Tw  = Cr[WS(cs, 3)];
        T1k = T15 + T14;
        T16 = T14 - T15;
        TN  = TB + TE;
        TF  = TB - TE;
        Tc  = T8 + Tb;
        Tm  = T8 - Tb;
        TZ  = TX - TY;
        T1e = TX + TY;
        Tu  = Ts + Tt;
        T17 = Ts - Tt;
        Ti  = Tg + Th;
        T18 = Th - Tg;
        Tx  = Tv - Tw;
        TV  = Tv + Tw;
        {
            SIMD_FLOAT T19, T1l, Tn, Tj, TW, T1d, TM, Ty, T1a, T1o, T1m, To, TK,
                Tk, Tq;
            SIMD_FLOAT T10, T12, T1f, T1i, TO, TI, TG, TP, TJ, Tp, T1b, T11,
                T1g, TQ, TL;
            SIMD_FLOAT Tr, TH, T1c, T13, T1h, T1n, T1j;
            T19            = T17 - T18;
            T1l            = T18 + T17;
            Tn             = Tf + Ti;
            Tj             = Tf - Ti;
            TW             = TU - TV;
            T1d            = TU + TV;
            TM             = Tu + Tx;
            Ty             = Tu - Tx;
            T1a            = SIMD_FMADD(KP618033988, T19, T16);
            T1o            = SIMD_FNMADD(KP618033988, T1k, T1l);
            T1m            = SIMD_FMADD(KP618033988, T1l, T1k);
            To             = Tm + Tn;
            TK             = Tm - Tn;
            Tk             = Tc + Tj;
            Tq             = Tc - Tj;
            T10            = TW + TZ;
            T12            = TZ - TW;
            T1f            = T1d + T1e;
            T1i            = T1e - T1d;
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TI             = SIMD_FMADD(KP618033988, Ty, TF);
            TG             = SIMD_FNMADD(KP618033988, TF, Ty);
            TP             = SIMD_FMADD(KP951056516, TK, TM);
            TJ             = SIMD_FNMADD(KP500000000, To, Tl);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP2_000000000, To, Tl);
            Tp             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 12)] = SIMD_FMADD(KP2_000000000, Tk, T5);
            T1b            = SIMD_FMADD(KP587785252, T12, T19);
            T11            = SIMD_FNMADD(KP500000000, T10, TT);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, T10, TT);
            T1g            = SIMD_FNMADD(KP250000000, T1f, TS);
            TQ             = SIMD_FMADD(KP618033988, TP, TN);
            TL             = SIMD_FNMADD(KP1_118033988, TK, TJ);
            Tr             = SIMD_FNMADD(KP1_118033988, Tq, Tp);
            TH             = SIMD_FMADD(KP1_118033988, Tq, Tp);
            T1c            = SIMD_FNMADD(KP618033988, T16, T1b);
            T13            = SIMD_FMADD(KP1_118033988, T12, T11);
            T1h            = SIMD_FMADD(KP2_000000000, T1g, TR);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_902113032, TQ, TJ);
            R0[WS(rs, 14)] = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 16)] = SIMD_FMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_902113032, TG, Tr);
            R0[0]          = SIMD_FNMADD(KP1_902113032, TG, Tr);
            R0[WS(rs, 15)] = SIMD_FNMADD(KP1_902113032, T1c, T11);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, T1a, T13);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_902113032, T1a, T13);
            T1n            = SIMD_FNMADD(KP1_118033988, T1i, T1h);
            T1j            = SIMD_FMADD(KP1_118033988, T1i, T1h);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 13)] = SIMD_FNMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_902113032, T1m, T1j);
        }
    }
}

template <>
struct r2cb_traits<20, 4>
{
    static constexpr long_t flops           = 122;
    static constexpr long_t operations      = 82;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 94;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 4 -name
 * r2cb -standalone */

/*
 * This function contains 82 FP additions, 40 FP multiplications,
 * (or, 42 additions, 0 multiplications, 40 fused multiply/add),
 * 94 stack variables, 8 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, T3, TU, Tf, TT, T1d, T5, T1j, T14, TN, TB, TF, Tc, T1f,
            TZ;
        SIMD_FLOAT To, T16, Ti, T15, Tr, TV, TS, T1, T2, Tm, TX, T8, T13, Tx,
            T12;
        SIMD_FLOAT Tb, TY, TA, Tn, Tg, Th, Tp, Tq, T6, T7, Tv, Tw, T9, Ta, Ty;
        SIMD_FLOAT Tz, Td, Te, TR;
        T4  = Cr[WS(cs, 5)];
        TS  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tv  = Ci[WS(cs, 4)];
        Tw  = Ci[WS(cs, 6)];
        T9  = Cr[WS(cs, 9)];
        Ta  = Cr[WS(cs, 1)];
        Ty  = Ci[WS(cs, 9)];
        Tz  = Ci[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Tm  = Ci[WS(cs, 8)];
        TR  = T1 - T2;
        T3  = T1 + T2;
        TX  = T6 - T7;
        T8  = T6 + T7;
        T13 = Tv + Tw;
        Tx  = Tv - Tw;
        T12 = T9 - Ta;
        Tb  = T9 + Ta;
        TY  = Ty + Tz;
        TA  = Ty - Tz;
        TU  = Td - Te;
        Tf  = Td + Te;
        TT  = SIMD_FNMADD(KP2_000000000, TS, TR);
        T1d = SIMD_FMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tn  = Ci[WS(cs, 2)];
        Tg  = Cr[WS(cs, 7)];
        Th  = Cr[WS(cs, 3)];
        Tp  = Ci[WS(cs, 3)];
        Tq  = Ci[WS(cs, 7)];
        T1j = T13 - T12;
        T14 = T12 + T13;
        TN  = Tx + TA;
        TB  = Tx - TA;
        TF  = T8 + Tb;
        Tc  = T8 - Tb;
        T1f = TX + TY;
        TZ  = TX - TY;
        To  = Tm - Tn;
        T16 = Tm + Tn;
        Ti  = Tg + Th;
        T15 = Tg - Th;
        Tr  = Tp - Tq;
        TV  = Tp + Tq;
        {
            SIMD_FLOAT T1i, T17, Tj, TG, T1e, TW, TM, Ts, T1o, T1c, Tt, Tk, TK,
                TH, T1k;
            SIMD_FLOAT T1g, T18, T10, TO, TQ, TE, Tu, Tl, TI, T1l, T1h, T19,
                T11, TC, TD;
            SIMD_FLOAT TJ, T1m, T1n, T1a, T1b, TL, TP;
            T1i            = T16 - T15;
            T17            = T15 + T16;
            Tj             = Tf - Ti;
            TG             = Tf + Ti;
            T1e            = TU - TV;
            TW             = TU + TV;
            TM             = To + Tr;
            Ts             = To - Tr;
            T1o            = SIMD_FMADD(KP618033988, T1i, T1j);
            T1c            = SIMD_FNMADD(KP618033988, T14, T17);
            Tt             = Tc - Tj;
            Tk             = Tc + Tj;
            TK             = TF - TG;
            TH             = TF + TG;
            T1k            = T1f - T1e;
            T1g            = T1e + T1f;
            T18            = TZ - TW;
            T10            = TW + TZ;
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TQ             = SIMD_FMADD(KP618033988, TM, TN);
            TE             = SIMD_FMADD(KP618033988, Ts, TB);
            Tu             = SIMD_FMADD(KP587785252, Tt, Ts);
            Tl             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, Tk, T5);
            TI             = SIMD_FNMADD(KP250000000, TH, T4);
            T1l            = SIMD_FMADD(KP951056516, T1k, T1j);
            T1h            = SIMD_FNMADD(KP500000000, T1g, T1d);
            R0[WS(rs, 11)] = SIMD_FMADD(KP2_000000000, T1g, T1d);
            T19            = SIMD_FMADD(KP951056516, T18, T17);
            T11            = SIMD_FNMADD(KP500000000, T10, TT);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP2_000000000, T10, TT);
            TC             = SIMD_FNMADD(KP618033988, TB, Tu);
            TD             = SIMD_FMADD(KP1_118033988, Tt, Tl);
            TJ             = SIMD_FMADD(KP2_000000000, TI, T3);
            T1m            = SIMD_FNMADD(KP618033988, T1l, T1i);
            T1n            = SIMD_FMADD(KP1_118033988, T1k, T1h);
            T1a            = SIMD_FMADD(KP618033988, T19, T14);
            T1b            = SIMD_FNMADD(KP1_118033988, T18, T11);
            R0[WS(rs, 14)] = SIMD_FNMADD(KP1_902113032, TC, Tl);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_902113032, TE, TD);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, TE, TD);
            TL             = SIMD_FNMADD(KP1_118033988, TK, TJ);
            TP             = SIMD_FMADD(KP1_118033988, TK, TJ);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_902113032, T1m, T1h);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 15)] = SIMD_FMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_902113032, T1a, T11);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 13)] = SIMD_FMADD(KP1_902113032, T1c, T1b);
            R0[0]          = SIMD_FMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 12)] = SIMD_FNMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_902113032, TO, TL);
        }
    }
}

template <>
struct r2cb_traits<20, 5>
{
    static constexpr long_t flops           = 120;
    static constexpr long_t operations      = 81;
    static constexpr long_t memory_accesses = 35;
    static constexpr long_t stack_vars      = 94;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 5 -name
 * r2cb -standalone */

/*
 * This function contains 81 FP additions, 39 FP multiplications,
 * (or, 42 additions, 0 multiplications, 39 fused multiply/add),
 * 94 stack variables, 8 constants, and 35 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tq, Tp, Tx, Tf, Tr, T5, Tl, TM, T11, T1b, T1l, Tc, Tm, TD,
            Tw;
        SIMD_FLOAT TQ, T16, Ti, TN, TA, T17, T4, T1, T2, TO, Ts, T8, T19, TL,
            TI;
        SIMD_FLOAT Tb, T1a, Tv, TP, Tg, Th, Ty, Tz, T6, T7, TJ, TK, T9, Ta, Tt;
        SIMD_FLOAT Tu, Td, Te, T3;
        T4  = Ci[WS(cs, 5)];
        Tq  = Cr[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        TJ  = Ci[WS(cs, 4)];
        TK  = Ci[WS(cs, 6)];
        T9  = Ci[WS(cs, 9)];
        Ta  = Ci[WS(cs, 1)];
        Tt  = Cr[WS(cs, 9)];
        Tu  = Cr[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        TO  = Ci[WS(cs, 8)];
        Tp  = T1 + T2;
        T3  = T1 - T2;
        Ts  = T6 + T7;
        T8  = T6 - T7;
        T19 = TJ + TK;
        TL  = TJ - TK;
        TI  = Ta - T9;
        Tb  = T9 + Ta;
        T1a = Tt - Tu;
        Tv  = Tt + Tu;
        Tx  = Td + Te;
        Tf  = Td - Te;
        Tr  = SIMD_FNMADD(KP2_000000000, Tq, Tp);
        T5  = SIMD_FMADD(KP2_000000000, T4, T3);
        Tl  = SIMD_FNMADD(KP2_000000000, T4, T3);
        TP  = Ci[WS(cs, 2)];
        Tg  = Ci[WS(cs, 7)];
        Th  = Ci[WS(cs, 3)];
        Ty  = Cr[WS(cs, 7)];
        Tz  = Cr[WS(cs, 3)];
        TM  = TI - TL;
        T11 = TI + TL;
        T1b = T19 - T1a;
        T1l = T1a + T19;
        Tc  = T8 + Tb;
        Tm  = T8 - Tb;
        TD  = Ts + Tv;
        Tw  = Ts - Tv;
        TQ  = TO - TP;
        T16 = TO + TP;
        Ti  = Tg + Th;
        TN  = Th - Tg;
        TA  = Ty + Tz;
        T17 = Ty - Tz;
        {
            SIMD_FLOAT TR, TY, Tn, Tj, T18, T1k, TE, TB, TW, T14, T1i, To, T1c,
                Tk, T1g;
            SIMD_FLOAT T1m, TS, TF, TZ, TC, T1n, T1h, T1d, T15, TT, TG, T10, TX,
                T1o, T1j;
            SIMD_FLOAT T1e, T1f, TU, TH, T12, T13, TV;
            TR             = TN + TQ;
            TY             = TQ - TN;
            Tn             = Tf + Ti;
            Tj             = Tf - Ti;
            T18            = T16 - T17;
            T1k            = T17 + T16;
            TE             = Tx + TA;
            TB             = Tx - TA;
            TW             = SIMD_FMADD(KP618033988, TM, TR);
            T14            = SIMD_FMADD(KP618033988, TY, T11);
            T1i            = Tm - Tn;
            To             = Tm + Tn;
            T1c            = Tc - Tj;
            Tk             = Tc + Tj;
            T1g            = SIMD_FMADD(KP618033988, T18, T1b);
            T1m            = SIMD_FNMADD(KP618033988, T1l, T1k);
            TS             = TD - TE;
            TF             = TD + TE;
            TZ             = Tw - TB;
            TC             = Tw + TB;
            T1n            = SIMD_FMADD(KP951056516, T1i, T1k);
            T1h            = SIMD_FNMADD(KP500000000, To, Tl);
            R0[0]          = SIMD_FMADD(KP2_000000000, To, Tl);
            T1d            = SIMD_FMADD(KP951056516, T1c, T1b);
            T15            = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 10)] = SIMD_FMADD(KP2_000000000, Tk, T5);
            TT             = SIMD_FNMADD(KP951056516, TS, TR);
            TG             = SIMD_FNMADD(KP250000000, TF, Tq);
            T10            = SIMD_FMADD(KP587785252, TZ, TY);
            TX             = SIMD_FNMADD(KP500000000, TC, Tr);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, TC, Tr);
            T1o            = SIMD_FMADD(KP618033988, T1n, T1l);
            T1j            = SIMD_FNMADD(KP1_118033988, T1i, T1h);
            T1e            = SIMD_FNMADD(KP618033988, T1d, T18);
            T1f            = SIMD_FMADD(KP1_118033988, T1c, T15);
            TU             = SIMD_FNMADD(KP618033988, TT, TM);
            TH             = SIMD_FMADD(KP2_000000000, TG, Tp);
            T12            = SIMD_FNMADD(KP618033988, T11, T10);
            T13            = SIMD_FMADD(KP1_118033988, TZ, TX);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_902113032, T1o, T1h);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_902113032, T1e, T15);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_902113032, T1g, T1f);
            R0[WS(rs, 14)] = SIMD_FMADD(KP1_902113032, T1g, T1f);
            TV             = SIMD_FNMADD(KP1_118033988, TS, TH);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, TU, TH);
            R0[WS(rs, 13)] = SIMD_FNMADD(KP1_902113032, T12, TX);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_902113032, T14, T13);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, T14, T13);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, TW, TV);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_902113032, TW, TV);
        }
    }
}

template <>
struct r2cb_traits<20, 6>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 94;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 6 -name
 * r2cb -standalone */

/*
 * This function contains 80 FP additions, 38 FP multiplications,
 * (or, 42 additions, 0 multiplications, 38 fused multiply/add),
 * 94 stack variables, 8 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TS, TR, T3, TT, Tf, T1d, T5, T14, T1j, TK, TB, TF, Tc,
            TY;
        SIMD_FLOAT T1f, T16, To, T15, Ti, TU, Tr, T1, T2, Tm, TW, T8, T13, Tx,
            T12;
        SIMD_FLOAT Tb, TX, TA, Tn, Tg, Th, Tp, Tq, T6, T7, Tv, Tw, T9, Ta, Ty;
        SIMD_FLOAT Tz, Td, Te, T17, T1i, Tj, TG, TV, T1e, Ts, TL;
        T4  = Cr[WS(cs, 5)];
        TS  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tv  = Ci[WS(cs, 4)];
        Tw  = Ci[WS(cs, 6)];
        T9  = Cr[WS(cs, 9)];
        Ta  = Cr[WS(cs, 1)];
        Ty  = Ci[WS(cs, 1)];
        Tz  = Ci[WS(cs, 9)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Tm  = Ci[WS(cs, 8)];
        TR  = T1 - T2;
        T3  = T1 + T2;
        TW  = T6 - T7;
        T8  = T6 + T7;
        T13 = Tv + Tw;
        Tx  = Tv - Tw;
        T12 = T9 - Ta;
        Tb  = T9 + Ta;
        TX  = Ty + Tz;
        TA  = Ty - Tz;
        TT  = Td - Te;
        Tf  = Td + Te;
        T1d = SIMD_FMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tn  = Ci[WS(cs, 2)];
        Tg  = Cr[WS(cs, 7)];
        Th  = Cr[WS(cs, 3)];
        Tp  = Ci[WS(cs, 3)];
        Tq  = Ci[WS(cs, 7)];
        T14 = T12 + T13;
        T1j = T13 - T12;
        TK  = TA - Tx;
        TB  = Tx + TA;
        TF  = T8 + Tb;
        Tc  = T8 - Tb;
        TY  = TW - TX;
        T1f = TW + TX;
        T16 = Tm + Tn;
        To  = Tm - Tn;
        T15 = Tg - Th;
        Ti  = Tg + Th;
        TU  = Tp + Tq;
        Tr  = Tp - Tq;
        T17 = T15 + T16;
        T1i = T16 - T15;
        Tj  = Tf - Ti;
        TG  = Tf + Ti;
        TV  = TT + TU;
        T1e = TT - TU;
        Ts  = To - Tr;
        TL  = To + Tr;
        {
            SIMD_FLOAT T1o, T1c, TH, TM, Tk, Tt, T1g, T1k, TZ, T18, TQ, TE, TN,
                TI, Tu;
            SIMD_FLOAT Tl, T1l, T1h, T19, T10, TO, TJ, TC, TD, T1m, T1n, T1a,
                T11, TP, T1b;
            T1o            = SIMD_FMADD(KP618033988, T1i, T1j);
            T1c            = SIMD_FNMADD(KP618033988, T14, T17);
            TH             = TF + TG;
            TM             = TF - TG;
            Tk             = Tc + Tj;
            Tt             = Tc - Tj;
            T1g            = T1e + T1f;
            T1k            = T1f - T1e;
            TZ             = TV + TY;
            T18            = TY - TV;
            TQ             = SIMD_FMADD(KP618033988, TK, TL);
            TE             = SIMD_FMADD(KP618033988, Ts, TB);
            TN             = SIMD_FNMADD(KP951056516, TM, TL);
            TI             = SIMD_FNMADD(KP250000000, TH, T4);
            Tu             = SIMD_FMADD(KP587785252, Tt, Ts);
            Tl             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP2_000000000, Tk, T5);
            T1l            = SIMD_FMADD(KP951056516, T1k, T1j);
            T1h            = SIMD_FNMADD(KP500000000, T1g, T1d);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP2_000000000, T1g, T1d);
            T19            = SIMD_FMADD(KP951056516, T18, T17);
            T10            = SIMD_FMADD(KP250000000, TZ, TS);
            TO             = SIMD_FNMADD(KP618033988, TN, TK);
            TJ             = SIMD_FMADD(KP2_000000000, TI, T3);
            TC             = SIMD_FNMADD(KP618033988, TB, Tu);
            TD             = SIMD_FMADD(KP1_118033988, Tt, Tl);
            T1m            = SIMD_FNMADD(KP618033988, T1l, T1i);
            T1n            = SIMD_FMADD(KP1_118033988, T1k, T1h);
            T1a            = SIMD_FMADD(KP618033988, T19, T14);
            T11            = SIMD_FNMADD(KP2_000000000, T10, TR);
            TP             = SIMD_FNMADD(KP1_118033988, TM, TJ);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, TO, TJ);
            R0[WS(rs, 12)] = SIMD_FNMADD(KP1_902113032, TC, Tl);
            R0[0]          = SIMD_FNMADD(KP1_902113032, TE, TD);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, TE, TD);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_902113032, T1m, T1h);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_902113032, T1o, T1n);
            R0[WS(rs, 13)] = SIMD_FMADD(KP1_902113032, T1o, T1n);
            T1b            = SIMD_FNMADD(KP1_118033988, T18, T11);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_902113032, T1a, T11);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_902113032, T1c, T1b);
        }
    }
}

template <>
struct r2cb_traits<20, 7>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 79;
    static constexpr long_t memory_accesses = 33;
    static constexpr long_t stack_vars      = 94;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 7 -name
 * r2cb -standalone */

/*
 * This function contains 79 FP additions, 37 FP multiplications,
 * (or, 42 additions, 0 multiplications, 37 fused multiply/add),
 * 94 stack variables, 8 constants, and 33 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 7>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TS, TR, T3, TU, Tf, TT, T5, T14, T1l, Tz, TN, T1e, TZ,
            TF;
        SIMD_FLOAT Tc, T15, To, T16, Ti, TV, Tr, T1, T2, Tm, TX, T8, T13, Tv,
            T12;
        SIMD_FLOAT Tb, TY, Ty, Tn, Tg, Th, Tp, Tq, T6, T7, Tt, Tu, T9, Ta, Tw;
        SIMD_FLOAT Tx, Td, Te, T17, T1k, TG, Tj, TW, T1d, Ts, TM;
        T4  = Ci[WS(cs, 5)];
        TS  = Cr[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tt  = Ci[WS(cs, 4)];
        Tu  = Ci[WS(cs, 6)];
        T9  = Ci[WS(cs, 9)];
        Ta  = Ci[WS(cs, 1)];
        Tw  = Cr[WS(cs, 9)];
        Tx  = Cr[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Tm  = Ci[WS(cs, 8)];
        TR  = T1 + T2;
        T3  = T1 - T2;
        TX  = T6 + T7;
        T8  = T6 - T7;
        T13 = Tt - Tu;
        Tv  = Tt + Tu;
        T12 = Ta - T9;
        Tb  = T9 + Ta;
        TY  = Tw + Tx;
        Ty  = Tw - Tx;
        TU  = Td + Te;
        Tf  = Td - Te;
        TT  = SIMD_FNMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FMADD(KP2_000000000, T4, T3);
        Tn  = Ci[WS(cs, 2)];
        Tg  = Ci[WS(cs, 7)];
        Th  = Ci[WS(cs, 3)];
        Tp  = Cr[WS(cs, 7)];
        Tq  = Cr[WS(cs, 3)];
        T14 = T12 + T13;
        T1l = T12 - T13;
        Tz  = Tv - Ty;
        TN  = Tv + Ty;
        T1e = TX + TY;
        TZ  = TX - TY;
        TF  = T8 - Tb;
        Tc  = T8 + Tb;
        T15 = Tm - Tn;
        To  = Tm + Tn;
        T16 = Th - Tg;
        Ti  = Tg + Th;
        TV  = Tp + Tq;
        Tr  = Tp - Tq;
        T17 = T15 - T16;
        T1k = T16 + T15;
        TG  = Tf + Ti;
        Tj  = Tf - Ti;
        TW  = TU - TV;
        T1d = TU + TV;
        Ts  = To - Tr;
        TM  = To + Tr;
        {
            SIMD_FLOAT T1m, TA, Tk, TK, TH, T1i, T1f, T10, T18, TO, TE, TB, Tl,
                TP, TI;
            SIMD_FLOAT T1n, T1g, T11, T1b, T19, TC, TD, TQ, TJ, T1o, T1h, T1a,
                T1c, TL, T1j;
            T1m            = SIMD_FMADD(KP618033988, T1l, T1k);
            TA             = Tc - Tj;
            Tk             = Tc + Tj;
            TK             = TF - TG;
            TH             = TF + TG;
            T1i            = T1e - T1d;
            T1f            = T1d + T1e;
            T10            = TW + TZ;
            T18            = TZ - TW;
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TE             = SIMD_FMADD(KP618033988, Ts, Tz);
            TB             = SIMD_FMADD(KP951056516, TA, Tz);
            Tl             = SIMD_FNMADD(KP500000000, Tk, T5);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP2_000000000, Tk, T5);
            TP             = SIMD_FMADD(KP951056516, TK, TM);
            TI             = SIMD_FMADD(KP250000000, TH, T4);
            T1n            = SIMD_FNMADD(KP951056516, T1i, T1k);
            T1g            = SIMD_FNMADD(KP250000000, T1f, TS);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP2_000000000, T10, TT);
            T11            = SIMD_FNMADD(KP500000000, T10, TT);
            T1b            = SIMD_FMADD(KP587785252, T18, T17);
            T19            = SIMD_FMADD(KP951056516, T18, T17);
            TC             = SIMD_FNMADD(KP618033988, TB, Ts);
            TD             = SIMD_FMADD(KP1_118033988, TA, Tl);
            TQ             = SIMD_FMADD(KP618033988, TP, TN);
            TJ             = SIMD_FNMADD(KP2_000000000, TI, T3);
            T1o            = SIMD_FNMADD(KP618033988, T1n, T1l);
            T1h            = SIMD_FMADD(KP2_000000000, T1g, TR);
            T1a            = SIMD_FMADD(KP618033988, T19, T14);
            T1c            = SIMD_FNMADD(KP618033988, T14, T1b);
            R0[0]          = SIMD_FMADD(KP1_902113032, TC, Tl);
            R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_902113032, TE, TD);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_902113032, TE, TD);
            TL             = SIMD_FNMADD(KP1_118033988, TK, TJ);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_902113032, TQ, TJ);
            T1j            = SIMD_FNMADD(KP1_118033988, T1i, T1h);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, T1o, T1h);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, T1a, T11);
            R0[WS(rs, 11)] = SIMD_FNMADD(KP1_902113032, T1c, T11);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_902113032, T1m, T1j);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_902113032, T1m, T1j);
        }
    }
}

template <>
struct r2cb_traits<20, 8>
{
    static constexpr long_t flops           = 109;
    static constexpr long_t operations      = 75;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 93;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 8 -name
 * r2cb -standalone */

/*
 * This function contains 75 FP additions, 34 FP multiplications,
 * (or, 41 additions, 0 multiplications, 34 fused multiply/add),
 * 93 stack variables, 10 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 8>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_618033988, +1.618033988749894848204586834365638117720309180);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TS, TR, T3, TT, Tf, T1d, T5, T14, T1i, T1f, TY, TF, TK,
            Tc;
        SIMD_FLOAT Tl, T16, Tu, T15, Ti, TU, Tx, T1, T2, Ts, TW, T8, T13, TE,
            T12;
        SIMD_FLOAT Tb, TX, TB, Tt, Tg, Th, Tv, Tw, T6, T7, TC, TD, T9, Ta, Tz;
        SIMD_FLOAT TA, Td, Te;
        T4  = Cr[WS(cs, 5)];
        TS  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        TC  = Ci[WS(cs, 4)];
        TD  = Ci[WS(cs, 6)];
        T9  = Cr[WS(cs, 9)];
        Ta  = Cr[WS(cs, 1)];
        Tz  = Ci[WS(cs, 1)];
        TA  = Ci[WS(cs, 9)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Ts  = Ci[WS(cs, 8)];
        TR  = T1 - T2;
        T3  = T1 + T2;
        TW  = T6 - T7;
        T8  = T6 + T7;
        T13 = TC + TD;
        TE  = TC - TD;
        T12 = T9 - Ta;
        Tb  = T9 + Ta;
        TX  = Tz + TA;
        TB  = Tz - TA;
        TT  = Td - Te;
        Tf  = Td + Te;
        T1d = SIMD_FMADD(KP2_000000000, TS, TR);
        T5  = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tt  = Ci[WS(cs, 2)];
        Tg  = Cr[WS(cs, 7)];
        Th  = Cr[WS(cs, 3)];
        Tv  = Ci[WS(cs, 3)];
        Tw  = Ci[WS(cs, 7)];
        T14 = T12 + T13;
        T1i = T13 - T12;
        T1f = TW + TX;
        TY  = TW - TX;
        TF  = TB - TE;
        TK  = TB + TE;
        Tc  = T8 - Tb;
        Tl  = T8 + Tb;
        T16 = Ts + Tt;
        Tu  = Ts - Tt;
        T15 = Tg - Th;
        Ti  = Tg + Th;
        TU  = Tv + Tw;
        Tx  = Tv - Tw;
        {
            SIMD_FLOAT T1j, T17, Tj, Tm, T1e, TV, Ty, TL, T1c, T1k, Tn, Tq, TM,
                Tk, TZ;
            SIMD_FLOAT T18, T1l, T1g, TG, TH, To, TJ, TN, TP, T19, T10, T1h, TI,
                Tp, TO;
            SIMD_FLOAT TQ, T1a, T11, Tr, T1b;
            T1j            = T16 - T15;
            T17            = T15 + T16;
            Tj             = Tf - Ti;
            Tm             = Tf + Ti;
            T1e            = TT - TU;
            TV             = TT + TU;
            Ty             = Tu + Tx;
            TL             = Tu - Tx;
            T1c            = SIMD_FNMADD(KP618033988, T14, T17);
            T1k            = SIMD_FMADD(KP618033988, T1j, T1i);
            Tn             = Tl + Tm;
            Tq             = Tl - Tm;
            TM             = Tc - Tj;
            Tk             = Tc + Tj;
            TZ             = TV + TY;
            T18            = TY - TV;
            T1l            = T1e + T1f;
            T1g            = SIMD_FNMADD(KP381966011, T1f, T1e);
            TG             = SIMD_FMADD(KP618033988, TF, Ty);
            TH             = SIMD_FNMADD(KP951056516, Tq, Ty);
            To             = SIMD_FNMADD(KP250000000, Tn, T4);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP2_000000000, Tk, T5);
            TJ             = SIMD_FNMADD(KP500000000, Tk, T5);
            TN             = SIMD_FMADD(KP951056516, TM, TL);
            TP             = SIMD_FMADD(KP587785252, TM, TL);
            T19            = SIMD_FMADD(KP951056516, T18, T17);
            T10            = SIMD_FMADD(KP250000000, TZ, TS);
            T1h            = SIMD_FNMADD(KP1_618033988, T1g, T1d);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, T1l, T1d);
            TI             = SIMD_FNMADD(KP618033988, TH, TF);
            Tp             = SIMD_FMADD(KP2_000000000, To, T3);
            TO             = SIMD_FMADD(KP618033988, TN, TK);
            TQ             = SIMD_FNMADD(KP618033988, TK, TP);
            T1a            = SIMD_FMADD(KP618033988, T19, T14);
            T11            = SIMD_FNMADD(KP2_000000000, T10, TR);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, T1k, T1h);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_902113032, T1k, T1h);
            Tr             = SIMD_FNMADD(KP1_118033988, Tq, Tp);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, TI, Tp);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_902113032, TO, TJ);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP1_902113032, TQ, TJ);
            T1b            = SIMD_FNMADD(KP1_118033988, T18, T11);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_902113032, T1a, T11);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_902113032, TG, Tr);
            R0[0]          = SIMD_FNMADD(KP1_902113032, TG, Tr);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, T1c, T1b);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_902113032, T1c, T1b);
        }
    }
}

template <>
struct r2cb_traits<20, 9>
{
    static constexpr long_t flops           = 107;
    static constexpr long_t operations      = 74;
    static constexpr long_t memory_accesses = 31;
    static constexpr long_t stack_vars      = 93;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 9 -name
 * r2cb -standalone */

/*
 * This function contains 74 FP additions, 33 FP multiplications,
 * (or, 41 additions, 0 multiplications, 33 fused multiply/add),
 * 93 stack variables, 10 constants, and 31 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 9>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_618033988, +1.618033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TP, TO, T3, TU, Tf, TQ, T5, TC, Tc, T1g, T11, TH, Tt, TT;
        SIMD_FLOAT T1a, T12, Tw, T13, Ti, TV, Tz, T1, T2, Tu, TR, T8, T10, Tp,
            TZ;
        SIMD_FLOAT Tb, TS, Ts, Tv, Tg, Th, Tx, Ty, T6, T7, Tn, To, T9, Ta, Tq;
        SIMD_FLOAT Tr, Td, Te;
        T4  = Ci[WS(cs, 5)];
        TP  = Cr[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tn  = Ci[WS(cs, 4)];
        To  = Ci[WS(cs, 6)];
        T9  = Ci[WS(cs, 9)];
        Ta  = Ci[WS(cs, 1)];
        Tq  = Cr[WS(cs, 9)];
        Tr  = Cr[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Tu  = Ci[WS(cs, 8)];
        TO  = T1 + T2;
        T3  = T1 - T2;
        TR  = T6 + T7;
        T8  = T6 - T7;
        T10 = Tn - To;
        Tp  = Tn + To;
        TZ  = Ta - T9;
        Tb  = T9 + Ta;
        TS  = Tq + Tr;
        Ts  = Tq - Tr;
        TU  = Td + Te;
        Tf  = Td - Te;
        TQ  = SIMD_FNMADD(KP2_000000000, TP, TO);
        T5  = SIMD_FMADD(KP2_000000000, T4, T3);
        Tv  = Ci[WS(cs, 2)];
        Tg  = Ci[WS(cs, 7)];
        Th  = Ci[WS(cs, 3)];
        Tx  = Cr[WS(cs, 7)];
        Ty  = Cr[WS(cs, 3)];
        TC  = T8 - Tb;
        Tc  = T8 + Tb;
        T1g = TZ - T10;
        T11 = TZ + T10;
        TH  = Tp + Ts;
        Tt  = Tp - Ts;
        TT  = TR - TS;
        T1a = TR + TS;
        T12 = Tu - Tv;
        Tw  = Tu + Tv;
        T13 = Th - Tg;
        Ti  = Tg + Th;
        TV  = Tx + Ty;
        Tz  = Tx - Ty;
        {
            SIMD_FLOAT T14, T1f, Tj, TD, TW, T1b, TA, TI, TE, TJ, Tk, Tl, T1c,
                T1h, T15;
            SIMD_FLOAT TX, TN, TB, TK, TF, Tm, T1i, T1k, T1d, TY, T16, T18, TL,
                TG, T1j;
            SIMD_FLOAT T1l, T1e, T17, T19, TM;
            T14            = T12 - T13;
            T1f            = T13 + T12;
            Tj             = Tf - Ti;
            TD             = Tf + Ti;
            TW             = TU - TV;
            T1b            = TU + TV;
            TA             = Tw - Tz;
            TI             = Tw + Tz;
            TE             = TC + TD;
            TJ             = TC - TD;
            Tk             = Tc + Tj;
            Tl             = SIMD_FNMADD(KP381966011, Tc, Tj);
            T1c            = T1a + T1b;
            T1h            = T1b - T1a;
            T15            = TT - TW;
            TX             = TT + TW;
            TN             = SIMD_FNMADD(KP618033988, TH, TI);
            TB             = SIMD_FMADD(KP618033988, TA, Tt);
            TK             = SIMD_FMADD(KP951056516, TJ, TI);
            TF             = SIMD_FMADD(KP250000000, TE, T4);
            Tm             = SIMD_FNMADD(KP1_618033988, Tl, T5);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, Tk, T5);
            T1i            = SIMD_FMADD(KP951056516, T1h, T1g);
            T1k            = SIMD_FMADD(KP951056516, T1h, T1f);
            T1d            = SIMD_FNMADD(KP250000000, T1c, TP);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP2_000000000, TX, TQ);
            TY             = SIMD_FNMADD(KP500000000, TX, TQ);
            T16            = SIMD_FMADD(KP951056516, T15, T14);
            T18            = SIMD_FMADD(KP587785252, T15, T14);
            TL             = SIMD_FMADD(KP618033988, TK, TH);
            TG             = SIMD_FNMADD(KP2_000000000, TF, T3);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, TB, Tm);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_902113032, TB, Tm);
            T1j            = SIMD_FMADD(KP618033988, T1i, T1f);
            T1l            = SIMD_FNMADD(KP618033988, T1k, T1g);
            T1e            = SIMD_FMADD(KP2_000000000, T1d, TO);
            T17            = SIMD_FMADD(KP618033988, T16, T11);
            T19            = SIMD_FNMADD(KP618033988, T11, T18);
            TM             = SIMD_FNMADD(KP1_118033988, TJ, TG);
            R0[0]          = SIMD_FMADD(KP1_902113032, TL, TG);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, T1l, T1e);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_902113032, T1j, T1e);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_902113032, T17, TY);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_902113032, T19, TY);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, TN, TM);
            R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_902113032, TN, TM);
        }
    }
}

template <>
struct r2cb_traits<20, 10>
{
    static constexpr long_t flops           = 99;
    static constexpr long_t operations      = 69;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 89;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 10 -name
 * r2cb -standalone */

/*
 * This function contains 69 FP additions, 30 FP multiplications,
 * (or, 39 additions, 0 multiplications, 30 fused multiply/add),
 * 89 stack variables, 10 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 10>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_618033988, +1.618033988749894848204586834365638117720309180);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, Tm, Tl, T3, Tt, Tf, Tn, T5, T15, T1g, TI, TX, T1a, Ts,
            Tz;
        SIMD_FLOAT Tc, T16, TM, T17, Ti, TJ, Tw, T1, T2, TK, To, T8, T14, TH,
            T13;
        SIMD_FLOAT Tb, TE, Tr, TL, Tg, Th, Tu, Tv, T6, T7, TF, TG, T9, Ta, Tp;
        SIMD_FLOAT Tq, Td, Te;
        T4  = Cr[WS(cs, 5)];
        Tm  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        TF  = Ci[WS(cs, 4)];
        TG  = Ci[WS(cs, 6)];
        T9  = Cr[WS(cs, 9)];
        Ta  = Cr[WS(cs, 1)];
        Tp  = Ci[WS(cs, 9)];
        Tq  = Ci[WS(cs, 1)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        TK  = Ci[WS(cs, 8)];
        Tl  = T1 - T2;
        T3  = T1 + T2;
        To  = T6 - T7;
        T8  = T6 + T7;
        T14 = TF + TG;
        TH  = TF - TG;
        T13 = Ta - T9;
        Tb  = T9 + Ta;
        TE  = Tq - Tp;
        Tr  = Tp + Tq;
        Tt  = Td - Te;
        Tf  = Td + Te;
        Tn  = SIMD_FMADD(KP2_000000000, Tm, Tl);
        T5  = SIMD_FNMADD(KP2_000000000, T4, T3);
        TL  = Ci[WS(cs, 2)];
        Tg  = Cr[WS(cs, 7)];
        Th  = Cr[WS(cs, 3)];
        Tu  = Ci[WS(cs, 7)];
        Tv  = Ci[WS(cs, 3)];
        T15 = T13 + T14;
        T1g = T13 - T14;
        TI  = TE - TH;
        TX  = TE + TH;
        T1a = Tr - To;
        Ts  = To + Tr;
        Tz  = T8 + Tb;
        Tc  = T8 - Tb;
        T16 = TK + TL;
        TM  = TK - TL;
        T17 = Tg - Th;
        Ti  = Tg + Th;
        TJ  = Tv - Tu;
        Tw  = Tu + Tv;
        {
            SIMD_FLOAT T18, T1f, Tj, TA, TN, TU, Tx, T1b, T1h, T19, TB, TO, TV,
                Tk, T1c;
            SIMD_FLOAT T11, Ty, TP, TR, TC, TT, TZ, TW, T1d, T12, TQ, TS, TD,
                TY, T10;
            SIMD_FLOAT T1e;
            T18           = T16 - T17;
            T1f           = T17 + T16;
            Tj            = Tf - Ti;
            TA            = Tf + Ti;
            TN            = TJ + TM;
            TU            = TM - TJ;
            Tx            = Tt - Tw;
            T1b           = Tt + Tw;
            T1h           = SIMD_FMADD(KP618033988, T1g, T1f);
            T19           = SIMD_FMADD(KP618033988, T18, T15);
            TB            = Tz + TA;
            TO            = TA - Tz;
            TV            = Tc - Tj;
            Tk            = Tc + Tj;
            T1c           = SIMD_FMADD(KP381966011, T1b, T1a);
            T11           = SIMD_FNMADD(KP381966011, Ts, Tx);
            Ty            = Ts + Tx;
            TP            = SIMD_FMADD(KP951056516, TO, TN);
            TR            = SIMD_FMADD(KP951056516, TO, TI);
            TC            = SIMD_FNMADD(KP250000000, TB, T4);
            R0[0]         = SIMD_FMADD(KP2_000000000, Tk, T5);
            TT            = SIMD_FNMADD(KP500000000, Tk, T5);
            TZ            = SIMD_FMADD(KP951056516, TV, TU);
            TW            = SIMD_FMADD(KP587785252, TV, TU);
            T1d           = SIMD_FNMADD(KP809016994, T1c, Tm);
            T12           = SIMD_FNMADD(KP1_618033988, T11, Tn);
            R0[WS(rs, 5)] = SIMD_FMADD(KP2_000000000, Ty, Tn);
            TQ            = SIMD_FNMADD(KP618033988, TP, TI);
            TS            = SIMD_FMADD(KP618033988, TR, TN);
            TD            = SIMD_FMADD(KP2_000000000, TC, T3);
            TY            = SIMD_FNMADD(KP618033988, TX, TW);
            T10           = SIMD_FMADD(KP618033988, TZ, TX);
            T1e           = SIMD_FNMADD(KP2_000000000, T1d, Tl);
            R0[WS(rs, 9)] = SIMD_FMADD(KP1_902113032, T19, T12);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_902113032, T19, T12);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_902113032, TS, TD);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_902113032, TQ, TD);
            R0[WS(rs, 8)] = SIMD_FNMADD(KP1_902113032, TY, TT);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, T10, TT);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_902113032, T1h, T1e);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP1_902113032, T1h, T1e);
        }
    }
}

template <>
struct r2cb_traits<20, 11>
{
    static constexpr long_t flops           = 97;
    static constexpr long_t operations      = 68;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 88;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 11 -name
 * r2cb -standalone */

/*
 * This function contains 68 FP additions, 29 FP multiplications,
 * (or, 39 additions, 0 multiplications, 29 fused multiply/add),
 * 88 stack variables, 9 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 11>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP1_618033988, +1.618033988749894848204586834365638117720309180);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TL, T4, TK, T3, TN, Tf, T5, T1c, TX, TC, Tc, TI, Tt, TY, Tw;
        SIMD_FLOAT TR, T16, Ti, TZ, Tz, TM, T1, T2, Tu, TP, T8, TW, Tp, TV, Tb;
        SIMD_FLOAT TQ, Ts, Tv, Tg, Th, Tx, Ty, T6, T7, Tn, To, T9, Ta, Tq, Tr;
        SIMD_FLOAT Td, Te;
        TL  = Cr[WS(cs, 5)];
        T4  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T6  = Cr[WS(cs, 4)];
        T7  = Cr[WS(cs, 6)];
        Tn  = Ci[WS(cs, 4)];
        To  = Ci[WS(cs, 6)];
        T9  = Ci[WS(cs, 9)];
        Ta  = Ci[WS(cs, 1)];
        Tq  = Cr[WS(cs, 1)];
        Tr  = Cr[WS(cs, 9)];
        Td  = Cr[WS(cs, 8)];
        Te  = Cr[WS(cs, 2)];
        Tu  = Ci[WS(cs, 8)];
        TK  = T1 + T2;
        T3  = T1 - T2;
        TP  = T6 + T7;
        T8  = T6 - T7;
        TW  = Tn - To;
        Tp  = Tn + To;
        TV  = Ta - T9;
        Tb  = T9 + Ta;
        TQ  = Tq + Tr;
        Ts  = Tq - Tr;
        TN  = Td + Te;
        Tf  = Td - Te;
        Tv  = Ci[WS(cs, 2)];
        T5  = SIMD_FMADD(KP2_000000000, T4, T3);
        Tg  = Ci[WS(cs, 7)];
        Th  = Ci[WS(cs, 3)];
        Tx  = Cr[WS(cs, 7)];
        Ty  = Cr[WS(cs, 3)];
        T1c = TV - TW;
        TX  = TV + TW;
        TC  = Tb - T8;
        Tc  = T8 + Tb;
        TI  = Ts - Tp;
        Tt  = Tp + Ts;
        TY  = Tu - Tv;
        Tw  = Tu + Tv;
        TR  = TP - TQ;
        T16 = TP + TQ;
        Ti  = Tg + Th;
        TZ  = Th - Tg;
        Tz  = Tx - Ty;
        TM  = Tx + Ty;
        {
            SIMD_FLOAT T1b, T10, TD, Tj, T17, TO, TH, TA, TE, Tk, Tl, T18, T1d,
                TS, T11;
            SIMD_FLOAT TJ, TB, TF, Tm, T1e, T1g, T19, T14, T12, TT, TG, T1f,
                T1h, T1a, T13;
            SIMD_FLOAT T15, TU;
            T1b           = TZ + TY;
            T10           = TY - TZ;
            TD            = Tf + Ti;
            Tj            = Tf - Ti;
            T17           = TN + TM;
            TO            = TM - TN;
            TH            = Tw + Tz;
            TA            = Tw - Tz;
            TE            = SIMD_FMADD(KP381966011, TD, TC);
            Tk            = Tc + Tj;
            Tl            = SIMD_FNMADD(KP381966011, Tc, Tj);
            T18           = T16 + T17;
            T1d           = T17 - T16;
            TS            = TO - TR;
            T11           = TR + TO;
            TJ            = SIMD_FMADD(KP618033988, TI, TH);
            TB            = SIMD_FMADD(KP618033988, TA, Tt);
            TF            = SIMD_FNMADD(KP809016994, TE, T4);
            Tm            = SIMD_FNMADD(KP1_618033988, Tl, T5);
            R0[WS(rs, 4)] = SIMD_FMADD(KP2_000000000, Tk, T5);
            T1e           = SIMD_FMADD(KP951056516, T1d, T1c);
            T1g           = SIMD_FMADD(KP951056516, T1d, T1b);
            T19           = SIMD_FNMADD(KP250000000, T18, TL);
            T14           = SIMD_FMADD(KP587785252, T11, T10);
            T12           = SIMD_FMADD(KP951056516, T11, T10);
            TT            = SIMD_FMSUB(KP250000000, TS, TL);
            TG            = SIMD_FNMADD(KP2_000000000, TF, T3);
            R0[WS(rs, 8)] = SIMD_FMADD(KP1_902113032, TB, Tm);
            R0[0]         = SIMD_FNMADD(KP1_902113032, TB, Tm);
            T1f           = SIMD_FMADD(KP618033988, T1e, T1b);
            T1h           = SIMD_FNMADD(KP618033988, T1g, T1c);
            T1a           = SIMD_FMADD(KP2_000000000, T19, TK);
            T13           = SIMD_FMADD(KP618033988, T12, TX);
            T15           = SIMD_FNMADD(KP618033988, TX, T14);
            TU            = SIMD_FMADD(KP2_000000000, TT, TK);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_902113032, TJ, TG);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP1_902113032, TJ, TG);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_902113032, T1h, T1a);
            R0[WS(rs, 1)] = SIMD_FMADD(KP1_902113032, T1f, T1a);
            R0[WS(rs, 7)] = SIMD_FNMADD(KP1_902113032, T15, TU);
            R0[WS(rs, 3)] = SIMD_FMADD(KP1_902113032, T13, TU);
        }
    }
}

template <>
struct r2cb_traits<20, 12>
{
    static constexpr long_t flops           = 95;
    static constexpr long_t operations      = 67;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 90;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 12 -name
 * r2cb -standalone */

/*
 * This function contains 67 FP additions, 28 FP multiplications,
 * (or, 39 additions, 0 multiplications, 28 fused multiply/add),
 * 90 stack variables, 11 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 12>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TS, TR, T3, TW, Te, T19, T17, T1d, Tb, TG, T1b, TV, Tz,
            TK;
        SIMD_FLOAT T13, To, T12, Th, TX, Tr, Tm, TU, T7, T16, Ty, T15, Ta, TT,
            Tv;
        SIMD_FLOAT Tn, Tf, Tg, Tp, Tq, T1, T2, T5, T6, Tw, Tx, T8, T9, Tt, Tu;
        SIMD_FLOAT Tc, Td;
        T4  = Cr[WS(cs, 5)];
        TS  = Ci[WS(cs, 5)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 10)];
        T5  = Cr[WS(cs, 4)];
        T6  = Cr[WS(cs, 6)];
        Tw  = Ci[WS(cs, 4)];
        Tx  = Ci[WS(cs, 6)];
        T8  = Cr[WS(cs, 9)];
        T9  = Cr[WS(cs, 1)];
        Tt  = Ci[WS(cs, 1)];
        Tu  = Ci[WS(cs, 9)];
        Tc  = Cr[WS(cs, 8)];
        Td  = Cr[WS(cs, 2)];
        Tm  = Ci[WS(cs, 8)];
        TR  = T1 - T2;
        T3  = T1 + T2;
        TU  = T5 - T6;
        T7  = T5 + T6;
        T16 = Tw + Tx;
        Ty  = Tw - Tx;
        T15 = T9 - T8;
        Ta  = T8 + T9;
        TT  = Tt + Tu;
        Tv  = Tt - Tu;
        TW  = Tc - Td;
        Te  = Tc + Td;
        Tn  = Ci[WS(cs, 2)];
        Tf  = Cr[WS(cs, 7)];
        Tg  = Cr[WS(cs, 3)];
        Tp  = Ci[WS(cs, 3)];
        Tq  = Ci[WS(cs, 7)];
        T19 = SIMD_FMADD(KP2_000000000, TS, TR);
        T17 = T15 - T16;
        T1d = T15 + T16;
        Tb  = T7 + Ta;
        TG  = T7 - Ta;
        T1b = TU + TT;
        TV  = TT - TU;
        Tz  = Tv - Ty;
        TK  = Tv + Ty;
        T13 = Tm + Tn;
        To  = Tm - Tn;
        T12 = Tf - Tg;
        Th  = Tf + Tg;
        TX  = Tp + Tq;
        Tr  = Tp - Tq;
        {
            SIMD_FLOAT T1e, T14, Ti, TF, TY, T1a, TL, Ts, T1f, T18, TA, Tj, TM,
                TH, TZ;
            SIMD_FLOAT T1c, T1g, TB, TD, Tk, TN, TP, TI, T10, T1h, TC, TE, Tl,
                TO, TQ;
            SIMD_FLOAT TJ, T11;
            T1e           = T13 - T12;
            T14           = T12 + T13;
            Ti            = Te + Th;
            TF            = Th - Te;
            TY            = TW + TX;
            T1a           = TW - TX;
            TL            = To - Tr;
            Ts            = To + Tr;
            T1f           = SIMD_FMADD(KP525731112, T1b, T1e);
            T18           = SIMD_FMADD(KP618033988, T17, T14);
            TA            = Ti - Tb;
            Tj            = Tb + Ti;
            TM            = TG + TF;
            TH            = TF - TG;
            TZ            = SIMD_FMADD(KP381966011, TY, TV);
            T1c           = T1a + T1b;
            T1g           = SIMD_FNMADD(KP726542528, T1f, T1a);
            TB            = SIMD_FMADD(KP951056516, TA, Tz);
            TD            = SIMD_FMADD(KP951056516, TA, Ts);
            Tk            = SIMD_FNMADD(KP250000000, Tj, T4);
            TN            = SIMD_FMADD(KP951056516, TM, TL);
            TP            = SIMD_FMADD(KP587785252, TM, TL);
            TI            = SIMD_FMSUB(KP250000000, TH, T4);
            T10           = SIMD_FNMADD(KP809016994, TZ, TS);
            R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, T1c, T19);
            T1h           = SIMD_FNMADD(KP850650808, T1g, T1d);
            TC            = SIMD_FMADD(KP618033988, TB, Ts);
            TE            = SIMD_FNMADD(KP618033988, TD, Tz);
            Tl            = SIMD_FMADD(KP2_000000000, Tk, T3);
            TO            = SIMD_FMADD(KP618033988, TN, TK);
            TQ            = SIMD_FNMADD(KP618033988, TK, TP);
            TJ            = SIMD_FMADD(KP2_000000000, TI, T3);
            T11           = SIMD_FNMADD(KP2_000000000, T10, TR);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_902113032, T1h, T19);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, TE, Tl);
            R0[0]         = SIMD_FMADD(KP1_902113032, TC, Tl);
            R0[WS(rs, 6)] = SIMD_FNMADD(KP1_902113032, TQ, TJ);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_902113032, TO, TJ);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_902113032, T18, T11);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_902113032, T18, T11);
        }
    }
}

template <>
struct r2cb_traits<20, 13>
{
    static constexpr long_t flops           = 88;
    static constexpr long_t operations      = 62;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 85;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 13 -name
 * r2cb -standalone */

/*
 * This function contains 62 FP additions, 26 FP multiplications,
 * (or, 36 additions, 0 multiplications, 26 fused multiply/add),
 * 85 stack variables, 11 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 13>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TL, TK, T3, TW, TV, TN, Tf, T5, TX, Tl, Tc, T18, TR, TD;
        SIMD_FLOAT TF, Ts, TZ, Ti, TY, Tv, TM, Tq, TP, T8, TC, Tb, TQ, Tz, Tr;
        SIMD_FLOAT Tg, Th, Tt, Tu, T1, T2, T6, T7, TA, TB, T9, Ta, Tx, Ty, Td;
        SIMD_FLOAT Te, T10, T17, Tj, Tm, TO, T16, Tw, TG, T19, Tn, Tk, T11, TS,
            TH;
        SIMD_FLOAT TE, T1a, To, T14, T12, TT, TI, T1b, Tp, T13, T15, TU, TJ,
            T1c;
        T4            = Ci[WS(cs, 5)];
        TL            = Cr[WS(cs, 5)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 10)];
        T6            = Cr[WS(cs, 4)];
        T7            = Cr[WS(cs, 6)];
        TA            = Ci[WS(cs, 4)];
        TB            = Ci[WS(cs, 6)];
        T9            = Ci[WS(cs, 9)];
        Ta            = Ci[WS(cs, 1)];
        Tx            = Cr[WS(cs, 1)];
        Ty            = Cr[WS(cs, 9)];
        Td            = Cr[WS(cs, 8)];
        Te            = Cr[WS(cs, 2)];
        Tq            = Ci[WS(cs, 8)];
        TK            = T1 + T2;
        T3            = T1 - T2;
        TP            = T6 + T7;
        T8            = T6 - T7;
        TW            = TA - TB;
        TC            = TA + TB;
        TV            = Ta - T9;
        Tb            = T9 + Ta;
        TQ            = Tx + Ty;
        Tz            = Tx - Ty;
        TN            = Td + Te;
        Tf            = Td - Te;
        Tr            = Ci[WS(cs, 2)];
        Tg            = Ci[WS(cs, 7)];
        Th            = Ci[WS(cs, 3)];
        Tt            = Cr[WS(cs, 7)];
        Tu            = Cr[WS(cs, 3)];
        T5            = SIMD_FMADD(KP2_000000000, T4, T3);
        TX            = TV + TW;
        Tl            = Tb - T8;
        Tc            = T8 + Tb;
        T18           = TP + TQ;
        TR            = TP - TQ;
        TD            = Tz - TC;
        TF            = Tz + TC;
        Ts            = Tq + Tr;
        TZ            = Tq - Tr;
        Ti            = Tg + Th;
        TY            = Tg - Th;
        Tv            = Tt - Tu;
        TM            = Tt + Tu;
        T10           = TY + TZ;
        T17           = TY - TZ;
        Tj            = Tf - Ti;
        Tm            = Tf + Ti;
        TO            = TM - TN;
        T16           = TV - (SIMD_FMADD(KP850650808, TM, TW));
        Tw            = Ts + Tv;
        TG            = Ts - Tv;
        T19           = SIMD_FMADD(KP525731112, T18, T17);
        Tn            = SIMD_FMADD(KP381966011, Tm, Tl);
        Tk            = Tc + Tj;
        T11           = TO + TR;
        TS            = TO - TR;
        TH            = SIMD_FMADD(KP525731112, Tc, TG);
        TE            = SIMD_FMADD(KP618033988, TD, Tw);
        T1a           = SIMD_FNMADD(KP726542528, T19, TN);
        To            = SIMD_FNMADD(KP809016994, Tn, T4);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, Tk, T5);
        T14           = SIMD_FMADD(KP587785252, T11, T10);
        T12           = SIMD_FMADD(KP951056516, T11, T10);
        TT            = SIMD_FMSUB(KP250000000, TS, TL);
        TI            = SIMD_FNMADD(KP726542528, TH, Tj);
        T1b           = SIMD_FNMADD(KP850650808, T1a, T16);
        Tp            = SIMD_FNMADD(KP2_000000000, To, T3);
        T13           = SIMD_FMADD(KP618033988, T12, TX);
        T15           = SIMD_FNMADD(KP618033988, TX, T14);
        TU            = SIMD_FMADD(KP2_000000000, TT, TK);
        TJ            = SIMD_FNMADD(KP850650808, TI, TF);
        T1c           = SIMD_FMADD(KP951056516, T1b, TL);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, TE, Tp);
        R0[0]         = SIMD_FNMADD(KP1_902113032, TE, Tp);
        R0[WS(rs, 5)] = SIMD_FNMADD(KP1_902113032, T15, TU);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_902113032, T13, TU);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_902113032, TJ, T5);
        R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, T1c, TK);
    }
}

template <>
struct r2cb_traits<20, 14>
{
    static constexpr long_t flops           = 86;
    static constexpr long_t operations      = 61;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 83;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 14 -name
 * r2cb -standalone */

/*
 * This function contains 61 FP additions, 25 FP multiplications,
 * (or, 36 additions, 0 multiplications, 25 fused multiply/add),
 * 83 stack variables, 9 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 14>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TN, TM, T3, T7, Ta, TS, Te, T14, TZ, T15, Tb, TQ, T19,
            Ts;
        SIMD_FLOAT TG, Tx, TV, Th, TU, TA, TR, Tv, TO, TY, Tr, TX, TP, To, Tw;
        SIMD_FLOAT Tf, Tg, Ty, Tz, T1, T2, T5, T6, Tp, Tq, T8, T9, Tm, Tn, Tc;
        SIMD_FLOAT Td, T18, TW, TH, Ti, TT, T16, TF, TB, T10, Tt, Tj, TI, T17,
            T1a;
        SIMD_FLOAT T11, Tu, TD, Tk, TJ, T1b, T12, TC, TE, Tl, TK, T1c, T13, TL;
        T4            = Cr[WS(cs, 5)];
        TN            = Ci[WS(cs, 5)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 10)];
        T5            = Cr[WS(cs, 7)];
        T6            = Cr[WS(cs, 3)];
        Tp            = Ci[WS(cs, 7)];
        Tq            = Ci[WS(cs, 3)];
        T8            = Cr[WS(cs, 8)];
        T9            = Cr[WS(cs, 2)];
        Tm            = Ci[WS(cs, 8)];
        Tn            = Ci[WS(cs, 2)];
        Tc            = Cr[WS(cs, 4)];
        Td            = Cr[WS(cs, 6)];
        Tv            = Ci[WS(cs, 4)];
        TM            = T1 - T2;
        T3            = T1 + T2;
        TO            = T5 - T6;
        T7            = T5 + T6;
        TY            = Tp + Tq;
        Tr            = Tp - Tq;
        TX            = T8 - T9;
        Ta            = T8 + T9;
        TP            = Tm + Tn;
        To            = Tm - Tn;
        TS            = Tc - Td;
        Te            = Tc + Td;
        Tw            = Ci[WS(cs, 6)];
        Tf            = Cr[WS(cs, 9)];
        Tg            = Cr[WS(cs, 1)];
        Ty            = Ci[WS(cs, 1)];
        Tz            = Ci[WS(cs, 9)];
        T14           = SIMD_FMADD(KP2_000000000, TN, TM);
        TZ            = TX + TY;
        T15           = TX - TY;
        Tb            = T7 - Ta;
        TQ            = TO + TP;
        T19           = TP - TO;
        Ts            = To + Tr;
        TG            = Tr - To;
        Tx            = Tv - Tw;
        TV            = Tv + Tw;
        Th            = Tf + Tg;
        TU            = Tg - Tf;
        TA            = Ty - Tz;
        TR            = Ty + Tz;
        T18           = TU + TV;
        TW            = TU - TV;
        TH            = Te + Th;
        Ti            = Te - Th;
        TT            = TR - TS;
        T16           = TS + TR;
        TF            = TA - (SIMD_FMADD(KP850650808, T7, Tx));
        TB            = Tx + TA;
        T10           = SIMD_FMADD(KP525731112, TZ, TW);
        Tt            = Tb + Ti;
        Tj            = Tb - Ti;
        TI            = SIMD_FMADD(KP525731112, TH, TG);
        T17           = T15 + T16;
        T1a           = SIMD_FMADD(KP525731112, T16, T19);
        T11           = SIMD_FMADD(KP726542528, T10, TT);
        Tu            = SIMD_FMADD(KP587785252, Tt, Ts);
        TD            = SIMD_FMADD(KP951056516, Tt, Ts);
        Tk            = SIMD_FMSUB(KP250000000, Tj, T4);
        TJ            = SIMD_FNMADD(KP726542528, TI, Ta);
        R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, T17, T14);
        T1b           = SIMD_FNMADD(KP726542528, T1a, T15);
        T12           = SIMD_FMADD(KP850650808, T11, TQ);
        TC            = SIMD_FNMADD(KP618033988, TB, Tu);
        TE            = SIMD_FMADD(KP618033988, TD, TB);
        Tl            = SIMD_FMADD(KP2_000000000, Tk, T3);
        TK            = SIMD_FNMADD(KP850650808, TJ, TF);
        T1c           = SIMD_FNMADD(KP850650808, T1b, T18);
        T13           = SIMD_FNMADD(KP951056516, T12, TN);
        R0[0]         = SIMD_FMADD(KP1_902113032, TE, Tl);
        R0[WS(rs, 4)] = SIMD_FNMADD(KP1_902113032, TC, Tl);
        TL            = SIMD_FMADD(KP951056516, TK, T4);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_902113032, T1c, T14);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP2_000000000, T13, TM);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, TL, T3);
    }
}

template <>
struct r2cb_traits<20, 15>
{
    static constexpr long_t flops           = 79;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 77;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 15 -name
 * r2cb -standalone */

/*
 * This function contains 56 FP additions, 23 FP multiplications,
 * (or, 33 additions, 0 multiplications, 23 fused multiply/add),
 * 77 stack variables, 7 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 15>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, Tm, T3, Tl, To, TT, Ty, TW, TE, Tn, Tb, Tr, Tf, TB, T8;
        SIMD_FLOAT Tp, Tt, Tu, Tg, Th, T5, T1, T2, Tw, Tx, TC, TD, T9, Ta, Td;
        SIMD_FLOAT Te, T6, T7;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 10)];
        Tm = Cr[WS(cs, 5)];
        Tw = Ci[WS(cs, 2)];
        Tx = Ci[WS(cs, 8)];
        TC = Cr[WS(cs, 9)];
        TD = Cr[WS(cs, 1)];
        T9 = Ci[WS(cs, 9)];
        Ta = Ci[WS(cs, 1)];
        Td = Cr[WS(cs, 8)];
        Te = Cr[WS(cs, 2)];
        T6 = Cr[WS(cs, 4)];
        T7 = Cr[WS(cs, 6)];
        T3 = T1 - T2;
        Tl = T1 + T2;
        To = Ci[WS(cs, 4)];
        TT = Tw + Tx;
        Ty = Tw - Tx;
        TW = TD - TC;
        TE = TC + TD;
        Tn = Ta - T9;
        Tb = T9 + Ta;
        Tr = Td + Te;
        Tf = Td - Te;
        TB = T6 + T7;
        T8 = T6 - T7;
        Tp = Ci[WS(cs, 6)];
        Tt = Cr[WS(cs, 7)];
        Tu = Cr[WS(cs, 3)];
        Tg = Ci[WS(cs, 7)];
        Th = Ci[WS(cs, 3)];
        T5 = SIMD_FMADD(KP2_000000000, T4, T3);
        {
            SIMD_FLOAT TF, TK, Tc, TV, TX, Tq, TS, Tv, Tz, Ti, TY, T14, TM, Ts,
                T15;
            SIMD_FLOAT TU, TN, TL, TA, Tj, TZ, T16, TO, TG, T10, Tk, T17, TP,
                TH, T11;
            SIMD_FLOAT T18, TQ, TI, T12, TR, TJ, T13;
            TF            = TB + TE;
            TK            = SIMD_FMADD(KP809016994, TB, Tm);
            Tc            = T8 + Tb;
            TV            = Tb - T8;
            TX            = To + Tp;
            Tq            = To - Tp;
            TS            = Tt - Tu;
            Tv            = Tt + Tu;
            Tz            = Th - Tg;
            Ti            = Tg + Th;
            TY            = TW - TX;
            T14           = TX + TW;
            TM            = Tn + Tq;
            Ts            = Tn - (SIMD_FMADD(KP850650808, Tr, Tq));
            T15           = TT - TS;
            TU            = TS + TT;
            TN            = Tr - Tv;
            TL            = Tz + Ty;
            TA            = Ty - Tz;
            Tj            = Tf - Ti;
            TZ            = Tf + Ti;
            T16           = SIMD_FMADD(KP525731112, Tc, T15);
            TO            = SIMD_FMADD(KP525731112, TN, TM);
            TG            = SIMD_FMADD(KP525731112, TF, TA);
            T10           = SIMD_FMADD(KP525731112, TZ, TY);
            Tk            = Tc + Tj;
            T17           = SIMD_FNMADD(KP726542528, T16, Tj);
            TP            = SIMD_FMADD(KP726542528, TO, TE);
            TH            = SIMD_FNMADD(KP726542528, TG, Tv);
            T11           = SIMD_FMADD(KP726542528, T10, TV);
            R0[0]         = SIMD_FMADD(KP2_000000000, Tk, T5);
            T18           = SIMD_FNMADD(KP850650808, T17, T14);
            TQ            = SIMD_FMADD(KP850650808, TP, TL);
            TI            = SIMD_FNMADD(KP850650808, TH, Ts);
            T12           = SIMD_FMADD(KP850650808, T11, TU);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, T18, T5);
            TR            = SIMD_FNMADD(KP951056516, TQ, TK);
            TJ            = SIMD_FMADD(KP951056516, TI, Tm);
            T13           = SIMD_FNMADD(KP951056516, T12, T4);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP2_000000000, TR, Tl);
            R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, TJ, Tl);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP2_000000000, T13, T3);
        }
    }
}

template <>
struct r2cb_traits<20, 16>
{
    static constexpr long_t flops           = 77;
    static constexpr long_t operations      = 54;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 75;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 16 -name
 * r2cb -standalone */

/*
 * This function contains 54 FP additions, 23 FP multiplications,
 * (or, 31 additions, 0 multiplications, 23 fused multiply/add),
 * 75 stack variables, 6 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 16>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    {
        SIMD_FLOAT T4, TJ, TI, T3, Tf, TP, T7, TQ, Tu, TR, Ta, TK, Tr, Tg, Tb;
        SIMD_FLOAT TU, Tn, Tc, Ti, Tj, T1, T2, T5, T6, Ts, Tt, T8, T9, Tp, Tq;
        SIMD_FLOAT Tl, Tm;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 10)];
        T4 = Cr[WS(cs, 5)];
        TJ = Ci[WS(cs, 5)];
        T5 = Ci[WS(cs, 1)];
        T6 = Ci[WS(cs, 9)];
        Ts = Cr[WS(cs, 9)];
        Tt = Cr[WS(cs, 1)];
        T8 = Ci[WS(cs, 4)];
        T9 = Ci[WS(cs, 6)];
        Tp = Cr[WS(cs, 4)];
        Tq = Cr[WS(cs, 6)];
        Tl = Ci[WS(cs, 3)];
        TI = T1 - T2;
        T3 = T1 + T2;
        Tm = Ci[WS(cs, 7)];
        Tf = Cr[WS(cs, 7)];
        TP = T5 + T6;
        T7 = T5 - T6;
        TQ = Tt - Ts;
        Tu = Ts + Tt;
        TR = T8 + T9;
        Ta = T8 - T9;
        TK = Tp - Tq;
        Tr = Tp + Tq;
        Tg = Cr[WS(cs, 3)];
        Tb = Cr[WS(cs, 8)];
        TU = Tl + Tm;
        Tn = Tl - Tm;
        Tc = Cr[WS(cs, 2)];
        Ti = Ci[WS(cs, 2)];
        Tj = Ci[WS(cs, 8)];
        {
            SIMD_FLOAT T10, TS, TC, T13, TL, Tv, TA, TM, Th, TT, Td, TN, Tk, TV,
                T11;
            SIMD_FLOAT TD, Te, T12, TO, To, TB, TW, TE, T14, Tw, TX, TF, T15,
                Tx, TY;
            SIMD_FLOAT TG, T16, Ty, TZ, TH, T17, Tz;
            T10           = TR + TQ;
            TS            = TQ - TR;
            TC            = T7 + Ta;
            T13           = TP + TK;
            TL            = SIMD_FMADD(KP809016994, TK, TJ);
            Tv            = Tr + Tu;
            TA            = SIMD_FMADD(KP809016994, Tr, T4);
            TM            = Tf - Tg;
            Th            = Tf + Tg;
            TT            = Tb - Tc;
            Td            = Tb + Tc;
            TN            = Ti + Tj;
            Tk            = Ti - Tj;
            TV            = TT + TU;
            T11           = TU - TT;
            TD            = Td - Th;
            Te            = T7 - (SIMD_FMADD(KP850650808, Td, Ta));
            T12           = TN - TM;
            TO            = TM + TN;
            To            = Tk - Tn;
            TB            = Tk + Tn;
            TW            = SIMD_FMADD(KP525731112, TV, TS);
            TE            = SIMD_FMADD(KP525731112, TD, TC);
            T14           = SIMD_FMADD(KP525731112, T13, T12);
            Tw            = SIMD_FMADD(KP525731112, Tv, To);
            TX            = SIMD_FMADD(KP726542528, TW, TP);
            TF            = SIMD_FMADD(KP726542528, TE, Tu);
            T15           = SIMD_FMADD(KP726542528, T14, T11);
            Tx            = SIMD_FNMADD(KP726542528, Tw, Th);
            TY            = SIMD_FMADD(KP850650808, TX, TO);
            TG            = SIMD_FMADD(KP850650808, TF, TB);
            T16           = SIMD_FMADD(KP850650808, T15, T10);
            Ty            = SIMD_FNMADD(KP850650808, Tx, Te);
            TZ            = SIMD_FNMADD(KP951056516, TY, TL);
            TH            = SIMD_FNMADD(KP951056516, TG, TA);
            T17           = SIMD_FMADD(KP951056516, T16, TJ);
            Tz            = SIMD_FMADD(KP951056516, Ty, T4);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP2_000000000, TZ, TI);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP2_000000000, TH, T3);
            R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, T17, TI);
            R0[0]         = SIMD_FMADD(KP2_000000000, Tz, T3);
        }
    }
}

template <>
struct r2cb_traits<20, 17>
{
    static constexpr long_t flops           = 62;
    static constexpr long_t operations      = 45;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 59;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 17 -name
 * r2cb -standalone */

/*
 * This function contains 45 FP additions, 17 FP multiplications,
 * (or, 28 additions, 0 multiplications, 17 fused multiply/add),
 * 59 stack variables, 6 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 17>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    {
        SIMD_FLOAT TJ, T1, T2, T4, T5, T3, T7, T9, Tl, Tu, Ta, Ti, TN, To, Tt;
        SIMD_FLOAT TM, Te, TO, Ts, T8, T6, Tj, Tk, Tc, Tr, Td, Tq, Tg, Tn, Th;
        SIMD_FLOAT Tm, Tb, TE, Tp, TB, Tv, TK, TP, Tf, TD, TC, Tw, TL, TQ, TF;
        SIMD_FLOAT Tx, TR, TG, Ty, TH, Tz, TI, TA;
        TJ            = Cr[WS(cs, 5)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 10)];
        T4            = Ci[WS(cs, 5)];
        T5            = Cr[WS(cs, 4)];
        T6            = Cr[WS(cs, 6)];
        Tj            = Cr[WS(cs, 1)];
        Tk            = Cr[WS(cs, 9)];
        Tg            = Ci[WS(cs, 9)];
        Tn            = Ci[WS(cs, 6)];
        Th            = Ci[WS(cs, 1)];
        Tm            = Ci[WS(cs, 4)];
        Tc            = Cr[WS(cs, 7)];
        Tr            = Cr[WS(cs, 2)];
        T3            = T1 - T2;
        Td            = Cr[WS(cs, 3)];
        Tq            = Cr[WS(cs, 8)];
        T7            = T5 - T6;
        T9            = Ci[WS(cs, 8)];
        Tl            = Tj - Tk;
        Tu            = Ci[WS(cs, 3)];
        Ta            = Ci[WS(cs, 2)];
        Ti            = Tg + Th;
        TN            = (Th - Tg) + (Tm - Tn);
        To            = Tm + Tn;
        Tt            = Ci[WS(cs, 7)];
        TM            = (Tk + Tj) - T6;
        Te            = Tc - Td;
        TO            = (Tq + Tr) - (Tc + Td);
        Ts            = Tq - Tr;
        T8            = SIMD_FMADD(KP809016994, T7, T4);
        Tb            = T9 + Ta;
        TE            = T7 + Ti;
        Tp            = Tl - To;
        TB            = To + Tl;
        Tv            = Tt + Tu;
        TK            = Tt + T9;
        TP            = SIMD_FMADD(KP525731112, TO, TN);
        Tf            = Tb + Te;
        TD            = Tb - Te;
        TC            = Tv - Ts;
        Tw            = Ts + Tv;
        TL            = Tu + Ta - (SIMD_FMADD(KP850650808, T5, TK));
        TQ            = SIMD_FMADD(KP726542528, TP, TM);
        TF            = SIMD_FMADD(KP525731112, TE, TD);
        Tx            = SIMD_FMADD(KP525731112, Tw, Tp);
        TR            = SIMD_FMADD(KP850650808, TQ, TL);
        TG            = SIMD_FMADD(KP726542528, TF, TC);
        Ty            = SIMD_FMADD(KP726542528, Tx, Ti);
        R0[WS(rs, 1)] = T1 + SIMD_FNMADD(KP2_000000000,
                                         SIMD_FNMADD(KP951056516, TR, TJ), T2);
        TH            = SIMD_FMADD(KP850650808, TG, TB);
        Tz            = SIMD_FMADD(KP850650808, Ty, Tf);
        TI            = SIMD_FMADD(KP951056516, TH, T4);
        TA            = SIMD_FNMADD(KP951056516, Tz, T8);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, TI, T3);
        R0[0]         = SIMD_FNMADD(KP2_000000000, TA, T3);
    }
}

template <>
struct r2cb_traits<20, 18>
{
    static constexpr long_t flops           = 50;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 43;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 18 -name
 * r2cb -standalone */

/*
 * This function contains 36 FP additions, 14 FP multiplications,
 * (or, 22 additions, 0 multiplications, 14 fused multiply/add),
 * 43 stack variables, 6 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 18>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    {
        SIMD_FLOAT T1, Tt, T3, T2, T5, T4, Tm, T6, Tl, To, T7, Tn, Td, Te, T9;
        SIMD_FLOAT Th, Ta, Tj, Ti, Tf, Tv, T8, Tp, Tw, TB, Tb, Tu, Tk, Tg, Tx;
        SIMD_FLOAT Tc, Tq, Ty, Tr, Tz, Ts, TA;
        T1    = Cr[0];
        Tt    = Ci[WS(cs, 5)];
        T3    = Cr[WS(cs, 5)];
        T2    = Cr[WS(cs, 10)];
        T5    = Ci[WS(cs, 3)];
        T4    = Ci[WS(cs, 2)];
        Tm    = Cr[WS(cs, 2)];
        T6    = Ci[WS(cs, 8)];
        Tl    = Cr[WS(cs, 8)];
        To    = Cr[WS(cs, 3)];
        T7    = Ci[WS(cs, 7)];
        Tn    = Cr[WS(cs, 7)];
        Td    = Cr[WS(cs, 9)];
        Te    = Cr[WS(cs, 1)];
        T9    = Cr[WS(cs, 4)];
        Th    = Ci[WS(cs, 4)];
        Ta    = Ci[WS(cs, 9)];
        Tj    = Ci[WS(cs, 1)];
        Ti    = Ci[WS(cs, 6)];
        Tf    = Cr[WS(cs, 6)];
        Tv    = (T5 + T7) + Tm;
        T8    = T6 + T7;
        Tp    = (Tl + Tm) - (Tn + To);
        Tw    = (T4 + T6) + To - Tn;
        TB    = SIMD_FMADD(KP850650808, Tl, Td);
        Tb    = SIMD_FMADD(KP726542528, Ta, T9);
        Tu    = Te + Th + Ti;
        Tk    = (Th - Ti) + Tj;
        Tg    = (Td + Te) - Tf;
        Tx    = (T9 - Tf) + (Ta + Tj);
        Tc    = T4 + T5 - (SIMD_FMADD(KP850650808, Tb, T8));
        Tq    = SIMD_FMADD(KP525731112, Tp, Tk);
        Ty    = SIMD_FMADD(KP525731112, Tx, Tw);
        Tr    = SIMD_FMADD(KP726542528, Tq, Tg);
        Tz    = SIMD_FMADD(KP726542528, Ty, Tv);
        Ts    = SIMD_FMADD(KP850650808, Tr, Tc);
        TA    = SIMD_FMADD(KP850650808, Tz, Tu);
        R0[0] = T1 + SIMD_FNMADD(KP2_000000000,
                                 SIMD_FNMADD(KP951056516, Ts, T3), T2);
        R0[WS(rs, 1)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP951056516, TA, Tt), T1) -
            (SIMD_FMADD(KP1_902113032, TB, T2));
    }
}

template <>
struct r2cb_traits<20, 19>
{
    static constexpr long_t flops           = 23;
    static constexpr long_t operations      = 18;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 31;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 20 -skip-k 19 -name
 * r2cb -standalone */

/*
 * This function contains 18 FP additions, 5 FP multiplications,
 * (or, 13 additions, 0 multiplications, 5 fused multiply/add),
 * 31 stack variables, 5 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 20 && SkippedOutputs == 19>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    {
        SIMD_FLOAT T1, T2, Tq, T3, T6, T4, T5, Td, Tg, Te, Tf, Ti, Tl, Tj, Tc;
        SIMD_FLOAT Tk, T8, Tb, T9, Ta, T7, Th, Tm, Tn, To, Tp;
        T1 = Cr[0];
        T2 = Ci[WS(cs, 5)];
        Tq = Cr[WS(cs, 10)];
        T8 = Cr[WS(cs, 2)];
        Tb = Cr[WS(cs, 8)];
        T9 = Ci[WS(cs, 7)];
        Ta = Ci[WS(cs, 3)];
        T3 = Ci[WS(cs, 4)];
        T6 = Cr[WS(cs, 9)];
        T4 = Ci[WS(cs, 6)];
        T5 = Cr[WS(cs, 1)];
        Td = Ci[WS(cs, 8)];
        Tg = Cr[WS(cs, 7)];
        Te = Ci[WS(cs, 2)];
        Tf = Cr[WS(cs, 3)];
        Ti = Cr[WS(cs, 4)];
        Tl = Cr[WS(cs, 6)];
        Tj = Ci[WS(cs, 9)];
        Tc = T8 + T9 + Ta - Tb;
        Tk = Ci[WS(cs, 1)];
        T7 = T3 + T4 + T5 - T6;
        Th = Td + Te + Tf - Tg;
        Tm = Ti + Tj + Tk - Tl;
        Tn = SIMD_FMADD(KP525731112, Tm, Th);
        To = SIMD_FMADD(KP726542528, Tn, Tc);
        Tp = SIMD_FMADD(KP850650808, To, T7);
        R0[0] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP951056516, Tp, T2), T1) - Tq;
    }
}

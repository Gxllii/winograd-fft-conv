//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<16, 0>
{
    static constexpr long_t flops           = 90;
    static constexpr long_t operations      = 58;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 62;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 0 -name
 * r2cb -standalone */

/*
 * This function contains 58 FP additions, 32 FP multiplications,
 * (or, 26 additions, 0 multiplications, 32 fused multiply/add),
 * 62 stack variables, 4 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tr, T8, TM, Tq, Tc, TP, Ty, Tv, Tf, TD, Tj, TL, T5, Ts, To;
        SIMD_FLOAT TE, T4, Ti, T1, T2, T6, T7, Tl, Tm, Ta, Tb, Tw, Tx, Td, Te;
        SIMD_FLOAT Tk, Tn, Th, T3, Tz, TG, TO, Tg, TT, TN, T9, TV, Tt, TQ, TJ;
        SIMD_FLOAT TF, Tp, TB, TR, TW, Tu, TH, TU, TS, TK, TI, TA, TC;
        T4             = Cr[WS(cs, 4)];
        Ti             = Ci[WS(cs, 4)];
        T1             = Cr[0];
        T2             = Cr[WS(cs, 8)];
        T6             = Cr[WS(cs, 2)];
        T7             = Cr[WS(cs, 6)];
        Tl             = Ci[WS(cs, 2)];
        Tm             = Ci[WS(cs, 6)];
        Ta             = Cr[WS(cs, 1)];
        Tb             = Cr[WS(cs, 7)];
        Tw             = Ci[WS(cs, 1)];
        Tx             = Ci[WS(cs, 7)];
        Td             = Cr[WS(cs, 5)];
        Te             = Cr[WS(cs, 3)];
        Tr             = Ci[WS(cs, 5)];
        Th             = T1 - T2;
        T3             = T1 + T2;
        T8             = T6 + T7;
        Tk             = T6 - T7;
        TM             = Tl - Tm;
        Tn             = Tl + Tm;
        Tq             = Ta - Tb;
        Tc             = Ta + Tb;
        TP             = Tw - Tx;
        Ty             = Tw + Tx;
        Tv             = Td - Te;
        Tf             = Td + Te;
        TD             = SIMD_FMADD(KP2_000000000, Ti, Th);
        Tj             = SIMD_FNMADD(KP2_000000000, Ti, Th);
        TL             = SIMD_FNMADD(KP2_000000000, T4, T3);
        T5             = SIMD_FMADD(KP2_000000000, T4, T3);
        Ts             = Ci[WS(cs, 3)];
        To             = Tk - Tn;
        TE             = Tk + Tn;
        Tz             = Tv + Ty;
        TG             = Ty - Tv;
        TO             = Tc - Tf;
        Tg             = Tc + Tf;
        TT             = SIMD_FMADD(KP2_000000000, TM, TL);
        TN             = SIMD_FNMADD(KP2_000000000, TM, TL);
        T9             = SIMD_FMADD(KP2_000000000, T8, T5);
        TV             = SIMD_FNMADD(KP2_000000000, T8, T5);
        Tt             = Tr + Ts;
        TQ             = Tr - Ts;
        TJ             = SIMD_FMADD(KP1_414213562, TE, TD);
        TF             = SIMD_FNMADD(KP1_414213562, TE, TD);
        Tp             = SIMD_FMADD(KP1_414213562, To, Tj);
        TB             = SIMD_FNMADD(KP1_414213562, To, Tj);
        R0[0]          = SIMD_FMADD(KP2_000000000, Tg, T9);
        R0[WS(rs, 8)]  = SIMD_FNMADD(KP2_000000000, Tg, T9);
        TR             = TP - TQ;
        TW             = TQ + TP;
        Tu             = Tq - Tt;
        TH             = Tq + Tt;
        R0[WS(rs, 12)] = SIMD_FMADD(KP2_000000000, TW, TV);
        R0[WS(rs, 4)]  = SIMD_FNMADD(KP2_000000000, TW, TV);
        TU             = TO + TR;
        TS             = TO - TR;
        TK             = SIMD_FMADD(KP414213562, TG, TH);
        TI             = SIMD_FNMADD(KP414213562, TH, TG);
        TA             = SIMD_FNMADD(KP414213562, Tz, Tu);
        TC             = SIMD_FMADD(KP414213562, Tu, Tz);
        R0[WS(rs, 2)]  = SIMD_FMADD(KP1_414213562, TS, TN);
        R0[WS(rs, 10)] = SIMD_FNMADD(KP1_414213562, TS, TN);
        R0[WS(rs, 14)] = SIMD_FMADD(KP1_414213562, TU, TT);
        R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_414213562, TU, TT);
        R0[WS(rs, 11)] = SIMD_FMADD(KP1_847759065, TI, TF);
        R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_847759065, TI, TF);
        R0[WS(rs, 15)] = SIMD_FMADD(KP1_847759065, TK, TJ);
        R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_847759065, TK, TJ);
        R0[WS(rs, 13)] = SIMD_FMADD(KP1_847759065, TC, TB);
        R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_847759065, TC, TB);
        R0[WS(rs, 1)]  = SIMD_FMADD(KP1_847759065, TA, Tp);
        R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_847759065, TA, Tp);
    }
}

template <>
struct r2cb_traits<16, 1>
{
    static constexpr long_t flops           = 88;
    static constexpr long_t operations      = 58;
    static constexpr long_t memory_accesses = 31;
    static constexpr long_t stack_vars      = 60;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 1 -name
 * r2cb -standalone */

/*
 * This function contains 58 FP additions, 30 FP multiplications,
 * (or, 28 additions, 0 multiplications, 30 fused multiply/add),
 * 60 stack variables, 4 constants, and 31 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Th, Ti, Tl, TR, T8, TG, Tb, Tj, Tm, TL, Tq, TK, Tg, TF, TQ;
        SIMD_FLOAT Tv, T5, T4, TE, T1, T2, T6, T7, T9, Ta, To, Tp, Te, Tf, TD;
        SIMD_FLOAT T3, Tw, Tc, TI, Tn, TT, TM, Tz, Tk, TH, TO, TS, TB, Tx, Td;
        SIMD_FLOAT Tt, TU, TJ, Tr, Ty, TN, TP, TA, TC, Tu, Ts;
        T4             = Ci[WS(cs, 4)];
        TE             = Cr[WS(cs, 4)];
        T1             = Cr[0];
        T2             = Cr[WS(cs, 8)];
        T6             = Cr[WS(cs, 2)];
        T7             = Cr[WS(cs, 6)];
        T9             = Ci[WS(cs, 2)];
        Ta             = Ci[WS(cs, 6)];
        Th             = Cr[WS(cs, 5)];
        Ti             = Cr[WS(cs, 3)];
        To             = Ci[WS(cs, 5)];
        Tp             = Ci[WS(cs, 3)];
        Te             = Ci[WS(cs, 1)];
        Tf             = Ci[WS(cs, 7)];
        Tl             = Cr[WS(cs, 1)];
        TD             = T1 + T2;
        T3             = T1 - T2;
        TR             = T6 + T7;
        T8             = T6 - T7;
        TG             = T9 - Ta;
        Tb             = T9 + Ta;
        Tj             = Th - Ti;
        Tm             = Cr[WS(cs, 7)];
        TL             = To - Tp;
        Tq             = To + Tp;
        TK             = Te - Tf;
        Tg             = Te + Tf;
        TF             = SIMD_FNMADD(KP2_000000000, TE, TD);
        TQ             = SIMD_FMADD(KP2_000000000, TE, TD);
        Tv             = SIMD_FNMADD(KP2_000000000, T4, T3);
        T5             = SIMD_FMADD(KP2_000000000, T4, T3);
        Tw             = T8 - Tb;
        Tc             = T8 + Tb;
        TI             = Tl + Tm;
        Tn             = Tl - Tm;
        TT             = TL + TK;
        TM             = TK - TL;
        Tz             = Tg + Tj;
        Tk             = Tg - Tj;
        TH             = SIMD_FNMADD(KP2_000000000, TG, TF);
        TO             = SIMD_FMADD(KP2_000000000, TG, TF);
        TS             = SIMD_FNMADD(KP2_000000000, TR, TQ);
        TB             = SIMD_FNMADD(KP1_414213562, Tw, Tv);
        Tx             = SIMD_FMADD(KP1_414213562, Tw, Tv);
        Td             = SIMD_FNMADD(KP1_414213562, Tc, T5);
        Tt             = SIMD_FMADD(KP1_414213562, Tc, T5);
        TU             = TR - (Th + Ti) - TI;
        TJ             = TI - (Th + Ti);
        Tr             = Tn + Tq;
        Ty             = Tn - Tq;
        R0[WS(rs, 11)] = SIMD_FMADD(KP2_000000000, TT, TS);
        R0[WS(rs, 3)]  = SIMD_FNMADD(KP2_000000000, TT, TS);
        R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, TU, TQ);
        TN             = TJ - TM;
        TP             = TM + TJ;
        TA             = SIMD_FNMADD(KP414213562, Tz, Ty);
        TC             = SIMD_FMADD(KP414213562, Ty, Tz);
        Tu             = SIMD_FMADD(KP414213562, Tk, Tr);
        Ts             = SIMD_FNMADD(KP414213562, Tr, Tk);
        R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_414213562, TN, TH);
        R0[WS(rs, 1)]  = SIMD_FMADD(KP1_414213562, TN, TH);
        R0[WS(rs, 13)] = SIMD_FMADD(KP1_414213562, TP, TO);
        R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_414213562, TP, TO);
        R0[0]          = SIMD_FMADD(KP1_847759065, TA, Tx);
        R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_847759065, TA, Tx);
        R0[WS(rs, 12)] = SIMD_FMADD(KP1_847759065, TC, TB);
        R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_847759065, TC, TB);
        R0[WS(rs, 14)] = SIMD_FMADD(KP1_847759065, Tu, Tt);
        R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_847759065, Tu, Tt);
        R0[WS(rs, 10)] = SIMD_FMADD(KP1_847759065, Ts, Td);
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_847759065, Ts, Td);
    }
}

template <>
struct r2cb_traits<16, 2>
{
    static constexpr long_t flops           = 86;
    static constexpr long_t operations      = 57;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 61;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 2 -name
 * r2cb -standalone */

/*
 * This function contains 57 FP additions, 29 FP multiplications,
 * (or, 28 additions, 0 multiplications, 29 fused multiply/add),
 * 61 stack variables, 5 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Td, Te, Tg, T8, Tw, TR, Tz, TC, Th, Tu, Tl, Tt, Tc, TI, Ts;
        SIMD_FLOAT TQ, T5, T4, Tr, T1, T2, T6, T7, Tx, Ty, Tj, Tk, Ta, Tb, Tq;
        SIMD_FLOAT T3, TJ, TA, TD, Ti, TM, Tv, Tf, TS, T9, To, TK, TO, TG, TE;
        SIMD_FLOAT TL, TT, Tm, TB, TU, TH, TN, TP, Tn, Tp, TF;
        T4             = Cr[WS(cs, 4)];
        Tr             = Ci[WS(cs, 4)];
        T1             = Cr[0];
        T2             = Cr[WS(cs, 8)];
        T6             = Ci[WS(cs, 2)];
        T7             = Ci[WS(cs, 6)];
        Tx             = Cr[WS(cs, 2)];
        Ty             = Cr[WS(cs, 6)];
        Td             = Cr[WS(cs, 5)];
        Te             = Cr[WS(cs, 3)];
        Tj             = Ci[WS(cs, 5)];
        Tk             = Ci[WS(cs, 3)];
        Ta             = Cr[WS(cs, 1)];
        Tb             = Cr[WS(cs, 7)];
        Tg             = Ci[WS(cs, 1)];
        Tq             = T1 - T2;
        T3             = T1 + T2;
        T8             = T6 - T7;
        Tw             = T6 + T7;
        TR             = Tx + Ty;
        Tz             = Tx - Ty;
        TC             = Td - Te;
        Th             = Ci[WS(cs, 7)];
        Tu             = Tj + Tk;
        Tl             = Tj - Tk;
        Tt             = Ta - Tb;
        Tc             = Ta + Tb;
        TI             = SIMD_FMADD(KP2_000000000, Tr, Tq);
        Ts             = SIMD_FNMADD(KP2_000000000, Tr, Tq);
        TQ             = SIMD_FMADD(KP2_000000000, T4, T3);
        T5             = SIMD_FNMADD(KP2_000000000, T4, T3);
        TJ             = Tw + Tz;
        TA             = Tw - Tz;
        TD             = Tg + Th;
        Ti             = Tg - Th;
        TM             = Tt + Tu;
        Tv             = Tt - Tu;
        TU             = TR - (Td + Te) - Tc;
        Tf             = Tc - (Td + Te);
        TS             = SIMD_FNMADD(KP2_000000000, TR, TQ);
        T9             = SIMD_FNMADD(KP2_000000000, T8, T5);
        To             = SIMD_FMADD(KP2_000000000, T8, T5);
        TK             = SIMD_FNMADD(KP1_414213562, TJ, TI);
        TO             = SIMD_FMADD(KP1_414213562, TJ, TI);
        TG             = SIMD_FMADD(KP1_414213562, TA, Ts);
        TE             = TC + TD;
        TL             = TD - TC;
        TT             = Ti + Tl;
        Tm             = Ti - Tl;
        TB             = SIMD_FMADD(KP765366864, TA, Tv);
        R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, TU, TQ);
        TH             = SIMD_FMADD(KP414213562, Tv, TE);
        TN             = SIMD_FNMADD(KP414213562, TM, TL);
        TP             = SIMD_FMADD(KP414213562, TL, TM);
        R0[WS(rs, 10)] = SIMD_FMADD(KP2_000000000, TT, TS);
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP2_000000000, TT, TS);
        Tn             = Tf - Tm;
        Tp             = Tf + Tm;
        TF             = SIMD_FNMADD(KP414213562, TE, TB);
        R0[WS(rs, 11)] = SIMD_FMADD(KP1_847759065, TH, TG);
        R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_847759065, TH, TG);
        R0[WS(rs, 13)] = SIMD_FMADD(KP1_847759065, TP, TO);
        R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_847759065, TP, TO);
        R0[WS(rs, 9)]  = SIMD_FMADD(KP1_847759065, TN, TK);
        R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_847759065, TN, TK);
        R0[WS(rs, 12)] = SIMD_FMADD(KP1_414213562, Tp, To);
        R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_414213562, Tp, To);
        R0[0]          = SIMD_FMADD(KP1_414213562, Tn, T9);
        R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_414213562, Tn, T9);
        R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_847759065, TF, Ts);
    }
}

template <>
struct r2cb_traits<16, 3>
{
    static constexpr long_t flops           = 85;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 62;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 3 -name
 * r2cb -standalone */

/*
 * This function contains 56 FP additions, 29 FP multiplications,
 * (or, 27 additions, 0 multiplications, 29 fused multiply/add),
 * 62 stack variables, 6 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Th, Ti, Tl, TG, T8, TR, Tb, Tj, Tm, TJ, Tq, TI, Tg, TF, TQ;
        SIMD_FLOAT Tv, T5, T4, TE, T1, T2, T6, T7, T9, Ta, To, Tp, Te, Tf, TD;
        SIMD_FLOAT T3, Tx, Tc, TL, Tn, TT, TK, Tz, Tk, TH, TS, TB, Td, Tt, TU;
        SIMD_FLOAT TM, Tr, Tw, TN, TO, TC, Ty, Tu, Ts, TP, TA;
        T4             = Ci[WS(cs, 4)];
        TE             = Cr[WS(cs, 4)];
        T1             = Cr[0];
        T2             = Cr[WS(cs, 8)];
        T6             = Ci[WS(cs, 2)];
        T7             = Ci[WS(cs, 6)];
        T9             = Cr[WS(cs, 2)];
        Ta             = Cr[WS(cs, 6)];
        Th             = Cr[WS(cs, 5)];
        Ti             = Cr[WS(cs, 3)];
        To             = Ci[WS(cs, 5)];
        Tp             = Ci[WS(cs, 3)];
        Te             = Ci[WS(cs, 1)];
        Tf             = Ci[WS(cs, 7)];
        Tl             = Cr[WS(cs, 1)];
        TD             = T1 + T2;
        T3             = T1 - T2;
        TG             = T6 - T7;
        T8             = T6 + T7;
        TR             = T9 + Ta;
        Tb             = T9 - Ta;
        Tj             = Th - Ti;
        Tm             = Cr[WS(cs, 7)];
        TJ             = To - Tp;
        Tq             = To + Tp;
        TI             = Te - Tf;
        Tg             = Te + Tf;
        TF             = SIMD_FNMADD(KP2_000000000, TE, TD);
        TQ             = SIMD_FMADD(KP2_000000000, TE, TD);
        Tv             = SIMD_FNMADD(KP2_000000000, T4, T3);
        T5             = SIMD_FMADD(KP2_000000000, T4, T3);
        Tx             = T8 - Tb;
        Tc             = T8 + Tb;
        TL             = Tl + Tm;
        Tn             = Tl - Tm;
        TT             = TJ + TI;
        TK             = TI - TJ;
        Tz             = Tg + Tj;
        Tk             = Tg - Tj;
        TH             = SIMD_FMADD(KP2_000000000, TG, TF);
        TS             = SIMD_FNMADD(KP2_000000000, TR, TQ);
        TB             = SIMD_FMADD(KP1_414213562, Tx, Tv);
        Td             = SIMD_FNMADD(KP1_414213562, Tc, T5);
        Tt             = SIMD_FMADD(KP1_414213562, Tc, T5);
        TU             = TR - (Th + Ti) - TL;
        TM             = TL - (Th + Ti);
        Tr             = Tn + Tq;
        Tw             = Tn - Tq;
        R0[WS(rs, 9)]  = SIMD_FMADD(KP2_000000000, TT, TS);
        R0[WS(rs, 1)]  = SIMD_FNMADD(KP2_000000000, TT, TS);
        R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, TU, TQ);
        TN             = TK + TM;
        TO             = SIMD_FMADD(KP707106781, TM, TG);
        TC             = SIMD_FMADD(KP414213562, Tw, Tz);
        Ty             = SIMD_FMADD(KP765366864, Tx, Tw);
        Tu             = SIMD_FMADD(KP414213562, Tk, Tr);
        Ts             = SIMD_FNMADD(KP414213562, Tr, Tk);
        R0[WS(rs, 11)] = SIMD_FMADD(KP1_414213562, TN, TH);
        R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_414213562, TN, TH);
        TP             = SIMD_FNMADD(KP707106781, TK, TO);
        R0[WS(rs, 10)] = SIMD_FMADD(KP1_847759065, TC, TB);
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_847759065, TC, TB);
        TA             = SIMD_FNMADD(KP414213562, Tz, Ty);
        R0[WS(rs, 12)] = SIMD_FMADD(KP1_847759065, Tu, Tt);
        R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_847759065, Tu, Tt);
        R0[WS(rs, 8)]  = SIMD_FMADD(KP1_847759065, Ts, Td);
        R0[0]          = SIMD_FNMADD(KP1_847759065, Ts, Td);
        R0[WS(rs, 7)]  = SIMD_FNMADD(KP2_000000000, TP, TF);
        R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_847759065, TA, Tv);
    }
}

template <>
struct r2cb_traits<16, 4>
{
    static constexpr long_t flops           = 83;
    static constexpr long_t operations      = 55;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 63;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 4 -name
 * r2cb -standalone */

/*
 * This function contains 55 FP additions, 28 FP multiplications,
 * (or, 27 additions, 0 multiplications, 28 fused multiply/add),
 * 63 stack variables, 7 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tw, Tx, Tr, T8, Tk, TM, Tn, Ty, Ts, Tq, Tf, Tv, Tc, TD, Tj;
        SIMD_FLOAT TL, T5, T4, Ti, T1, T2, T6, T7, Tl, Tm, Td, Te, Ta, Tb, Th;
        SIMD_FLOAT T3, TE, To, TN, Tt, TG, Tz, Tg, TQ, TS, T9, TF, Tp, TU, TO;
        SIMD_FLOAT TH, Tu, TT, TP, TI, TJ, TA, TB, TR, TK, TC;
        T4             = Cr[WS(cs, 4)];
        Ti             = Ci[WS(cs, 4)];
        T1             = Cr[0];
        T2             = Cr[WS(cs, 8)];
        T6             = Cr[WS(cs, 2)];
        T7             = Cr[WS(cs, 6)];
        Tl             = Ci[WS(cs, 2)];
        Tm             = Ci[WS(cs, 6)];
        Tw             = Cr[WS(cs, 5)];
        Tx             = Cr[WS(cs, 3)];
        Td             = Ci[WS(cs, 5)];
        Te             = Ci[WS(cs, 3)];
        Ta             = Ci[WS(cs, 1)];
        Tb             = Ci[WS(cs, 7)];
        Tr             = Cr[WS(cs, 1)];
        Th             = T1 - T2;
        T3             = T1 + T2;
        T8             = T6 + T7;
        Tk             = T6 - T7;
        TM             = Tl - Tm;
        Tn             = Tl + Tm;
        Ty             = Tw - Tx;
        Ts             = Cr[WS(cs, 7)];
        Tq             = Td + Te;
        Tf             = Td - Te;
        Tv             = Ta + Tb;
        Tc             = Ta - Tb;
        TD             = SIMD_FNMADD(KP2_000000000, Ti, Th);
        Tj             = SIMD_FMADD(KP2_000000000, Ti, Th);
        TL             = SIMD_FNMADD(KP2_000000000, T4, T3);
        T5             = SIMD_FMADD(KP2_000000000, T4, T3);
        TE             = Tn - Tk;
        To             = Tk + Tn;
        TN             = Tr + Ts;
        Tt             = Tr - Ts;
        TG             = Tv + Ty;
        Tz             = Tv - Ty;
        Tg             = Tc + Tf;
        TQ             = Tc - Tf;
        TS             = SIMD_FMADD(KP2_000000000, TM, TL);
        T9             = SIMD_FNMADD(KP2_000000000, T8, T5);
        TF             = SIMD_FMADD(KP1_414213562, TE, TD);
        Tp             = SIMD_FMADD(KP1_414213562, To, Tj);
        TU             = T8 - (Tw + Tx) - TN;
        TO             = TN - (Tw + Tx);
        TH             = Tt - Tq;
        Tu             = Tq + Tt;
        R0[WS(rs, 8)]  = SIMD_FMADD(KP2_000000000, Tg, T9);
        R0[0]          = SIMD_FNMADD(KP2_000000000, Tg, T9);
        R0[WS(rs, 4)]  = SIMD_FMADD(KP2_000000000, TU, T5);
        TT             = TQ + TO;
        TP             = SIMD_FMADD(KP707106781, TO, TM);
        TI             = SIMD_FMADD(KP414213562, TH, TG);
        TJ             = SIMD_FMADD(KP765366864, TE, TH);
        TA             = SIMD_FMADD(KP414213562, Tz, Tu);
        TB             = SIMD_FMADD(KP541196100, Tu, To);
        R0[WS(rs, 10)] = SIMD_FMADD(KP1_414213562, TT, TS);
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_414213562, TT, TS);
        TR             = SIMD_FNMADD(KP707106781, TQ, TP);
        R0[WS(rs, 9)]  = SIMD_FMADD(KP1_847759065, TI, TF);
        R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_847759065, TI, TF);
        TK             = SIMD_FNMADD(KP414213562, TG, TJ);
        R0[WS(rs, 11)] = SIMD_FMADD(KP1_847759065, TA, Tp);
        R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_847759065, TA, Tp);
        TC             = SIMD_FNMADD(KP765366864, TB, Tz);
        R0[WS(rs, 6)]  = SIMD_FNMADD(KP2_000000000, TR, TL);
        R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_847759065, TK, TD);
        R0[WS(rs, 7)]  = SIMD_FMADD(KP1_847759065, TC, Tj);
    }
}

template <>
struct r2cb_traits<16, 5>
{
    static constexpr long_t flops           = 80;
    static constexpr long_t operations      = 54;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 62;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 5 -name
 * r2cb -standalone */

/*
 * This function contains 54 FP additions, 26 FP multiplications,
 * (or, 28 additions, 0 multiplications, 26 fused multiply/add),
 * 62 stack variables, 7 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT To, Tp, Tl, TG, T8, TR, Tb, Tq, Tm, TJ, Tj, TL, Tg, TF, TQ;
        SIMD_FLOAT T5, Tv, T4, TE, T1, T2, T6, T7, T9, Ta, Th, Ti, Te, Tf, TD;
        SIMD_FLOAT T3, Tw, Tc, TI, Tn, TS, TM, Tz, Tk, TH, Tx, Td, TT, TK, Tr;
        SIMD_FLOAT Ty, TO, TB, Tt, TN, TA, Ts, TP, TC, Tu;
        T4             = Ci[WS(cs, 4)];
        TE             = Cr[WS(cs, 4)];
        T1             = Cr[0];
        T2             = Cr[WS(cs, 8)];
        T6             = Ci[WS(cs, 2)];
        T7             = Ci[WS(cs, 6)];
        T9             = Cr[WS(cs, 2)];
        Ta             = Cr[WS(cs, 6)];
        To             = Cr[WS(cs, 5)];
        Tp             = Cr[WS(cs, 3)];
        Th             = Ci[WS(cs, 5)];
        Ti             = Ci[WS(cs, 3)];
        Te             = Cr[WS(cs, 1)];
        Tf             = Cr[WS(cs, 7)];
        Tl             = Ci[WS(cs, 1)];
        TD             = T1 + T2;
        T3             = T1 - T2;
        TG             = T6 - T7;
        T8             = T6 + T7;
        TR             = T9 + Ta;
        Tb             = T9 - Ta;
        Tq             = To - Tp;
        Tm             = Ci[WS(cs, 7)];
        TJ             = Th - Ti;
        Tj             = Th + Ti;
        TL             = Te + Tf;
        Tg             = Te - Tf;
        TF             = SIMD_FNMADD(KP2_000000000, TE, TD);
        TQ             = SIMD_FMADD(KP2_000000000, TE, TD);
        T5             = SIMD_FMADD(KP2_000000000, T4, T3);
        Tv             = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tw             = T8 - Tb;
        Tc             = T8 + Tb;
        TI             = Tl - Tm;
        Tn             = Tl + Tm;
        TS             = TR - (To + Tp) - TL;
        TM             = TL - (To + Tp);
        Tz             = Tg - Tj;
        Tk             = Tg + Tj;
        TH             = SIMD_FMADD(KP2_000000000, TG, TF);
        Tx             = SIMD_FMADD(KP1_414213562, Tw, Tv);
        Td             = SIMD_FMADD(KP1_414213562, Tc, T5);
        TT             = TJ + TI - TR;
        TK             = TI - TJ;
        Tr             = Tn - Tq;
        Ty             = Tn + Tq;
        R0[WS(rs, 3)]  = SIMD_FMADD(KP2_000000000, TS, TQ);
        TO             = SIMD_FMADD(KP707106781, TM, TG);
        TB             = SIMD_FMADD(KP765366864, Tw, Tz);
        Tt             = SIMD_FMADD(KP541196100, Tk, Tc);
        R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, TT, TQ);
        TN             = TK + TM;
        TA             = SIMD_FMADD(KP414213562, Tz, Ty);
        Ts             = SIMD_FMADD(KP414213562, Tr, Tk);
        TP             = SIMD_FNMADD(KP707106781, TK, TO);
        TC             = SIMD_FNMADD(KP414213562, Ty, TB);
        Tu             = SIMD_FNMADD(KP765366864, Tt, Tr);
        R0[WS(rs, 9)]  = SIMD_FMADD(KP1_414213562, TN, TH);
        R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_414213562, TN, TH);
        R0[WS(rs, 8)]  = SIMD_FMADD(KP1_847759065, TA, Tx);
        R0[0]          = SIMD_FNMADD(KP1_847759065, TA, Tx);
        R0[WS(rs, 10)] = SIMD_FMADD(KP1_847759065, Ts, Td);
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_847759065, Ts, Td);
        R0[WS(rs, 5)]  = SIMD_FNMADD(KP2_000000000, TP, TF);
        R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_847759065, TC, Tv);
        R0[WS(rs, 6)]  = SIMD_FMADD(KP1_847759065, Tu, T5);
    }
}

template <>
struct r2cb_traits<16, 6>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 53;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 62;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 6 -name
 * r2cb -standalone */

/*
 * This function contains 53 FP additions, 25 FP multiplications,
 * (or, 28 additions, 0 multiplications, 25 fused multiply/add),
 * 62 stack variables, 7 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Td, Te, Tg, T8, Tw, TR, Tz, Tu, Th, TC, Tl, TB, Tc, Ts, TI;
        SIMD_FLOAT TQ, T5, T4, Tr, T1, T2, T6, T7, Tx, Ty, Tj, Tk, Ta, Tb, Tq;
        SIMD_FLOAT T3, TK, TA, Tt, Ti, TD, TL, TT, Tf, T9, TG, TJ, Tv, TS, Tm;
        SIMD_FLOAT TE, TM, To, TO, TH, Tn, TF, TN, Tp, TP;
        T4            = Cr[WS(cs, 4)];
        Tr            = Ci[WS(cs, 4)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        T6            = Ci[WS(cs, 2)];
        T7            = Ci[WS(cs, 6)];
        Tx            = Cr[WS(cs, 2)];
        Ty            = Cr[WS(cs, 6)];
        Td            = Cr[WS(cs, 5)];
        Te            = Cr[WS(cs, 3)];
        Tj            = Ci[WS(cs, 5)];
        Tk            = Ci[WS(cs, 3)];
        Ta            = Cr[WS(cs, 1)];
        Tb            = Cr[WS(cs, 7)];
        Tg            = Ci[WS(cs, 1)];
        Tq            = T1 - T2;
        T3            = T1 + T2;
        T8            = T6 - T7;
        Tw            = T6 + T7;
        TR            = Tx + Ty;
        Tz            = Tx - Ty;
        Tu            = Td - Te;
        Th            = Ci[WS(cs, 7)];
        TC            = Tj + Tk;
        Tl            = Tj - Tk;
        TB            = Ta - Tb;
        Tc            = Ta + Tb;
        Ts            = SIMD_FMADD(KP2_000000000, Tr, Tq);
        TI            = SIMD_FNMADD(KP2_000000000, Tr, Tq);
        TQ            = SIMD_FMADD(KP2_000000000, T4, T3);
        T5            = SIMD_FNMADD(KP2_000000000, T4, T3);
        TK            = Tz - Tw;
        TA            = Tw + Tz;
        Tt            = Tg + Th;
        Ti            = Tg - Th;
        TD            = TB + TC;
        TL            = TB - TC;
        TT            = TR - (Td + Te) - Tc;
        Tf            = Tc - (Td + Te);
        T9            = SIMD_FMADD(KP2_000000000, T8, T5);
        TG            = SIMD_FMADD(KP1_414213562, TA, Ts);
        TJ            = Tu + Tt;
        Tv            = Tt - Tu;
        TS            = Ti + Tl - TR;
        Tm            = Ti - Tl;
        TE            = SIMD_FMADD(KP541196100, TD, TA);
        TM            = SIMD_FNMADD(KP541196100, TL, TK);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, TT, TQ);
        To            = SIMD_FMADD(KP707106781, Tf, T8);
        TO            = SIMD_FMADD(KP541196100, TJ, TK);
        TH            = SIMD_FMADD(KP414213562, Tv, TD);
        R0[WS(rs, 6)] = SIMD_FMADD(KP2_000000000, TS, TQ);
        Tn            = Tf + Tm;
        TF            = SIMD_FNMADD(KP765366864, TE, Tv);
        TN            = SIMD_FNMADD(KP765366864, TM, TJ);
        Tp            = SIMD_FNMADD(KP707106781, Tm, To);
        TP            = SIMD_FNMADD(KP765366864, TO, TL);
        R0[WS(rs, 9)] = SIMD_FMADD(KP1_847759065, TH, TG);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_847759065, TH, TG);
        R0[WS(rs, 8)] = SIMD_FMADD(KP1_414213562, Tn, T9);
        R0[0]         = SIMD_FNMADD(KP1_414213562, Tn, T9);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_847759065, TF, Ts);
        R0[WS(rs, 7)] = SIMD_FMADD(KP1_847759065, TN, TI);
        R0[WS(rs, 4)] = SIMD_FNMADD(KP2_000000000, Tp, T5);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP1_847759065, TP, TI);
    }
}

template <>
struct r2cb_traits<16, 7>
{
    static constexpr long_t flops           = 73;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 60;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 7 -name
 * r2cb -standalone */

/*
 * This function contains 50 FP additions, 23 FP multiplications,
 * (or, 27 additions, 0 multiplications, 23 fused multiply/add),
 * 60 stack variables, 7 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 7>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TE, To, Tp, Tl, TD, TP, T8, TK, Tb, Tq, Tm, TG, Tj, TL, Tg;
        SIMD_FLOAT TO, T5, Tv, T4, T3, T1, T2, T6, T7, T9, Ta, Th, Ti, Te, Tf;
        SIMD_FLOAT Tc, Tx, Tn, TF, TQ, TM, Tk, Tw, Td, TR, TH, Ty, Tr, TN, TB;
        SIMD_FLOAT Tt, TI, Tz, Ts, TC, Tu, TJ, TA;
        TE            = Cr[WS(cs, 4)];
        T4            = Ci[WS(cs, 4)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        T6            = Cr[WS(cs, 2)];
        T7            = Cr[WS(cs, 6)];
        T9            = Ci[WS(cs, 2)];
        Ta            = Ci[WS(cs, 6)];
        To            = Cr[WS(cs, 5)];
        Tp            = Cr[WS(cs, 3)];
        Th            = Ci[WS(cs, 5)];
        Ti            = Ci[WS(cs, 3)];
        Te            = Cr[WS(cs, 1)];
        Tf            = Cr[WS(cs, 7)];
        Tl            = Ci[WS(cs, 1)];
        TD            = T1 + T2;
        T3            = T1 - T2;
        TP            = T6 + T7;
        T8            = T6 - T7;
        TK            = T9 - Ta;
        Tb            = T9 + Ta;
        Tq            = To - Tp;
        Tm            = Ci[WS(cs, 7)];
        TG            = Th - Ti;
        Tj            = Th + Ti;
        TL            = Te + Tf;
        Tg            = Te - Tf;
        TO            = SIMD_FMADD(KP2_000000000, TE, TD);
        T5            = SIMD_FMADD(KP2_000000000, T4, T3);
        Tv            = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tc            = T8 + Tb;
        Tx            = T8 - Tb;
        Tn            = Tl + Tm;
        TF            = Tl - Tm;
        TQ            = TP - (To + Tp) - TL;
        TM            = TL - (To + Tp);
        Tk            = Tg + Tj;
        Tw            = Tg - Tj;
        Td            = SIMD_FMADD(KP1_414213562, Tc, T5);
        TR            = TG + TF - TP;
        TH            = TF - TG;
        Ty            = Tn + Tq;
        Tr            = Tn - Tq;
        R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, TQ, TO);
        TN            = SIMD_FMADD(KP707106781, TM, TK);
        TB            = SIMD_FNMADD(KP541196100, Tw, Tx);
        Tt            = SIMD_FMADD(KP541196100, Tk, Tc);
        R0[WS(rs, 5)] = SIMD_FMADD(KP2_000000000, TR, TO);
        TI            = SIMD_FMSUB(KP707106781, TH, TE);
        Tz            = SIMD_FMADD(KP541196100, Ty, Tx);
        Ts            = SIMD_FMADD(KP414213562, Tr, Tk);
        TC            = SIMD_FNMADD(KP765366864, TB, Ty);
        Tu            = SIMD_FNMADD(KP765366864, Tt, Tr);
        TJ            = SIMD_FMADD(KP2_000000000, TI, TD);
        TA            = SIMD_FNMADD(KP765366864, Tz, Tw);
        R0[WS(rs, 8)] = SIMD_FMADD(KP1_847759065, Ts, Td);
        R0[0]         = SIMD_FNMADD(KP1_847759065, Ts, Td);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_847759065, TC, Tv);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_847759065, Tu, T5);
        R0[WS(rs, 7)] = SIMD_FMADD(KP2_000000000, TN, TJ);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP2_000000000, TN, TJ);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_847759065, TA, Tv);
    }
}

template <>
struct r2cb_traits<16, 8>
{
    static constexpr long_t flops           = 71;
    static constexpr long_t operations      = 49;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 58;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 8 -name
 * r2cb -standalone */

/*
 * This function contains 49 FP additions, 22 FP multiplications,
 * (or, 27 additions, 0 multiplications, 22 fused multiply/add),
 * 58 stack variables, 5 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 8>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, Tc, Td, Tt, T3, T8, Tn, TO, Tq, Ts, Tu, TK, Tl, Ti, Tb;
        SIMD_FLOAT TB, Th, T5, Tg, Tf, T1, T2, T6, T7, To, Tp, Tj, Tk, T9, Ta;
        SIMD_FLOAT Tr, TD, Tv, TJ, Tm, TE, Te, TP, TR, TL, Tw, TC, TF, Tz, TQ;
        SIMD_FLOAT TM, TH, Tx, TG, TA, TN, TI, Ty;
        T4            = Cr[WS(cs, 4)];
        Tg            = Ci[WS(cs, 4)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        T6            = Cr[WS(cs, 2)];
        T7            = Cr[WS(cs, 6)];
        To            = Ci[WS(cs, 2)];
        Tp            = Ci[WS(cs, 6)];
        Tc            = Cr[WS(cs, 5)];
        Td            = Cr[WS(cs, 3)];
        Tj            = Ci[WS(cs, 5)];
        Tk            = Ci[WS(cs, 3)];
        T9            = Cr[WS(cs, 1)];
        Ta            = Cr[WS(cs, 7)];
        Tt            = Ci[WS(cs, 1)];
        Tf            = T1 - T2;
        T3            = T1 + T2;
        T8            = T6 + T7;
        Tn            = T6 - T7;
        TO            = To - Tp;
        Tq            = To + Tp;
        Ts            = Tc - Td;
        Tu            = Ci[WS(cs, 7)];
        TK            = Tj - Tk;
        Tl            = Tj + Tk;
        Ti            = T9 - Ta;
        Tb            = T9 + Ta;
        TB            = SIMD_FMADD(KP2_000000000, Tg, Tf);
        Th            = SIMD_FNMADD(KP2_000000000, Tg, Tf);
        T5            = SIMD_FMADD(KP2_000000000, T4, T3);
        Tr            = Tn - Tq;
        TD            = Tn + Tq;
        Tv            = Tt + Tu;
        TJ            = Tt - Tu;
        Tm            = Ti - Tl;
        TE            = Ti + Tl;
        Te            = T8 - Tb - (Tc + Td);
        TP            = Tb - (Tc + Td);
        TR            = TK + TJ - T8;
        TL            = TJ - TK;
        Tw            = Ts + Tv;
        TC            = Tv - Ts;
        TF            = SIMD_FMADD(KP541196100, TE, TD);
        Tz            = SIMD_FNMADD(KP541196100, Tm, Tr);
        R0[0]         = SIMD_FMADD(KP2_000000000, Te, T5);
        TQ            = SIMD_FMADD(KP707106781, TP, TO);
        R0[WS(rs, 4)] = SIMD_FMADD(KP2_000000000, TR, T5);
        TM            = SIMD_FMSUB(KP707106781, TL, T4);
        TH            = SIMD_FMADD(KP541196100, TC, TD);
        Tx            = SIMD_FMADD(KP541196100, Tw, Tr);
        TG            = SIMD_FNMADD(KP765366864, TF, TC);
        TA            = SIMD_FNMADD(KP765366864, Tz, Tw);
        TN            = SIMD_FMADD(KP2_000000000, TM, T3);
        TI            = SIMD_FMADD(KP765366864, TH, TE);
        Ty            = SIMD_FNMADD(KP765366864, Tx, Tm);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_847759065, TG, TB);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_847759065, TA, Th);
        R0[WS(rs, 6)] = SIMD_FMADD(KP2_000000000, TQ, TN);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP2_000000000, TQ, TN);
        R0[WS(rs, 7)] = SIMD_FMADD(KP1_847759065, TI, TB);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_847759065, Ty, Th);
    }
}

template <>
struct r2cb_traits<16, 9>
{
    static constexpr long_t flops           = 65;
    static constexpr long_t operations      = 45;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 54;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 9 -name
 * r2cb -standalone */

/*
 * This function contains 45 FP additions, 20 FP multiplications,
 * (or, 25 additions, 0 multiplications, 20 fused multiply/add),
 * 54 stack variables, 5 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 9>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TE, Td, Te, T9, Ta, Tk, Tl, T6, T7, Tn, TD, T3, Tf, To;
        SIMD_FLOAT TK, Ti, Tb, T1, T2, Tg, Th, TL, Tm, T8, TF, T5, Tv, Tp, TG;
        SIMD_FLOAT Tj, Tx, TM, Ty, Tc, TN, TH, Tw, Tq, Tz, Tt, TI, TB, Tr, TA;
        SIMD_FLOAT Tu, TJ, TC, Ts;
        T4            = Ci[WS(cs, 4)];
        TE            = Cr[WS(cs, 4)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        Td            = Cr[WS(cs, 2)];
        Te            = Cr[WS(cs, 6)];
        Tg            = Ci[WS(cs, 2)];
        Th            = Ci[WS(cs, 6)];
        T9            = Cr[WS(cs, 5)];
        Ta            = Cr[WS(cs, 3)];
        Tk            = Cr[WS(cs, 1)];
        Tl            = Cr[WS(cs, 7)];
        T6            = Ci[WS(cs, 1)];
        T7            = Ci[WS(cs, 7)];
        Tn            = Ci[WS(cs, 5)];
        TD            = T1 + T2;
        T3            = T1 - T2;
        Tf            = Td - Te;
        To            = Ci[WS(cs, 3)];
        TK            = Tg - Th;
        Ti            = Tg + Th;
        Tb            = T9 - Ta;
        TL            = Tk - Ta - (T9 - Tl);
        Tm            = Tk - Tl;
        T8            = T6 + T7;
        TF            = T6 - T7;
        T5            = SIMD_FMADD(KP2_000000000, T4, T3);
        Tv            = SIMD_FNMADD(KP2_000000000, T4, T3);
        Tp            = Tn + To;
        TG            = Tn - To;
        Tj            = Tf + Ti;
        Tx            = Tf - Ti;
        TM            = SIMD_FMADD(KP707106781, TL, TK);
        Ty            = T8 + Tb;
        Tc            = T8 - Tb;
        TN            = TG + TF + TE - Te - Td;
        TH            = TF - TG;
        Tw            = Tm - Tp;
        Tq            = Tm + Tp;
        Tz            = SIMD_FMADD(KP541196100, Ty, Tx);
        Tt            = SIMD_FMADD(KP541196100, Tc, Tj);
        R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, TN, TD);
        TI            = SIMD_FMSUB(KP707106781, TH, TE);
        TB            = SIMD_FNMADD(KP541196100, Tw, Tx);
        Tr            = SIMD_FMADD(KP541196100, Tq, Tj);
        TA            = SIMD_FNMADD(KP765366864, Tz, Tw);
        Tu            = SIMD_FMADD(KP765366864, Tt, Tq);
        TJ            = SIMD_FMADD(KP2_000000000, TI, TD);
        TC            = SIMD_FNMADD(KP765366864, TB, Ty);
        Ts            = SIMD_FNMADD(KP765366864, Tr, Tc);
        R0[0]         = SIMD_FNMADD(KP1_847759065, TA, Tv);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_847759065, Tu, T5);
        R0[WS(rs, 5)] = SIMD_FMADD(KP2_000000000, TM, TJ);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP2_000000000, TM, TJ);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_847759065, TC, Tv);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_847759065, Ts, T5);
    }
}

template <>
struct r2cb_traits<16, 10>
{
    static constexpr long_t flops           = 60;
    static constexpr long_t operations      = 42;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 53;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 10 -name
 * r2cb -standalone */

/*
 * This function contains 42 FP additions, 18 FP multiplications,
 * (or, 24 additions, 0 multiplications, 18 fused multiply/add),
 * 53 stack variables, 6 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 10>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, To, Tp, Tq, Ti, Tk, Th, Tj, T5, T6, T3, Tn, T8, Tw, Tg;
        SIMD_FLOAT T9, Tr, Tu, T1, T2, Te, Tf, Tl, Tx, T7, Tt, TD, Ty, Ta, Ts;
        SIMD_FLOAT TF, Tm, Tv, TE, TG, Tz, TL, Tb, TJ, TA, TH, Tc, TK, TB, TI;
        SIMD_FLOAT Td, TC;
        T4            = Cr[WS(cs, 4)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        To            = Ci[WS(cs, 4)];
        Te            = Ci[WS(cs, 2)];
        Tf            = Ci[WS(cs, 6)];
        Tp            = Cr[WS(cs, 2)];
        Tq            = Cr[WS(cs, 6)];
        Ti            = Cr[WS(cs, 5)];
        Tk            = Cr[WS(cs, 3)];
        Th            = Cr[WS(cs, 1)];
        Tj            = Cr[WS(cs, 7)];
        T5            = Ci[WS(cs, 1)];
        T6            = Ci[WS(cs, 7)];
        T3            = T1 + T2;
        Tn            = T1 - T2;
        T8            = Ci[WS(cs, 5)];
        Tw            = Te + Tf;
        Tg            = Te - Tf;
        T9            = Ci[WS(cs, 3)];
        Tr            = Tp - Tq;
        Tu            = Ti - Tk;
        Tl            = Th - (Ti - Tj) - Tk;
        Tx            = Th - Tj;
        T7            = T5 - T6;
        Tt            = T5 + T6;
        TD            = SIMD_FMADD(KP2_000000000, To, Tn);
        Ty            = T8 + T9;
        Ta            = T8 - T9;
        Ts            = SIMD_FMADD(KP707106781, Tr, To);
        TF            = Tw + Tr;
        Tm            = SIMD_FMADD(KP707106781, Tl, Tg);
        Tv            = Tt + Tu;
        TE            = Tt - Tu;
        TG            = Ty + Tx;
        Tz            = Tx - Ty;
        TL            = T7 + Ta + T4 - Tq - Tp;
        Tb            = T7 - Ta;
        TJ            = SIMD_FMADD(KP541196100, TE, TF);
        TA            = SIMD_FMADD(KP541196100, Tz, Tw);
        TH            = SIMD_FMADD(KP541196100, TG, TF);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, TL, T3);
        Tc            = SIMD_FMSUB(KP707106781, Tb, T4);
        TK            = SIMD_FMADD(KP765366864, TJ, TG);
        TB            = SIMD_FMADD(KP765366864, TA, Tv);
        TI            = SIMD_FNMADD(KP765366864, TH, TE);
        Td            = SIMD_FMADD(KP2_000000000, Tc, T3);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_847759065, TK, TD);
        TC            = SIMD_FNMADD(KP923879532, TB, Ts);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_847759065, TI, TD);
        R0[WS(rs, 4)] = SIMD_FMADD(KP2_000000000, Tm, Td);
        R0[0]         = SIMD_FNMADD(KP2_000000000, Tm, Td);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP2_000000000, TC, Tn);
    }
}

template <>
struct r2cb_traits<16, 11>
{
    static constexpr long_t flops           = 56;
    static constexpr long_t operations      = 41;
    static constexpr long_t memory_accesses = 21;
    static constexpr long_t stack_vars      = 50;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 11 -name
 * r2cb -standalone */

/*
 * This function contains 41 FP additions, 15 FP multiplications,
 * (or, 26 additions, 0 multiplications, 15 fused multiply/add),
 * 50 stack variables, 6 constants, and 21 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 11>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP1_847759065, +1.847759065022573512256366378793576573644833252);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, TC, T5, T6, Tc, Td, Tj, Tk, T9, TB, T3, Ta, Tm, T7, Tn;
        SIMD_FLOAT Ti, TD, Te, T1, T2, Tg, Th, Tl, Tt, Tb, TE, T8, TF, To, Tv;
        SIMD_FLOAT Tf, Tu, TI, TG, Tw, Tp, Tz, TH, Tq, Tx, TA, Tr, Ty, Ts;
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        T4            = Ci[WS(cs, 4)];
        TC            = Cr[WS(cs, 4)];
        T5            = Cr[WS(cs, 2)];
        T6            = Cr[WS(cs, 6)];
        Tg            = Ci[WS(cs, 2)];
        Th            = Ci[WS(cs, 6)];
        Tc            = Cr[WS(cs, 5)];
        Td            = Cr[WS(cs, 3)];
        Tj            = Cr[WS(cs, 1)];
        Tk            = Cr[WS(cs, 7)];
        T9            = Ci[WS(cs, 1)];
        TB            = T1 + T2;
        T3            = T1 - T2;
        Ta            = Ci[WS(cs, 7)];
        Tm            = Ci[WS(cs, 5)];
        T7            = T5 - T6;
        Tn            = Ci[WS(cs, 3)];
        Ti            = Tg + Th;
        TD            = Tg - (Th + TC);
        Te            = Tc - Td;
        Tl            = Tj - Tk;
        Tt            = SIMD_FMADD(KP2_000000000, T4, T3);
        Tb            = T9 + Ta;
        TE            = T9 - Ta;
        T8            = SIMD_FMADD(KP707106781, T7, T4);
        TF            = Tm - Tn;
        To            = Tm + Tn;
        Tv            = T7 + Ti;
        Tf            = Tb + Te;
        Tu            = Tb - Te;
        TI            = TE + TF + TC - T6 - T5;
        TG            = (Tj - (Tc - Tk) - Td) + (TE - TF);
        Tw            = Tl + To;
        Tp            = Tl - To;
        Tz            = SIMD_FMADD(KP541196100, Tu, Tv);
        R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, TI, TB);
        TH            = SIMD_FMADD(KP707106781, TG, TD);
        Tq            = SIMD_FMADD(KP541196100, Tp, Ti);
        Tx            = SIMD_FMADD(KP541196100, Tw, Tv);
        TA            = SIMD_FMADD(KP765366864, Tz, Tw);
        R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, TH, TB);
        Tr            = SIMD_FMADD(KP765366864, Tq, Tf);
        Ty            = SIMD_FNMADD(KP765366864, Tx, Tu);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_847759065, TA, Tt);
        Ts            = SIMD_FNMADD(KP923879532, Tr, T8);
        R0[0]         = SIMD_FMADD(KP1_847759065, Ty, Tt);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP2_000000000, Ts, T3);
    }
}

template <>
struct r2cb_traits<16, 12>
{
    static constexpr long_t flops           = 47;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 43;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 12 -name
 * r2cb -standalone */

/*
 * This function contains 36 FP additions, 11 FP multiplications,
 * (or, 25 additions, 0 multiplications, 11 fused multiply/add),
 * 43 stack variables, 5 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 12>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Th, Tb, Tc, T1, Tf, T2, T4, Te, Tl, Tm, T5, T6, Tq, Tr, Ti;
        SIMD_FLOAT T8, T9, T3, Tg, TA, Tn, Tp, T7, Ts, Tj, Tk, Ta, Tw, Tt, Tx;
        SIMD_FLOAT To, Td, TB, Ty, Tu, TC, Tz, Tv;
        Th            = Ci[WS(cs, 4)];
        Tb            = Cr[WS(cs, 6)];
        Tc            = Cr[WS(cs, 2)];
        T1            = Cr[0];
        Tf            = Ci[WS(cs, 6)];
        T2            = Cr[WS(cs, 8)];
        T4            = Cr[WS(cs, 4)];
        Te            = Ci[WS(cs, 2)];
        Tl            = Cr[WS(cs, 1)];
        Tm            = Cr[WS(cs, 7)];
        T5            = Ci[WS(cs, 1)];
        T6            = Ci[WS(cs, 7)];
        Tq            = Cr[WS(cs, 5)];
        Tr            = Cr[WS(cs, 3)];
        Ti            = Tc - Tb;
        T8            = Ci[WS(cs, 5)];
        T9            = Ci[WS(cs, 3)];
        T3            = T1 + T2;
        Tg            = SIMD_FMADD(KP1_414213562, Te + Tf, T1) - T2;
        TA            = Te - (T4 + Tf);
        Tn            = Tl - Tm;
        Tp            = T5 + T6;
        T7            = T5 - T6;
        Ts            = Tq - Tr;
        Tj            = SIMD_FMADD(KP707106781, Ti, Th);
        Tk            = T8 + T9;
        Ta            = T8 - T9;
        Tw            = Tp + Ts;
        Tt            = Tp - Ts;
        Tx            = Tn - Tk;
        To            = Tk + Tn;
        Td            = T4 + T7 + Ta - Tb - Tc;
        TB            = (T7 - Ta) + (Tl - Tr - (Tq - Tm));
        Ty            = SIMD_FMADD(KP414213562, Tx, Tw);
        Tu            = SIMD_FMADD(KP414213562, Tt, To);
        R0[0]         = SIMD_FMADD(KP2_000000000, Td, T3);
        TC            = SIMD_FMADD(KP707106781, TB, TA);
        Tz            = SIMD_FNMADD(KP923879532, Ty, Tj);
        Tv            = SIMD_FMADD(KP923879532, Tu, Tj);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, TC, T3);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP2_000000000, Tz, Tg);
        R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, Tv, Tg);
    }
}

template <>
struct r2cb_traits<16, 13>
{
    static constexpr long_t flops           = 41;
    static constexpr long_t operations      = 31;
    static constexpr long_t memory_accesses = 19;
    static constexpr long_t stack_vars      = 38;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 13 -name
 * r2cb -standalone */

/*
 * This function contains 31 FP additions, 10 FP multiplications,
 * (or, 21 additions, 0 multiplications, 10 fused multiply/add),
 * 38 stack variables, 5 constants, and 19 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 13>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T6, T1, Tv, T2, T3, T4, Tb, Tc, Ti, Tj, Te, Tf, T9, Tl, Tm;
        SIMD_FLOAT T7, T8, Tw, T5, Td, Tk, Tg, Ta, Tx, Tn, Ts, Th, To, Tr, Tt;
        SIMD_FLOAT Tp, Tu, Tq;
        T6 = Ci[WS(cs, 4)];
        T7 = Cr[WS(cs, 2)];
        T8 = Cr[WS(cs, 6)];
        T1 = Cr[0];
        Tv = Cr[WS(cs, 4)];
        T2 = Ci[WS(cs, 2)];
        T3 = Ci[WS(cs, 6)];
        T4 = Cr[WS(cs, 8)];
        Tb = Cr[WS(cs, 1)];
        Tc = Cr[WS(cs, 7)];
        Ti = Ci[WS(cs, 1)];
        Tj = Ci[WS(cs, 7)];
        Te = Ci[WS(cs, 5)];
        Tf = Ci[WS(cs, 3)];
        T9 = T7 - T8;
        Tl = Cr[WS(cs, 5)];
        Tm = Cr[WS(cs, 3)];
        Tw = T2 - Tv - T3;
        T5 = SIMD_FMADD(KP1_414213562, T2 + T3, T1) - T4;
        Td = Tb - Tc;
        Tk = Ti + Tj;
        Tg = Te + Tf;
        Ta = SIMD_FMADD(KP707106781, T9, T6);
        Tx = Tb + Tf + Ti - Tm - (Te + Tj + Tl - Tc);
        Tn = Tl - Tm;
        Ts = Td - Tg;
        Th = Td + Tg;
        R0[WS(rs, 1)] =
            T1 + SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, Tx, Tw), T4);
        To            = Tk - Tn;
        Tr            = Tk + Tn;
        Tt            = SIMD_FMADD(KP414213562, Ts, Tr);
        Tp            = SIMD_FMADD(KP414213562, To, Th);
        Tu            = SIMD_FNMADD(KP923879532, Tt, Ta);
        Tq            = SIMD_FMADD(KP923879532, Tp, Ta);
        R0[0]         = SIMD_FNMADD(KP2_000000000, Tu, T5);
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, Tq, T5);
    }
}

template <>
struct r2cb_traits<16, 14>
{
    static constexpr long_t flops           = 29;
    static constexpr long_t operations      = 22;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 32;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 14 -name
 * r2cb -standalone */

/*
 * This function contains 22 FP additions, 7 FP multiplications,
 * (or, 15 additions, 0 multiplications, 7 fused multiply/add),
 * 32 stack variables, 5 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 14>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    {
        SIMD_FLOAT T1, T8, Tk, T2, T3, Tm, T4, Tn, Td, Te, Tg, Th, T5, T6, Ta;
        SIMD_FLOAT Tb, To, Tf, Ti, T7, Tc, Tl, T9, Tj, Tp, Tq, Tr;
        T1 = Cr[0];
        T8 = Cr[WS(cs, 4)];
        Tk = Ci[WS(cs, 4)];
        T2 = Cr[WS(cs, 8)];
        T3 = Ci[WS(cs, 2)];
        Tm = Cr[WS(cs, 2)];
        T4 = Ci[WS(cs, 6)];
        Tn = Cr[WS(cs, 6)];
        Td = Cr[WS(cs, 1)];
        Te = Ci[WS(cs, 3)];
        Tg = Ci[WS(cs, 5)];
        Th = Cr[WS(cs, 7)];
        T5 = Cr[WS(cs, 3)];
        T6 = Ci[WS(cs, 7)];
        Ta = Ci[WS(cs, 1)];
        Tb = Cr[WS(cs, 5)];
        To = (T3 + T4) + (Tm - Tn);
        Tf = Td + Te;
        Ti = Tg - Th;
        T7 = T5 + T6;
        Tc = Ta - Tb;
        Tl = Ti + Tf;
        T9 = T3 - (SIMD_FMADD(KP707106781, T7, T4)) - T8;
        Tj = Tc + (Tf - Ti);
        Tp = Tc + T7;
        R0[0] =
            T1 + SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, Tj, T9), T2);
        Tq = SIMD_FMADD(KP541196100, Tp, To);
        Tr = SIMD_FMADD(KP765366864, Tq, Tl);
        R0[WS(rs, 1)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP923879532, Tr, Tk), T1) - T2;
    }
}

template <>
struct r2cb_traits<16, 15>
{
    static constexpr long_t flops           = 18;
    static constexpr long_t operations      = 14;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 24;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 16 -skip-k 15 -name
 * r2cb -standalone */

/*
 * This function contains 14 FP additions, 4 FP multiplications,
 * (or, 10 additions, 0 multiplications, 4 fused multiply/add),
 * 24 stack variables, 4 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && SkippedOutputs == 15>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP765366864, +0.765366864730179543456919968060797733522689125);
    DK(KP541196100, +0.541196100146196984399723205366389420061072063);
    {
        SIMD_FLOAT T1, Tk, T2, T3, T6, T4, T5, T8, T9, Ta, Tb, Td, Tg, Te, Tf;
        SIMD_FLOAT T7, Tc, Th, Ti, Tj;
        T1 = Cr[0];
        Tk = Cr[WS(cs, 8)];
        T2 = Ci[WS(cs, 4)];
        T3 = Cr[WS(cs, 1)];
        T6 = Cr[WS(cs, 7)];
        T4 = Ci[WS(cs, 5)];
        T5 = Ci[WS(cs, 3)];
        T8 = Cr[WS(cs, 2)];
        T9 = Ci[WS(cs, 2)];
        Ta = Ci[WS(cs, 6)];
        Tb = Cr[WS(cs, 6)];
        Td = Ci[WS(cs, 1)];
        Tg = Cr[WS(cs, 5)];
        Te = Ci[WS(cs, 7)];
        Tf = Cr[WS(cs, 3)];
        T7 = T3 + T4 + T5 - T6;
        Tc = T8 + T9 + Ta - Tb;
        Th = Td + Te + Tf - Tg;
        Ti = SIMD_FMADD(KP541196100, Th, Tc);
        Tj = SIMD_FMADD(KP765366864, Ti, T7);
        R0[0] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP923879532, Tj, T2), T1) - Tk;
    }
}

//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cf_traits<10, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 1 -name c2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 1>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    {
        SIMD_FLOAT T1, T2;
        T1            = ri[0];
        T2            = ii[0];
        ro[WS(os, 4)] = T1;
        ro[WS(os, 6)] = T1;
        ro[WS(os, 3)] = T1;
        ro[WS(os, 5)] = T1;
        ro[WS(os, 7)] = T1;
        ro[WS(os, 8)] = T1;
        ro[WS(os, 1)] = T1;
        ro[WS(os, 9)] = T1;
        ro[WS(os, 2)] = T1;
        ro[0]         = T1;
        io[WS(os, 4)] = T2;
        io[WS(os, 6)] = T2;
        io[WS(os, 3)] = T2;
        io[WS(os, 5)] = T2;
        io[WS(os, 7)] = T2;
        io[WS(os, 8)] = T2;
        io[WS(os, 1)] = T2;
        io[WS(os, 9)] = T2;
        io[WS(os, 2)] = T2;
        io[0]         = T2;
    }
}

template <>
struct c2cf_traits<10, 2>
{
    static constexpr long_t flops           = 52;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 16;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 2 -name c2cf
 * -standalone */

/*
 * This function contains 28 FP additions, 24 FP multiplications,
 * (or, 4 additions, 0 multiplications, 24 fused multiply/add),
 * 16 stack variables, 4 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 2>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    {
        SIMD_FLOAT T1, T2, T3, T4, T5, Tc, T6, Tb, T7, Ta, T8, T9;
        T1            = ri[0];
        T2            = ri[WS(is, 1)];
        T3            = ii[0];
        T4            = ii[WS(is, 1)];
        ro[0]         = T1 + T2;
        ro[WS(os, 5)] = T1 - T2;
        T5            = SIMD_FNMADD(KP809016994, T2, T1);
        Tc            = SIMD_FMADD(KP309016994, T2, T1);
        T6            = SIMD_FMADD(KP809016994, T2, T1);
        Tb            = SIMD_FNMADD(KP309016994, T2, T1);
        io[0]         = T3 + T4;
        io[WS(os, 5)] = T3 - T4;
        T7            = SIMD_FNMADD(KP309016994, T4, T3);
        Ta            = SIMD_FMADD(KP809016994, T4, T3);
        T8            = SIMD_FMADD(KP309016994, T4, T3);
        T9            = SIMD_FNMADD(KP809016994, T4, T3);
        ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, T4, Tb);
        ro[WS(os, 3)] = SIMD_FMADD(KP951056516, T4, Tb);
        ro[WS(os, 9)] = SIMD_FNMADD(KP587785252, T4, T6);
        ro[WS(os, 1)] = SIMD_FMADD(KP587785252, T4, T6);
        ro[WS(os, 2)] = SIMD_FMADD(KP951056516, T4, Tc);
        ro[WS(os, 8)] = SIMD_FNMADD(KP951056516, T4, Tc);
        ro[WS(os, 4)] = SIMD_FMADD(KP587785252, T4, T5);
        ro[WS(os, 6)] = SIMD_FNMADD(KP587785252, T4, T5);
        io[WS(os, 4)] = SIMD_FNMADD(KP587785252, T2, T9);
        io[WS(os, 6)] = SIMD_FMADD(KP587785252, T2, T9);
        io[WS(os, 2)] = SIMD_FNMADD(KP951056516, T2, T8);
        io[WS(os, 8)] = SIMD_FMADD(KP951056516, T2, T8);
        io[WS(os, 9)] = SIMD_FMADD(KP587785252, T2, Ta);
        io[WS(os, 1)] = SIMD_FNMADD(KP587785252, T2, Ta);
        io[WS(os, 7)] = SIMD_FMADD(KP951056516, T2, T7);
        io[WS(os, 3)] = SIMD_FNMADD(KP951056516, T2, T7);
    }
}

template <>
struct c2cf_traits<10, 3>
{
    static constexpr long_t flops           = 80;
    static constexpr long_t operations      = 44;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 34;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 3 -name c2cf
 * -standalone */

/*
 * This function contains 44 FP additions, 36 FP multiplications,
 * (or, 8 additions, 0 multiplications, 36 fused multiply/add),
 * 34 stack variables, 4 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 3>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, T2, T3, T6, T7, T8, T4, T5, Tu, Ts, Tp, Tn, T9, Tk, Tc;
        SIMD_FLOAT Tf, Tj, Th, Ta, Td, Tl, Tq, Tb, Tg, Te, Ti, To, Tm, Tt, Tr;
        T1            = ri[0];
        T2            = ri[WS(is, 2)];
        T3            = ri[WS(is, 1)];
        T6            = ii[0];
        T7            = ii[WS(is, 2)];
        T8            = ii[WS(is, 1)];
        T4            = T2 - T3;
        T5            = T2 + T3;
        Tu            = SIMD_FMADD(KP618033988, T3, T2);
        Ts            = SIMD_FNMADD(KP618033988, T2, T3);
        Tp            = SIMD_FMSUB(KP618033988, T3, T2);
        Tn            = SIMD_FMADD(KP618033988, T2, T3);
        T9            = T7 - T8;
        Tk            = T7 + T8;
        Tc            = SIMD_FNMADD(KP618033988, T8, T7);
        Tf            = SIMD_FMADD(KP618033988, T8, T7);
        Tj            = SIMD_FNMADD(KP618033988, T7, T8);
        Th            = SIMD_FMADD(KP618033988, T7, T8);
        ro[0]         = T1 + T5;
        Ta            = SIMD_FNMADD(KP250000000, T5, T1);
        ro[WS(os, 5)] = T1 + T4;
        Td            = SIMD_FNMADD(KP250000000, T4, T1);
        io[0]         = T6 + Tk;
        Tl            = SIMD_FNMADD(KP250000000, Tk, T6);
        io[WS(os, 5)] = T6 + T9;
        Tq            = SIMD_FNMADD(KP250000000, T9, T6);
        Tb            = SIMD_FMADD(KP559016994, T4, Ta);
        Tg            = SIMD_FNMADD(KP559016994, T4, Ta);
        Te            = SIMD_FMADD(KP559016994, T5, Td);
        Ti            = SIMD_FNMADD(KP559016994, T5, Td);
        To            = SIMD_FMADD(KP559016994, T9, Tl);
        Tm            = SIMD_FNMADD(KP559016994, T9, Tl);
        Tt            = SIMD_FMADD(KP559016994, Tk, Tq);
        Tr            = SIMD_FNMADD(KP559016994, Tk, Tq);
        ro[WS(os, 2)] = SIMD_FMADD(KP951056516, Th, Tg);
        ro[WS(os, 8)] = SIMD_FNMADD(KP951056516, Th, Tg);
        ro[WS(os, 6)] = SIMD_FMADD(KP951056516, Tc, Tb);
        ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, Tc, Tb);
        ro[WS(os, 3)] = SIMD_FMADD(KP951056516, Tj, Ti);
        ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, Tj, Ti);
        ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Tf, Te);
        ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, Tf, Te);
        io[WS(os, 8)] = SIMD_FMADD(KP951056516, Tn, Tm);
        io[WS(os, 2)] = SIMD_FNMADD(KP951056516, Tn, Tm);
        io[WS(os, 6)] = SIMD_FMADD(KP951056516, Tp, To);
        io[WS(os, 4)] = SIMD_FNMADD(KP951056516, Tp, To);
        io[WS(os, 7)] = SIMD_FMADD(KP951056516, Ts, Tr);
        io[WS(os, 3)] = SIMD_FNMADD(KP951056516, Ts, Tr);
        io[WS(os, 9)] = SIMD_FMADD(KP951056516, Tu, Tt);
        io[WS(os, 1)] = SIMD_FNMADD(KP951056516, Tu, Tt);
    }
}

template <>
struct c2cf_traits<10, 4>
{
    static constexpr long_t flops           = 88;
    static constexpr long_t operations      = 52;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 44;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 4 -name c2cf
 * -standalone */

/*
 * This function contains 52 FP additions, 36 FP multiplications,
 * (or, 16 additions, 0 multiplications, 36 fused multiply/add),
 * 44 stack variables, 4 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 4>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, T9, T5, T2, T3, Td, Ta, Tb, T4, T7;
        T1 = ri[0];
        T9 = ii[0];
        T5 = ri[WS(is, 1)];
        T2 = ri[WS(is, 2)];
        T3 = ri[WS(is, 3)];
        Td = ii[WS(is, 1)];
        Ta = ii[WS(is, 2)];
        Tb = ii[WS(is, 3)];
        T4 = T2 - T3;
        T7 = T2 + T3;
        {
            SIMD_FLOAT Tc, Tm, Tg, Tr, Tt, T6, Tk, TC, TE, TA, Ty, Tn, Tx, Te,
                Tp;
            SIMD_FLOAT Ti, Tv, Tf, T8, Tj, Tz, To, Th, Tu, Tl, Tw, TB, TD, Tq,
                Ts;
            Tc            = Ta - Tb;
            Tm            = Ta + Tb;
            T8            = T7 + T5;
            Tg            = T7 - T5;
            Tr            = SIMD_FNMADD(KP618033988, T7, T5);
            Tt            = SIMD_FMADD(KP618033988, T5, T7);
            T6            = T4 - T5;
            Tk            = T4 + T5;
            TC            = SIMD_FMADD(KP618033988, T4, T5);
            TE            = SIMD_FNMADD(KP618033988, T5, T4);
            TA            = Tm - Td;
            Ty            = Tm + Td;
            Tn            = SIMD_FMADD(KP618033988, Td, Tm);
            Tx            = SIMD_FNMADD(KP618033988, Tm, Td);
            Te            = Tc - Td;
            Tp            = Tc + Td;
            Ti            = SIMD_FNMADD(KP618033988, Td, Tc);
            Tv            = SIMD_FMADD(KP618033988, Tc, Td);
            Tf            = SIMD_FNMADD(KP250000000, T8, T1);
            ro[0]         = T1 + T8;
            Tj            = SIMD_FNMADD(KP250000000, T6, T1);
            ro[WS(os, 5)] = T1 + T6;
            Tz            = SIMD_FNMADD(KP250000000, Ty, T9);
            io[0]         = T9 + Ty;
            To            = SIMD_FNMADD(KP250000000, Te, T9);
            io[WS(os, 5)] = T9 + Te;
            Th            = SIMD_FMADD(KP559016994, Tg, Tf);
            Tu            = SIMD_FNMADD(KP559016994, Tg, Tf);
            Tl            = SIMD_FMADD(KP559016994, Tk, Tj);
            Tw            = SIMD_FNMADD(KP559016994, Tk, Tj);
            TB            = SIMD_FNMADD(KP559016994, TA, Tz);
            TD            = SIMD_FMADD(KP559016994, TA, Tz);
            Tq            = SIMD_FNMADD(KP559016994, Tp, To);
            Ts            = SIMD_FMADD(KP559016994, Tp, To);
            ro[WS(os, 8)] = SIMD_FNMADD(KP951056516, Tv, Tu);
            ro[WS(os, 2)] = SIMD_FMADD(KP951056516, Tv, Tu);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, Ti, Th);
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, Ti, Th);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, Tx, Tw);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, Tx, Tw);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Tn, Tl);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, Tn, Tl);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, TE, TD);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, TE, TD);
            io[WS(os, 8)] = SIMD_FMADD(KP951056516, TC, TB);
            io[WS(os, 2)] = SIMD_FNMADD(KP951056516, TC, TB);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, Tt, Ts);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, Tt, Ts);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, Tr, Tq);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, Tr, Tq);
        }
    }
}

template <>
struct c2cf_traits<10, 5>
{
    static constexpr long_t flops           = 92;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 50;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 5 -name c2cf
 * -standalone */

/*
 * This function contains 56 FP additions, 36 FP multiplications,
 * (or, 20 additions, 0 multiplications, 36 fused multiply/add),
 * 50 stack variables, 4 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 5>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, To, T2, T3, T5, T6, Tf, Tg, Ti, Tj;
        T1 = ri[0];
        To = ii[0];
        T2 = ri[WS(is, 2)];
        T3 = ri[WS(is, 3)];
        T5 = ri[WS(is, 4)];
        T6 = ri[WS(is, 1)];
        Tf = ii[WS(is, 2)];
        Tg = ii[WS(is, 3)];
        Ti = ii[WS(is, 4)];
        Tj = ii[WS(is, 1)];
        {
            SIMD_FLOAT T4, T9, T7, Ta, Th, Tz, Tk, TA, Td, Tt, Tv, T8, Tx, TI,
                TK;
            SIMD_FLOAT TG, TE, TB, TD, Tp, Tr, Tl, Tn, Tc, Tb, Tw, TF, Tq, Te,
                Tm;
            SIMD_FLOAT Ty, TC, TH, TJ, Ts, Tu;
            T4            = T2 - T3;
            T9            = T2 + T3;
            T7            = T5 - T6;
            Ta            = T5 + T6;
            Th            = Tf - Tg;
            Tz            = Tf + Tg;
            Tk            = Ti - Tj;
            TA            = Ti + Tj;
            Tb            = T9 + Ta;
            Td            = Ta - T9;
            Tt            = SIMD_FMADD(KP618033988, Ta, T9);
            Tv            = SIMD_FNMADD(KP618033988, T9, Ta);
            T8            = T4 + T7;
            Tx            = T7 - T4;
            TI            = SIMD_FNMADD(KP618033988, T4, T7);
            TK            = SIMD_FMADD(KP618033988, T7, T4);
            TG            = TA - Tz;
            TE            = Tz + TA;
            TB            = SIMD_FMADD(KP618033988, TA, Tz);
            TD            = SIMD_FNMADD(KP618033988, Tz, TA);
            Tp            = Th + Tk;
            Tr            = Tk - Th;
            Tl            = SIMD_FMADD(KP618033988, Tk, Th);
            Tn            = SIMD_FNMADD(KP618033988, Th, Tk);
            Tc            = SIMD_FNMADD(KP250000000, Tb, T1);
            ro[0]         = T1 + Tb;
            Tw            = SIMD_FNMADD(KP250000000, T8, T1);
            ro[WS(os, 5)] = T1 + T8;
            TF            = SIMD_FNMADD(KP250000000, TE, To);
            io[0]         = To + TE;
            Tq            = SIMD_FNMADD(KP250000000, Tp, To);
            io[WS(os, 5)] = To + Tp;
            Te            = SIMD_FNMADD(KP559016994, Td, Tc);
            Tm            = SIMD_FMADD(KP559016994, Td, Tc);
            Ty            = SIMD_FNMADD(KP559016994, Tx, Tw);
            TC            = SIMD_FMADD(KP559016994, Tx, Tw);
            TH            = SIMD_FMADD(KP559016994, TG, TF);
            TJ            = SIMD_FNMADD(KP559016994, TG, TF);
            Ts            = SIMD_FNMADD(KP559016994, Tr, Tq);
            Tu            = SIMD_FMADD(KP559016994, Tr, Tq);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, Tn, Tm);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, Tn, Tm);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, Tl, Te);
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, Tl, Te);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, TD, TC);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TD, TC);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TB, Ty);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, TB, Ty);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, TK, TJ);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, TK, TJ);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, TI, TH);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, TI, TH);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, Tv, Tu);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, Tv, Tu);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, Tt, Ts);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, Tt, Ts);
        }
    }
}

template <>
struct c2cf_traits<10, 6>
{
    static constexpr long_t flops           = 96;
    static constexpr long_t operations      = 60;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 56;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 6 -name c2cf
 * -standalone */

/*
 * This function contains 60 FP additions, 36 FP multiplications,
 * (or, 24 additions, 0 multiplications, 36 fused multiply/add),
 * 56 stack variables, 4 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 6>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, T2, Tr, Ts, T4, T5, T7, T8, Ti, Tj, Tl, Tm;
        T1 = ri[0];
        T2 = ri[WS(is, 5)];
        Tr = ii[0];
        Ts = ii[WS(is, 5)];
        T4 = ri[WS(is, 2)];
        T5 = ri[WS(is, 3)];
        T7 = ri[WS(is, 4)];
        T8 = ri[WS(is, 1)];
        Ti = ii[WS(is, 2)];
        Tj = ii[WS(is, 3)];
        Tl = ii[WS(is, 4)];
        Tm = ii[WS(is, 1)];
        {
            SIMD_FLOAT T3, Tb, Tt, TJ, T6, Tc, T9, Td, Tk, TE, Tn, TF, Tg, Ty,
                TA;
            SIMD_FLOAT Ta, TC, TO, TQ, TM, TK, TG, TI, Tu, Tw, To, Tq, Tf, Te,
                TB;
            SIMD_FLOAT TL, Tv, Th, Tp, TD, TH, TN, TP, Tx, Tz;
            T3            = T1 - T2;
            Tb            = T1 + T2;
            Tt            = Tr - Ts;
            TJ            = Tr + Ts;
            T6            = T4 - T5;
            Tc            = T4 + T5;
            T9            = T7 - T8;
            Td            = T7 + T8;
            Tk            = Ti - Tj;
            TE            = Ti + Tj;
            Tn            = Tl - Tm;
            TF            = Tl + Tm;
            Te            = Tc + Td;
            Tg            = Td - Tc;
            Ty            = SIMD_FMADD(KP618033988, Td, Tc);
            TA            = SIMD_FNMADD(KP618033988, Tc, Td);
            Ta            = T6 + T9;
            TC            = T9 - T6;
            TO            = SIMD_FNMADD(KP618033988, T6, T9);
            TQ            = SIMD_FMADD(KP618033988, T9, T6);
            TM            = TF - TE;
            TK            = TE + TF;
            TG            = SIMD_FMADD(KP618033988, TF, TE);
            TI            = SIMD_FNMADD(KP618033988, TE, TF);
            Tu            = Tk + Tn;
            Tw            = Tn - Tk;
            To            = SIMD_FMADD(KP618033988, Tn, Tk);
            Tq            = SIMD_FNMADD(KP618033988, Tk, Tn);
            Tf            = SIMD_FNMADD(KP250000000, Te, Tb);
            ro[0]         = Tb + Te;
            TB            = SIMD_FNMADD(KP250000000, Ta, T3);
            ro[WS(os, 5)] = T3 + Ta;
            TL            = SIMD_FNMADD(KP250000000, TK, TJ);
            io[0]         = TJ + TK;
            Tv            = SIMD_FNMADD(KP250000000, Tu, Tt);
            io[WS(os, 5)] = Tt + Tu;
            Th            = SIMD_FNMADD(KP559016994, Tg, Tf);
            Tp            = SIMD_FMADD(KP559016994, Tg, Tf);
            TD            = SIMD_FNMADD(KP559016994, TC, TB);
            TH            = SIMD_FMADD(KP559016994, TC, TB);
            TN            = SIMD_FMADD(KP559016994, TM, TL);
            TP            = SIMD_FNMADD(KP559016994, TM, TL);
            Tx            = SIMD_FNMADD(KP559016994, Tw, Tv);
            Tz            = SIMD_FMADD(KP559016994, Tw, Tv);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, Tq, Tp);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, Tq, Tp);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, To, Th);
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, To, Th);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, TI, TH);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TI, TH);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TG, TD);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, TG, TD);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, TQ, TP);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, TQ, TP);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, TO, TN);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, TO, TN);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, TA, Tz);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, TA, Tz);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, Ty, Tx);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, Ty, Tx);
        }
    }
}

template <>
struct c2cf_traits<10, 7>
{
    static constexpr long_t flops           = 104;
    static constexpr long_t operations      = 68;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 7 -name c2cf
 * -standalone */

/*
 * This function contains 68 FP additions, 36 FP multiplications,
 * (or, 32 additions, 0 multiplications, 36 fused multiply/add),
 * 66 stack variables, 4 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 7>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T7, To, Tp, Tq, Tl, Td, T3, TR, Ty, Tm, Ta, Tf, T6, Te, T1;
        SIMD_FLOAT T2, Tw, Tx, T8, T9, T4, T5, Tr, TM;
        T1 = ri[0];
        T2 = ri[WS(is, 5)];
        Tw = ii[0];
        Tx = ii[WS(is, 5)];
        T7 = ri[WS(is, 4)];
        T8 = ri[WS(is, 6)];
        T9 = ri[WS(is, 1)];
        T4 = ri[WS(is, 2)];
        T5 = ri[WS(is, 3)];
        To = ii[WS(is, 4)];
        Tp = ii[WS(is, 6)];
        Tq = ii[WS(is, 1)];
        Tl = ii[WS(is, 2)];
        Td = T1 + T2;
        T3 = T1 - T2;
        TR = Tw + Tx;
        Ty = Tw - Tx;
        Tm = ii[WS(is, 3)];
        Ta = T8 - T9;
        Tf = T8 + T9;
        T6 = T4 - T5;
        Te = T4 + T5;
        Tr = Tp - Tq;
        TM = Tp + Tq;
        {
            SIMD_FLOAT Tn, Tz, TX, Tg, TF, Tb, TN, TS, Ts, TA, TK, TY, T10, Tj,
                TG;
            SIMD_FLOAT TI, TT, TV, TO, TQ, TB, TD, Tt, Tv, TJ, Ti, Th, Tc, TU,
                TC;
            SIMD_FLOAT TL, TP, Tk, Tu, TW, TZ, TE, TH;
            Tn            = Tl + Tm;
            Tz            = Tl - Tm;
            TX            = T7 - Tf;
            Tg            = T7 + Tf;
            TF            = T7 - Ta;
            Tb            = T7 + Ta;
            TN            = To - TM;
            TS            = To + TM;
            Ts            = To - Tr;
            TA            = To + Tr;
            Th            = Te + Tg;
            TK            = Te - Tg;
            TY            = SIMD_FNMADD(KP618033988, T6, TX);
            T10           = SIMD_FMADD(KP618033988, TX, T6);
            Tc            = T6 + Tb;
            Tj            = T6 - Tb;
            TG            = SIMD_FMADD(KP618033988, TF, Te);
            TI            = SIMD_FNMADD(KP618033988, Te, TF);
            TT            = Tn + TS;
            TV            = Tn - TS;
            TO            = SIMD_FNMADD(KP618033988, Tz, TN);
            TQ            = SIMD_FMADD(KP618033988, TN, Tz);
            TB            = Tz + TA;
            TD            = Tz - TA;
            Tt            = SIMD_FMADD(KP618033988, Ts, Tn);
            Tv            = SIMD_FNMADD(KP618033988, Tn, Ts);
            TJ            = SIMD_FNMADD(KP250000000, Th, Td);
            ro[0]         = Td + Th;
            Ti            = SIMD_FNMADD(KP250000000, Tc, T3);
            ro[WS(os, 5)] = T3 + Tc;
            TU            = SIMD_FNMADD(KP250000000, TT, TR);
            io[0]         = TR + TT;
            TC            = SIMD_FNMADD(KP250000000, TB, Ty);
            io[WS(os, 5)] = Ty + TB;
            TL            = SIMD_FNMADD(KP559016994, TK, TJ);
            TP            = SIMD_FMADD(KP559016994, TK, TJ);
            Tk            = SIMD_FMADD(KP559016994, Tj, Ti);
            Tu            = SIMD_FNMADD(KP559016994, Tj, Ti);
            TW            = SIMD_FNMADD(KP559016994, TV, TU);
            TZ            = SIMD_FMADD(KP559016994, TV, TU);
            TE            = SIMD_FMADD(KP559016994, TD, TC);
            TH            = SIMD_FNMADD(KP559016994, TD, TC);
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, TQ, TP);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, TQ, TP);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, TO, TL);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, TO, TL);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, Tv, Tu);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, Tv, Tu);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Tt, Tk);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, Tt, Tk);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, T10, TZ);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, T10, TZ);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, TY, TW);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, TY, TW);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, TI, TH);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, TI, TH);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, TG, TE);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, TG, TE);
        }
    }
}

template <>
struct c2cf_traits<10, 8>
{
    static constexpr long_t flops           = 112;
    static constexpr long_t operations      = 76;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 76;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 8 -name c2cf
 * -standalone */

/*
 * This function contains 76 FP additions, 36 FP multiplications,
 * (or, 40 additions, 0 multiplications, 36 fused multiply/add),
 * 76 stack variables, 4 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 8>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T7, T9, Tr, Tt, To, Tf, T3, TZ, TD, Tp, Tu, Tg, T6, Ti, Tc;
        SIMD_FLOAT Tv, T1, T2, TB, TC, T4, T5, Ta, Tb, T17, Th, TK, T8, T16, Tj;
        SIMD_FLOAT TL, Td, Tw, TS, TV, T10, Ts, TE, Tq, TU;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TB  = ii[0];
        TC  = ii[WS(is, 5)];
        T7  = ri[WS(is, 3)];
        T9  = ri[WS(is, 4)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Ta  = ri[WS(is, 6)];
        Tb  = ri[WS(is, 1)];
        Tr  = ii[WS(is, 3)];
        Tt  = ii[WS(is, 4)];
        To  = ii[WS(is, 2)];
        Tf  = T1 + T2;
        T3  = T1 - T2;
        TZ  = TB + TC;
        TD  = TB - TC;
        Tp  = ii[WS(is, 7)];
        Tu  = ii[WS(is, 6)];
        Tg  = T4 + T5;
        T6  = T4 - T5;
        Ti  = Ta + Tb;
        Tc  = Ta - Tb;
        Tv  = ii[WS(is, 1)];
        Tq  = To - Tp;
        TU  = To + Tp;
        T17 = Tg - T7;
        Th  = Tg + T7;
        TK  = T6 + T7;
        T8  = T6 - T7;
        T16 = T9 - Ti;
        Tj  = T9 + Ti;
        TL  = T9 - Tc;
        Td  = T9 + Tc;
        Tw  = Tu - Tv;
        TS  = Tu + Tv;
        TV  = TU - Tr;
        T10 = TU + Tr;
        Ts  = Tq + Tr;
        TE  = Tq - Tr;
        {
            SIMD_FLOAT Tk, TQ, T18, T1a, Te, Tm, TM, TO, TT, T11, Tx, TF, TP,
                Tl, T12;
            SIMD_FLOAT T14, TW, TY, TG, TI, Ty, TA, TR, TX, Tn, Tz, T13, TH,
                T15, T19;
            SIMD_FLOAT TJ, TN;
            Tk            = Th + Tj;
            TQ            = Th - Tj;
            T18           = SIMD_FNMADD(KP618033988, T17, T16);
            T1a           = SIMD_FMADD(KP618033988, T16, T17);
            Te            = T8 + Td;
            Tm            = T8 - Td;
            TM            = SIMD_FMADD(KP618033988, TL, TK);
            TO            = SIMD_FNMADD(KP618033988, TK, TL);
            TT            = Tt - TS;
            T11           = Tt + TS;
            Tx            = Tt - Tw;
            TF            = Tt + Tw;
            TP            = SIMD_FNMADD(KP250000000, Tk, Tf);
            ro[0]         = Tf + Tk;
            Tl            = SIMD_FNMADD(KP250000000, Te, T3);
            ro[WS(os, 5)] = T3 + Te;
            T12           = T10 + T11;
            T14           = T10 - T11;
            TW            = SIMD_FNMADD(KP618033988, TV, TT);
            TY            = SIMD_FMADD(KP618033988, TT, TV);
            TG            = TE + TF;
            TI            = TE - TF;
            Ty            = SIMD_FMADD(KP618033988, Tx, Ts);
            TA            = SIMD_FNMADD(KP618033988, Ts, Tx);
            TR            = SIMD_FNMADD(KP559016994, TQ, TP);
            TX            = SIMD_FMADD(KP559016994, TQ, TP);
            Tn            = SIMD_FMADD(KP559016994, Tm, Tl);
            Tz            = SIMD_FNMADD(KP559016994, Tm, Tl);
            T13           = SIMD_FNMADD(KP250000000, T12, TZ);
            io[0]         = TZ + T12;
            TH            = SIMD_FNMADD(KP250000000, TG, TD);
            io[WS(os, 5)] = TD + TG;
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, TY, TX);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, TY, TX);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, TW, TR);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, TW, TR);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, TA, Tz);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TA, Tz);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Ty, Tn);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, Ty, Tn);
            T15           = SIMD_FNMADD(KP559016994, T14, T13);
            T19           = SIMD_FMADD(KP559016994, T14, T13);
            TJ            = SIMD_FMADD(KP559016994, TI, TH);
            TN            = SIMD_FNMADD(KP559016994, TI, TH);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, T1a, T19);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, T1a, T19);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, T18, T15);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, T18, T15);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, TO, TN);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, TO, TN);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, TM, TJ);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, TM, TJ);
        }
    }
}

template <>
struct c2cf_traits<10, 9>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 82;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 9 -name c2cf
 * -standalone */

/*
 * This function contains 80 FP additions, 36 FP multiplications,
 * (or, 44 additions, 0 multiplications, 36 fused multiply/add),
 * 82 stack variables, 4 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 9>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tb, Ty, Tz, Th, T3, T15, TI, TA, Te, Tl, T6, Ti, T9, Tj, Tr;
        SIMD_FLOAT Ts, Tu, Tv, T1, T2, TG, TH, Tc, Td, T4, T5, T7, T8;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TG  = ii[0];
        TH  = ii[WS(is, 5)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 6)];
        Td  = ri[WS(is, 1)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Ty  = ii[WS(is, 4)];
        Tz  = ii[WS(is, 6)];
        Th  = T1 + T2;
        T3  = T1 - T2;
        T15 = TG + TH;
        TI  = TG - TH;
        TA  = ii[WS(is, 1)];
        Te  = Tc - Td;
        Tl  = Tc + Td;
        T6  = T4 - T5;
        Ti  = T4 + T5;
        T9  = T7 - T8;
        Tj  = T7 + T8;
        Tr  = ii[WS(is, 2)];
        Ts  = ii[WS(is, 7)];
        Tu  = ii[WS(is, 8)];
        Tv  = ii[WS(is, 3)];
        {
            SIMD_FLOAT TY, T17, TC, TK, Tn, TV, T1e, T1g, Tg, Tp, TR, TT, T11,
                T16, Tx;
            SIMD_FLOAT TJ, TB, TX, T1c, Tm, TQ, Tf, T1d, Tk, TP, Ta, Tt, TZ, Tw,
                T10;
            SIMD_FLOAT TU, To, T18, T1a, T12, T14, TL, TN, TD, TF, TW, T13, Tq,
                TE, T19;
            SIMD_FLOAT TM, T1b, T1f, TO, TS;
            TB            = Tz - TA;
            TX            = Tz + TA;
            T1c           = Tb - Tl;
            Tm            = Tb + Tl;
            TQ            = Tb - Te;
            Tf            = Tb + Te;
            T1d           = Ti - Tj;
            Tk            = Ti + Tj;
            TP            = T6 - T9;
            Ta            = T6 + T9;
            Tt            = Tr - Ts;
            TZ            = Tr + Ts;
            Tw            = Tu - Tv;
            T10           = Tu + Tv;
            TY            = Ty - TX;
            T17           = Ty + TX;
            TC            = Ty - TB;
            TK            = Ty + TB;
            Tn            = Tk + Tm;
            TV            = Tk - Tm;
            T1e           = SIMD_FNMADD(KP618033988, T1d, T1c);
            T1g           = SIMD_FMADD(KP618033988, T1c, T1d);
            Tg            = Ta + Tf;
            Tp            = Ta - Tf;
            TR            = SIMD_FMADD(KP618033988, TQ, TP);
            TT            = SIMD_FNMADD(KP618033988, TP, TQ);
            T11           = TZ - T10;
            T16           = TZ + T10;
            Tx            = Tt - Tw;
            TJ            = Tt + Tw;
            TU            = SIMD_FNMADD(KP250000000, Tn, Th);
            ro[0]         = Th + Tn;
            To            = SIMD_FNMADD(KP250000000, Tg, T3);
            ro[WS(os, 5)] = T3 + Tg;
            T18           = T16 + T17;
            T1a           = T16 - T17;
            T12           = SIMD_FNMADD(KP618033988, T11, TY);
            T14           = SIMD_FMADD(KP618033988, TY, T11);
            TL            = TJ + TK;
            TN            = TJ - TK;
            TD            = SIMD_FMADD(KP618033988, TC, Tx);
            TF            = SIMD_FNMADD(KP618033988, Tx, TC);
            TW            = SIMD_FNMADD(KP559016994, TV, TU);
            T13           = SIMD_FMADD(KP559016994, TV, TU);
            Tq            = SIMD_FMADD(KP559016994, Tp, To);
            TE            = SIMD_FNMADD(KP559016994, Tp, To);
            T19           = SIMD_FNMADD(KP250000000, T18, T15);
            io[0]         = T15 + T18;
            TM            = SIMD_FNMADD(KP250000000, TL, TI);
            io[WS(os, 5)] = TI + TL;
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, T14, T13);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, T14, T13);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, T12, TW);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, T12, TW);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, TF, TE);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TF, TE);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TD, Tq);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, TD, Tq);
            T1b           = SIMD_FNMADD(KP559016994, T1a, T19);
            T1f           = SIMD_FMADD(KP559016994, T1a, T19);
            TO            = SIMD_FMADD(KP559016994, TN, TM);
            TS            = SIMD_FNMADD(KP559016994, TN, TM);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, T1g, T1f);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, T1g, T1f);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, T1e, T1b);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, T1e, T1b);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, TT, TS);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, TT, TS);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, TR, TO);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, TR, TO);
        }
    }
}

template <>
struct c2cf_traits<10, 10>
{
    static constexpr long_t flops           = 120;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 88;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -first-k 10 -name c2cf
 * -standalone */

/*
 * This function contains 84 FP additions, 36 FP multiplications,
 * (or, 48 additions, 0 multiplications, 36 fused multiply/add),
 * 88 stack variables, 4 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && ProvidedElements == 10>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tu, Tj, T3, T1b, TN, Tk, T6, To, Tg, Tl, T9, Tn, Td, Tv, TE;
        SIMD_FLOAT TF, Tx, Ty, TB, TC, T1, T2, TL, TM, T4, T5, Te, Tf, T7, T8;
        SIMD_FLOAT Tb, Tc;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TL  = ii[0];
        TM  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Tu  = ii[WS(is, 2)];
        Tj  = T1 + T2;
        T3  = T1 - T2;
        T1b = TL + TM;
        TN  = TL - TM;
        Tk  = T4 + T5;
        T6  = T4 - T5;
        To  = Te + Tf;
        Tg  = Te - Tf;
        Tl  = T7 + T8;
        T9  = T7 - T8;
        Tn  = Tb + Tc;
        Td  = Tb - Tc;
        Tv  = ii[WS(is, 7)];
        TE  = ii[WS(is, 6)];
        TF  = ii[WS(is, 1)];
        Tx  = ii[WS(is, 8)];
        Ty  = ii[WS(is, 3)];
        TB  = ii[WS(is, 4)];
        TC  = ii[WS(is, 9)];
        {
            SIMD_FLOAT T10, T1k, T1m, Ts, TW, TY, T17, T1c, TA, TO, T14, T1d,
                TH, TP, TZ;
            SIMD_FLOAT Tr, T1j, Tm, TU, Ta, T1i, Tp, TV, Th, Tw, T15, TG, T13,
                Tz, T16;
            SIMD_FLOAT TD, T12, Tq, Ti, T1e, T1g, T18, T1a, TQ, TS, TI, TK, T11,
                T19, Tt;
            SIMD_FLOAT TJ, T1f, TR, T1h, T1l, TT, TX;
            T1j           = Tk - Tl;
            Tm            = Tk + Tl;
            TU            = T6 - T9;
            Ta            = T6 + T9;
            T1i           = Tn - To;
            Tp            = Tn + To;
            TV            = Td - Tg;
            Th            = Td + Tg;
            Tw            = Tu - Tv;
            T15           = Tu + Tv;
            TG            = TE - TF;
            T13           = TE + TF;
            Tz            = Tx - Ty;
            T16           = Tx + Ty;
            TD            = TB - TC;
            T12           = TB + TC;
            Tq            = Tm + Tp;
            T10           = Tm - Tp;
            T1k           = SIMD_FNMADD(KP618033988, T1j, T1i);
            T1m           = SIMD_FMADD(KP618033988, T1i, T1j);
            Ti            = Ta + Th;
            Ts            = Ta - Th;
            TW            = SIMD_FMADD(KP618033988, TV, TU);
            TY            = SIMD_FNMADD(KP618033988, TU, TV);
            T17           = T15 - T16;
            T1c           = T15 + T16;
            TA            = Tw - Tz;
            TO            = Tw + Tz;
            T14           = T12 - T13;
            T1d           = T12 + T13;
            TH            = TD - TG;
            TP            = TD + TG;
            TZ            = SIMD_FNMADD(KP250000000, Tq, Tj);
            ro[0]         = Tj + Tq;
            Tr            = SIMD_FNMADD(KP250000000, Ti, T3);
            ro[WS(os, 5)] = T3 + Ti;
            T1e           = T1c + T1d;
            T1g           = T1c - T1d;
            T18           = SIMD_FNMADD(KP618033988, T17, T14);
            T1a           = SIMD_FMADD(KP618033988, T14, T17);
            TQ            = TO + TP;
            TS            = TO - TP;
            TI            = SIMD_FMADD(KP618033988, TH, TA);
            TK            = SIMD_FNMADD(KP618033988, TA, TH);
            T11           = SIMD_FNMADD(KP559016994, T10, TZ);
            T19           = SIMD_FMADD(KP559016994, T10, TZ);
            Tt            = SIMD_FMADD(KP559016994, Ts, Tr);
            TJ            = SIMD_FNMADD(KP559016994, Ts, Tr);
            T1f           = SIMD_FNMADD(KP250000000, T1e, T1b);
            io[0]         = T1b + T1e;
            TR            = SIMD_FNMADD(KP250000000, TQ, TN);
            io[WS(os, 5)] = TN + TQ;
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, T1a, T19);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, T1a, T19);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, T18, T11);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, T18, T11);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, TK, TJ);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TK, TJ);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TI, Tt);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, TI, Tt);
            T1h           = SIMD_FNMADD(KP559016994, T1g, T1f);
            T1l           = SIMD_FMADD(KP559016994, T1g, T1f);
            TT            = SIMD_FMADD(KP559016994, TS, TR);
            TX            = SIMD_FNMADD(KP559016994, TS, TR);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, T1m, T1l);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, T1m, T1l);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, T1k, T1h);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, T1k, T1h);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, TY, TX);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, TY, TX);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, TW, TT);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, TW, TT);
        }
    }
}

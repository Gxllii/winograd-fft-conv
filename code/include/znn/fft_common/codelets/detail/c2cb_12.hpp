//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cb_traits<12, 0>
{
    static constexpr long_t flops           = 120;
    static constexpr long_t operations      = 96;
    static constexpr long_t memory_accesses = 48;
    static constexpr long_t stack_vars      = 98;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 0 -name c2cb
 * -standalone */

/*
 * This function contains 96 FP additions, 24 FP multiplications,
 * (or, 72 additions, 0 multiplications, 24 fused multiply/add),
 * 98 stack variables, 2 constants, and 48 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 0>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1t, Tb, Ty, T1x, TK, T12, TT, TW, T1e, T1o, T11, T1l, T17,
            T19, TF;
        SIMD_FLOAT T1r, T13, TP, Tm, Tn, T1j, T1p, T1y, T1w, TX, T1n, TQ, TY,
            T14, T18;
        SIMD_FLOAT T1q, T1s, T1k, T1m;
        {
            SIMD_FLOAT TA, TS, T1a, TD, TV, Th, TR, T5, T1d, Tz, Ts, TU, Ta, Ti,
                Tx;
            SIMD_FLOAT TC, T1b, TJ, Tj, T1f, Tg, TG, TM, TN, T1, T2, T3, To, Tp,
                Tq;
            SIMD_FLOAT T6, T7, T8, Tt, Tu, Tv, Tc, Td, T4, Te, Tr, T9, TH, Tw,
                TI;
            SIMD_FLOAT Tf, TB, TZ, T1c, T1u, T1i, Tk, T10, TE, TO, T1g, T15,
                T16, Tl, TL;
            SIMD_FLOAT T1v, T1h;
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            To  = ii[0];
            Tp  = ii[WS(is, 4)];
            Tq  = ii[WS(is, 8)];
            T6  = ri[WS(is, 6)];
            T7  = ri[WS(is, 10)];
            T8  = ri[WS(is, 2)];
            Tt  = ii[WS(is, 6)];
            Tu  = ii[WS(is, 10)];
            Tv  = ii[WS(is, 2)];
            Tc  = ri[WS(is, 3)];
            Td  = ri[WS(is, 7)];
            T4  = T2 + T3;
            TA  = T3 - T2;
            Te  = ri[WS(is, 11)];
            TS  = Tp - Tq;
            Tr  = Tp + Tq;
            T1a = ii[WS(is, 3)];
            T9  = T7 + T8;
            TD  = T8 - T7;
            TH  = ii[WS(is, 7)];
            TV  = Tu - Tv;
            Tw  = Tu + Tv;
            TI  = ii[WS(is, 11)];
            Th  = ri[WS(is, 9)];
            TR  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            T1d = Te - Td;
            Tf  = Td + Te;
            Tz  = SIMD_FNMADD(KP500000000, Tr, To);
            Ts  = To + Tr;
            TU  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            Ti  = ri[WS(is, 1)];
            Tx  = Tt + Tw;
            TC  = SIMD_FNMADD(KP500000000, Tw, Tt);
            T1b = TH + TI;
            TJ  = TH - TI;
            Tj  = ri[WS(is, 5)];
            T1f = ii[WS(is, 9)];
            Tg  = Tc + Tf;
            TG  = SIMD_FNMADD(KP500000000, Tf, Tc);
            TM  = ii[WS(is, 1)];
            TN  = ii[WS(is, 5)];
            T1t = T5 - Ta;
            Tb  = T5 + Ta;
            TB  = SIMD_FNMADD(KP866025403, TA, Tz);
            TZ  = SIMD_FMADD(KP866025403, TA, Tz);
            Ty  = Ts - Tx;
            T1x = Ts + Tx;
            T1c = SIMD_FNMADD(KP500000000, T1b, T1a);
            T1u = T1a + T1b;
            T1i = Tj - Ti;
            Tk  = Ti + Tj;
            T10 = SIMD_FMADD(KP866025403, TD, TC);
            TE  = SIMD_FNMADD(KP866025403, TD, TC);
            TK  = SIMD_FNMADD(KP866025403, TJ, TG);
            T12 = SIMD_FMADD(KP866025403, TJ, TG);
            TO  = TM - TN;
            T1g = TM + TN;
            T15 = SIMD_FMADD(KP866025403, TS, TR);
            TT  = SIMD_FNMADD(KP866025403, TS, TR);
            TW  = SIMD_FNMADD(KP866025403, TV, TU);
            T16 = SIMD_FMADD(KP866025403, TV, TU);
            T1e = SIMD_FMADD(KP866025403, T1d, T1c);
            T1o = SIMD_FNMADD(KP866025403, T1d, T1c);
            Tl  = Th + Tk;
            TL  = SIMD_FNMADD(KP500000000, Tk, Th);
            T11 = TZ - T10;
            T1l = TZ + T10;
            T1v = T1f + T1g;
            T1h = SIMD_FNMADD(KP500000000, T1g, T1f);
            T17 = T15 + T16;
            T19 = T15 - T16;
            TF  = TB - TE;
            T1r = TB + TE;
            T13 = SIMD_FMADD(KP866025403, TO, TL);
            TP  = SIMD_FNMADD(KP866025403, TO, TL);
            Tm  = Tg + Tl;
            Tn  = Tg - Tl;
            T1j = SIMD_FMADD(KP866025403, T1i, T1h);
            T1p = SIMD_FNMADD(KP866025403, T1i, T1h);
            T1y = T1u + T1v;
            T1w = T1u - T1v;
        }
        TX             = TT + TW;
        T1n            = TT - TW;
        TQ             = TK - TP;
        TY             = TK + TP;
        T14            = T12 - T13;
        T18            = T12 + T13;
        io[WS(os, 9)]  = Ty - Tn;
        io[WS(os, 3)]  = Tn + Ty;
        ro[0]          = Tb + Tm;
        ro[WS(os, 6)]  = Tb - Tm;
        T1q            = T1o - T1p;
        T1s            = T1o + T1p;
        T1k            = T1e - T1j;
        T1m            = T1e + T1j;
        ro[WS(os, 9)]  = T1t + T1w;
        ro[WS(os, 3)]  = T1t - T1w;
        io[0]          = T1x + T1y;
        io[WS(os, 6)]  = T1x - T1y;
        ro[WS(os, 8)]  = TX + TY;
        ro[WS(os, 2)]  = TX - TY;
        io[WS(os, 11)] = TF + TQ;
        io[WS(os, 5)]  = TF - TQ;
        ro[WS(os, 4)]  = T17 + T18;
        ro[WS(os, 10)] = T17 - T18;
        io[WS(os, 7)]  = T11 + T14;
        io[WS(os, 1)]  = T11 - T14;
        io[WS(os, 8)]  = T1r + T1s;
        io[WS(os, 2)]  = T1r - T1s;
        ro[WS(os, 11)] = T1n - T1q;
        ro[WS(os, 5)]  = T1n + T1q;
        io[WS(os, 4)]  = T1l + T1m;
        io[WS(os, 10)] = T1l - T1m;
        ro[WS(os, 7)]  = T19 - T1k;
        ro[WS(os, 1)]  = T19 + T1k;
    }
}

template <>
struct c2cb_traits<12, 1>
{
    static constexpr long_t flops           = 120;
    static constexpr long_t operations      = 96;
    static constexpr long_t memory_accesses = 46;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 1 -name c2cb
 * -standalone */

/*
 * This function contains 96 FP additions, 24 FP multiplications,
 * (or, 72 additions, 0 multiplications, 24 fused multiply/add),
 * 92 stack variables, 2 constants, and 46 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 1>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1b, T1a, T5, Ta, T1f, T1j, T1p, TG, TM, T10, Tb, T11, T16,
            T1l, TK;
        SIMD_FLOAT T1e, T19, TL, TB, Tl, Tw, T1r, TZ, T1d, T12, T1n, T1c, T1g,
            T1o, TH;
        SIMD_FLOAT T13, TN, TO, T1q, T1s, T1k, T1m;
        {
            SIMD_FLOAT Th, Tk, T1i, TF, TU, TS, Tp, Tc, TC, TX, T1h, Tm, T18,
                T14, TR;
            SIMD_FLOAT TV, Tu, Ty, Tr, Tz, Tf, Ti, Tj, TD, TE, T1, T2, T3, TP,
                Tn;
            SIMD_FLOAT To, T6, T7, T8, T4, Ts, TQ, Tt, T9, Td, Te, Tq, TI, TT,
                TW;
            SIMD_FLOAT T15, TJ, Tv, TA, T17, Tx, Tg, TY;
            Th            = ii[WS(is, 9)];
            Ti            = ii[WS(is, 1)];
            Tj            = ii[WS(is, 5)];
            T1b           = ri[WS(is, 9)];
            TD            = ri[WS(is, 5)];
            TE            = ri[WS(is, 1)];
            T1            = ri[0];
            T2            = ri[WS(is, 4)];
            T3            = ri[WS(is, 8)];
            TP            = ii[0];
            Tn            = ii[WS(is, 4)];
            To            = ii[WS(is, 8)];
            T6            = ri[WS(is, 6)];
            T7            = ri[WS(is, 10)];
            Tk            = Ti + Tj;
            T1i           = Ti - Tj;
            T8            = ri[WS(is, 2)];
            TF            = TD - TE;
            T1a           = TD + TE;
            TU            = ii[WS(is, 6)];
            T4            = T2 + T3;
            TS            = T3 - T2;
            Ts            = ii[WS(is, 10)];
            Tp            = Tn - To;
            TQ            = Tn + To;
            Tt            = ii[WS(is, 2)];
            Tc            = ii[WS(is, 3)];
            TC            = SIMD_FNMADD(KP500000000, Tk, Th);
            T9            = T7 + T8;
            TX            = T8 - T7;
            T1h           = SIMD_FNMADD(KP500000000, T1a, T1b);
            Td            = ii[WS(is, 7)];
            Te            = ii[WS(is, 11)];
            Tm            = SIMD_FNMADD(KP500000000, T4, T1);
            T5            = T1 + T4;
            T18           = ri[WS(is, 3)];
            T14           = TQ + TP;
            TR            = SIMD_FNMADD(KP500000000, TQ, TP);
            TV            = Ts + Tt;
            Tu            = Ts - Tt;
            Ty            = ri[WS(is, 11)];
            Tr            = SIMD_FNMADD(KP500000000, T9, T6);
            Ta            = T6 + T9;
            Tz            = ri[WS(is, 7)];
            Tf            = Td + Te;
            T1f           = Td - Te;
            Tq            = SIMD_FNMADD(KP866025403, Tp, Tm);
            TI            = SIMD_FMADD(KP866025403, Tp, Tm);
            T1j           = SIMD_FMADD(KP866025403, T1i, T1h);
            T1p           = SIMD_FNMADD(KP866025403, T1i, T1h);
            TG            = SIMD_FNMADD(KP866025403, TF, TC);
            TM            = SIMD_FMADD(KP866025403, TF, TC);
            TT            = SIMD_FMADD(KP866025403, TS, TR);
            T10           = SIMD_FNMADD(KP866025403, TS, TR);
            TW            = SIMD_FNMADD(KP500000000, TV, TU);
            T15           = TV + TU;
            TJ            = SIMD_FMADD(KP866025403, Tu, Tr);
            Tv            = SIMD_FNMADD(KP866025403, Tu, Tr);
            Tb            = T5 - Ta;
            TA            = Ty - Tz;
            T17           = Ty + Tz;
            Tx            = SIMD_FNMADD(KP500000000, Tf, Tc);
            Tg            = Tc + Tf;
            TY            = SIMD_FMADD(KP866025403, TX, TW);
            T11           = SIMD_FNMADD(KP866025403, TX, TW);
            T16           = T14 - T15;
            T1l           = TI + TJ;
            TK            = TI - TJ;
            T1e           = SIMD_FNMADD(KP500000000, T17, T18);
            T19           = T17 + T18;
            TL            = SIMD_FMADD(KP866025403, TA, Tx);
            TB            = SIMD_FNMADD(KP866025403, TA, Tx);
            Tl            = Tg - (Th + Tk);
            io[WS(os, 5)] = T14 + T15 - (Th + Tk) - Tg;
            Tw            = Tq - Tv;
            T1r           = Tq + Tv;
            TZ            = TT + TY;
            T1d           = TT - TY;
        }
        T12            = T10 + T11;
        T1n            = T10 - T11;
        T1c            = T19 - (T1a + T1b);
        ro[WS(os, 5)]  = T5 + Ta - (T1a + T1b) - T19;
        T1g            = SIMD_FMADD(KP866025403, T1f, T1e);
        T1o            = SIMD_FNMADD(KP866025403, T1f, T1e);
        TH             = TB - TG;
        T13            = TB + TG;
        TN             = TL - TM;
        TO             = TL + TM;
        ro[WS(os, 8)]  = Tb + Tl;
        ro[WS(os, 2)]  = Tb - Tl;
        io[WS(os, 2)]  = T16 + T1c;
        io[WS(os, 8)]  = T16 - T1c;
        T1q            = T1o - T1p;
        T1s            = T1o + T1p;
        T1k            = T1g - T1j;
        T1m            = T1g + T1j;
        io[WS(os, 7)]  = T13 + T12;
        io[WS(os, 1)]  = T12 - T13;
        ro[WS(os, 4)]  = Tw + TH;
        ro[WS(os, 10)] = Tw - TH;
        io[WS(os, 9)]  = TZ - TO;
        io[WS(os, 3)]  = TO + TZ;
        ro[0]          = TK + TN;
        ro[WS(os, 6)]  = TK - TN;
        ro[WS(os, 7)]  = T1r + T1s;
        ro[WS(os, 1)]  = T1r - T1s;
        io[WS(os, 4)]  = T1n - T1q;
        io[WS(os, 10)] = T1n + T1q;
        ro[WS(os, 9)]  = T1l - T1m;
        ro[WS(os, 3)]  = T1l + T1m;
        io[0]          = T1d - T1k;
        io[WS(os, 6)]  = T1d + T1k;
    }
}

template <>
struct c2cb_traits<12, 2>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 94;
    static constexpr long_t memory_accesses = 44;
    static constexpr long_t stack_vars      = 88;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 2 -name c2cb
 * -standalone */

/*
 * This function contains 94 FP additions, 24 FP multiplications,
 * (or, 70 additions, 0 multiplications, 24 fused multiply/add),
 * 88 stack variables, 2 constants, and 44 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 2>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tb, T19, Te, T18, T5, T16, T11, Ta, T1d, To, TG, T1n, T1h,
            TE, TK;
        SIMD_FLOAT TY, TQ, T12, TH, Tt, T14, Ty, T15, Tv, Tj, TZ, TV, T13, TI,
            T17;
        SIMD_FLOAT T1c, Tz, TJ, T10, T1b, Tu, T1l, TW, T1j, T1a, T1m, T1e, TF,
            TX, TL;
        SIMD_FLOAT T1i, T1k, T1o;
        {
            SIMD_FLOAT T1g, TD, TR, TP, Tn, Tf, TA, TU, T1f, Tk, TO, TS, Ts, Tw,
                Tp;
            SIMD_FLOAT Tx, Ti, Tc, Td, TB, TC, T1, T2, T3, TM, Tl, Tm, T6, T7,
                T8;
            SIMD_FLOAT T4, Tq, TN, Tr, T9, Tg, Th, TT;
            Tb  = ri[WS(is, 9)];
            Tc  = ri[WS(is, 1)];
            Td  = ri[WS(is, 5)];
            T19 = ii[WS(is, 9)];
            TB  = ii[WS(is, 1)];
            TC  = ii[WS(is, 5)];
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            TM  = ii[0];
            Tl  = ii[WS(is, 4)];
            Tm  = ii[WS(is, 8)];
            T6  = ri[WS(is, 6)];
            T7  = ri[WS(is, 10)];
            Te  = Tc + Td;
            T1g = Td - Tc;
            T8  = ri[WS(is, 2)];
            TD  = TB - TC;
            T18 = TB + TC;
            TR  = ii[WS(is, 6)];
            T4  = T2 + T3;
            TP  = T3 - T2;
            Tq  = ii[WS(is, 10)];
            Tn  = Tl - Tm;
            TN  = Tl + Tm;
            Tr  = ii[WS(is, 2)];
            Tf  = ri[WS(is, 3)];
            TA  = SIMD_FNMADD(KP500000000, Te, Tb);
            T9  = T7 + T8;
            TU  = T8 - T7;
            T1f = SIMD_FNMADD(KP500000000, T18, T19);
            Tg  = ri[WS(is, 7)];
            Th  = ri[WS(is, 11)];
            Tk  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            T16 = ii[WS(is, 3)];
            T11 = TN + TM;
            TO  = SIMD_FNMADD(KP500000000, TN, TM);
            TS  = Tq + Tr;
            Ts  = Tq - Tr;
            Tw  = ii[WS(is, 7)];
            Tp  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            Tx  = ii[WS(is, 11)];
            Ti  = Tg + Th;
            T1d = Th - Tg;
            To  = SIMD_FNMADD(KP866025403, Tn, Tk);
            TG  = SIMD_FMADD(KP866025403, Tn, Tk);
            T1n = SIMD_FMADD(KP866025403, T1g, T1f);
            T1h = SIMD_FNMADD(KP866025403, T1g, T1f);
            TE  = SIMD_FNMADD(KP866025403, TD, TA);
            TK  = SIMD_FMADD(KP866025403, TD, TA);
            TY  = SIMD_FMADD(KP866025403, TP, TO);
            TQ  = SIMD_FNMADD(KP866025403, TP, TO);
            TT  = SIMD_FNMADD(KP500000000, TS, TR);
            T12 = TS + TR;
            TH  = SIMD_FMADD(KP866025403, Ts, Tp);
            Tt  = SIMD_FNMADD(KP866025403, Ts, Tp);
            T14 = T5 - Ta;
            Ty  = Tw - Tx;
            T15 = Tw + Tx;
            Tv  = SIMD_FNMADD(KP500000000, Ti, Tf);
            Tj  = Tf + Ti;
            TZ  = SIMD_FMADD(KP866025403, TU, TT);
            TV  = SIMD_FNMADD(KP866025403, TU, TT);
            T13 = T11 - T12;
            TI  = TG + TH;
        }
        T17           = T15 + T16;
        T1c           = SIMD_FNMADD(KP500000000, T15, T16);
        Tz            = SIMD_FNMADD(KP866025403, Ty, Tv);
        TJ            = SIMD_FMADD(KP866025403, Ty, Tv);
        T10           = Tj - (Tb + Te);
        ro[WS(os, 4)] = T5 + Ta - (Tb + Te) - Tj;
        T1b           = To - Tt;
        Tu            = To + Tt;
        T1l           = TY + TZ;
        TW            = TQ - TV;
        T1j           = TQ + TV;
        T1a           = T17 - (T18 + T19);
        io[WS(os, 4)] = T11 + T12 - (T18 + T19) - T17;
        T1m           = SIMD_FMADD(KP866025403, T1d, T1c);
        T1e           = SIMD_FNMADD(KP866025403, T1d, T1c);
        TF            = Tz + TE;
        TX            = Tz - TE;
        io[WS(os, 5)] = TJ + TY - (TK + TZ);
        TL            = TJ + TK;
        io[WS(os, 7)] = T13 - T10;
        io[WS(os, 1)] = T10 + T13;
        ro[WS(os, 7)] = T14 + T1a;
        ro[WS(os, 1)] = T14 - T1a;
        T1i           = T1e - T1h;
        T1k           = T1e + T1h;
        ro[WS(os, 5)] = TG + T1n - (TH + T1m);
        T1o           = T1m + T1n;
        io[WS(os, 9)] = TX + TW;
        io[WS(os, 3)] = TW - TX;
        ro[WS(os, 6)] = Tu + TF;
        ro[0]         = Tu - TF;
        ro[WS(os, 2)] = TI + TL;
        ro[WS(os, 8)] = TI - TL;
        io[WS(os, 6)] = T1j + T1k;
        io[0]         = T1j - T1k;
        ro[WS(os, 9)] = T1b - T1i;
        ro[WS(os, 3)] = T1b + T1i;
        io[WS(os, 2)] = T1l + T1o;
        io[WS(os, 8)] = T1l - T1o;
    }
}

template <>
struct c2cb_traits<12, 3>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 92;
    static constexpr long_t memory_accesses = 42;
    static constexpr long_t stack_vars      = 84;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 3 -name c2cb
 * -standalone */

/*
 * This function contains 92 FP additions, 24 FP multiplications,
 * (or, 68 additions, 0 multiplications, 24 fused multiply/add),
 * 84 stack variables, 2 constants, and 42 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 3>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Th, T16, Tk, T17, T5, T13, Tq, Ta, T1a, T1j, T1e, TY, TM, TQ,
            TU;
        SIMD_FLOAT T10, Ty, Tv, T11, TB, Tb, TG, T14, TD, Tg, TV, TT, T12, T1f,
            T15;
        SIMD_FLOAT T19, TH, TX, Tl, TC, TW, T1h, T18, T1b, T1i, TN, TZ, T1k,
            T1g;
        {
            SIMD_FLOAT T1d, TL, Tr, TP, Tx, Tc, TI, TS, T1c, Tw, TO, Tu, TA, TE,
                Tz;
            SIMD_FLOAT TF, Tf, Ti, Tj, TJ, TK, T1, T2, T3, Tm, Tn, To, T6, T7,
                T8;
            SIMD_FLOAT T4, Ts, Tp, Tt, T9, Td, Te, TR;
            Th  = ii[WS(is, 9)];
            Ti  = ii[WS(is, 1)];
            Tj  = ii[WS(is, 5)];
            T16 = ri[WS(is, 9)];
            TJ  = ri[WS(is, 5)];
            TK  = ri[WS(is, 1)];
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            Tm  = ii[0];
            Tn  = ii[WS(is, 4)];
            To  = ii[WS(is, 8)];
            T6  = ri[WS(is, 6)];
            T7  = ri[WS(is, 10)];
            Tk  = Ti + Tj;
            T1d = Ti - Tj;
            T8  = ri[WS(is, 2)];
            TL  = TJ - TK;
            T17 = TK + TJ;
            Tr  = ii[WS(is, 6)];
            T4  = T2 + T3;
            TP  = T3 - T2;
            Ts  = ii[WS(is, 10)];
            Tx  = Tn - To;
            Tp  = Tn + To;
            Tt  = ii[WS(is, 2)];
            Tc  = ii[WS(is, 3)];
            TI  = SIMD_FNMADD(KP500000000, Tk, Th);
            T9  = T7 + T8;
            TS  = T8 - T7;
            T1c = SIMD_FNMADD(KP500000000, T17, T16);
            Td  = ii[WS(is, 7)];
            Te  = ii[WS(is, 11)];
            Tw  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            T13 = ri[WS(is, 3)];
            Tq  = Tm + Tp;
            TO  = SIMD_FNMADD(KP500000000, Tp, Tm);
            Tu  = Ts + Tt;
            TA  = Ts - Tt;
            TE  = ri[WS(is, 11)];
            Tz  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            TF  = ri[WS(is, 7)];
            Tf  = Td + Te;
            T1a = Td - Te;
            T1j = SIMD_FNMADD(KP866025403, T1d, T1c);
            T1e = SIMD_FMADD(KP866025403, T1d, T1c);
            TY  = SIMD_FMADD(KP866025403, TL, TI);
            TM  = SIMD_FNMADD(KP866025403, TL, TI);
            TQ  = SIMD_FNMADD(KP866025403, TP, TO);
            TU  = SIMD_FMADD(KP866025403, TP, TO);
            T10 = SIMD_FMADD(KP866025403, Tx, Tw);
            Ty  = SIMD_FNMADD(KP866025403, Tx, Tw);
            TR  = SIMD_FNMADD(KP500000000, Tu, Tr);
            Tv  = Tr + Tu;
            T11 = SIMD_FMADD(KP866025403, TA, Tz);
            TB  = SIMD_FNMADD(KP866025403, TA, Tz);
            Tb  = T5 - Ta;
            TG  = TE - TF;
            T14 = TF + TE;
            TD  = SIMD_FNMADD(KP500000000, Tf, Tc);
            Tg  = Tc + Tf;
            TV  = SIMD_FMADD(KP866025403, TS, TR);
            TT  = SIMD_FNMADD(KP866025403, TS, TR);
            T12 = Tq - Tv;
            T1f = T10 + T11;
        }
        T15           = T13 + T14;
        T19           = SIMD_FNMADD(KP500000000, T14, T13);
        TH            = SIMD_FNMADD(KP866025403, TG, TD);
        TX            = SIMD_FMADD(KP866025403, TG, TD);
        Tl            = Tg - (Th + Tk);
        io[WS(os, 3)] = Tq + Tv - (Th + Tk) - Tg;
        TC            = Ty - TB;
        TW            = TU + TV;
        T1h           = TQ - TT;
        T18           = T15 - (T16 + T17);
        ro[WS(os, 3)] = T5 + Ta - (T16 + T17) - T15;
        T1b           = SIMD_FMADD(KP866025403, T1a, T19);
        T1i           = SIMD_FNMADD(KP866025403, T1a, T19);
        io[WS(os, 5)] = TQ + TT + TH + TM;
        TN            = TH - TM;
        ro[WS(os, 4)] = T10 + TY - (T11 + TX);
        TZ            = TX + TY;
        ro[WS(os, 6)] = Tb + Tl;
        ro[0]         = Tb - Tl;
        io[0]         = T12 + T18;
        io[WS(os, 6)] = T12 - T18;
        ro[WS(os, 5)] = Ty + TB + T1i + T1j;
        T1k           = T1i - T1j;
        io[WS(os, 4)] = TU + T1b - (TV + T1e);
        T1g           = T1b + T1e;
        ro[WS(os, 2)] = TC + TN;
        ro[WS(os, 8)] = TC - TN;
        io[WS(os, 1)] = TW + TZ;
        io[WS(os, 7)] = TW - TZ;
        io[WS(os, 2)] = T1h - T1k;
        io[WS(os, 8)] = T1h + T1k;
        ro[WS(os, 1)] = T1f + T1g;
        ro[WS(os, 7)] = T1f - T1g;
    }
}

template <>
struct c2cb_traits<12, 4>
{
    static constexpr long_t flops           = 114;
    static constexpr long_t operations      = 90;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 80;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 4 -name c2cb
 * -standalone */

/*
 * This function contains 90 FP additions, 24 FP multiplications,
 * (or, 66 additions, 0 multiplications, 24 fused multiply/add),
 * 80 stack variables, 2 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 4>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T11, T5, TY, Ta, TZ, T10, T17, To, TE, TF, Tt, TI, TD, TU,
            TO;
        SIMD_FLOAT TT, TV, TG, T1f, T1b, T16, T14, T15, Ty, TH, T1d, T1e, T18,
            TX, TJ;
        SIMD_FLOAT TW, T1g, T1c;
        {
            SIMD_FLOAT Tb, TN, Tn, TS, Ts, Tg, Tk, Te, T1a, TM, Th, Ti, Tp, T13,
                Tv;
            SIMD_FLOAT TR, TC, Tw, T1, T2, T3, TK, Tl, Tm, T6, T7, T8, TP, Tq,
                Tr;
            SIMD_FLOAT Tc, T4, Td, TL, T9, TA, TQ, TB, Tz, Tf, Tj, T19, Tx, T12,
                Tu;
            T1            = ri[0];
            T2            = ri[WS(is, 4)];
            T3            = ri[WS(is, 8)];
            TK            = ii[0];
            Tl            = ii[WS(is, 4)];
            Tm            = ii[WS(is, 8)];
            T6            = ri[WS(is, 6)];
            T7            = ri[WS(is, 10)];
            T8            = ri[WS(is, 2)];
            TP            = ii[WS(is, 6)];
            Tq            = ii[WS(is, 10)];
            Tr            = ii[WS(is, 2)];
            Tb            = ri[WS(is, 9)];
            Tc            = ri[WS(is, 1)];
            T4            = T2 + T3;
            TN            = T3 - T2;
            Td            = ri[WS(is, 5)];
            Tn            = Tl - Tm;
            TL            = Tl + Tm;
            T11           = ii[WS(is, 9)];
            T9            = T7 + T8;
            TS            = T8 - T7;
            TA            = ii[WS(is, 1)];
            Ts            = Tq - Tr;
            TQ            = Tq + Tr;
            TB            = ii[WS(is, 5)];
            Tg            = ri[WS(is, 3)];
            Tk            = SIMD_FNMADD(KP500000000, T4, T1);
            T5            = T1 + T4;
            Te            = Tc + Td;
            T1a           = Td - Tc;
            TY            = TL + TK;
            TM            = SIMD_FNMADD(KP500000000, TL, TK);
            Th            = ri[WS(is, 7)];
            Ti            = ri[WS(is, 11)];
            Tp            = SIMD_FNMADD(KP500000000, T9, T6);
            Ta            = T6 + T9;
            T13           = ii[WS(is, 3)];
            Tv            = ii[WS(is, 7)];
            TZ            = TQ + TP;
            TR            = SIMD_FNMADD(KP500000000, TQ, TP);
            TC            = TA - TB;
            T10           = TA + TB;
            Tw            = ii[WS(is, 11)];
            Tz            = SIMD_FNMADD(KP500000000, Te, Tb);
            Tf            = Tb + Te;
            Tj            = Th + Ti;
            T17           = Ti - Th;
            To            = SIMD_FNMADD(KP866025403, Tn, Tk);
            TE            = SIMD_FMADD(KP866025403, Tn, Tk);
            TF            = SIMD_FMADD(KP866025403, Ts, Tp);
            Tt            = SIMD_FNMADD(KP866025403, Ts, Tp);
            T19           = SIMD_FNMADD(KP500000000, T10, T11);
            Tx            = Tv - Tw;
            T12           = Tv + Tw;
            TI            = SIMD_FMADD(KP866025403, TC, Tz);
            TD            = SIMD_FNMADD(KP866025403, TC, Tz);
            TU            = SIMD_FNMADD(KP866025403, TN, TM);
            TO            = SIMD_FMADD(KP866025403, TN, TM);
            TT            = SIMD_FMADD(KP866025403, TS, TR);
            TV            = SIMD_FNMADD(KP866025403, TS, TR);
            Tu            = SIMD_FNMADD(KP500000000, Tj, Tg);
            io[WS(os, 5)] = Tf + TY - TZ - (Tg + Tj);
            ro[WS(os, 2)] = T5 + Ta - Tf - (Tg + Tj);
            TG            = TE + TF;
            T1f           = SIMD_FNMADD(KP866025403, T1a, T19);
            T1b           = SIMD_FMADD(KP866025403, T1a, T19);
            T16           = SIMD_FNMADD(KP500000000, T12, T13);
            T14           = T12 + T13;
            T15           = TO + TT;
            Ty            = SIMD_FNMADD(KP866025403, Tx, Tu);
            TH            = SIMD_FMADD(KP866025403, Tx, Tu);
            T1d           = To - Tt;
        }
        ro[WS(os, 5)] = T5 + T14 - (T10 + T11) - Ta;
        io[WS(os, 2)] = TY + TZ - (T10 + T11) - T14;
        T1e           = SIMD_FNMADD(KP866025403, T17, T16);
        T18           = SIMD_FMADD(KP866025403, T17, T16);
        ro[WS(os, 4)] = To + Tt + Ty + TD;
        TX            = Ty - TD;
        io[WS(os, 3)] = TH + TO - (TI + TT);
        TJ            = TH + TI;
        TW            = TU - TV;
        io[WS(os, 4)] = TU + TV + T1e + T1f;
        T1g           = T1e - T1f;
        ro[WS(os, 3)] = TE + T1b - (TF + T18);
        T1c           = T18 + T1b;
        ro[0]         = TG + TJ;
        ro[WS(os, 6)] = TG - TJ;
        io[WS(os, 7)] = TX + TW;
        io[WS(os, 1)] = TW - TX;
        ro[WS(os, 7)] = T1d - T1g;
        ro[WS(os, 1)] = T1d + T1g;
        io[0]         = T15 + T1c;
        io[WS(os, 6)] = T15 - T1c;
    }
}

template <>
struct c2cb_traits<12, 5>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 90;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 74;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 5 -name c2cb
 * -standalone */

/*
 * This function contains 90 FP additions, 26 FP multiplications,
 * (or, 64 additions, 0 multiplications, 26 fused multiply/add),
 * 74 stack variables, 2 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 5>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TX, Tb, Ty, TY, T5, Te, T15, TV, Tv, Ta, TO, TR, To, TG, TT;
        SIMD_FLOAT TN, T17, T11, T14, T1a, TP, Ts, TE, TH, Tz, Tj, Tp, T18, TQ,
            TW;
        SIMD_FLOAT TI, Tt, TF, T19, TU, TS, Tu, T16;
        {
            SIMD_FLOAT TM, Tn, T12, T10, Tf, Tk, TL, Tg, Th, Tq, TZ, TD, T13,
                Tr, T1;
            SIMD_FLOAT T2, T3, TJ, Tl, Tm, T6, T7, T8, Tw, Tx, Tc, T4, Td, TK,
                T9;
            SIMD_FLOAT TB, TC, TA, Ti;
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            TJ  = ii[0];
            Tl  = ii[WS(is, 4)];
            Tm  = ii[WS(is, 8)];
            T6  = ii[WS(is, 3)];
            T7  = ii[WS(is, 7)];
            T8  = ii[WS(is, 11)];
            TX  = ri[WS(is, 3)];
            Tw  = ri[WS(is, 7)];
            Tx  = ri[WS(is, 11)];
            Tb  = ii[WS(is, 9)];
            Tc  = ii[WS(is, 1)];
            T4  = T2 + T3;
            TM  = T3 - T2;
            Td  = ii[WS(is, 5)];
            Tn  = Tl - Tm;
            TK  = Tl + Tm;
            T12 = ri[WS(is, 9)];
            T9  = T7 + T8;
            T10 = T7 - T8;
            TB  = ri[WS(is, 5)];
            Ty  = Tw - Tx;
            TY  = Tx + Tw;
            TC  = ri[WS(is, 1)];
            Tf  = ri[WS(is, 6)];
            Tk  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            Te  = Tc + Td;
            T15 = Td - Tc;
            TV  = TK + TJ;
            TL  = SIMD_FNMADD(KP500000000, TK, TJ);
            Tg  = ri[WS(is, 10)];
            Th  = ri[WS(is, 2)];
            Tv  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            TO  = ii[WS(is, 6)];
            Tq  = ii[WS(is, 10)];
            TZ  = SIMD_FNMADD(KP500000000, TY, TX);
            TD  = TB - TC;
            T13 = TB + TC;
            Tr  = ii[WS(is, 2)];
            TA  = SIMD_FNMADD(KP500000000, Te, Tb);
            Ti  = Tg + Th;
            TR  = Th - Tg;
            To  = SIMD_FNMADD(KP866025403, Tn, Tk);
            TG  = SIMD_FMADD(KP866025403, Tn, Tk);
            TT  = SIMD_FMADD(KP866025403, TM, TL);
            TN  = SIMD_FNMADD(KP866025403, TM, TL);
            T17 = SIMD_FNMADD(KP866025403, T10, TZ);
            T11 = SIMD_FMADD(KP866025403, T10, TZ);
            T14 = SIMD_FNMADD(KP500000000, T13, T12);
            T1a = T13 + T12;
            TP  = Tq + Tr;
            Ts  = Tq - Tr;
            TE  = SIMD_FNMADD(KP866025403, TD, TA);
            TH  = SIMD_FMADD(KP866025403, TD, TA);
            Tz  = SIMD_FMADD(KP866025403, Ty, Tv);
            Tj  = Tf + Ti;
            Tp  = SIMD_FNMADD(KP500000000, Ti, Tf);
        }
        T18           = SIMD_FMADD(KP866025403, T15, T14);
        TQ            = SIMD_FNMADD(KP500000000, TP, TO);
        TW            = TP + TO;
        ro[WS(os, 1)] = T5 + Tj - T1a - (TY + TX);
        ro[WS(os, 4)] = T5 + Ta - (Tb + Te) - Tj;
        TI            = SIMD_FMADD(KP866025403, Ts, Tp);
        Tt            = SIMD_FNMADD(KP866025403, Ts, Tp);
        TF            = Tz - TE;
        T19           = T17 - T18;
        io[WS(os, 1)] = TV + TW - (Tb + Te) - Ta;
        io[WS(os, 4)] = TV + T1a - (TY + TX) - TW;
        TU            = SIMD_FMADD(KP866025403, TR, TQ);
        TS            = SIMD_FNMADD(KP866025403, TR, TQ);
        ro[WS(os, 3)] = To + Tt + T17 + T18;
        Tu            = To - Tt;
        ro[WS(os, 5)] = TG + TI - (SIMD_FNMADD(KP866025403, T15, T14)) - T11;
        ro[WS(os, 2)] = TG + TH - (SIMD_FNMADD(KP866025403, Ty, Tv)) - TI;
        io[WS(os, 3)] = Tz + TE + TN + TS;
        T16           = TN - TS;
        io[WS(os, 5)] = TT + TU - TH - (SIMD_FNMADD(KP866025403, Ty, Tv));
        io[WS(os, 2)] = TT + T11 - (SIMD_FNMADD(KP866025403, T15, T14)) - TU;
        ro[0]         = Tu + TF;
        ro[WS(os, 6)] = Tu - TF;
        io[0]         = T16 - T19;
        io[WS(os, 6)] = T16 + T19;
    }
}

template <>
struct c2cb_traits<12, 6>
{
    static constexpr long_t flops           = 114;
    static constexpr long_t operations      = 88;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 70;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 6 -name c2cb
 * -standalone */

/*
 * This function contains 88 FP additions, 26 FP multiplications,
 * (or, 62 additions, 0 multiplications, 26 fused multiply/add),
 * 70 stack variables, 2 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 6>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TV, T5, To, Ta, Tt, TF, TW, TC, T14, TP, Tw, TO, TU, TA, TL;
        SIMD_FLOAT TT, TR, TI, Tx, T12, T16, T13, TZ, TS, TQ, TB, T15;
        {
            SIMD_FLOAT Tb, Tv, TK, TH, TN, Tg, TJ, Te, T11, Tu, Th, Ti, TM, TX,
                Ty;
            SIMD_FLOAT TG, Tz, T1, T2, T3, Tk, Tl, Tm, T6, T7, T8, Tp, Tq, Tr,
                Tc;
            SIMD_FLOAT T4, Td, Tn, T9, TD, Ts, TE, Tf, Tj, T10, TY;
            T1            = ri[0];
            T2            = ri[WS(is, 4)];
            T3            = ri[WS(is, 8)];
            Tk            = ii[0];
            Tl            = ii[WS(is, 4)];
            Tm            = ii[WS(is, 8)];
            T6            = ri[WS(is, 6)];
            T7            = ri[WS(is, 10)];
            T8            = ri[WS(is, 2)];
            Tp            = ii[WS(is, 6)];
            Tq            = ii[WS(is, 10)];
            Tr            = ii[WS(is, 2)];
            Tb            = ri[WS(is, 9)];
            Tc            = ri[WS(is, 1)];
            T4            = T2 + T3;
            Tv            = T3 - T2;
            Td            = ri[WS(is, 5)];
            TK            = Tl - Tm;
            Tn            = Tl + Tm;
            TV            = ii[WS(is, 9)];
            T9            = T7 + T8;
            TH            = T8 - T7;
            TD            = ii[WS(is, 5)];
            TN            = Tq - Tr;
            Ts            = Tq + Tr;
            TE            = ii[WS(is, 1)];
            Tg            = ri[WS(is, 3)];
            TJ            = SIMD_FNMADD(KP500000000, T4, T1);
            T5            = T1 + T4;
            Te            = Tc + Td;
            T11           = Td - Tc;
            To            = Tk + Tn;
            Tu            = SIMD_FNMADD(KP500000000, Tn, Tk);
            Th            = ri[WS(is, 7)];
            Ti            = ri[WS(is, 11)];
            TM            = SIMD_FNMADD(KP500000000, T9, T6);
            Ta            = T6 + T9;
            TX            = ii[WS(is, 3)];
            Ty            = ii[WS(is, 7)];
            Tt            = Tp + Ts;
            TG            = SIMD_FNMADD(KP500000000, Ts, Tp);
            TF            = TD - TE;
            TW            = TE + TD;
            Tz            = ii[WS(is, 11)];
            TC            = SIMD_FNMADD(KP500000000, Te, Tb);
            Tf            = Tb + Te;
            Tj            = Th + Ti;
            T14           = Th - Ti;
            TP            = SIMD_FNMADD(KP866025403, Tv, Tu);
            Tw            = SIMD_FMADD(KP866025403, Tv, Tu);
            TO            = SIMD_FMADD(KP866025403, TN, TM);
            TU            = SIMD_FNMADD(KP866025403, TN, TM);
            T10           = SIMD_FNMADD(KP500000000, TW, TV);
            TA            = Ty - Tz;
            TY            = Ty + Tz;
            TL            = SIMD_FMADD(KP866025403, TK, TJ);
            TT            = SIMD_FNMADD(KP866025403, TK, TJ);
            TR            = SIMD_FNMADD(KP866025403, TH, TG);
            TI            = SIMD_FMADD(KP866025403, TH, TG);
            Tx            = SIMD_FNMADD(KP500000000, Tj, Tg);
            io[WS(os, 3)] = Tf + To - Tt - (Tg + Tj);
            ro[0]         = T5 + Ta - Tf - (Tg + Tj);
            T12           = SIMD_FMADD(KP866025403, T11, T10);
            T16           = SIMD_FNMADD(KP866025403, T11, T10);
            T13           = SIMD_FNMADD(KP500000000, TY, TX);
            TZ            = TX + TY;
            TS            = SIMD_FMADD(KP866025403, TF, TC);
        }
        TQ            = SIMD_FNMADD(KP866025403, TA, Tx);
        TB            = SIMD_FMADD(KP866025403, TA, Tx);
        ro[WS(os, 3)] = T5 + TZ - (TV + TW) - Ta;
        io[0]         = To + Tt - (TV + TW) - TZ;
        T15           = SIMD_FMADD(KP866025403, T14, T13);
        io[WS(os, 4)] = Tw + TI - T12 - (SIMD_FNMADD(KP866025403, T14, T13));
        ro[WS(os, 1)] = TL + T12 - (SIMD_FNMADD(KP866025403, T14, T13)) - TO;
        ro[WS(os, 2)] = TT + TU + TQ + TS;
        io[WS(os, 5)] = TP + TQ - (TR + TS);
        ro[WS(os, 4)] = TL + TO - (SIMD_FNMADD(KP866025403, TF, TC)) - TB;
        io[WS(os, 1)] = Tw + TB - (SIMD_FNMADD(KP866025403, TF, TC)) - TI;
        io[WS(os, 2)] = TP + TR + T15 + T16;
        ro[WS(os, 5)] = TT + T16 - (TU + T15);
    }
}

template <>
struct c2cb_traits<12, 7>
{
    static constexpr long_t flops           = 106;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 64;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 7 -name c2cb
 * -standalone */

/*
 * This function contains 80 FP additions, 26 FP multiplications,
 * (or, 54 additions, 0 multiplications, 26 fused multiply/add),
 * 64 stack variables, 2 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 7>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, TE, T5, TQ, Td, T4, TF, TV, T8, Tz, TR, Tc, Tb, TY, Tw;
        SIMD_FLOAT TJ, TW, Tl, TB, TO, TI, Tg, TM, TA, TU, TZ, TX, Tu, TK, Tq;
        SIMD_FLOAT TC, TH, Tk, TT, Th, TG, Te, Tf, Ts, TS, Tp, Tt, T2, T3, Ti;
        SIMD_FLOAT Tj, T6, T7, Tx, Ty, T9, Ta, Tn, To, Tm, Tr, T10, TL, TD, Tv;
        SIMD_FLOAT TN, TP;
        T1            = ri[0];
        T2            = ri[WS(is, 4)];
        T3            = ri[WS(is, 8)];
        TE            = ii[0];
        Ti            = ii[WS(is, 4)];
        Tj            = ii[WS(is, 8)];
        T5            = ii[WS(is, 3)];
        T6            = ii[WS(is, 7)];
        T7            = ii[WS(is, 11)];
        TQ            = ri[WS(is, 3)];
        Tx            = ri[WS(is, 7)];
        Ty            = ri[WS(is, 11)];
        Td            = ii[WS(is, 9)];
        T9            = ii[WS(is, 1)];
        T4            = T2 + T3;
        TH            = T3 - T2;
        Ta            = ii[WS(is, 5)];
        Tk            = Ti - Tj;
        TF            = Ti + Tj;
        TV            = ri[WS(is, 9)];
        T8            = T6 + T7;
        TT            = T6 - T7;
        Tn            = ri[WS(is, 5)];
        Tz            = Tx - Ty;
        TR            = Ty + Tx;
        To            = ri[WS(is, 1)];
        Tc            = ri[WS(is, 6)];
        Th            = SIMD_FNMADD(KP500000000, T4, T1);
        Tb            = T9 + Ta;
        TY            = Ta - T9;
        TG            = SIMD_FNMADD(KP500000000, TF, TE);
        Te            = ri[WS(is, 10)];
        Tf            = ri[WS(is, 2)];
        Tw            = SIMD_FNMADD(KP500000000, T8, T5);
        TJ            = ii[WS(is, 6)];
        Ts            = ii[WS(is, 10)];
        TS            = SIMD_FNMADD(KP500000000, TR, TQ);
        Tp            = Tn - To;
        TW            = Tn + To;
        Tt            = ii[WS(is, 2)];
        Tl            = SIMD_FNMADD(KP866025403, Tk, Th);
        TB            = SIMD_FMADD(KP866025403, Tk, Th);
        Tm            = SIMD_FNMADD(KP500000000, Tb, Td);
        TO            = SIMD_FNMADD(KP866025403, TH, TG);
        TI            = SIMD_FMADD(KP866025403, TH, TG);
        Tg            = Te + Tf;
        TM            = Tf - Te;
        TA            = SIMD_FMADD(KP866025403, Tz, Tw);
        TU            = SIMD_FMADD(KP866025403, TT, TS);
        TZ            = SIMD_FNMADD(KP866025403, TT, TS);
        TX            = SIMD_FNMADD(KP500000000, TW, TV);
        Tu            = Ts - Tt;
        TK            = Ts + Tt;
        Tq            = SIMD_FNMADD(KP866025403, Tp, Tm);
        TC            = SIMD_FMADD(KP866025403, Tp, Tm);
        ro[WS(os, 2)] = T1 + T4 + T5 + T8 - Tb - (Tc + Td) - Tg;
        Tr            = SIMD_FNMADD(KP500000000, Tg, Tc);
        T10           = SIMD_FMADD(KP866025403, TY, TX);
        io[WS(os, 2)] = TF + TW + TE + TV - (TJ + TQ) - TR - TK;
        TL            = SIMD_FNMADD(KP500000000, TK, TJ);
        TD            = SIMD_FMADD(KP866025403, Tu, Tr);
        Tv            = SIMD_FNMADD(KP866025403, Tu, Tr);
        TN            = SIMD_FMADD(KP866025403, TM, TL);
        TP            = SIMD_FNMADD(KP866025403, TM, TL);
        ro[WS(os, 1)] = Tl + Tv + TZ + T10;
        ro[WS(os, 4)] = Tl + Tq - (Tv + TA);
        ro[WS(os, 3)] = TB + TD - (SIMD_FNMADD(KP866025403, TY, TX)) - TU;
        ro[0]         = TB + TC - (SIMD_FNMADD(KP866025403, Tz, Tw)) - TD;
        io[WS(os, 1)] = TA + Tq + TO + TP;
        io[WS(os, 4)] = TO + TZ - (TP + T10);
        io[WS(os, 3)] = TI + TN - TC - (SIMD_FNMADD(KP866025403, Tz, Tw));
        io[0]         = TI + TU - (SIMD_FNMADD(KP866025403, TY, TX)) - TN;
    }
}

template <>
struct c2cb_traits<12, 8>
{
    static constexpr long_t flops           = 90;
    static constexpr long_t operations      = 72;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 58;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 8 -name c2cb
 * -standalone */

/*
 * This function contains 72 FP additions, 18 FP multiplications,
 * (or, 54 additions, 0 multiplications, 18 fused multiply/add),
 * 58 stack variables, 2 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 8>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, TC, Ta, TD, Tj, T4, TG, T8, TB, TM, Td, TJ, Th, TE, Ts;
        SIMD_FLOAT T5, Tm, TP, TF, Tt, Tu, Te, TN, Tx, TI, Tq, TL, Ty, T9, Tn;
        SIMD_FLOAT TH, T2, T3, T6, T7, Tb, Tc, Tf, Tg, Tk, Tl, To, Tp, TQ, Tv;
        SIMD_FLOAT Ti, TK, TR, TO, Tz, Tr, Tw, TT, TS, TA, TU;
        T1            = ri[0];
        T2            = ri[WS(is, 4)];
        T3            = ri[WS(is, 8)];
        TC            = ii[0];
        T6            = ii[WS(is, 4)];
        T7            = ii[WS(is, 8)];
        Ta            = ri[WS(is, 6)];
        Tb            = ri[WS(is, 10)];
        Tc            = ri[WS(is, 2)];
        TD            = ii[WS(is, 6)];
        Tf            = ii[WS(is, 10)];
        Tg            = ii[WS(is, 2)];
        Tj            = ri[WS(is, 3)];
        Tk            = ri[WS(is, 7)];
        T4            = T2 + T3;
        TG            = T3 - T2;
        Tl            = ri[WS(is, 11)];
        T8            = T6 - T7;
        TB            = T6 + T7;
        TM            = ii[WS(is, 3)];
        Td            = Tb + Tc;
        TJ            = Tc - Tb;
        To            = ii[WS(is, 11)];
        Th            = Tf - Tg;
        TE            = Tf + Tg;
        Tp            = ii[WS(is, 7)];
        Ts            = ri[WS(is, 9)];
        T5            = SIMD_FNMADD(KP500000000, T4, T1);
        Tm            = Tk + Tl;
        TP            = Tk - Tl;
        TF            = SIMD_FNMADD(KP500000000, TB, TC);
        Tt            = ri[WS(is, 1)];
        Tu            = ri[WS(is, 5)];
        Te            = SIMD_FNMADD(KP500000000, Td, Ta);
        TN            = ii[WS(is, 9)];
        Tx            = ii[WS(is, 5)];
        TI            = SIMD_FNMADD(KP500000000, TE, TD);
        Tq            = To - Tp;
        TL            = To + Tp;
        Ty            = ii[WS(is, 1)];
        T9            = SIMD_FNMADD(KP866025403, T8, T5);
        Tn            = SIMD_FNMADD(KP500000000, Tm, Tj);
        TH            = SIMD_FNMADD(KP866025403, TG, TF);
        TQ            = Tt - Tu;
        Tv            = Tt + Tu;
        Ti            = SIMD_FNMADD(KP866025403, Th, Te);
        TK            = SIMD_FNMADD(KP866025403, TJ, TI);
        TR            = SIMD_FNMADD(KP500000000, TL, TM);
        TO            = Tx + Ty;
        Tz            = Tx - Ty;
        Tr            = SIMD_FMADD(KP866025403, Tq, Tn);
        io[WS(os, 1)] = TB + Ts + Tv + TC - (Tj + TD) - Tm - TE;
        Tw            = SIMD_FNMADD(KP500000000, Tv, Ts);
        TT            = SIMD_FMADD(KP866025403, TP, TR);
        ro[WS(os, 1)] = T1 + T4 + TL + TM - (Ta + TN) - TO - Td;
        TS            = SIMD_FNMADD(KP500000000, TO, TN);
        TA            = SIMD_FMADD(KP866025403, Tz, Tw);
        ro[WS(os, 2)] =
            SIMD_FMADD(KP866025403, T8 + Th + Tq + Tz, T5) + Te - (Tn + Tw);
        TU = SIMD_FMADD(KP866025403, TQ, TS);
        io[WS(os, 2)] =
            SIMD_FMADD(KP866025403, TG + TJ + TP + TQ, TF) + TI - (TR + TS);
        io[WS(os, 3)] = Tr + TH - (TA + TK);
        ro[0]         = T9 + Ti + Tr + TA;
        ro[WS(os, 3)] = T9 + TU - (Ti + TT);
        io[0]         = TH + TK + TT + TU;
    }
}

template <>
struct c2cb_traits<12, 9>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 60;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 56;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 9 -name c2cb
 * -standalone */

/*
 * This function contains 60 FP additions, 18 FP multiplications,
 * (or, 42 additions, 0 multiplications, 18 fused multiply/add),
 * 56 stack variables, 2 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 9>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T1, Th, T5, TN, To, Tc, Td, TK, Te, T8, TL, TQ, Tb, TM, TB;
        SIMD_FLOAT Tp, T4, TE, Ts, Tf, Tj, Tk, TP, Ty, TO, Tx, T6, T7, Tv, Tw;
        SIMD_FLOAT T9, Ta, Tz, TA, T2, T3, Tq, Tr, TR, TC, TF, Tt, Tg, Ti, Tl;
        SIMD_FLOAT TH, TS, TD, TG, Tu, TI, Tm, TJ, Tn;
        T1            = ri[0];
        Th            = ii[0];
        T5            = ii[WS(is, 3)];
        TN            = ri[WS(is, 3)];
        To            = ii[WS(is, 6)];
        Tc            = ri[WS(is, 6)];
        Td            = ii[WS(is, 9)];
        TK            = ri[WS(is, 9)];
        T6            = ii[WS(is, 7)];
        T7            = ii[WS(is, 11)];
        Tv            = ri[WS(is, 1)];
        Tw            = ri[WS(is, 5)];
        T9            = ii[WS(is, 1)];
        Ta            = ii[WS(is, 5)];
        Tz            = ri[WS(is, 11)];
        TA            = ri[WS(is, 7)];
        T2            = ri[WS(is, 4)];
        T3            = ri[WS(is, 8)];
        Tq            = ii[WS(is, 10)];
        Tr            = ii[WS(is, 2)];
        Te            = ri[WS(is, 10)];
        TO            = T7 - T6;
        T8            = T6 + T7;
        TL            = Tv + Tw;
        Tx            = Tv - Tw;
        TQ            = T9 - Ta;
        Tb            = T9 + Ta;
        TM            = TA + Tz;
        TB            = Tz - TA;
        Tp            = T3 - T2;
        T4            = T2 + T3;
        TE            = Tq - Tr;
        Ts            = Tq + Tr;
        Tf            = ri[WS(is, 2)];
        Tj            = ii[WS(is, 4)];
        Tk            = ii[WS(is, 8)];
        TP            = SIMD_FMADD(KP577350269, TL, TO);
        Ty            = SIMD_FMADD(KP577350269, T8, Tx);
        TR            = SIMD_FNMADD(KP577350269, TM, TQ);
        TC            = SIMD_FNMADD(KP577350269, Tb, TB);
        TF            = SIMD_FNMADD(KP577350269, T4, TE);
        Tt            = SIMD_FNMADD(KP577350269, Ts, Tp);
        Tg            = Te + Tf;
        Ti            = Tf - Te;
        Tl            = Tj + Tk;
        TH            = Tj - Tk;
        TS            = SIMD_FMADD(KP866025403, TR, TN);
        TD            = SIMD_FMADD(KP866025403, TC, Td);
        TG            = SIMD_FMADD(KP866025403, TF, T1);
        Tu            = SIMD_FMADD(KP866025403, Tt, To);
        ro[0]         = T1 + T4 + T5 + T8 - Tb - (Tc + Td) - Tg;
        TI            = SIMD_FNMADD(KP577350269, Tg, TH);
        io[0]         = Th + Tl + TK + TL - TM - (To + TN) - Ts;
        Tm            = SIMD_FNMADD(KP577350269, Tl, Ti);
        TJ            = SIMD_FMADD(KP866025403, TI, Tc);
        Tn            = SIMD_FMADD(KP866025403, Tm, Th);
        ro[WS(os, 2)] = TG + TD - (SIMD_FNMADD(KP866025403, Ty, T5)) - TJ;
        ro[WS(os, 1)] = TJ + TG - (SIMD_FNMADD(KP866025403, TP, TK)) - TS;
        io[WS(os, 2)] = Tn + TS - (SIMD_FNMADD(KP866025403, TP, TK)) - Tu;
        io[WS(os, 1)] = Tn + Tu - (SIMD_FNMADD(KP866025403, Ty, T5)) - TD;
    }
}

template <>
struct c2cb_traits<12, 10>
{
    static constexpr long_t flops           = 64;
    static constexpr long_t operations      = 46;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 56;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 10 -name c2cb
 * -standalone */

/*
 * This function contains 46 FP additions, 18 FP multiplications,
 * (or, 28 additions, 0 multiplications, 18 fused multiply/add),
 * 56 stack variables, 2 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 10>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T1, TF, Ta, TA, TP, Tj, Ts, TK, Tb, TM, Tm, TL, Tp, TC, T4;
        SIMD_FLOAT TB, T7, Tc, Te, Tf, TS, Tz, TR, Tv, TQ, Ty, Tt, Tu, Tw, Tx;
        SIMD_FLOAT Tk, Tl, Tn, To, T2, T3, T5, T6, TN, Tq, TD, T8, Td, TH, Tg;
        SIMD_FLOAT TG, TO, Tr, TE, T9, TI, Th, TJ, Ti;
        T1            = ri[WS(is, 6)];
        TF            = ii[WS(is, 6)];
        Ta            = ri[0];
        TA            = ii[0];
        TP            = ii[WS(is, 3)];
        Tj            = ri[WS(is, 3)];
        Ts            = ri[WS(is, 9)];
        TK            = ii[WS(is, 9)];
        Tt            = ii[WS(is, 11)];
        Tu            = ii[WS(is, 7)];
        Tw            = ri[WS(is, 1)];
        Tx            = ri[WS(is, 5)];
        Tk            = ii[WS(is, 1)];
        Tl            = ii[WS(is, 5)];
        Tn            = ri[WS(is, 7)];
        To            = ri[WS(is, 11)];
        T2            = ii[WS(is, 4)];
        T3            = ii[WS(is, 8)];
        T5            = ri[WS(is, 10)];
        T6            = ri[WS(is, 2)];
        Tb            = ii[WS(is, 10)];
        TR            = Tu + Tt;
        Tv            = Tt - Tu;
        TQ            = Tw - Tx;
        Ty            = Tw + Tx;
        TM            = Tk + Tl;
        Tm            = Tk - Tl;
        TL            = To - Tn;
        Tp            = Tn + To;
        TC            = T2 + T3;
        T4            = T2 - T3;
        TB            = T6 - T5;
        T7            = T5 + T6;
        Tc            = ii[WS(is, 2)];
        Te            = ri[WS(is, 4)];
        Tf            = ri[WS(is, 8)];
        TS            = SIMD_FMADD(KP577350269, TR, TQ);
        Tz            = SIMD_FMADD(KP577350269, Ty, Tv);
        TN            = SIMD_FNMADD(KP577350269, TM, TL);
        Tq            = SIMD_FNMADD(KP577350269, Tp, Tm);
        TD            = SIMD_FNMADD(KP577350269, TC, TB);
        T8            = SIMD_FNMADD(KP577350269, T7, T4);
        Td            = Tb - Tc;
        TH            = Tb + Tc;
        Tg            = Te + Tf;
        TG            = Tf - Te;
        TO            = SIMD_FMADD(KP866025403, TN, TK);
        Tr            = SIMD_FMADD(KP866025403, Tq, Tj);
        TE            = SIMD_FMADD(KP866025403, TD, TA);
        T9            = SIMD_FMADD(KP866025403, T8, T1);
        TI            = SIMD_FNMADD(KP577350269, TH, TG);
        Th            = SIMD_FNMADD(KP577350269, Tg, Td);
        TJ            = SIMD_FMADD(KP866025403, TI, TF);
        Ti            = SIMD_FMADD(KP866025403, Th, Ta);
        io[WS(os, 1)] = Tr + TE - TJ - (SIMD_FNMADD(KP866025403, Tz, Ts));
        io[0]         = TE + TJ - TO - (SIMD_FNMADD(KP866025403, TS, TP));
        ro[WS(os, 1)] = Ti + TO - (SIMD_FNMADD(KP866025403, TS, TP)) - T9;
        ro[0]         = T9 + Ti - Tr - (SIMD_FNMADD(KP866025403, Tz, Ts));
    }
}

template <>
struct c2cb_traits<12, 11>
{
    static constexpr long_t flops           = 31;
    static constexpr long_t operations      = 26;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 33;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -skip-k 11 -name c2cb
 * -standalone */

/*
 * This function contains 26 FP additions, 5 FP multiplications,
 * (or, 21 additions, 0 multiplications, 5 fused multiply/add),
 * 33 stack variables, 2 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && SkippedOutputs == 11>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    {
        SIMD_FLOAT T1, Tq, T2, Tv, Tu, Tj, Tk, Tr, Td, Tg, Te, Tf, Tl, To, Tm;
        SIMD_FLOAT Tn, T8, Tb, T9, T7, Ta, T3, T6, T4, T5, Th, Tp, Tc, Tt, Ts;
        SIMD_FLOAT Ti;
        T1    = ri[0];
        Tq    = ii[0];
        T2    = ii[WS(is, 9)];
        Tv    = ri[WS(is, 9)];
        Tu    = ii[WS(is, 6)];
        Tj    = ri[WS(is, 6)];
        Tk    = ii[WS(is, 3)];
        Tr    = ri[WS(is, 3)];
        T3    = ii[WS(is, 10)];
        T6    = ri[WS(is, 7)];
        T4    = ri[WS(is, 1)];
        T5    = ii[WS(is, 4)];
        Td    = ri[WS(is, 4)];
        Tg    = ii[WS(is, 7)];
        Te    = ii[WS(is, 1)];
        Tf    = ri[WS(is, 10)];
        Tl    = ii[WS(is, 2)];
        To    = ri[WS(is, 11)];
        Tm    = ri[WS(is, 5)];
        Tn    = ii[WS(is, 8)];
        T8    = ri[WS(is, 2)];
        Tb    = ii[WS(is, 5)];
        T9    = ii[WS(is, 11)];
        T7    = T3 + T4 - (T5 + T6);
        Ta    = ri[WS(is, 8)];
        Th    = Td + Te - (Tf + Tg);
        Tp    = Tl + Tm - (Tn + To);
        Tc    = T8 + T9 - (Ta + Tb);
        Tt    = Tp + T7;
        Ts    = Th + Tc;
        Ti    = Tc - Th;
        io[0] = Tq +
                SIMD_FMADD(KP866025403, SIMD_FMADD(KP577350269, Tt, Ts), Tr) -
                (Tu + Tv);
        ro[0] = T1 +
                SIMD_FMADD(KP866025403, SIMD_FMADD(KP577350269, Ti, T7), T2) -
                (Tj + SIMD_FMADD(KP866025403, Tp, Tk));
    }
}

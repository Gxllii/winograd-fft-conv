//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cf_traits<12, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 1 -name c2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 1>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    {
        SIMD_FLOAT T1, T2;
        T1             = ri[0];
        T2             = ii[0];
        ro[WS(os, 4)]  = T1;
        ro[WS(os, 7)]  = T1;
        ro[WS(os, 5)]  = T1;
        ro[WS(os, 6)]  = T1;
        ro[WS(os, 8)]  = T1;
        ro[WS(os, 3)]  = T1;
        ro[WS(os, 1)]  = T1;
        ro[WS(os, 10)] = T1;
        ro[WS(os, 2)]  = T1;
        ro[WS(os, 9)]  = T1;
        ro[WS(os, 11)] = T1;
        ro[0]          = T1;
        io[WS(os, 4)]  = T2;
        io[WS(os, 7)]  = T2;
        io[WS(os, 5)]  = T2;
        io[WS(os, 6)]  = T2;
        io[WS(os, 8)]  = T2;
        io[WS(os, 3)]  = T2;
        io[WS(os, 1)]  = T2;
        io[WS(os, 10)] = T2;
        io[WS(os, 2)]  = T2;
        io[WS(os, 9)]  = T2;
        io[WS(os, 11)] = T2;
        io[0]          = T2;
    }
}

template <>
struct c2cf_traits<12, 2>
{
    static constexpr long_t flops           = 48;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 10;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 2 -name c2cf
 * -standalone */

/*
 * This function contains 28 FP additions, 20 FP multiplications,
 * (or, 8 additions, 0 multiplications, 20 fused multiply/add),
 * 10 stack variables, 2 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 2>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T1, T3, T2, T4, T5, T8, T6, T7;
        T1             = ri[0];
        T3             = ii[0];
        T2             = ri[WS(is, 1)];
        T4             = ii[WS(is, 1)];
        io[WS(os, 9)]  = T2 + T3;
        io[WS(os, 3)]  = T3 - T2;
        ro[0]          = T1 + T2;
        ro[WS(os, 6)]  = T1 - T2;
        ro[WS(os, 9)]  = T1 - T4;
        ro[WS(os, 3)]  = T1 + T4;
        io[0]          = T3 + T4;
        io[WS(os, 6)]  = T3 - T4;
        T5             = SIMD_FNMADD(KP577350269, T4, T2);
        T8             = SIMD_FMADD(KP577350269, T2, T4);
        T6             = SIMD_FMADD(KP577350269, T4, T2);
        T7             = SIMD_FNMADD(KP577350269, T2, T4);
        ro[WS(os, 10)] = SIMD_FNMADD(KP866025403, T7, T1);
        io[WS(os, 1)]  = SIMD_FMADD(KP866025403, T7, T3);
        io[WS(os, 7)]  = SIMD_FNMADD(KP866025403, T7, T3);
        ro[WS(os, 4)]  = SIMD_FMADD(KP866025403, T7, T1);
        io[WS(os, 10)] = SIMD_FMADD(KP866025403, T6, T3);
        ro[WS(os, 1)]  = SIMD_FMADD(KP866025403, T6, T1);
        ro[WS(os, 7)]  = SIMD_FNMADD(KP866025403, T6, T1);
        io[WS(os, 4)]  = SIMD_FNMADD(KP866025403, T6, T3);
        io[WS(os, 11)] = SIMD_FMADD(KP866025403, T8, T3);
        ro[WS(os, 8)]  = SIMD_FNMADD(KP866025403, T8, T1);
        io[WS(os, 5)]  = SIMD_FNMADD(KP866025403, T8, T3);
        ro[WS(os, 2)]  = SIMD_FMADD(KP866025403, T8, T1);
        ro[WS(os, 11)] = SIMD_FMADD(KP866025403, T5, T1);
        io[WS(os, 8)]  = SIMD_FMADD(KP866025403, T5, T3);
        ro[WS(os, 5)]  = SIMD_FNMADD(KP866025403, T5, T1);
        io[WS(os, 2)]  = SIMD_FNMADD(KP866025403, T5, T3);
    }
}

template <>
struct c2cf_traits<12, 3>
{
    static constexpr long_t flops           = 76;
    static constexpr long_t operations      = 44;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 28;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 3 -name c2cf
 * -standalone */

/*
 * This function contains 44 FP additions, 32 FP multiplications,
 * (or, 12 additions, 0 multiplications, 32 fused multiply/add),
 * 28 stack variables, 2 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 3>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T4, T9, T1, T5, T2, T6, Td, Tp, Ti, Tm, T3, Ta, Tg, Tj, Tb;
        SIMD_FLOAT Te, T7, T8, Tq, Tf, Tc, To, Tn, Tk, Th, Tl;
        T4             = ri[WS(is, 1)];
        T9             = ii[WS(is, 1)];
        T1             = ri[0];
        T5             = ii[0];
        T2             = ri[WS(is, 2)];
        T6             = ii[WS(is, 2)];
        Td             = SIMD_FNMADD(KP577350269, T9, T4);
        Tp             = SIMD_FMADD(KP577350269, T4, T9);
        Ti             = SIMD_FMADD(KP577350269, T9, T4);
        Tm             = SIMD_FNMADD(KP577350269, T4, T9);
        T3             = T1 + T2;
        Ta             = T1 - T2;
        Tg             = SIMD_FNMADD(KP577350269, T6, T2);
        Tj             = SIMD_FMADD(KP577350269, T2, T6);
        Tb             = SIMD_FMADD(KP577350269, T6, T2);
        Te             = SIMD_FNMADD(KP577350269, T2, T6);
        T7             = T5 - T6;
        T8             = T5 + T6;
        ro[WS(os, 9)]  = Ta - T9;
        ro[WS(os, 3)]  = Ta + T9;
        ro[0]          = T3 + T4;
        ro[WS(os, 6)]  = T3 - T4;
        Tq             = SIMD_FMADD(KP866025403, Te, T1);
        Tf             = SIMD_FNMADD(KP866025403, Te, T1);
        Tc             = SIMD_FNMADD(KP866025403, Tb, T5);
        To             = SIMD_FMADD(KP866025403, Tb, T5);
        io[0]          = T8 + T9;
        io[WS(os, 6)]  = T8 - T9;
        io[WS(os, 9)]  = T4 + T7;
        io[WS(os, 3)]  = T7 - T4;
        Tn             = SIMD_FNMADD(KP866025403, Tj, T1);
        Tk             = SIMD_FMADD(KP866025403, Tj, T1);
        Th             = SIMD_FMADD(KP866025403, Tg, T5);
        Tl             = SIMD_FNMADD(KP866025403, Tg, T5);
        ro[WS(os, 11)] = SIMD_FMADD(KP866025403, Td, Tf);
        ro[WS(os, 5)]  = SIMD_FNMADD(KP866025403, Td, Tf);
        ro[WS(os, 2)]  = SIMD_FMADD(KP866025403, Tp, Tq);
        ro[WS(os, 8)]  = SIMD_FNMADD(KP866025403, Tp, Tq);
        io[WS(os, 11)] = SIMD_FMADD(KP866025403, Tp, To);
        io[WS(os, 5)]  = SIMD_FNMADD(KP866025403, Tp, To);
        io[WS(os, 8)]  = SIMD_FMADD(KP866025403, Td, Tc);
        io[WS(os, 2)]  = SIMD_FNMADD(KP866025403, Td, Tc);
        ro[WS(os, 1)]  = SIMD_FMADD(KP866025403, Ti, Tk);
        ro[WS(os, 7)]  = SIMD_FNMADD(KP866025403, Ti, Tk);
        ro[WS(os, 4)]  = SIMD_FMADD(KP866025403, Tm, Tn);
        ro[WS(os, 10)] = SIMD_FNMADD(KP866025403, Tm, Tn);
        io[WS(os, 1)]  = SIMD_FMADD(KP866025403, Tm, Tl);
        io[WS(os, 7)]  = SIMD_FNMADD(KP866025403, Tm, Tl);
        io[WS(os, 10)] = SIMD_FMADD(KP866025403, Ti, Th);
        io[WS(os, 4)]  = SIMD_FNMADD(KP866025403, Ti, Th);
    }
}

template <>
struct c2cf_traits<12, 4>
{
    static constexpr long_t flops           = 80;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 42;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 4 -name c2cf
 * -standalone */

/*
 * This function contains 56 FP additions, 24 FP multiplications,
 * (or, 32 additions, 0 multiplications, 24 fused multiply/add),
 * 42 stack variables, 2 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 4>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T1, T8, T2, T9, T4, Tc, T5, Td, T3, Tb;
        T1 = ri[0];
        T8 = ii[0];
        T2 = ri[WS(is, 2)];
        T9 = ii[WS(is, 2)];
        T4 = ri[WS(is, 3)];
        Tc = ii[WS(is, 3)];
        T5 = ri[WS(is, 1)];
        Td = ii[WS(is, 1)];
        T3 = T1 + T2;
        Tb = T1 - T2;
        {
            SIMD_FLOAT Tq, Tj, Tm, Tf, Ta, TD, T6, T7, Tz, To, Tu, Th, Te, TE,
                Tg;
            SIMD_FLOAT Ty, Tn, Tt, TB, Tk, Tw, Tr, Ti, Tl, Tx, Tv, Tp, Ts, TC,
                TA;
            Tq             = SIMD_FMADD(KP577350269, T2, T9);
            Tj             = SIMD_FMADD(KP577350269, T9, T2);
            Tm             = SIMD_FNMADD(KP577350269, T9, T2);
            Tf             = SIMD_FNMADD(KP577350269, T2, T9);
            Ta             = T8 - T9;
            TD             = T8 + T9;
            T6             = T4 + T5;
            T7             = T4 - T5;
            Tz             = SIMD_FMADD(KP577350269, T5, Td);
            To             = SIMD_FMADD(KP577350269, Td, T5);
            Tu             = SIMD_FNMADD(KP577350269, T5, Td);
            Th             = SIMD_FNMADD(KP577350269, Td, T5);
            Te             = Tc - Td;
            TE             = Tc + Td;
            Tg             = SIMD_FNMADD(KP866025403, Tf, T1);
            Ty             = SIMD_FMADD(KP866025403, Tf, T1);
            Tn             = SIMD_FMADD(KP866025403, Tm, T8);
            Tt             = SIMD_FNMADD(KP866025403, Tm, T8);
            TB             = SIMD_FMADD(KP866025403, Tj, T8);
            Tk             = SIMD_FNMADD(KP866025403, Tj, T8);
            Tw             = SIMD_FNMADD(KP866025403, Tq, T1);
            Tr             = SIMD_FMADD(KP866025403, Tq, T1);
            io[WS(os, 9)]  = Ta - T7;
            io[WS(os, 3)]  = T7 + Ta;
            ro[0]          = T3 + T6;
            ro[WS(os, 6)]  = T3 - T6;
            Ti             = SIMD_FNMADD(KP866025403, Th, Tc);
            Tl             = SIMD_FMADD(KP866025403, Th, Tc);
            Tx             = SIMD_FMADD(KP866025403, Tu, T4);
            Tv             = SIMD_FNMADD(KP866025403, Tu, T4);
            Tp             = SIMD_FNMADD(KP866025403, To, Tc);
            Ts             = SIMD_FMADD(KP866025403, To, Tc);
            ro[WS(os, 9)]  = Tb + Te;
            ro[WS(os, 3)]  = Tb - Te;
            io[0]          = TD + TE;
            io[WS(os, 6)]  = TD - TE;
            TC             = SIMD_FMADD(KP866025403, Tz, T4);
            TA             = SIMD_FNMADD(KP866025403, Tz, T4);
            io[WS(os, 8)]  = Tk + Tl;
            io[WS(os, 2)]  = Tk - Tl;
            ro[WS(os, 5)]  = Tg + Ti;
            ro[WS(os, 11)] = Tg - Ti;
            io[WS(os, 7)]  = Tt + Tv;
            io[WS(os, 1)]  = Tt - Tv;
            ro[WS(os, 4)]  = Tw + Tx;
            ro[WS(os, 10)] = Tw - Tx;
            ro[WS(os, 1)]  = Tr + Ts;
            ro[WS(os, 7)]  = Tr - Ts;
            io[WS(os, 4)]  = Tn + Tp;
            io[WS(os, 10)] = Tn - Tp;
            ro[WS(os, 8)]  = Ty + TA;
            ro[WS(os, 2)]  = Ty - TA;
            io[WS(os, 11)] = TB + TC;
            io[WS(os, 5)]  = TB - TC;
        }
    }
}

template <>
struct c2cf_traits<12, 5>
{
    static constexpr long_t flops           = 94;
    static constexpr long_t operations      = 64;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 53;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 5 -name c2cf
 * -standalone */

/*
 * This function contains 64 FP additions, 30 FP multiplications,
 * (or, 34 additions, 0 multiplications, 30 fused multiply/add),
 * 53 stack variables, 3 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 5>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T4, Td, T6, Tg, T7, Th, T1, T2, Ta, Tb;
        T4 = ri[WS(is, 2)];
        Td = ii[WS(is, 2)];
        T6 = ri[WS(is, 3)];
        Tg = ii[WS(is, 3)];
        T7 = ri[WS(is, 1)];
        Th = ii[WS(is, 1)];
        T1 = ri[0];
        T2 = ri[WS(is, 4)];
        Ta = ii[0];
        Tb = ii[WS(is, 4)];
        {
            SIMD_FLOAT Tl, TA, Tr, Tv, T8, T9, TJ, Tx, TE, Tn, Ti, TO, Tj, T3,
                Tp;
            SIMD_FLOAT Tc, To, Tt, TH, TF, Ty, TC, TM, TK, T5, Tf, Tz, Tk, TN,
                Te;
            SIMD_FLOAT Tu, Tq, Tm, TI, TG, TB, TL, Ts, Tw, TD;
            Tl             = SIMD_FNMADD(KP577350269, T4, Td);
            TA             = SIMD_FMADD(KP577350269, T4, Td);
            Tr             = SIMD_FMADD(KP577350269, Td, T4);
            Tv             = SIMD_FNMADD(KP577350269, Td, T4);
            T8             = T6 + T7;
            T9             = T6 - T7;
            TJ             = SIMD_FMADD(KP577350269, T7, Th);
            Tx             = SIMD_FMADD(KP577350269, Th, T7);
            TE             = SIMD_FNMADD(KP577350269, T7, Th);
            Tn             = SIMD_FNMADD(KP577350269, Th, T7);
            Ti             = Tg - Th;
            TO             = Tg + Th;
            Tj             = SIMD_FNMADD(KP500000000, T2, T1);
            T3             = T1 + T2;
            Tp             = SIMD_FNMADD(KP500000000, Tb, Ta);
            Tc             = Ta + Tb;
            To             = SIMD_FNMADD(KP866025403, Tn, Tg);
            Tt             = SIMD_FMADD(KP866025403, Tn, Tg);
            TH             = SIMD_FMADD(KP866025403, TE, T6);
            TF             = SIMD_FNMADD(KP866025403, TE, T6);
            Ty             = SIMD_FNMADD(KP866025403, Tx, Tg);
            TC             = SIMD_FMADD(KP866025403, Tx, Tg);
            TM             = SIMD_FMADD(KP866025403, TJ, T6);
            TK             = SIMD_FNMADD(KP866025403, TJ, T6);
            T5             = T3 + T4;
            Tf             = T3 - T4;
            Tz             = SIMD_FMADD(KP866025403, Tb, Tj);
            Tk             = SIMD_FNMADD(KP866025403, Tb, Tj);
            TN             = Tc + Td;
            Te             = Tc - Td;
            Tu             = SIMD_FNMADD(KP866025403, T2, Tp);
            Tq             = SIMD_FMADD(KP866025403, T2, Tp);
            ro[WS(os, 9)]  = Tf + Ti;
            ro[WS(os, 3)]  = Tf - Ti;
            ro[0]          = T5 + T8;
            ro[WS(os, 6)]  = T5 - T8;
            Tm             = SIMD_FNMADD(KP866025403, Tl, Tk);
            TI             = SIMD_FMADD(KP866025403, Tl, Tk);
            TG             = SIMD_FNMADD(KP866025403, TA, Tz);
            TB             = SIMD_FMADD(KP866025403, TA, Tz);
            io[WS(os, 9)]  = Te - T9;
            io[WS(os, 3)]  = T9 + Te;
            io[0]          = TN + TO;
            io[WS(os, 6)]  = TN - TO;
            TL             = SIMD_FMADD(KP866025403, Tr, Tq);
            Ts             = SIMD_FNMADD(KP866025403, Tr, Tq);
            Tw             = SIMD_FMADD(KP866025403, Tv, Tu);
            TD             = SIMD_FNMADD(KP866025403, Tv, Tu);
            ro[WS(os, 8)]  = TI + TK;
            ro[WS(os, 2)]  = TI - TK;
            ro[WS(os, 5)]  = Tm + To;
            ro[WS(os, 11)] = Tm - To;
            ro[WS(os, 1)]  = TB + TC;
            ro[WS(os, 7)]  = TB - TC;
            ro[WS(os, 4)]  = TG + TH;
            ro[WS(os, 10)] = TG - TH;
            io[WS(os, 8)]  = Ts + Tt;
            io[WS(os, 2)]  = Ts - Tt;
            io[WS(os, 11)] = TL + TM;
            io[WS(os, 5)]  = TL - TM;
            io[WS(os, 7)]  = TD + TF;
            io[WS(os, 1)]  = TD - TF;
            io[WS(os, 4)]  = Tw + Ty;
            io[WS(os, 10)] = Tw - Ty;
        }
    }
}

template <>
struct c2cf_traits<12, 6>
{
    static constexpr long_t flops           = 98;
    static constexpr long_t operations      = 68;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 59;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 6 -name c2cf
 * -standalone */

/*
 * This function contains 68 FP additions, 30 FP multiplications,
 * (or, 38 additions, 0 multiplications, 30 fused multiply/add),
 * 59 stack variables, 3 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 6>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T6, TF, T4, Tf, T1, T2, Tc, Td, T7, T8, Tl, Tm, Tj, TB, Ts;
        SIMD_FLOAT Tw, Tq, T3, Th, Te, T9, TL, Tn, TG;
        T6 = ri[WS(is, 3)];
        TF = ii[WS(is, 3)];
        T4 = ri[WS(is, 2)];
        Tf = ii[WS(is, 2)];
        T1 = ri[0];
        T2 = ri[WS(is, 4)];
        Tc = ii[0];
        Td = ii[WS(is, 4)];
        T7 = ri[WS(is, 1)];
        T8 = ri[WS(is, 5)];
        Tl = ii[WS(is, 1)];
        Tm = ii[WS(is, 5)];
        Tj = SIMD_FNMADD(KP577350269, Tf, T4);
        TB = SIMD_FMADD(KP577350269, Tf, T4);
        Ts = SIMD_FMADD(KP577350269, T4, Tf);
        Tw = SIMD_FNMADD(KP577350269, T4, Tf);
        Tq = SIMD_FNMADD(KP500000000, T2, T1);
        T3 = T1 + T2;
        Th = SIMD_FNMADD(KP500000000, Td, Tc);
        Te = Tc + Td;
        T9 = T7 + T8;
        TL = T8 - T7;
        Tn = Tl - Tm;
        TG = Tl + Tm;
        {
            SIMD_FLOAT TK, Tt, Tx, TT, Tk, TO, TQ, TC, TN, TP, TS, TU, Tz, TD,
                Tp;
            SIMD_FLOAT Tu, T5, TE, Tv, Tr, TI, Tg, TA, Ti, Ta, Tb, TJ, TH, TR,
                TM;
            SIMD_FLOAT To, Ty;
            T5             = T3 + T4;
            TE             = T3 - T4;
            Tv             = SIMD_FNMADD(KP866025403, Td, Tq);
            Tr             = SIMD_FMADD(KP866025403, Td, Tq);
            TI             = Te + Tf;
            Tg             = Te - Tf;
            TA             = SIMD_FMADD(KP866025403, T2, Th);
            Ti             = SIMD_FNMADD(KP866025403, T2, Th);
            Ta             = T6 + T9;
            Tb             = T6 - T9;
            TJ             = TF + TG;
            TH             = TF - TG;
            TR             = SIMD_FMADD(KP577350269, TG, TL);
            TM             = SIMD_FNMADD(KP577350269, TG, TL);
            To             = SIMD_FNMADD(KP577350269, T9, Tn);
            Ty             = SIMD_FMADD(KP577350269, T9, Tn);
            TK             = SIMD_FMADD(KP866025403, Ts, Tr);
            Tt             = SIMD_FNMADD(KP866025403, Ts, Tr);
            Tx             = SIMD_FMADD(KP866025403, Tw, Tv);
            TT             = SIMD_FNMADD(KP866025403, Tw, Tv);
            Tk             = SIMD_FNMADD(KP866025403, Tj, Ti);
            TO             = SIMD_FMADD(KP866025403, Tj, Ti);
            TQ             = SIMD_FNMADD(KP866025403, TB, TA);
            TC             = SIMD_FMADD(KP866025403, TB, TA);
            io[WS(os, 9)]  = Tg - Tb;
            io[WS(os, 3)]  = Tb + Tg;
            ro[0]          = T5 + Ta;
            ro[WS(os, 6)]  = T5 - Ta;
            ro[WS(os, 9)]  = TE + TH;
            ro[WS(os, 3)]  = TE - TH;
            io[0]          = TI + TJ;
            io[WS(os, 6)]  = TI - TJ;
            TN             = SIMD_FNMADD(KP866025403, TM, TF);
            TP             = SIMD_FMADD(KP866025403, TM, TF);
            TS             = SIMD_FNMADD(KP866025403, TR, TF);
            TU             = SIMD_FMADD(KP866025403, TR, TF);
            Tz             = SIMD_FNMADD(KP866025403, Ty, T6);
            TD             = SIMD_FMADD(KP866025403, Ty, T6);
            Tp             = SIMD_FNMADD(KP866025403, To, T6);
            Tu             = SIMD_FMADD(KP866025403, To, T6);
            io[WS(os, 4)]  = TO + TP;
            io[WS(os, 10)] = TO - TP;
            ro[WS(os, 1)]  = TK + TN;
            ro[WS(os, 7)]  = TK - TN;
            ro[WS(os, 5)]  = TT + TU;
            ro[WS(os, 11)] = TT - TU;
            io[WS(os, 8)]  = TQ + TS;
            io[WS(os, 2)]  = TQ - TS;
            io[WS(os, 11)] = TC + TD;
            io[WS(os, 5)]  = TC - TD;
            ro[WS(os, 8)]  = Tx + Tz;
            ro[WS(os, 2)]  = Tx - Tz;
            ro[WS(os, 4)]  = Tt + Tu;
            ro[WS(os, 10)] = Tt - Tu;
            io[WS(os, 7)]  = Tk + Tp;
            io[WS(os, 1)]  = Tk - Tp;
        }
    }
}

template <>
struct c2cf_traits<12, 7>
{
    static constexpr long_t flops           = 96;
    static constexpr long_t operations      = 72;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 65;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 7 -name c2cf
 * -standalone */

/*
 * This function contains 72 FP additions, 24 FP multiplications,
 * (or, 48 additions, 0 multiplications, 24 fused multiply/add),
 * 65 stack variables, 3 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 7>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T8, TL, T1, T2, Te, Tf, T4, T5, Th, Ti, T9, Ta, Tq, Tr, Tv;
        SIMD_FLOAT T3, Tl, Tg, Tx, T6, Tn, Tj, Tb, TR, Ts, TM;
        T8 = ri[WS(is, 3)];
        TL = ii[WS(is, 3)];
        T1 = ri[0];
        T2 = ri[WS(is, 4)];
        Te = ii[0];
        Tf = ii[WS(is, 4)];
        T4 = ri[WS(is, 6)];
        T5 = ri[WS(is, 2)];
        Th = ii[WS(is, 6)];
        Ti = ii[WS(is, 2)];
        T9 = ri[WS(is, 1)];
        Ta = ri[WS(is, 5)];
        Tq = ii[WS(is, 1)];
        Tr = ii[WS(is, 5)];
        Tv = SIMD_FNMADD(KP500000000, T2, T1);
        T3 = T1 + T2;
        Tl = SIMD_FNMADD(KP500000000, Tf, Te);
        Tg = Te + Tf;
        Tx = SIMD_FNMADD(KP500000000, T5, T4);
        T6 = T4 + T5;
        Tn = SIMD_FNMADD(KP500000000, Ti, Th);
        Tj = Th + Ti;
        Tb = T9 + Ta;
        TR = Ta - T9;
        Ts = Tq - Tr;
        TM = Tq + Tr;
        {
            SIMD_FLOAT TQ, Tz, TD, TZ, Tp, TU, TW, TI, TT, TV, TY, T10, TF, TJ,
                Tu;
            SIMD_FLOAT TA, TB, Tw, TG, Tm, T7, TK, TC, Ty, TO, Tk, TH, To, Tc,
                Td;
            SIMD_FLOAT TP, TN, TX, TS, Tt, TE;
            TB             = SIMD_FNMADD(KP866025403, Tf, Tv);
            Tw             = SIMD_FMADD(KP866025403, Tf, Tv);
            TG             = SIMD_FMADD(KP866025403, T2, Tl);
            Tm             = SIMD_FNMADD(KP866025403, T2, Tl);
            T7             = T3 + T6;
            TK             = T3 - T6;
            TC             = SIMD_FMADD(KP866025403, Ti, Tx);
            Ty             = SIMD_FNMADD(KP866025403, Ti, Tx);
            TO             = Tg + Tj;
            Tk             = Tg - Tj;
            TH             = SIMD_FNMADD(KP866025403, T5, Tn);
            To             = SIMD_FMADD(KP866025403, T5, Tn);
            Tc             = T8 + Tb;
            Td             = T8 - Tb;
            TP             = TL + TM;
            TN             = TL - TM;
            TX             = SIMD_FMADD(KP577350269, TM, TR);
            TS             = SIMD_FNMADD(KP577350269, TM, TR);
            Tt             = SIMD_FNMADD(KP577350269, Tb, Ts);
            TE             = SIMD_FMADD(KP577350269, Tb, Ts);
            TQ             = Tw - Ty;
            Tz             = Tw + Ty;
            TD             = TB + TC;
            TZ             = TB - TC;
            Tp             = Tm - To;
            TU             = Tm + To;
            TW             = TG + TH;
            TI             = TG - TH;
            io[WS(os, 9)]  = Tk - Td;
            io[WS(os, 3)]  = Td + Tk;
            ro[0]          = T7 + Tc;
            ro[WS(os, 6)]  = T7 - Tc;
            ro[WS(os, 9)]  = TK + TN;
            ro[WS(os, 3)]  = TK - TN;
            io[0]          = TO + TP;
            io[WS(os, 6)]  = TO - TP;
            TT             = SIMD_FNMADD(KP866025403, TS, TL);
            TV             = SIMD_FMADD(KP866025403, TS, TL);
            TY             = SIMD_FNMADD(KP866025403, TX, TL);
            T10            = SIMD_FMADD(KP866025403, TX, TL);
            TF             = SIMD_FNMADD(KP866025403, TE, T8);
            TJ             = SIMD_FMADD(KP866025403, TE, T8);
            Tu             = SIMD_FNMADD(KP866025403, Tt, T8);
            TA             = SIMD_FMADD(KP866025403, Tt, T8);
            io[WS(os, 4)]  = TU + TV;
            io[WS(os, 10)] = TU - TV;
            ro[WS(os, 1)]  = TQ + TT;
            ro[WS(os, 7)]  = TQ - TT;
            ro[WS(os, 5)]  = TZ + T10;
            ro[WS(os, 11)] = TZ - T10;
            io[WS(os, 8)]  = TW + TY;
            io[WS(os, 2)]  = TW - TY;
            io[WS(os, 11)] = TI + TJ;
            io[WS(os, 5)]  = TI - TJ;
            ro[WS(os, 8)]  = TD + TF;
            ro[WS(os, 2)]  = TD - TF;
            ro[WS(os, 4)]  = Tz + TA;
            ro[WS(os, 10)] = Tz - TA;
            io[WS(os, 7)]  = Tp + Tu;
            io[WS(os, 1)]  = Tp - Tu;
        }
    }
}

template <>
struct c2cf_traits<12, 8>
{
    static constexpr long_t flops           = 110;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 75;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 8 -name c2cf
 * -standalone */

/*
 * This function contains 80 FP additions, 30 FP multiplications,
 * (or, 50 additions, 0 multiplications, 30 fused multiply/add),
 * 75 stack variables, 3 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 8>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Td, TT, T9, TG, TB, TM, To, Tt, T11, T17, TK, Ty, TD, TH, Tq;
        SIMD_FLOAT TN, Ts, Ta, TR, TQ, T7, TV, Tm, T3, Ti, T6, Tl, T1, T2, Tg;
        SIMD_FLOAT Th, Tb, Tc, Tv, Tw, T4, T5, Tj, Tk, T8, T10, Tx, TC, Tp, TA;
        SIMD_FLOAT Tn, TX, TE, TI, T19, Tr, T13, T15, TO, Tu, TJ, TY, TS, Te,
            Tf;
        SIMD_FLOAT T12, T14, T18, T1a, TL, TP, Tz, TF, TW, TU, T16, TZ;
        T1             = ri[0];
        T2             = ri[WS(is, 4)];
        Tg             = ii[0];
        Th             = ii[WS(is, 4)];
        Tb             = ri[WS(is, 1)];
        Tc             = ri[WS(is, 5)];
        Tv             = ii[WS(is, 1)];
        Tw             = ii[WS(is, 5)];
        T4             = ri[WS(is, 6)];
        T5             = ri[WS(is, 2)];
        Tj             = ii[WS(is, 6)];
        Tk             = ii[WS(is, 2)];
        T8             = ri[WS(is, 3)];
        T3             = T1 + T2;
        TA             = SIMD_FNMADD(KP500000000, T2, T1);
        Ti             = Tg + Th;
        Tn             = SIMD_FNMADD(KP500000000, Th, Tg);
        T10            = Tc - Tb;
        Td             = Tb + Tc;
        TT             = Tv + Tw;
        Tx             = Tv - Tw;
        T6             = T4 + T5;
        TC             = SIMD_FNMADD(KP500000000, T5, T4);
        Tl             = Tj + Tk;
        Tp             = SIMD_FNMADD(KP500000000, Tk, Tj);
        T9             = ri[WS(is, 7)];
        TG             = SIMD_FNMADD(KP866025403, Th, TA);
        TB             = SIMD_FMADD(KP866025403, Th, TA);
        TM             = SIMD_FMADD(KP866025403, T2, Tn);
        To             = SIMD_FNMADD(KP866025403, T2, Tn);
        Tt             = ii[WS(is, 7)];
        T11            = SIMD_FNMADD(KP577350269, TT, T10);
        T17            = SIMD_FMADD(KP577350269, TT, T10);
        TK             = SIMD_FMADD(KP577350269, Td, Tx);
        Ty             = SIMD_FNMADD(KP577350269, Td, Tx);
        TD             = SIMD_FNMADD(KP866025403, Tk, TC);
        TH             = SIMD_FMADD(KP866025403, Tk, TC);
        Tq             = SIMD_FMADD(KP866025403, T5, Tp);
        TN             = SIMD_FNMADD(KP866025403, T5, Tp);
        Ts             = SIMD_FNMADD(KP500000000, T9, T8);
        Ta             = T8 + T9;
        TR             = ii[WS(is, 3)];
        TQ             = T3 - T6;
        T7             = T3 + T6;
        TV             = Ti + Tl;
        Tm             = Ti - Tl;
        TX             = TB - TD;
        TE             = TB + TD;
        TI             = TG + TH;
        T19            = TG - TH;
        Tr             = To - Tq;
        T13            = To + Tq;
        T15            = TM + TN;
        TO             = TM - TN;
        Tu             = SIMD_FMADD(KP866025403, Tt, Ts);
        TJ             = SIMD_FNMADD(KP866025403, Tt, Ts);
        TY             = SIMD_FNMADD(KP500000000, Tt, TR);
        TS             = TR + Tt;
        Te             = Ta + Td;
        Tf             = Ta - Td;
        TL             = SIMD_FNMADD(KP866025403, TK, TJ);
        TP             = SIMD_FMADD(KP866025403, TK, TJ);
        Tz             = SIMD_FNMADD(KP866025403, Ty, Tu);
        TF             = SIMD_FMADD(KP866025403, Ty, Tu);
        TW             = TS + TT;
        TU             = TS - TT;
        T16            = SIMD_FMADD(KP866025403, T9, TY);
        TZ             = SIMD_FNMADD(KP866025403, T9, TY);
        io[WS(os, 9)]  = Tm - Tf;
        io[WS(os, 3)]  = Tf + Tm;
        ro[0]          = T7 + Te;
        ro[WS(os, 6)]  = T7 - Te;
        io[WS(os, 11)] = TO + TP;
        io[WS(os, 5)]  = TO - TP;
        ro[WS(os, 8)]  = TI + TL;
        ro[WS(os, 2)]  = TI - TL;
        ro[WS(os, 4)]  = TE + TF;
        ro[WS(os, 10)] = TE - TF;
        io[WS(os, 7)]  = Tr + Tz;
        io[WS(os, 1)]  = Tr - Tz;
        ro[WS(os, 9)]  = TQ + TU;
        ro[WS(os, 3)]  = TQ - TU;
        io[0]          = TV + TW;
        io[WS(os, 6)]  = TV - TW;
        T12            = SIMD_FNMADD(KP866025403, T11, TZ);
        T14            = SIMD_FMADD(KP866025403, T11, TZ);
        T18            = SIMD_FNMADD(KP866025403, T17, T16);
        T1a            = SIMD_FMADD(KP866025403, T17, T16);
        io[WS(os, 4)]  = T13 + T14;
        io[WS(os, 10)] = T13 - T14;
        ro[WS(os, 1)]  = TX + T12;
        ro[WS(os, 7)]  = TX - T12;
        ro[WS(os, 5)]  = T19 + T1a;
        ro[WS(os, 11)] = T19 - T1a;
        io[WS(os, 8)]  = T15 + T18;
        io[WS(os, 2)]  = T15 - T18;
    }
}

template <>
struct c2cf_traits<12, 9>
{
    static constexpr long_t flops           = 114;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 42;
    static constexpr long_t stack_vars      = 81;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 9 -name c2cf
 * -standalone */

/*
 * This function contains 84 FP additions, 30 FP multiplications,
 * (or, 54 additions, 0 multiplications, 30 fused multiply/add),
 * 81 stack variables, 3 constants, and 42 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 9>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tc, TY, TN, TJ, TT, Tv, Tz, TP, T1c, T15, TA, T16, Tf, TB,
            TW;
        SIMD_FLOAT T9, T11, Tq, TS, Tt, TH, TM, Tg, Th, TC, TZ, Tw, T19, TK,
            T13;
        SIMD_FLOAT TO, T1f, TU, T1b, T12, T10, T1d, T17, TD, TQ, T1a, T18, T1g,
            T1e, TR;
        SIMD_FLOAT TV, TE, TL;
        {
            SIMD_FLOAT Ts, TG, T8, Tp, TF, T5, Tm, Tr, T1, T2, T3, Ti, Tj, Tk,
                T6;
            SIMD_FLOAT T7, Tn, To, Ta, Tb, Ty, TX, T4, Td, Te, Tl, TI, Tu, Tx,
                T14;
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            Ti  = ii[0];
            Tj  = ii[WS(is, 4)];
            Tk  = ii[WS(is, 8)];
            T6  = ri[WS(is, 6)];
            T7  = ri[WS(is, 2)];
            Tn  = ii[WS(is, 6)];
            To  = ii[WS(is, 2)];
            Ta  = ri[WS(is, 3)];
            Tb  = ri[WS(is, 7)];
            Ty  = ii[WS(is, 7)];
            TX  = ii[WS(is, 3)];
            T4  = T2 + T3;
            Ts  = T3 - T2;
            Td  = ri[WS(is, 1)];
            TG  = Tj - Tk;
            Tl  = Tj + Tk;
            T8  = T6 + T7;
            TI  = SIMD_FNMADD(KP500000000, T7, T6);
            Tp  = Tn + To;
            Tu  = SIMD_FNMADD(KP500000000, To, Tn);
            Tc  = Ta + Tb;
            Tx  = SIMD_FNMADD(KP500000000, Tb, Ta);
            TY  = TX + Ty;
            T14 = SIMD_FNMADD(KP500000000, Ty, TX);
            TF  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            Te  = ri[WS(is, 5)];
            Tm  = Ti + Tl;
            Tr  = SIMD_FNMADD(KP500000000, Tl, Ti);
            TN  = SIMD_FMADD(KP866025403, To, TI);
            TJ  = SIMD_FNMADD(KP866025403, To, TI);
            TT  = SIMD_FNMADD(KP866025403, T7, Tu);
            Tv  = SIMD_FMADD(KP866025403, T7, Tu);
            Tz  = SIMD_FMADD(KP866025403, Ty, Tx);
            TP  = SIMD_FNMADD(KP866025403, Ty, Tx);
            T1c = SIMD_FMADD(KP866025403, Tb, T14);
            T15 = SIMD_FNMADD(KP866025403, Tb, T14);
            TA  = ii[WS(is, 1)];
            T16 = Te - Td;
            Tf  = Td + Te;
            TB  = ii[WS(is, 5)];
            TW  = T5 - T8;
            T9  = T5 + T8;
            T11 = Tm + Tp;
            Tq  = Tm - Tp;
            TS  = SIMD_FNMADD(KP866025403, Ts, Tr);
            Tt  = SIMD_FMADD(KP866025403, Ts, Tr);
            TH  = SIMD_FMADD(KP866025403, TG, TF);
            TM  = SIMD_FNMADD(KP866025403, TG, TF);
        }
        Tg             = Tc + Tf;
        Th             = Tc - Tf;
        TC             = TA - TB;
        TZ             = TA + TB;
        Tw             = Tt - Tv;
        T19            = Tt + Tv;
        TK             = TH + TJ;
        T13            = TH - TJ;
        TO             = TM + TN;
        T1f            = TM - TN;
        TU             = TS - TT;
        T1b            = TS + TT;
        io[WS(os, 9)]  = Tq - Th;
        io[WS(os, 3)]  = Th + Tq;
        ro[0]          = T9 + Tg;
        ro[WS(os, 6)]  = T9 - Tg;
        T12            = TY + TZ;
        T10            = TY - TZ;
        T1d            = SIMD_FMADD(KP577350269, TZ, T16);
        T17            = SIMD_FNMADD(KP577350269, TZ, T16);
        TD             = SIMD_FNMADD(KP577350269, Tf, TC);
        TQ             = SIMD_FMADD(KP577350269, Tf, TC);
        ro[WS(os, 9)]  = TW + T10;
        ro[WS(os, 3)]  = TW - T10;
        io[0]          = T11 + T12;
        io[WS(os, 6)]  = T11 - T12;
        T1a            = SIMD_FMADD(KP866025403, T17, T15);
        T18            = SIMD_FNMADD(KP866025403, T17, T15);
        T1g            = SIMD_FMADD(KP866025403, T1d, T1c);
        T1e            = SIMD_FNMADD(KP866025403, T1d, T1c);
        TR             = SIMD_FNMADD(KP866025403, TQ, TP);
        TV             = SIMD_FMADD(KP866025403, TQ, TP);
        TE             = SIMD_FNMADD(KP866025403, TD, Tz);
        TL             = SIMD_FMADD(KP866025403, TD, Tz);
        ro[WS(os, 7)]  = T13 - T18;
        ro[WS(os, 1)]  = T13 + T18;
        io[WS(os, 10)] = T19 - T1a;
        io[WS(os, 4)]  = T19 + T1a;
        io[WS(os, 2)]  = T1b - T1e;
        io[WS(os, 8)]  = T1b + T1e;
        ro[WS(os, 11)] = T1f - T1g;
        ro[WS(os, 5)]  = T1f + T1g;
        io[WS(os, 11)] = TU + TV;
        io[WS(os, 5)]  = TU - TV;
        ro[WS(os, 8)]  = TO + TR;
        ro[WS(os, 2)]  = TO - TR;
        ro[WS(os, 4)]  = TK + TL;
        ro[WS(os, 10)] = TK - TL;
        io[WS(os, 7)]  = Tw + TE;
        io[WS(os, 1)]  = Tw - TE;
    }
}

template <>
struct c2cf_traits<12, 10>
{
    static constexpr long_t flops           = 112;
    static constexpr long_t operations      = 88;
    static constexpr long_t memory_accesses = 44;
    static constexpr long_t stack_vars      = 86;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 10 -name c2cf
 * -standalone */

/*
 * This function contains 88 FP additions, 24 FP multiplications,
 * (or, 64 additions, 0 multiplications, 24 fused multiply/add),
 * 86 stack variables, 2 constants, and 44 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 10>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TK, TM, T1a, TU, T1g, T1e, T1f, Ty, T19, TR, TH, TO, TN, T1b;
        {
            SIMD_FLOAT Tb, Tu, TJ, T16, TF, Tc, TI, T5, T7, To, Tt, T11, T1i,
                Th, TC;
            SIMD_FLOAT T1j, T15, TB, TS, Tp, TL, T8, Tq, T1, T2, T3, Tk, Tl, Tm,
                Td;
            SIMD_FLOAT Te, Tf, T13, TD, TE, Ta, T4, TA, Tn, T10, Tg, T6, T14,
                Tz, Tv;
            SIMD_FLOAT TP, T12, T1c, Tj, Ti, T1k, T1m, T17, T1d, TG, TT, TV, TW,
                Tw, Tr;
            SIMD_FLOAT T9, T1h, T18, TY, TZ, TX, Ts, T1l, Tx, TQ;
            T1             = ri[0];
            T2             = ri[WS(is, 4)];
            T3             = ri[WS(is, 8)];
            Tk             = ii[0];
            Tl             = ii[WS(is, 4)];
            Tm             = ii[WS(is, 8)];
            Td             = ri[WS(is, 9)];
            Te             = ri[WS(is, 1)];
            Tf             = ri[WS(is, 5)];
            T13            = ii[WS(is, 9)];
            TD             = ii[WS(is, 1)];
            TE             = ii[WS(is, 5)];
            Ta             = ri[WS(is, 3)];
            Tb             = ri[WS(is, 7)];
            T4             = T2 + T3;
            Tu             = T3 - T2;
            TA             = ii[WS(is, 7)];
            TJ             = Tl - Tm;
            Tn             = Tl + Tm;
            T10            = ii[WS(is, 3)];
            Tg             = Te + Tf;
            T16            = Tf - Te;
            T6             = ri[WS(is, 6)];
            TF             = TD - TE;
            T14            = TD + TE;
            Tc             = Ta + Tb;
            Tz             = SIMD_FNMADD(KP500000000, Tb, Ta);
            TI             = SIMD_FNMADD(KP500000000, T4, T1);
            T5             = T1 + T4;
            T7             = ri[WS(is, 2)];
            To             = Tk + Tn;
            Tt             = SIMD_FNMADD(KP500000000, Tn, Tk);
            T11            = SIMD_FNMADD(KP500000000, TA, T10);
            T1i            = T10 + TA;
            Th             = Td + Tg;
            TC             = SIMD_FNMADD(KP500000000, Tg, Td);
            T1j            = T13 + T14;
            T15            = SIMD_FNMADD(KP500000000, T14, T13);
            TB             = SIMD_FNMADD(KP866025403, TA, Tz);
            TS             = SIMD_FMADD(KP866025403, TA, Tz);
            Tp             = ii[WS(is, 6)];
            TL             = SIMD_FNMADD(KP500000000, T7, T6);
            T8             = T6 + T7;
            Tq             = ii[WS(is, 2)];
            Tv             = SIMD_FNMADD(KP866025403, Tu, Tt);
            TP             = SIMD_FMADD(KP866025403, Tu, Tt);
            T12            = SIMD_FNMADD(KP866025403, Tb, T11);
            T1c            = SIMD_FMADD(KP866025403, Tb, T11);
            Tj             = Tc - Th;
            Ti             = Tc + Th;
            T1k            = T1i - T1j;
            T1m            = T1i + T1j;
            T17            = SIMD_FMADD(KP866025403, T16, T15);
            T1d            = SIMD_FNMADD(KP866025403, T16, T15);
            TG             = SIMD_FNMADD(KP866025403, TF, TC);
            TT             = SIMD_FMADD(KP866025403, TF, TC);
            TV             = SIMD_FMADD(KP866025403, TJ, TI);
            TK             = SIMD_FNMADD(KP866025403, TJ, TI);
            TW             = SIMD_FNMADD(KP866025403, Tq, TL);
            TM             = SIMD_FMADD(KP866025403, Tq, TL);
            Tw             = SIMD_FNMADD(KP500000000, Tq, Tp);
            Tr             = Tp + Tq;
            T9             = T5 + T8;
            T1h            = T5 - T8;
            T1a            = T12 + T17;
            T18            = T12 - T17;
            TY             = TS + TT;
            TU             = TS - TT;
            TZ             = TV - TW;
            TX             = TV + TW;
            Ts             = To - Tr;
            T1l            = To + Tr;
            Tx             = SIMD_FNMADD(KP866025403, T7, Tw);
            TQ             = SIMD_FMADD(KP866025403, T7, Tw);
            ro[WS(os, 9)]  = T1h + T1k;
            ro[WS(os, 3)]  = T1h - T1k;
            ro[0]          = T9 + Ti;
            ro[WS(os, 6)]  = T9 - Ti;
            T1g            = T1c + T1d;
            T1e            = T1c - T1d;
            ro[WS(os, 7)]  = TZ - T18;
            ro[WS(os, 1)]  = TZ + T18;
            ro[WS(os, 4)]  = TX + TY;
            ro[WS(os, 10)] = TX - TY;
            io[WS(os, 9)]  = Ts - Tj;
            io[WS(os, 3)]  = Tj + Ts;
            io[0]          = T1l + T1m;
            io[WS(os, 6)]  = T1l - T1m;
            T1f            = Tv + Tx;
            Ty             = Tv - Tx;
            T19            = TP + TQ;
            TR             = TP - TQ;
            TH             = TB - TG;
            TO             = TB + TG;
        }
        io[WS(os, 8)]  = T1f + T1g;
        io[WS(os, 2)]  = T1f - T1g;
        io[WS(os, 4)]  = T19 + T1a;
        io[WS(os, 10)] = T19 - T1a;
        io[WS(os, 7)]  = TR + TU;
        io[WS(os, 1)]  = TR - TU;
        io[WS(os, 11)] = Ty + TH;
        io[WS(os, 5)]  = Ty - TH;
        TN             = TK + TM;
        T1b            = TK - TM;
        ro[WS(os, 11)] = T1b - T1e;
        ro[WS(os, 5)]  = T1b + T1e;
        ro[WS(os, 8)]  = TN + TO;
        ro[WS(os, 2)]  = TN - TO;
    }
}

template <>
struct c2cf_traits<12, 11>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 92;
    static constexpr long_t memory_accesses = 46;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 11 -name c2cf
 * -standalone */

/*
 * This function contains 92 FP additions, 24 FP multiplications,
 * (or, 68 additions, 0 multiplications, 24 fused multiply/add),
 * 92 stack variables, 2 constants, and 46 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 11>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TP, TS, T1f, T15, TU, TM, T1g, T1e, T1m, T1k, T1l, TD, TT,
            T1h;
        {
            SIMD_FLOAT Ty, TO, Tf, TB, TR, Tc, TN, T5, TK, Tx, Tq, TQ, Ta, Td,
                Tv;
            SIMD_FLOAT TA, Ti, T1c, TF, T16, T1p, T1b, T1, T2, T3, Tm, Tn, To,
                T6, T7;
            SIMD_FLOAT T8, Tr, Ts, Tt, T19, TI, T4, TJ, Tp, T9, Tg, Tu, Th, T1a;
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            Tm  = ii[0];
            Tn  = ii[WS(is, 4)];
            To  = ii[WS(is, 8)];
            T6  = ri[WS(is, 6)];
            T7  = ri[WS(is, 10)];
            T8  = ri[WS(is, 2)];
            Tr  = ii[WS(is, 6)];
            Ts  = ii[WS(is, 10)];
            Tt  = ii[WS(is, 2)];
            T19 = ii[WS(is, 9)];
            TI  = ii[WS(is, 1)];
            T4  = T2 + T3;
            Ty  = T3 - T2;
            TJ  = ii[WS(is, 5)];
            TO  = Tn - To;
            Tp  = Tn + To;
            Tf  = ri[WS(is, 9)];
            T9  = T7 + T8;
            TB  = T8 - T7;
            Tg  = ri[WS(is, 1)];
            TR  = Ts - Tt;
            Tu  = Ts + Tt;
            Th  = ri[WS(is, 5)];
            Tc  = ri[WS(is, 3)];
            TN  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            TK  = TI - TJ;
            T1a = TI + TJ;
            Tx  = SIMD_FNMADD(KP500000000, Tp, Tm);
            Tq  = Tm + Tp;
            TQ  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            Td  = ri[WS(is, 7)];
            Tv  = Tr + Tu;
            TA  = SIMD_FNMADD(KP500000000, Tu, Tr);
            Ti  = Tg + Th;
            T1c = Th - Tg;
            TF  = ii[WS(is, 7)];
            T16 = ii[WS(is, 3)];
            T1p = T19 + T1a;
            T1b = SIMD_FNMADD(KP500000000, T1a, T19);
            {
                SIMD_FLOAT Tz, TV, T11, Tb, T1n, TE, Te, TC, TW, Tw, T1r, TH,
                    Tj, T1o, T17;
                SIMD_FLOAT T1d, T1j, T12, TY, TG, TX, TL, TZ, Tl, Tk, T1q, T1s,
                    T18, T1i, T13;
                SIMD_FLOAT T14, T10;
                Tz             = SIMD_FNMADD(KP866025403, Ty, Tx);
                TV             = SIMD_FMADD(KP866025403, Ty, Tx);
                T11            = SIMD_FMADD(KP866025403, TO, TN);
                TP             = SIMD_FNMADD(KP866025403, TO, TN);
                Tb             = T5 + Ta;
                T1n            = T5 - Ta;
                TE             = SIMD_FNMADD(KP500000000, Td, Tc);
                Te             = Tc + Td;
                TC             = SIMD_FNMADD(KP866025403, TB, TA);
                TW             = SIMD_FMADD(KP866025403, TB, TA);
                Tw             = Tq - Tv;
                T1r            = Tq + Tv;
                TH             = SIMD_FNMADD(KP500000000, Ti, Tf);
                Tj             = Tf + Ti;
                T1o            = T16 + TF;
                T17            = SIMD_FNMADD(KP500000000, TF, T16);
                T1d            = SIMD_FMADD(KP866025403, T1c, T1b);
                T1j            = SIMD_FNMADD(KP866025403, T1c, T1b);
                TS             = SIMD_FNMADD(KP866025403, TR, TQ);
                T12            = SIMD_FMADD(KP866025403, TR, TQ);
                TY             = SIMD_FMADD(KP866025403, TF, TE);
                TG             = SIMD_FNMADD(KP866025403, TF, TE);
                T1f            = TV + TW;
                TX             = TV - TW;
                TL             = SIMD_FNMADD(KP866025403, TK, TH);
                TZ             = SIMD_FMADD(KP866025403, TK, TH);
                Tl             = Te - Tj;
                Tk             = Te + Tj;
                T1q            = T1o - T1p;
                T1s            = T1o + T1p;
                T18            = SIMD_FNMADD(KP866025403, Td, T17);
                T1i            = SIMD_FMADD(KP866025403, Td, T17);
                T15            = T11 - T12;
                T13            = T11 + T12;
                TU             = TG + TL;
                TM             = TG - TL;
                T14            = TY + TZ;
                T10            = TY - TZ;
                io[WS(os, 9)]  = Tw - Tl;
                io[WS(os, 3)]  = Tl + Tw;
                ro[0]          = Tb + Tk;
                ro[WS(os, 6)]  = Tb - Tk;
                ro[WS(os, 9)]  = T1n + T1q;
                ro[WS(os, 3)]  = T1n - T1q;
                io[0]          = T1r + T1s;
                io[WS(os, 6)]  = T1r - T1s;
                T1g            = T18 + T1d;
                T1e            = T18 - T1d;
                T1m            = T1i + T1j;
                T1k            = T1i - T1j;
                T1l            = Tz + TC;
                TD             = Tz - TC;
                ro[WS(os, 4)]  = T13 + T14;
                ro[WS(os, 10)] = T13 - T14;
                io[WS(os, 7)]  = TX + T10;
                io[WS(os, 1)]  = TX - T10;
            }
        }
        io[WS(os, 4)]  = T1f + T1g;
        io[WS(os, 10)] = T1f - T1g;
        ro[WS(os, 7)]  = T15 - T1e;
        ro[WS(os, 1)]  = T15 + T1e;
        io[WS(os, 8)]  = T1l + T1m;
        io[WS(os, 2)]  = T1l - T1m;
        io[WS(os, 11)] = TD + TM;
        io[WS(os, 5)]  = TD - TM;
        TT             = TP + TS;
        T1h            = TP - TS;
        ro[WS(os, 11)] = T1h - T1k;
        ro[WS(os, 5)]  = T1h + T1k;
        ro[WS(os, 8)]  = TT + TU;
        ro[WS(os, 2)]  = TT - TU;
    }
}

template <>
struct c2cf_traits<12, 12>
{
    static constexpr long_t flops           = 120;
    static constexpr long_t operations      = 96;
    static constexpr long_t memory_accesses = 48;
    static constexpr long_t stack_vars      = 98;
    static constexpr long_t constants       = 2;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 12 -first-k 12 -name c2cf
 * -standalone */

/*
 * This function contains 96 FP additions, 24 FP multiplications,
 * (or, 72 additions, 0 multiplications, 24 fused multiply/add),
 * 98 stack variables, 2 constants, and 48 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 12 && ProvidedElements == 12>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1t, Tb, Ty, T1x, TK, T12, TT, TW, T1e, T1o, T11, T1l, T17,
            T19, TF;
        SIMD_FLOAT T1r, T13, TP, Tm, Tn, T1j, T1p, T1y, T1w, TX, T1n, TQ, TY,
            T14, T18;
        SIMD_FLOAT T1q, T1s, T1k, T1m;
        {
            SIMD_FLOAT TA, TS, T1a, TD, TV, Th, TR, T5, T1d, Tz, Ts, TU, Ta, Ti,
                Tx;
            SIMD_FLOAT TC, T1b, TJ, Tj, T1f, Tg, TG, TM, TN, T1, T2, T3, To, Tp,
                Tq;
            SIMD_FLOAT T6, T7, T8, Tt, Tu, Tv, Tc, Td, T4, Te, Tr, T9, TH, Tw,
                TI;
            SIMD_FLOAT Tf, TB, TZ, T1c, T1u, T1i, Tk, T10, TE, TO, T1g, T15,
                T16, Tl, TL;
            SIMD_FLOAT T1v, T1h;
            T1  = ri[0];
            T2  = ri[WS(is, 4)];
            T3  = ri[WS(is, 8)];
            To  = ii[0];
            Tp  = ii[WS(is, 4)];
            Tq  = ii[WS(is, 8)];
            T6  = ri[WS(is, 6)];
            T7  = ri[WS(is, 10)];
            T8  = ri[WS(is, 2)];
            Tt  = ii[WS(is, 6)];
            Tu  = ii[WS(is, 10)];
            Tv  = ii[WS(is, 2)];
            Tc  = ri[WS(is, 3)];
            Td  = ri[WS(is, 7)];
            T4  = T2 + T3;
            TA  = T3 - T2;
            Te  = ri[WS(is, 11)];
            TS  = Tp - Tq;
            Tr  = Tp + Tq;
            T1a = ii[WS(is, 3)];
            T9  = T7 + T8;
            TD  = T8 - T7;
            TH  = ii[WS(is, 7)];
            TV  = Tu - Tv;
            Tw  = Tu + Tv;
            TI  = ii[WS(is, 11)];
            Th  = ri[WS(is, 9)];
            TR  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            T1d = Te - Td;
            Tf  = Td + Te;
            Tz  = SIMD_FNMADD(KP500000000, Tr, To);
            Ts  = To + Tr;
            TU  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            Ti  = ri[WS(is, 1)];
            Tx  = Tt + Tw;
            TC  = SIMD_FNMADD(KP500000000, Tw, Tt);
            T1b = TH + TI;
            TJ  = TH - TI;
            Tj  = ri[WS(is, 5)];
            T1f = ii[WS(is, 9)];
            Tg  = Tc + Tf;
            TG  = SIMD_FNMADD(KP500000000, Tf, Tc);
            TM  = ii[WS(is, 1)];
            TN  = ii[WS(is, 5)];
            T1t = T5 - Ta;
            Tb  = T5 + Ta;
            TB  = SIMD_FNMADD(KP866025403, TA, Tz);
            TZ  = SIMD_FMADD(KP866025403, TA, Tz);
            Ty  = Ts - Tx;
            T1x = Ts + Tx;
            T1c = SIMD_FNMADD(KP500000000, T1b, T1a);
            T1u = T1a + T1b;
            T1i = Tj - Ti;
            Tk  = Ti + Tj;
            T10 = SIMD_FMADD(KP866025403, TD, TC);
            TE  = SIMD_FNMADD(KP866025403, TD, TC);
            TK  = SIMD_FNMADD(KP866025403, TJ, TG);
            T12 = SIMD_FMADD(KP866025403, TJ, TG);
            TO  = TM - TN;
            T1g = TM + TN;
            T15 = SIMD_FMADD(KP866025403, TS, TR);
            TT  = SIMD_FNMADD(KP866025403, TS, TR);
            TW  = SIMD_FNMADD(KP866025403, TV, TU);
            T16 = SIMD_FMADD(KP866025403, TV, TU);
            T1e = SIMD_FMADD(KP866025403, T1d, T1c);
            T1o = SIMD_FNMADD(KP866025403, T1d, T1c);
            Tl  = Th + Tk;
            TL  = SIMD_FNMADD(KP500000000, Tk, Th);
            T11 = TZ - T10;
            T1l = TZ + T10;
            T1v = T1f + T1g;
            T1h = SIMD_FNMADD(KP500000000, T1g, T1f);
            T17 = T15 + T16;
            T19 = T15 - T16;
            TF  = TB - TE;
            T1r = TB + TE;
            T13 = SIMD_FMADD(KP866025403, TO, TL);
            TP  = SIMD_FNMADD(KP866025403, TO, TL);
            Tm  = Tg + Tl;
            Tn  = Tg - Tl;
            T1j = SIMD_FMADD(KP866025403, T1i, T1h);
            T1p = SIMD_FNMADD(KP866025403, T1i, T1h);
            T1y = T1u + T1v;
            T1w = T1u - T1v;
        }
        TX             = TT + TW;
        T1n            = TT - TW;
        TQ             = TK - TP;
        TY             = TK + TP;
        T14            = T12 - T13;
        T18            = T12 + T13;
        io[WS(os, 9)]  = Ty - Tn;
        io[WS(os, 3)]  = Tn + Ty;
        ro[0]          = Tb + Tm;
        ro[WS(os, 6)]  = Tb - Tm;
        T1q            = T1o - T1p;
        T1s            = T1o + T1p;
        T1k            = T1e - T1j;
        T1m            = T1e + T1j;
        ro[WS(os, 9)]  = T1t + T1w;
        ro[WS(os, 3)]  = T1t - T1w;
        io[0]          = T1x + T1y;
        io[WS(os, 6)]  = T1x - T1y;
        ro[WS(os, 8)]  = TX + TY;
        ro[WS(os, 2)]  = TX - TY;
        io[WS(os, 11)] = TF + TQ;
        io[WS(os, 5)]  = TF - TQ;
        ro[WS(os, 4)]  = T17 + T18;
        ro[WS(os, 10)] = T17 - T18;
        io[WS(os, 7)]  = T11 + T14;
        io[WS(os, 1)]  = T11 - T14;
        io[WS(os, 8)]  = T1r + T1s;
        io[WS(os, 2)]  = T1r - T1s;
        ro[WS(os, 11)] = T1n - T1q;
        ro[WS(os, 5)]  = T1n + T1q;
        io[WS(os, 4)]  = T1l + T1m;
        io[WS(os, 10)] = T1l - T1m;
        ro[WS(os, 7)]  = T19 - T1k;
        ro[WS(os, 1)]  = T19 + T1k;
    }
}

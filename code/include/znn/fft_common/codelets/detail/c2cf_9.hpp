//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cf_traits<9, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 1 -name c2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 1>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    {
        SIMD_FLOAT T1, T2;
        T1            = ri[0];
        T2            = ii[0];
        ro[WS(os, 5)] = T1;
        ro[WS(os, 3)] = T1;
        ro[WS(os, 6)] = T1;
        ro[WS(os, 4)] = T1;
        ro[WS(os, 2)] = T1;
        ro[WS(os, 1)] = T1;
        ro[WS(os, 8)] = T1;
        ro[WS(os, 7)] = T1;
        ro[0]         = T1;
        io[WS(os, 5)] = T2;
        io[WS(os, 3)] = T2;
        io[WS(os, 6)] = T2;
        io[WS(os, 4)] = T2;
        io[WS(os, 2)] = T2;
        io[WS(os, 1)] = T2;
        io[WS(os, 8)] = T2;
        io[WS(os, 7)] = T2;
        io[0]         = T2;
    }
}

template <>
struct c2cf_traits<9, 2>
{
    static constexpr long_t flops           = 54;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 24;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 2 -name c2cf
 * -standalone */

/*
 * This function contains 28 FP additions, 26 FP multiplications,
 * (or, 2 additions, 0 multiplications, 26 fused multiply/add),
 * 24 stack variables, 10 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 2>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP663413948, +0.663413948168938396205421319635891297216863310);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP766044443, +0.766044443118978035202392650555416673935832457);
    DK(KP383022221, +0.383022221559489017601196325277708336967916229);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T3, T2, T4, Tb, T7, T8, Tc, T5, T6, Ta, T9, Td, Te;
        T1            = ri[0];
        T3            = ii[0];
        T2            = ri[WS(is, 1)];
        T4            = ii[WS(is, 1)];
        ro[0]         = T1 + T2;
        Tb            = SIMD_FNMADD(KP500000000, T2, T1);
        io[0]         = T3 + T4;
        T7            = SIMD_FMADD(KP839099631, T4, T2);
        T8            = SIMD_FNMADD(KP839099631, T2, T4);
        Tc            = SIMD_FMADD(KP176326980, T2, T4);
        T5            = SIMD_FMSUB(KP176326980, T4, T2);
        T6            = SIMD_FNMADD(KP500000000, T4, T3);
        ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, T4, Tb);
        ro[WS(os, 3)] = SIMD_FMADD(KP866025403, T4, Tb);
        Ta            = SIMD_FNMADD(KP383022221, T7, T1);
        ro[WS(os, 1)] = SIMD_FMADD(KP766044443, T7, T1);
        T9            = SIMD_FNMADD(KP383022221, T8, T3);
        io[WS(os, 1)] = SIMD_FMADD(KP766044443, T8, T3);
        Td            = SIMD_FNMADD(KP492403876, Tc, T1);
        ro[WS(os, 2)] = SIMD_FMADD(KP984807753, Tc, T1);
        io[WS(os, 3)] = SIMD_FNMADD(KP866025403, T2, T6);
        io[WS(os, 6)] = SIMD_FMADD(KP866025403, T2, T6);
        Te            = SIMD_FNMADD(KP492403876, T5, T3);
        io[WS(os, 2)] = SIMD_FMADD(KP984807753, T5, T3);
        ro[WS(os, 4)] = SIMD_FMADD(KP663413948, T8, Ta);
        ro[WS(os, 7)] = SIMD_FNMADD(KP663413948, T8, Ta);
        io[WS(os, 7)] = SIMD_FMADD(KP663413948, T7, T9);
        io[WS(os, 4)] = SIMD_FNMADD(KP663413948, T7, T9);
        ro[WS(os, 8)] = SIMD_FNMADD(KP852868531, T5, Td);
        ro[WS(os, 5)] = SIMD_FMADD(KP852868531, T5, Td);
        io[WS(os, 8)] = SIMD_FMADD(KP852868531, Tc, Te);
        io[WS(os, 5)] = SIMD_FNMADD(KP852868531, Tc, Te);
    }
}

template <>
struct c2cf_traits<9, 3>
{
    static constexpr long_t flops           = 82;
    static constexpr long_t operations      = 44;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 42;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 3 -name c2cf
 * -standalone */

/*
 * This function contains 44 FP additions, 38 FP multiplications,
 * (or, 6 additions, 0 multiplications, 38 fused multiply/add),
 * 42 stack variables, 10 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 3>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    {
        SIMD_FLOAT T1, T5, T2, T8, T3, T6, T9, To, Tb, Th, T4, Tw, Tu, Tf, T7;
        SIMD_FLOAT Tn, Tc, Ti, Tk, Tj, Td, Tm, Tp, Tt, Ta, Tr, Te, Tv, Tl, Tg;
        SIMD_FLOAT Tq, Ts;
        T1            = ri[0];
        T5            = ii[0];
        T2            = ri[WS(is, 1)];
        T8            = ii[WS(is, 1)];
        T3            = ri[WS(is, 2)];
        T6            = ii[WS(is, 2)];
        T9            = SIMD_FNMADD(KP839099631, T2, T8);
        To            = SIMD_FMADD(KP839099631, T8, T2);
        Tb            = SIMD_FMADD(KP176326980, T2, T8);
        Th            = SIMD_FMSUB(KP176326980, T8, T2);
        T4            = T2 + T3;
        Tw            = T3 - T2;
        Tu            = T8 + T6;
        Tf            = T8 - T6;
        T7            = SIMD_FMSUB(KP176326980, T6, T3);
        Tn            = SIMD_FMADD(KP176326980, T3, T6);
        Tc            = SIMD_FMSUB(KP363970234, T6, T3);
        Ti            = SIMD_FMADD(KP363970234, T3, T6);
        Te            = SIMD_FNMADD(KP500000000, T4, T1);
        ro[0]         = T1 + T4;
        Tv            = SIMD_FNMADD(KP500000000, Tu, T5);
        io[0]         = T5 + Tu;
        Tk            = SIMD_FNMADD(KP954188894, Ti, Th);
        Tj            = SIMD_FMADD(KP954188894, Ti, Th);
        Td            = SIMD_FMADD(KP954188894, Tc, Tb);
        Tm            = SIMD_FNMADD(KP954188894, Tc, Tb);
        Tp            = SIMD_FMADD(KP777861913, To, Tn);
        Tt            = SIMD_FNMADD(KP777861913, To, Tn);
        Ta            = SIMD_FMADD(KP777861913, T9, T7);
        Tr            = SIMD_FNMADD(KP777861913, T9, T7);
        ro[WS(os, 3)] = SIMD_FMADD(KP866025403, Tf, Te);
        ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, Tf, Te);
        io[WS(os, 6)] = SIMD_FNMADD(KP866025403, Tw, Tv);
        io[WS(os, 3)] = SIMD_FMADD(KP866025403, Tw, Tv);
        Tl            = SIMD_FNMADD(KP492403876, Tk, T5);
        io[WS(os, 2)] = SIMD_FMADD(KP984807753, Tk, T5);
        Tg            = SIMD_FNMADD(KP492403876, Td, T1);
        ro[WS(os, 2)] = SIMD_FMADD(KP984807753, Td, T1);
        Tq            = SIMD_FNMADD(KP492403876, Tp, T1);
        ro[WS(os, 1)] = SIMD_FMADD(KP984807753, Tp, T1);
        Ts            = SIMD_FNMADD(KP492403876, Ta, T5);
        io[WS(os, 1)] = SIMD_FMADD(KP984807753, Ta, T5);
        io[WS(os, 8)] = SIMD_FMADD(KP852868531, Tm, Tl);
        io[WS(os, 5)] = SIMD_FNMADD(KP852868531, Tm, Tl);
        ro[WS(os, 5)] = SIMD_FMADD(KP852868531, Tj, Tg);
        ro[WS(os, 8)] = SIMD_FNMADD(KP852868531, Tj, Tg);
        ro[WS(os, 7)] = SIMD_FMADD(KP852868531, Tr, Tq);
        ro[WS(os, 4)] = SIMD_FNMADD(KP852868531, Tr, Tq);
        io[WS(os, 4)] = SIMD_FMADD(KP852868531, Tt, Ts);
        io[WS(os, 7)] = SIMD_FNMADD(KP852868531, Tt, Ts);
    }
}

template <>
struct c2cf_traits<9, 4>
{
    static constexpr long_t flops           = 96;
    static constexpr long_t operations      = 52;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 52;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 4 -name c2cf
 * -standalone */

/*
 * This function contains 52 FP additions, 44 FP multiplications,
 * (or, 8 additions, 0 multiplications, 44 fused multiply/add),
 * 52 stack variables, 10 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 4>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T7, T8, T4, Td, T5, Tb;
        T1 = ri[0];
        T2 = ri[WS(is, 3)];
        T7 = ii[0];
        T8 = ii[WS(is, 3)];
        T4 = ri[WS(is, 1)];
        Td = ii[WS(is, 1)];
        T5 = ri[WS(is, 2)];
        Tb = ii[WS(is, 2)];
        {
            SIMD_FLOAT T3, TD, Te, Tx, Ti, To, T6, TG, TE, Tm, Tc, Tw, Tj, Tp,
                Tv;
            SIMD_FLOAT Th, Ta, Tr, Tg, T9, Ts, Tq, Tk, Tu, Ty, TC, Tf, TA, Tl,
                TF;
            SIMD_FLOAT Tt, Tn, Tz, TB;
            Tg            = SIMD_FNMADD(KP500000000, T2, T1);
            T3            = T1 + T2;
            T9            = SIMD_FNMADD(KP500000000, T8, T7);
            TD            = T7 + T8;
            Te            = SIMD_FNMADD(KP839099631, T4, Td);
            Tx            = SIMD_FMADD(KP839099631, Td, T4);
            Ti            = SIMD_FMADD(KP176326980, T4, Td);
            To            = SIMD_FMSUB(KP176326980, Td, T4);
            T6            = T4 + T5;
            TG            = T5 - T4;
            TE            = Td + Tb;
            Tm            = Td - Tb;
            Tc            = SIMD_FMSUB(KP176326980, Tb, T5);
            Tw            = SIMD_FMADD(KP176326980, T5, Tb);
            Tj            = SIMD_FMSUB(KP363970234, Tb, T5);
            Tp            = SIMD_FMADD(KP363970234, T5, Tb);
            Tv            = SIMD_FMADD(KP866025403, T8, Tg);
            Th            = SIMD_FNMADD(KP866025403, T8, Tg);
            Ta            = SIMD_FNMADD(KP866025403, T2, T9);
            Tr            = SIMD_FMADD(KP866025403, T2, T9);
            Tl            = SIMD_FNMADD(KP500000000, T6, T3);
            ro[0]         = T3 + T6;
            TF            = SIMD_FNMADD(KP500000000, TE, TD);
            io[0]         = TD + TE;
            Ts            = SIMD_FNMADD(KP954188894, Tp, To);
            Tq            = SIMD_FMADD(KP954188894, Tp, To);
            Tk            = SIMD_FMADD(KP954188894, Tj, Ti);
            Tu            = SIMD_FNMADD(KP954188894, Tj, Ti);
            Ty            = SIMD_FMADD(KP777861913, Tx, Tw);
            TC            = SIMD_FNMADD(KP777861913, Tx, Tw);
            Tf            = SIMD_FMADD(KP777861913, Te, Tc);
            TA            = SIMD_FNMADD(KP777861913, Te, Tc);
            ro[WS(os, 3)] = SIMD_FMADD(KP866025403, Tm, Tl);
            ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, Tm, Tl);
            io[WS(os, 6)] = SIMD_FNMADD(KP866025403, TG, TF);
            io[WS(os, 3)] = SIMD_FMADD(KP866025403, TG, TF);
            Tt            = SIMD_FNMADD(KP492403876, Ts, Tr);
            io[WS(os, 2)] = SIMD_FMADD(KP984807753, Ts, Tr);
            Tn            = SIMD_FNMADD(KP492403876, Tk, Th);
            ro[WS(os, 2)] = SIMD_FMADD(KP984807753, Tk, Th);
            Tz            = SIMD_FNMADD(KP492403876, Ty, Tv);
            ro[WS(os, 1)] = SIMD_FMADD(KP984807753, Ty, Tv);
            TB            = SIMD_FNMADD(KP492403876, Tf, Ta);
            io[WS(os, 1)] = SIMD_FMADD(KP984807753, Tf, Ta);
            io[WS(os, 8)] = SIMD_FMADD(KP852868531, Tu, Tt);
            io[WS(os, 5)] = SIMD_FNMADD(KP852868531, Tu, Tt);
            ro[WS(os, 5)] = SIMD_FMADD(KP852868531, Tq, Tn);
            ro[WS(os, 8)] = SIMD_FNMADD(KP852868531, Tq, Tn);
            ro[WS(os, 7)] = SIMD_FMADD(KP852868531, TA, Tz);
            ro[WS(os, 4)] = SIMD_FNMADD(KP852868531, TA, Tz);
            io[WS(os, 4)] = SIMD_FMADD(KP852868531, TC, TB);
            io[WS(os, 7)] = SIMD_FNMADD(KP852868531, TC, TB);
        }
    }
}

template <>
struct c2cf_traits<9, 5>
{
    static constexpr long_t flops           = 110;
    static constexpr long_t operations      = 60;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 62;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 5 -name c2cf
 * -standalone */

/*
 * This function contains 60 FP additions, 50 FP multiplications,
 * (or, 10 additions, 0 multiplications, 50 fused multiply/add),
 * 62 stack variables, 10 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 5>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T9, Ta, T7, Td, T4, T5, Tf, Tg, Tn, T3, Tb, TN, TG;
        SIMD_FLOAT Te, Ts, Tz, T6, Tj, Th, Tv;
        T1 = ri[0];
        T2 = ri[WS(is, 3)];
        T9 = ii[0];
        Ta = ii[WS(is, 3)];
        T7 = ri[WS(is, 2)];
        Td = ii[WS(is, 2)];
        T4 = ri[WS(is, 1)];
        T5 = ri[WS(is, 4)];
        Tf = ii[WS(is, 1)];
        Tg = ii[WS(is, 4)];
        Tn = SIMD_FNMADD(KP500000000, T2, T1);
        T3 = T1 + T2;
        Tb = SIMD_FNMADD(KP500000000, Ta, T9);
        TN = T9 + Ta;
        TG = SIMD_FMADD(KP176326980, T7, Td);
        Te = SIMD_FMSUB(KP176326980, Td, T7);
        Ts = SIMD_FMSUB(KP363970234, Td, T7);
        Tz = SIMD_FMADD(KP363970234, T7, Td);
        T6 = T4 + T5;
        Tj = SIMD_FNMADD(KP500000000, T5, T4);
        Th = SIMD_FNMADD(KP500000000, Tg, Tf);
        Tv = Tf + Tg;
        {
            SIMD_FLOAT TF, To, Tc, TB, Tk, Tq, T8, TQ, TO, Tw, Ti, Tp, Tu, TP,
                Tr;
            SIMD_FLOAT Ty, Tl, TH, TA, TC, Tt, TE, TM, TI, Tm, TK, TD, Tx, TJ,
                TL;
            TF            = SIMD_FMADD(KP866025403, Ta, Tn);
            To            = SIMD_FNMADD(KP866025403, Ta, Tn);
            Tc            = SIMD_FNMADD(KP866025403, T2, Tb);
            TB            = SIMD_FMADD(KP866025403, T2, Tb);
            Tk            = SIMD_FMADD(KP866025403, Tg, Tj);
            Tq            = SIMD_FNMADD(KP866025403, Tg, Tj);
            T8            = T6 + T7;
            TQ            = T7 - T6;
            TO            = Tv + Td;
            Tw            = Tv - Td;
            Ti            = SIMD_FNMADD(KP866025403, T5, Th);
            Tp            = SIMD_FMADD(KP866025403, T5, Th);
            Tu            = SIMD_FNMADD(KP500000000, T8, T3);
            ro[0]         = T3 + T8;
            TP            = SIMD_FNMADD(KP500000000, TO, TN);
            io[0]         = TN + TO;
            Tr            = SIMD_FMADD(KP176326980, Tq, Tp);
            Ty            = SIMD_FNMADD(KP176326980, Tp, Tq);
            Tl            = SIMD_FNMADD(KP839099631, Tk, Ti);
            TH            = SIMD_FMADD(KP839099631, Ti, Tk);
            ro[WS(os, 3)] = SIMD_FMADD(KP866025403, Tw, Tu);
            ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, Tw, Tu);
            io[WS(os, 6)] = SIMD_FNMADD(KP866025403, TQ, TP);
            io[WS(os, 3)] = SIMD_FMADD(KP866025403, TQ, TP);
            TA            = SIMD_FNMADD(KP954188894, Tz, Ty);
            TC            = SIMD_FMADD(KP954188894, Tz, Ty);
            Tt            = SIMD_FMADD(KP954188894, Ts, Tr);
            TE            = SIMD_FNMADD(KP954188894, Ts, Tr);
            TM            = SIMD_FNMADD(KP777861913, TH, TG);
            TI            = SIMD_FMADD(KP777861913, TH, TG);
            Tm            = SIMD_FMADD(KP777861913, Tl, Te);
            TK            = SIMD_FNMADD(KP777861913, Tl, Te);
            io[WS(os, 2)] = SIMD_FNMADD(KP984807753, TC, TB);
            TD            = SIMD_FMADD(KP492403876, TC, TB);
            ro[WS(os, 2)] = SIMD_FMADD(KP984807753, Tt, To);
            Tx            = SIMD_FNMADD(KP492403876, Tt, To);
            ro[WS(os, 1)] = SIMD_FMADD(KP984807753, TI, TF);
            TJ            = SIMD_FNMADD(KP492403876, TI, TF);
            io[WS(os, 1)] = SIMD_FMADD(KP984807753, Tm, Tc);
            TL            = SIMD_FNMADD(KP492403876, Tm, Tc);
            io[WS(os, 5)] = SIMD_FNMADD(KP852868531, TE, TD);
            io[WS(os, 8)] = SIMD_FMADD(KP852868531, TE, TD);
            ro[WS(os, 5)] = SIMD_FNMADD(KP852868531, TA, Tx);
            ro[WS(os, 8)] = SIMD_FMADD(KP852868531, TA, Tx);
            ro[WS(os, 7)] = SIMD_FMADD(KP852868531, TK, TJ);
            ro[WS(os, 4)] = SIMD_FNMADD(KP852868531, TK, TJ);
            io[WS(os, 7)] = SIMD_FNMADD(KP852868531, TM, TL);
            io[WS(os, 4)] = SIMD_FMADD(KP852868531, TM, TL);
        }
    }
}

template <>
struct c2cf_traits<9, 6>
{
    static constexpr long_t flops           = 124;
    static constexpr long_t operations      = 68;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 72;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 6 -name c2cf
 * -standalone */

/*
 * This function contains 68 FP additions, 56 FP multiplications,
 * (or, 12 additions, 0 multiplications, 56 fused multiply/add),
 * 72 stack variables, 10 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 6>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, Tc, Tt, T4, T5, Tm, To, T7, T8, Te, Tf, Tb, T3, Tu;
        SIMD_FLOAT TX, T6, Tl, Tp, TU, T9, Ti, Tg, TV;
        T1 = ri[0];
        T2 = ri[WS(is, 3)];
        Tc = ii[WS(is, 3)];
        Tt = ii[0];
        T4 = ri[WS(is, 1)];
        T5 = ri[WS(is, 4)];
        Tm = ii[WS(is, 4)];
        To = ii[WS(is, 1)];
        T7 = ri[WS(is, 2)];
        T8 = ri[WS(is, 5)];
        Te = ii[WS(is, 2)];
        Tf = ii[WS(is, 5)];
        Tb = SIMD_FNMADD(KP500000000, T2, T1);
        T3 = T1 + T2;
        Tu = SIMD_FNMADD(KP500000000, Tc, Tt);
        TX = Tt + Tc;
        T6 = T4 + T5;
        Tl = SIMD_FNMADD(KP500000000, T5, T4);
        Tp = SIMD_FNMADD(KP500000000, Tm, To);
        TU = To + Tm;
        T9 = T7 + T8;
        Ti = SIMD_FNMADD(KP500000000, T8, T7);
        Tg = SIMD_FNMADD(KP500000000, Tf, Te);
        TV = Te + Tf;
        {
            SIMD_FLOAT Td, TP, TD, Tv, TE, Tn, TF, Tq, Tj, TI, Ta, T10, TY, TW,
                Th;
            SIMD_FLOAT TH, Tr, Tx, TG, TM, TT, TZ, TJ, TN, Tk, Tw, TO, TQ, TK,
                TS;
            SIMD_FLOAT TC, Ty, Ts, TA, TR, TL, Tz, TB;
            Td            = SIMD_FMADD(KP866025403, Tc, Tb);
            TP            = SIMD_FNMADD(KP866025403, Tc, Tb);
            TD            = SIMD_FMADD(KP866025403, T2, Tu);
            Tv            = SIMD_FNMADD(KP866025403, T2, Tu);
            TE            = SIMD_FNMADD(KP866025403, Tm, Tl);
            Tn            = SIMD_FMADD(KP866025403, Tm, Tl);
            TF            = SIMD_FMADD(KP866025403, T5, Tp);
            Tq            = SIMD_FNMADD(KP866025403, T5, Tp);
            Tj            = SIMD_FMADD(KP866025403, Tf, Ti);
            TI            = SIMD_FNMADD(KP866025403, Tf, Ti);
            Ta            = T6 + T9;
            T10           = T9 - T6;
            TY            = TU + TV;
            TW            = TU - TV;
            Th            = SIMD_FNMADD(KP866025403, T8, Tg);
            TH            = SIMD_FMADD(KP866025403, T8, Tg);
            Tr            = SIMD_FMADD(KP839099631, Tq, Tn);
            Tx            = SIMD_FNMADD(KP839099631, Tn, Tq);
            TG            = SIMD_FNMADD(KP176326980, TF, TE);
            TM            = SIMD_FMADD(KP176326980, TE, TF);
            TT            = SIMD_FNMADD(KP500000000, Ta, T3);
            ro[0]         = T3 + Ta;
            TZ            = SIMD_FNMADD(KP500000000, TY, TX);
            io[0]         = TX + TY;
            TJ            = SIMD_FMADD(KP363970234, TI, TH);
            TN            = SIMD_FNMADD(KP363970234, TH, TI);
            Tk            = SIMD_FMADD(KP176326980, Tj, Th);
            Tw            = SIMD_FNMADD(KP176326980, Th, Tj);
            ro[WS(os, 3)] = SIMD_FMADD(KP866025403, TW, TT);
            ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, TW, TT);
            io[WS(os, 6)] = SIMD_FNMADD(KP866025403, T10, TZ);
            io[WS(os, 3)] = SIMD_FMADD(KP866025403, T10, TZ);
            TO            = SIMD_FMADD(KP954188894, TN, TM);
            TQ            = SIMD_FNMADD(KP954188894, TN, TM);
            TK            = SIMD_FMADD(KP954188894, TJ, TG);
            TS            = SIMD_FNMADD(KP954188894, TJ, TG);
            TC            = SIMD_FMADD(KP777861913, Tx, Tw);
            Ty            = SIMD_FNMADD(KP777861913, Tx, Tw);
            Ts            = SIMD_FMADD(KP777861913, Tr, Tk);
            TA            = SIMD_FNMADD(KP777861913, Tr, Tk);
            ro[WS(os, 2)] = SIMD_FMADD(KP984807753, TQ, TP);
            TR            = SIMD_FNMADD(KP492403876, TQ, TP);
            io[WS(os, 2)] = SIMD_FNMADD(KP984807753, TK, TD);
            TL            = SIMD_FMADD(KP492403876, TK, TD);
            io[WS(os, 1)] = SIMD_FNMADD(KP984807753, Ty, Tv);
            Tz            = SIMD_FMADD(KP492403876, Ty, Tv);
            ro[WS(os, 1)] = SIMD_FMADD(KP984807753, Ts, Td);
            TB            = SIMD_FNMADD(KP492403876, Ts, Td);
            ro[WS(os, 8)] = SIMD_FMADD(KP852868531, TS, TR);
            ro[WS(os, 5)] = SIMD_FNMADD(KP852868531, TS, TR);
            io[WS(os, 5)] = SIMD_FNMADD(KP852868531, TO, TL);
            io[WS(os, 8)] = SIMD_FMADD(KP852868531, TO, TL);
            io[WS(os, 4)] = SIMD_FMADD(KP852868531, TA, Tz);
            io[WS(os, 7)] = SIMD_FNMADD(KP852868531, TA, Tz);
            ro[WS(os, 7)] = SIMD_FNMADD(KP852868531, TC, TB);
            ro[WS(os, 4)] = SIMD_FMADD(KP852868531, TC, TB);
        }
    }
}

template <>
struct c2cf_traits<9, 7>
{
    static constexpr long_t flops           = 128;
    static constexpr long_t operations      = 72;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 78;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 7 -name c2cf
 * -standalone */

/*
 * This function contains 72 FP additions, 56 FP multiplications,
 * (or, 16 additions, 0 multiplications, 56 fused multiply/add),
 * 78 stack variables, 10 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 7>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, Tx, Te, Tf, T6, T7, Tq, Ts, T9, Ta, Ti, Tj, T4, TA, T2;
        SIMD_FLOAT T3, Ty, Tg, T8, Tp, Tt, T10, Tb, Tm, Tk, T11, T5, Td;
        T1  = ri[0];
        T2  = ri[WS(is, 3)];
        T3  = ri[WS(is, 6)];
        Tx  = ii[0];
        Te  = ii[WS(is, 3)];
        Tf  = ii[WS(is, 6)];
        T6  = ri[WS(is, 1)];
        T7  = ri[WS(is, 4)];
        Tq  = ii[WS(is, 4)];
        Ts  = ii[WS(is, 1)];
        T9  = ri[WS(is, 2)];
        Ta  = ri[WS(is, 5)];
        Ti  = ii[WS(is, 2)];
        Tj  = ii[WS(is, 5)];
        T4  = T2 + T3;
        TA  = T3 - T2;
        Ty  = Te + Tf;
        Tg  = Te - Tf;
        T8  = T6 + T7;
        Tp  = SIMD_FNMADD(KP500000000, T7, T6);
        Tt  = SIMD_FNMADD(KP500000000, Tq, Ts);
        T10 = Ts + Tq;
        Tb  = T9 + Ta;
        Tm  = SIMD_FNMADD(KP500000000, Ta, T9);
        Tk  = SIMD_FNMADD(KP500000000, Tj, Ti);
        T11 = Ti + Tj;
        T5  = T1 + T4;
        Td  = SIMD_FNMADD(KP500000000, T4, T1);
        {
            SIMD_FLOAT T16, T12, Th, TV, TB, TJ, Tv, TD, TM, TS, TZ, T15, TP,
                TT, To;
            SIMD_FLOAT TC, T13, Tz, TK, Tr, TL, Tu, Tn, TO, Tc, T14, Tl, TN, TU,
                TW;
            SIMD_FLOAT TQ, TY, TI, TE, Tw, TG, TX, TR, TF, TH;
            T13           = Tx + Ty;
            Tz            = SIMD_FNMADD(KP500000000, Ty, Tx);
            TK            = SIMD_FNMADD(KP866025403, Tq, Tp);
            Tr            = SIMD_FMADD(KP866025403, Tq, Tp);
            TL            = SIMD_FMADD(KP866025403, T7, Tt);
            Tu            = SIMD_FNMADD(KP866025403, T7, Tt);
            Tn            = SIMD_FMADD(KP866025403, Tj, Tm);
            TO            = SIMD_FNMADD(KP866025403, Tj, Tm);
            Tc            = T8 + Tb;
            T16           = Tb - T8;
            T14           = T10 + T11;
            T12           = T10 - T11;
            Tl            = SIMD_FNMADD(KP866025403, Ta, Tk);
            TN            = SIMD_FMADD(KP866025403, Ta, Tk);
            Th            = SIMD_FMADD(KP866025403, Tg, Td);
            TV            = SIMD_FNMADD(KP866025403, Tg, Td);
            TB            = SIMD_FMADD(KP866025403, TA, Tz);
            TJ            = SIMD_FNMADD(KP866025403, TA, Tz);
            Tv            = SIMD_FMADD(KP839099631, Tu, Tr);
            TD            = SIMD_FNMADD(KP839099631, Tr, Tu);
            TM            = SIMD_FNMADD(KP176326980, TL, TK);
            TS            = SIMD_FMADD(KP176326980, TK, TL);
            TZ            = SIMD_FNMADD(KP500000000, Tc, T5);
            ro[0]         = T5 + Tc;
            T15           = SIMD_FNMADD(KP500000000, T14, T13);
            io[0]         = T13 + T14;
            TP            = SIMD_FMADD(KP363970234, TO, TN);
            TT            = SIMD_FNMADD(KP363970234, TN, TO);
            To            = SIMD_FMADD(KP176326980, Tn, Tl);
            TC            = SIMD_FNMADD(KP176326980, Tl, Tn);
            ro[WS(os, 3)] = SIMD_FMADD(KP866025403, T12, TZ);
            ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, T12, TZ);
            io[WS(os, 6)] = SIMD_FNMADD(KP866025403, T16, T15);
            io[WS(os, 3)] = SIMD_FMADD(KP866025403, T16, T15);
            TU            = SIMD_FMADD(KP954188894, TT, TS);
            TW            = SIMD_FNMADD(KP954188894, TT, TS);
            TQ            = SIMD_FMADD(KP954188894, TP, TM);
            TY            = SIMD_FNMADD(KP954188894, TP, TM);
            TI            = SIMD_FMADD(KP777861913, TD, TC);
            TE            = SIMD_FNMADD(KP777861913, TD, TC);
            Tw            = SIMD_FMADD(KP777861913, Tv, To);
            TG            = SIMD_FNMADD(KP777861913, Tv, To);
            ro[WS(os, 2)] = SIMD_FMADD(KP984807753, TW, TV);
            TX            = SIMD_FNMADD(KP492403876, TW, TV);
            io[WS(os, 2)] = SIMD_FNMADD(KP984807753, TQ, TJ);
            TR            = SIMD_FMADD(KP492403876, TQ, TJ);
            io[WS(os, 1)] = SIMD_FNMADD(KP984807753, TE, TB);
            TF            = SIMD_FMADD(KP492403876, TE, TB);
            ro[WS(os, 1)] = SIMD_FMADD(KP984807753, Tw, Th);
            TH            = SIMD_FNMADD(KP492403876, Tw, Th);
            ro[WS(os, 8)] = SIMD_FMADD(KP852868531, TY, TX);
            ro[WS(os, 5)] = SIMD_FNMADD(KP852868531, TY, TX);
            io[WS(os, 5)] = SIMD_FNMADD(KP852868531, TU, TR);
            io[WS(os, 8)] = SIMD_FMADD(KP852868531, TU, TR);
            io[WS(os, 4)] = SIMD_FMADD(KP852868531, TG, TF);
            io[WS(os, 7)] = SIMD_FNMADD(KP852868531, TG, TF);
            ro[WS(os, 7)] = SIMD_FNMADD(KP852868531, TI, TH);
            ro[WS(os, 4)] = SIMD_FMADD(KP852868531, TI, TH);
        }
    }
}

template <>
struct c2cf_traits<9, 8>
{
    static constexpr long_t flops           = 132;
    static constexpr long_t operations      = 76;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 84;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 8 -name c2cf
 * -standalone */

/*
 * This function contains 76 FP additions, 56 FP multiplications,
 * (or, 20 additions, 0 multiplications, 56 fused multiply/add),
 * 84 stack variables, 10 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 8>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, TD, Tc, Tl, T6, Tw, T7, T8, T4, TG, Ts, Ti, TE, Td, To;
        SIMD_FLOAT T17, Tm, Tt, T2, T3, Tg, Th, Tb, Tk, T9, Tz, T5, Tf, T19, Tp;
        SIMD_FLOAT TU, Tn, TT, Tu, Tx, Ta, Tr, Tj, T11, TH, TP, TF;
        T1  = ri[0];
        T2  = ri[WS(is, 3)];
        T3  = ri[WS(is, 6)];
        TD  = ii[0];
        Tg  = ii[WS(is, 3)];
        Th  = ii[WS(is, 6)];
        Tb  = ri[WS(is, 2)];
        Tc  = ri[WS(is, 5)];
        Tk  = ii[WS(is, 2)];
        Tl  = ii[WS(is, 5)];
        T6  = ri[WS(is, 1)];
        Tw  = ii[WS(is, 1)];
        T7  = ri[WS(is, 4)];
        T8  = ri[WS(is, 7)];
        T4  = T2 + T3;
        TG  = T3 - T2;
        Ts  = ii[WS(is, 7)];
        Ti  = Tg - Th;
        TE  = Tg + Th;
        Td  = Tb + Tc;
        To  = SIMD_FNMADD(KP500000000, Tc, Tb);
        T17 = Tk + Tl;
        Tm  = SIMD_FNMADD(KP500000000, Tl, Tk);
        Tt  = ii[WS(is, 4)];
        T9  = T7 + T8;
        Tz  = T7 - T8;
        T5  = T1 + T4;
        Tf  = SIMD_FNMADD(KP500000000, T4, T1);
        T19 = TD + TE;
        TF  = SIMD_FNMADD(KP500000000, TE, TD);
        Tp  = SIMD_FMADD(KP866025403, Tl, To);
        TU  = SIMD_FNMADD(KP866025403, Tl, To);
        Tn  = SIMD_FNMADD(KP866025403, Tc, Tm);
        TT  = SIMD_FMADD(KP866025403, Tc, Tm);
        Tu  = Ts - Tt;
        Tx  = Tt + Ts;
        Ta  = T6 + T9;
        Tr  = SIMD_FNMADD(KP500000000, T9, T6);
        Tj  = SIMD_FMADD(KP866025403, Ti, Tf);
        T11 = SIMD_FNMADD(KP866025403, Ti, Tf);
        TH  = SIMD_FMADD(KP866025403, TG, TF);
        TP  = SIMD_FNMADD(KP866025403, TG, TF);
        {
            SIMD_FLOAT TV, TZ, Tq, TI, T16, Ty, Tv, TQ, Te, T1c, TA, TR, T18,
                T1a, T15;
            SIMD_FLOAT TS, TY, TB, TJ, T1b, T10, T12, TW, T14, TK, TO, TC, TM,
                T13, TX;
            SIMD_FLOAT TL, TN;
            TV            = SIMD_FMADD(KP363970234, TU, TT);
            TZ            = SIMD_FNMADD(KP363970234, TT, TU);
            Tq            = SIMD_FMADD(KP176326980, Tp, Tn);
            TI            = SIMD_FNMADD(KP176326980, Tn, Tp);
            T16           = Tw + Tx;
            Ty            = SIMD_FNMADD(KP500000000, Tx, Tw);
            Tv            = SIMD_FNMADD(KP866025403, Tu, Tr);
            TQ            = SIMD_FMADD(KP866025403, Tu, Tr);
            Te            = Ta + Td;
            T1c           = Td - Ta;
            TA            = SIMD_FNMADD(KP866025403, Tz, Ty);
            TR            = SIMD_FMADD(KP866025403, Tz, Ty);
            T18           = T16 - T17;
            T1a           = T16 + T17;
            ro[0]         = T5 + Te;
            T15           = SIMD_FNMADD(KP500000000, Te, T5);
            TS            = SIMD_FNMADD(KP176326980, TR, TQ);
            TY            = SIMD_FMADD(KP176326980, TQ, TR);
            TB            = SIMD_FMADD(KP839099631, TA, Tv);
            TJ            = SIMD_FNMADD(KP839099631, Tv, TA);
            io[0]         = T19 + T1a;
            T1b           = SIMD_FNMADD(KP500000000, T1a, T19);
            ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, T18, T15);
            ro[WS(os, 3)] = SIMD_FMADD(KP866025403, T18, T15);
            T10           = SIMD_FMADD(KP954188894, TZ, TY);
            T12           = SIMD_FNMADD(KP954188894, TZ, TY);
            TW            = SIMD_FMADD(KP954188894, TV, TS);
            T14           = SIMD_FNMADD(KP954188894, TV, TS);
            TK            = SIMD_FNMADD(KP777861913, TJ, TI);
            TO            = SIMD_FMADD(KP777861913, TJ, TI);
            TC            = SIMD_FMADD(KP777861913, TB, Tq);
            TM            = SIMD_FNMADD(KP777861913, TB, Tq);
            io[WS(os, 6)] = SIMD_FNMADD(KP866025403, T1c, T1b);
            io[WS(os, 3)] = SIMD_FMADD(KP866025403, T1c, T1b);
            T13           = SIMD_FNMADD(KP492403876, T12, T11);
            ro[WS(os, 2)] = SIMD_FMADD(KP984807753, T12, T11);
            TX            = SIMD_FMADD(KP492403876, TW, TP);
            io[WS(os, 2)] = SIMD_FNMADD(KP984807753, TW, TP);
            TL            = SIMD_FMADD(KP492403876, TK, TH);
            io[WS(os, 1)] = SIMD_FNMADD(KP984807753, TK, TH);
            TN            = SIMD_FNMADD(KP492403876, TC, Tj);
            ro[WS(os, 1)] = SIMD_FMADD(KP984807753, TC, Tj);
            ro[WS(os, 8)] = SIMD_FMADD(KP852868531, T14, T13);
            ro[WS(os, 5)] = SIMD_FNMADD(KP852868531, T14, T13);
            io[WS(os, 8)] = SIMD_FMADD(KP852868531, T10, TX);
            io[WS(os, 5)] = SIMD_FNMADD(KP852868531, T10, TX);
            io[WS(os, 7)] = SIMD_FNMADD(KP852868531, TM, TL);
            io[WS(os, 4)] = SIMD_FMADD(KP852868531, TM, TL);
            ro[WS(os, 4)] = SIMD_FMADD(KP852868531, TO, TN);
            ro[WS(os, 7)] = SIMD_FNMADD(KP852868531, TO, TN);
        }
    }
}

template <>
struct c2cf_traits<9, 9>
{
    static constexpr long_t flops           = 136;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 90;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 9 -name c2cf
 * -standalone */

/*
 * This function contains 80 FP additions, 56 FP multiplications,
 * (or, 24 additions, 0 multiplications, 56 fused multiply/add),
 * 90 stack variables, 10 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 9>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP492403876, +0.492403876506104029683371512294761506835321626);
    DK(KP777861913, +0.777861913430206160028177977318626690410586096);
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP363970234, +0.363970234266202361351047882776834043890471784);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, Th, T6, Tz, Tb, Tt, T4, Tm, Tc, TM, Tk, Td, Tp, TE, T9;
        SIMD_FLOAT TH, TC, Tq, T2, T3, Ti, Tj, T7, T8, TA, TB, T5, TL, Tl, T1f;
        SIMD_FLOAT Te, Tw, Ta, TG, T1c, TD, Tr, Tu, TN, TV, Tn, T17, Tf, To, TI;
        SIMD_FLOAT TX, TF, TW, T1d, Tv;
        T1  = ri[0];
        T2  = ri[WS(is, 3)];
        T3  = ri[WS(is, 6)];
        Th  = ii[0];
        Ti  = ii[WS(is, 3)];
        Tj  = ii[WS(is, 6)];
        T6  = ri[WS(is, 1)];
        Tz  = ii[WS(is, 1)];
        T7  = ri[WS(is, 4)];
        T8  = ri[WS(is, 7)];
        TA  = ii[WS(is, 4)];
        TB  = ii[WS(is, 7)];
        Tb  = ri[WS(is, 2)];
        Tt  = ii[WS(is, 2)];
        T4  = T2 + T3;
        Tm  = T3 - T2;
        Tc  = ri[WS(is, 5)];
        TM  = Ti - Tj;
        Tk  = Ti + Tj;
        Td  = ri[WS(is, 8)];
        Tp  = ii[WS(is, 5)];
        TE  = T7 - T8;
        T9  = T7 + T8;
        TH  = TB - TA;
        TC  = TA + TB;
        Tq  = ii[WS(is, 8)];
        T5  = T1 + T4;
        TL  = SIMD_FNMADD(KP500000000, T4, T1);
        Tl  = SIMD_FNMADD(KP500000000, Tk, Th);
        T1f = Th + Tk;
        Te  = Tc + Td;
        Tw  = Td - Tc;
        Ta  = T6 + T9;
        TG  = SIMD_FNMADD(KP500000000, T9, T6);
        T1c = Tz + TC;
        TD  = SIMD_FNMADD(KP500000000, TC, Tz);
        Tr  = Tp - Tq;
        Tu  = Tp + Tq;
        TN  = SIMD_FMADD(KP866025403, TM, TL);
        TV  = SIMD_FNMADD(KP866025403, TM, TL);
        Tn  = SIMD_FMADD(KP866025403, Tm, Tl);
        T17 = SIMD_FNMADD(KP866025403, Tm, Tl);
        Tf  = Tb + Te;
        To  = SIMD_FNMADD(KP500000000, Te, Tb);
        TI  = SIMD_FNMADD(KP866025403, TH, TG);
        TX  = SIMD_FMADD(KP866025403, TH, TG);
        TF  = SIMD_FNMADD(KP866025403, TE, TD);
        TW  = SIMD_FMADD(KP866025403, TE, TD);
        T1d = Tt + Tu;
        Tv  = SIMD_FNMADD(KP500000000, Tu, Tt);
        {
            SIMD_FLOAT Ts, TZ, Tg, T1i, TY, T14, TJ, TP, Tx, T10, T1e, T1g, T1b,
                T11, T15;
            SIMD_FLOAT Ty, TO, T1h, T16, T18, T12, T1a, TQ, TU, TK, TS, T19,
                T13, TR, TT;
            Ts            = SIMD_FMADD(KP866025403, Tr, To);
            TZ            = SIMD_FNMADD(KP866025403, Tr, To);
            Tg            = Ta + Tf;
            T1i           = Tf - Ta;
            TY            = SIMD_FMADD(KP176326980, TX, TW);
            T14           = SIMD_FNMADD(KP176326980, TW, TX);
            TJ            = SIMD_FNMADD(KP839099631, TI, TF);
            TP            = SIMD_FMADD(KP839099631, TF, TI);
            Tx            = SIMD_FMADD(KP866025403, Tw, Tv);
            T10           = SIMD_FNMADD(KP866025403, Tw, Tv);
            T1e           = T1c - T1d;
            T1g           = T1c + T1d;
            ro[0]         = T5 + Tg;
            T1b           = SIMD_FNMADD(KP500000000, Tg, T5);
            T11           = SIMD_FNMADD(KP363970234, T10, TZ);
            T15           = SIMD_FMADD(KP363970234, TZ, T10);
            Ty            = SIMD_FNMADD(KP176326980, Tx, Ts);
            TO            = SIMD_FMADD(KP176326980, Ts, Tx);
            io[0]         = T1f + T1g;
            T1h           = SIMD_FNMADD(KP500000000, T1g, T1f);
            ro[WS(os, 6)] = SIMD_FNMADD(KP866025403, T1e, T1b);
            ro[WS(os, 3)] = SIMD_FMADD(KP866025403, T1e, T1b);
            T16           = SIMD_FNMADD(KP954188894, T15, T14);
            T18           = SIMD_FMADD(KP954188894, T15, T14);
            T12           = SIMD_FNMADD(KP954188894, T11, TY);
            T1a           = SIMD_FMADD(KP954188894, T11, TY);
            TQ            = SIMD_FMADD(KP777861913, TP, TO);
            TU            = SIMD_FNMADD(KP777861913, TP, TO);
            TK            = SIMD_FNMADD(KP777861913, TJ, Ty);
            TS            = SIMD_FMADD(KP777861913, TJ, Ty);
            io[WS(os, 6)] = SIMD_FNMADD(KP866025403, T1i, T1h);
            io[WS(os, 3)] = SIMD_FMADD(KP866025403, T1i, T1h);
            T19           = SIMD_FMADD(KP492403876, T18, T17);
            io[WS(os, 2)] = SIMD_FNMADD(KP984807753, T18, T17);
            T13           = SIMD_FNMADD(KP492403876, T12, TV);
            ro[WS(os, 2)] = SIMD_FMADD(KP984807753, T12, TV);
            TR            = SIMD_FNMADD(KP492403876, TQ, TN);
            ro[WS(os, 1)] = SIMD_FMADD(KP984807753, TQ, TN);
            TT            = SIMD_FMADD(KP492403876, TK, Tn);
            io[WS(os, 1)] = SIMD_FNMADD(KP984807753, TK, Tn);
            io[WS(os, 8)] = SIMD_FMADD(KP852868531, T1a, T19);
            io[WS(os, 5)] = SIMD_FNMADD(KP852868531, T1a, T19);
            ro[WS(os, 8)] = SIMD_FMADD(KP852868531, T16, T13);
            ro[WS(os, 5)] = SIMD_FNMADD(KP852868531, T16, T13);
            ro[WS(os, 7)] = SIMD_FNMADD(KP852868531, TS, TR);
            ro[WS(os, 4)] = SIMD_FMADD(KP852868531, TS, TR);
            io[WS(os, 4)] = SIMD_FMADD(KP852868531, TU, TT);
            io[WS(os, 7)] = SIMD_FNMADD(KP852868531, TU, TT);
        }
    }
}

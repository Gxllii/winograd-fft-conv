//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cb_traits<10, 0>
{
    static constexpr long_t flops           = 120;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 88;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 0 -name c2cb
 * -standalone */

/*
 * This function contains 84 FP additions, 36 FP multiplications,
 * (or, 48 additions, 0 multiplications, 36 fused multiply/add),
 * 88 stack variables, 4 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 0>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT Tu, Tj, T3, T1b, TN, Tk, T6, To, Tg, Tl, T9, Tn, Td, Tv, TE;
        SIMD_FLOAT TF, Tx, Ty, TB, TC, T1, T2, TL, TM, T4, T5, Te, Tf, T7, T8;
        SIMD_FLOAT Tb, Tc;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TL  = ii[0];
        TM  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Tu  = ii[WS(is, 2)];
        Tj  = T1 + T2;
        T3  = T1 - T2;
        T1b = TL + TM;
        TN  = TL - TM;
        Tk  = T4 + T5;
        T6  = T4 - T5;
        To  = Te + Tf;
        Tg  = Te - Tf;
        Tl  = T7 + T8;
        T9  = T7 - T8;
        Tn  = Tb + Tc;
        Td  = Tb - Tc;
        Tv  = ii[WS(is, 7)];
        TE  = ii[WS(is, 6)];
        TF  = ii[WS(is, 1)];
        Tx  = ii[WS(is, 8)];
        Ty  = ii[WS(is, 3)];
        TB  = ii[WS(is, 4)];
        TC  = ii[WS(is, 9)];
        {
            SIMD_FLOAT T10, T1k, T1m, Ts, TW, TY, T17, T1c, TA, TO, T14, T1d,
                TH, TP, TZ;
            SIMD_FLOAT Tr, T1j, Tm, TU, Ta, T1i, Tp, TV, Th, Tw, T15, TG, T13,
                Tz, T16;
            SIMD_FLOAT TD, T12, Tq, Ti, T1e, T1g, T18, T1a, TQ, TS, TI, TK, T11,
                T19, Tt;
            SIMD_FLOAT TJ, T1f, TR, T1h, T1l, TT, TX;
            T1j           = Tk - Tl;
            Tm            = Tk + Tl;
            TU            = T6 - T9;
            Ta            = T6 + T9;
            T1i           = Tn - To;
            Tp            = Tn + To;
            TV            = Td - Tg;
            Th            = Td + Tg;
            Tw            = Tu - Tv;
            T15           = Tu + Tv;
            TG            = TE - TF;
            T13           = TE + TF;
            Tz            = Tx - Ty;
            T16           = Tx + Ty;
            TD            = TB - TC;
            T12           = TB + TC;
            Tq            = Tm + Tp;
            T10           = Tm - Tp;
            T1k           = SIMD_FNMADD(KP618033988, T1j, T1i);
            T1m           = SIMD_FMADD(KP618033988, T1i, T1j);
            Ti            = Ta + Th;
            Ts            = Ta - Th;
            TW            = SIMD_FMADD(KP618033988, TV, TU);
            TY            = SIMD_FNMADD(KP618033988, TU, TV);
            T17           = T15 - T16;
            T1c           = T15 + T16;
            TA            = Tw - Tz;
            TO            = Tw + Tz;
            T14           = T12 - T13;
            T1d           = T12 + T13;
            TH            = TD - TG;
            TP            = TD + TG;
            TZ            = SIMD_FNMADD(KP250000000, Tq, Tj);
            ro[0]         = Tj + Tq;
            Tr            = SIMD_FNMADD(KP250000000, Ti, T3);
            ro[WS(os, 5)] = T3 + Ti;
            T1e           = T1c + T1d;
            T1g           = T1c - T1d;
            T18           = SIMD_FNMADD(KP618033988, T17, T14);
            T1a           = SIMD_FMADD(KP618033988, T14, T17);
            TQ            = TO + TP;
            TS            = TO - TP;
            TI            = SIMD_FMADD(KP618033988, TH, TA);
            TK            = SIMD_FNMADD(KP618033988, TA, TH);
            T11           = SIMD_FNMADD(KP559016994, T10, TZ);
            T19           = SIMD_FMADD(KP559016994, T10, TZ);
            Tt            = SIMD_FMADD(KP559016994, Ts, Tr);
            TJ            = SIMD_FNMADD(KP559016994, Ts, Tr);
            T1f           = SIMD_FNMADD(KP250000000, T1e, T1b);
            io[0]         = T1b + T1e;
            TR            = SIMD_FNMADD(KP250000000, TQ, TN);
            io[WS(os, 5)] = TN + TQ;
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, T1a, T19);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, T1a, T19);
            ro[WS(os, 8)] = SIMD_FMADD(KP951056516, T18, T11);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, T18, T11);
            ro[WS(os, 7)] = SIMD_FNMADD(KP951056516, TK, TJ);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TK, TJ);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TI, Tt);
            ro[WS(os, 9)] = SIMD_FNMADD(KP951056516, TI, Tt);
            T1h           = SIMD_FNMADD(KP559016994, T1g, T1f);
            T1l           = SIMD_FMADD(KP559016994, T1g, T1f);
            TT            = SIMD_FMADD(KP559016994, TS, TR);
            TX            = SIMD_FNMADD(KP559016994, TS, TR);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, T1m, T1l);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, T1m, T1l);
            io[WS(os, 8)] = SIMD_FNMADD(KP951056516, T1k, T1h);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, T1k, T1h);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, TY, TX);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, TY, TX);
            io[WS(os, 9)] = SIMD_FMADD(KP951056516, TW, TT);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, TW, TT);
        }
    }
}

template <>
struct c2cb_traits<10, 1>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 82;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 84;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 1 -name c2cb
 * -standalone */

/*
 * This function contains 82 FP additions, 36 FP multiplications,
 * (or, 46 additions, 0 multiplications, 36 fused multiply/add),
 * 84 stack variables, 4 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 1>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, T2, TV, TW, T3, TX, Tw, TD, T6, TH, Tg, TE, T9, TG, Td;
        SIMD_FLOAT Tx, To, TP, Tp, Tq, Tt, Tu, T4, T5, Te, Tf, T7, T8, Tb, Tc;
        SIMD_FLOAT Tm, Tn, TF, T1f, T14, Ta, TI, T1e, T15, Th, Ty, TN, Tr, TQ,
            Tv;
        SIMD_FLOAT TM;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TV  = ii[0];
        TW  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Tm  = ii[WS(is, 2)];
        T3  = T1 - T2;
        Tn  = ii[WS(is, 7)];
        TX  = TV - TW;
        Tw  = ii[WS(is, 6)];
        TD  = T4 + T5;
        T6  = T4 - T5;
        TH  = Te + Tf;
        Tg  = Te - Tf;
        TE  = T7 + T8;
        T9  = T7 - T8;
        TG  = Tb + Tc;
        Td  = Tb - Tc;
        Tx  = ii[WS(is, 1)];
        To  = Tm - Tn;
        TP  = Tm + Tn;
        Tp  = ii[WS(is, 8)];
        Tq  = ii[WS(is, 3)];
        Tt  = ii[WS(is, 4)];
        Tu  = ii[WS(is, 9)];
        TF  = TD + TE;
        T1f = TD - TE;
        T14 = T6 - T9;
        Ta  = T6 + T9;
        TI  = TG + TH;
        T1e = TG - TH;
        T15 = Td - Tg;
        Th  = Td + Tg;
        Ty  = Tw - Tx;
        TN  = Tw + Tx;
        Tr  = Tp - Tq;
        TQ  = Tp + Tq;
        Tv  = Tt - Tu;
        TM  = Tt + Tu;
        {
            SIMD_FLOAT T1g, T1i, Tk, T16, T18, T19, TR, Ts, TY, T1a, TO, Tz, TZ,
                TL, TT;
            SIMD_FLOAT Tj, TJ, TK, Ti, TS, TU, T1b, T1c, T10, T12, TA, TC, Tl,
                TB, T1d;
            SIMD_FLOAT T1h, T11, T13, T17;
            T1g           = SIMD_FNMADD(KP618033988, T1f, T1e);
            T1i           = SIMD_FMADD(KP618033988, T1e, T1f);
            TJ            = T1 + SIMD_FNMADD(KP250000000, TF + TI, T2);
            TK            = TF - TI;
            Ti            = Ta + Th;
            Tk            = Ta - Th;
            T16           = SIMD_FMADD(KP618033988, T15, T14);
            T18           = SIMD_FNMADD(KP618033988, T14, T15);
            T19           = TP + TQ;
            TR            = TP - TQ;
            Ts            = To - Tr;
            TY            = To + Tr;
            T1a           = TM + TN;
            TO            = TM - TN;
            Tz            = Tv - Ty;
            TZ            = Tv + Ty;
            TL            = SIMD_FNMADD(KP559016994, TK, TJ);
            TT            = SIMD_FMADD(KP559016994, TK, TJ);
            Tj            = SIMD_FNMADD(KP250000000, Ti, T3);
            ro[WS(os, 4)] = T3 + Ti;
            TS            = SIMD_FNMADD(KP618033988, TR, TO);
            TU            = SIMD_FMADD(KP618033988, TO, TR);
            T1b           = TV + SIMD_FNMADD(KP250000000, T19 + T1a, TW);
            T1c           = T19 - T1a;
            T10           = TY + TZ;
            T12           = TY - TZ;
            TA            = SIMD_FMADD(KP618033988, Tz, Ts);
            TC            = SIMD_FNMADD(KP618033988, Ts, Tz);
            Tl            = SIMD_FMADD(KP559016994, Tk, Tj);
            TB            = SIMD_FNMADD(KP559016994, Tk, Tj);
            ro[WS(os, 3)] = SIMD_FNMADD(KP951056516, TU, TT);
            ro[WS(os, 5)] = SIMD_FMADD(KP951056516, TU, TT);
            ro[WS(os, 7)] = SIMD_FMADD(KP951056516, TS, TL);
            ro[WS(os, 1)] = SIMD_FNMADD(KP951056516, TS, TL);
            T1d           = SIMD_FNMADD(KP559016994, T1c, T1b);
            T1h           = SIMD_FMADD(KP559016994, T1c, T1b);
            T11           = SIMD_FNMADD(KP250000000, T10, TX);
            io[WS(os, 4)] = T10 + TX;
            ro[WS(os, 6)] = SIMD_FNMADD(KP951056516, TC, TB);
            ro[WS(os, 2)] = SIMD_FMADD(KP951056516, TC, TB);
            ro[0]         = SIMD_FMADD(KP951056516, TA, Tl);
            ro[WS(os, 8)] = SIMD_FNMADD(KP951056516, TA, Tl);
            io[WS(os, 3)] = SIMD_FMADD(KP951056516, T1i, T1h);
            io[WS(os, 5)] = SIMD_FNMADD(KP951056516, T1i, T1h);
            io[WS(os, 7)] = SIMD_FNMADD(KP951056516, T1g, T1d);
            io[WS(os, 1)] = SIMD_FMADD(KP951056516, T1g, T1d);
            T13           = SIMD_FMADD(KP559016994, T12, T11);
            T17           = SIMD_FNMADD(KP559016994, T12, T11);
            io[WS(os, 2)] = SIMD_FNMADD(KP951056516, T18, T17);
            io[WS(os, 6)] = SIMD_FMADD(KP951056516, T18, T17);
            io[WS(os, 8)] = SIMD_FMADD(KP951056516, T16, T13);
            io[0]         = SIMD_FNMADD(KP951056516, T16, T13);
        }
    }
}

template <>
struct c2cb_traits<10, 2>
{
    static constexpr long_t flops           = 114;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 84;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 2 -name c2cb
 * -standalone */

/*
 * This function contains 80 FP additions, 34 FP multiplications,
 * (or, 46 additions, 0 multiplications, 34 fused multiply/add),
 * 84 stack variables, 4 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 2>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, T2, TV, TW, T3, TX, TC, Tj, T6, Tn, Tg, Tk, T9, Tm, Td;
        SIMD_FLOAT TD, Tu, TM, Tv, Tw, Tz, TA, T4, T5, Te, Tf, T7, T8, Tb, Tc;
        SIMD_FLOAT Ts, Tt, Tl, T1f, T15, Ta, To, T1e, T14, Th, TE, TP, Tx, TN,
            TB;
        SIMD_FLOAT TQ;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TV  = ii[0];
        TW  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Ts  = ii[WS(is, 4)];
        T3  = T1 - T2;
        Tt  = ii[WS(is, 9)];
        TX  = TV - TW;
        TC  = ii[WS(is, 8)];
        Tj  = T4 + T5;
        T6  = T4 - T5;
        Tn  = Te + Tf;
        Tg  = Te - Tf;
        Tk  = T7 + T8;
        T9  = T7 - T8;
        Tm  = Tb + Tc;
        Td  = Tb - Tc;
        TD  = ii[WS(is, 3)];
        Tu  = Ts + Tt;
        TM  = Ts - Tt;
        Tv  = ii[WS(is, 6)];
        Tw  = ii[WS(is, 1)];
        Tz  = ii[WS(is, 2)];
        TA  = ii[WS(is, 7)];
        Tl  = Tj + Tk;
        T1f = Tj - Tk;
        T15 = T6 - T9;
        Ta  = T6 + T9;
        To  = Tm + Tn;
        T1e = Tm - Tn;
        T14 = Td - Tg;
        Th  = Td + Tg;
        TE  = TC + TD;
        TP  = TC - TD;
        Tx  = Tv + Tw;
        TN  = Tv - Tw;
        TB  = Tz + TA;
        TQ  = Tz - TA;
        {
            SIMD_FLOAT T1g, T1i, TK, T16, TY, TO, T19, Ty, TZ, TR, T1a, TF, TH,
                Tr, TJ;
            SIMD_FLOAT Tp, Tq, Ti, TT, T10, T12, TS, T1b, T1c, TI, TG, TL, TU,
                T17, T11;
            SIMD_FLOAT T1d, T1h, T18, T13;
            T1g           = SIMD_FNMADD(KP618033988, T1f, T1e);
            T1i           = SIMD_FMADD(KP618033988, T1e, T1f);
            Tp            = T1 + SIMD_FNMADD(KP250000000, Tl + To, T2);
            Tq            = Tl - To;
            Ti            = Ta + Th;
            TK            = Ta - Th;
            T16           = SIMD_FNMADD(KP618033988, T15, T14);
            TY            = TM + TN;
            TO            = TM - TN;
            T19           = Tu + Tx;
            Ty            = Tu - Tx;
            TZ            = TQ + TP;
            TR            = TP - TQ;
            T1a           = TB + TE;
            TF            = TB - TE;
            TH            = SIMD_FMADD(KP559016994, Tq, Tp);
            Tr            = SIMD_FNMADD(KP559016994, Tq, Tp);
            TJ            = SIMD_FNMADD(KP250000000, Ti, T3);
            ro[WS(os, 3)] = T3 + Ti;
            TT            = SIMD_FNMADD(KP951056516, TK, TO);
            T10           = TY + TZ;
            T12           = TZ - TY;
            TS            = SIMD_FMADD(KP618033988, TR, TO);
            T1b           = TV + SIMD_FNMADD(KP250000000, T19 + T1a, TW);
            T1c           = T1a - T19;
            TI            = SIMD_FMADD(KP618033988, Ty, TF);
            TG            = SIMD_FNMADD(KP618033988, TF, Ty);
            TL            = SIMD_FNMADD(KP559016994, TK, TJ);
            TU            = SIMD_FNMADD(KP618033988, TT, TR);
            T17           = SIMD_FMADD(KP951056516, T12, T14);
            T11           = SIMD_FNMADD(KP250000000, T10, TX);
            io[WS(os, 3)] = T10 + TX;
            T1d           = SIMD_FNMADD(KP559016994, T1c, T1b);
            T1h           = SIMD_FMADD(KP559016994, T1c, T1b);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, TI, TH);
            ro[WS(os, 4)] = SIMD_FMADD(KP951056516, TI, TH);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, TG, Tr);
            ro[0]         = SIMD_FNMADD(KP951056516, TG, Tr);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TS, TL);
            ro[WS(os, 5)] = SIMD_FNMADD(KP951056516, TS, TL);
            ro[WS(os, 7)] = SIMD_FMADD(KP951056516, TU, TJ);
            T18           = SIMD_FMADD(KP618033988, T17, T15);
            T13           = SIMD_FNMADD(KP559016994, T12, T11);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, T1i, T1h);
            io[WS(os, 4)] = SIMD_FNMADD(KP951056516, T1i, T1h);
            io[WS(os, 6)] = SIMD_FNMADD(KP951056516, T1g, T1d);
            io[0]         = SIMD_FMADD(KP951056516, T1g, T1d);
            io[WS(os, 7)] = SIMD_FMADD(KP951056516, T18, T11);
            io[WS(os, 5)] = SIMD_FMADD(KP951056516, T16, T13);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, T16, T13);
        }
    }
}

template <>
struct c2cb_traits<10, 3>
{
    static constexpr long_t flops           = 110;
    static constexpr long_t operations      = 78;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 85;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 3 -name c2cb
 * -standalone */

/*
 * This function contains 78 FP additions, 32 FP multiplications,
 * (or, 46 additions, 0 multiplications, 32 fused multiply/add),
 * 85 stack variables, 5 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 3>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, TV, TW, T3, TX, TA, Tj, T6, Tn, Tg, Tk, T9, Tm, Td;
        SIMD_FLOAT TB, Ts, TM, Tt, Tu, Tx, Ty, T4, T5, Te, Tf, T7, T8, Tb, Tc;
        SIMD_FLOAT Tq, Tr, T1e, Tl, T15, Ta, T1f, To, T14, Th, TC, TP, Tv, TN,
            Tz;
        SIMD_FLOAT TQ;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TV  = ii[0];
        TW  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Tq  = ii[WS(is, 4)];
        T3  = T1 - T2;
        Tr  = ii[WS(is, 9)];
        TX  = TV - TW;
        TA  = ii[WS(is, 8)];
        Tj  = T4 + T5;
        T6  = T4 - T5;
        Tn  = Te + Tf;
        Tg  = Te - Tf;
        Tk  = T7 + T8;
        T9  = T7 - T8;
        Tm  = Tb + Tc;
        Td  = Tb - Tc;
        TB  = ii[WS(is, 3)];
        Ts  = Tq + Tr;
        TM  = Tq - Tr;
        Tt  = ii[WS(is, 6)];
        Tu  = ii[WS(is, 1)];
        Tx  = ii[WS(is, 2)];
        Ty  = ii[WS(is, 7)];
        T1e = Tj - Tk;
        Tl  = Tj + Tk;
        T15 = T6 - T9;
        Ta  = T6 + T9;
        T1f = Tm - Tn;
        To  = Tm + Tn;
        T14 = Td - Tg;
        Th  = Td + Tg;
        TC  = TA + TB;
        TP  = TA - TB;
        Tv  = Tt + Tu;
        TN  = Tt - Tu;
        Tz  = Tx + Ty;
        TQ  = Tx - Ty;
        {
            SIMD_FLOAT Tp, TE, T1g, TK, Ti, T16, TO, TY, Tw, T19, TR, TZ, TD,
                T1a, TH;
            SIMD_FLOAT TJ, TT, T10, T12, TS, T1b, T1c, TF, TI, TL, TU, T17, T11,
                T1d, T1h;
            SIMD_FLOAT TG, T18, T13, T1i;
            Tp            = T1 + SIMD_FNMADD(KP250000000, Tl + To, T2);
            TE            = Tl - To;
            T1g           = SIMD_FMADD(KP618033988, T1f, T1e);
            TK            = Ta - Th;
            Ti            = Ta + Th;
            T16           = SIMD_FNMADD(KP618033988, T15, T14);
            TO            = TM - TN;
            TY            = TM + TN;
            Tw            = Ts - Tv;
            T19           = Ts + Tv;
            TR            = TP - TQ;
            TZ            = TP + TQ;
            TD            = Tz - TC;
            T1a           = TC + Tz;
            TH            = SIMD_FMADD(KP559016994, TE, Tp);
            TJ            = SIMD_FNMADD(KP250000000, Ti, T3);
            ro[WS(os, 2)] = T3 + Ti;
            TT            = SIMD_FNMADD(KP951056516, TK, TO);
            T10           = TY + TZ;
            T12           = TZ - TY;
            TS            = SIMD_FMADD(KP618033988, TR, TO);
            T1b           = TV + SIMD_FNMADD(KP250000000, T19 + T1a, TW);
            T1c           = T1a - T19;
            TF            = SIMD_FMADD(KP951056516, TE, TD);
            TI            = SIMD_FMADD(KP618033988, Tw, TD);
            TL            = SIMD_FNMADD(KP559016994, TK, TJ);
            TU            = SIMD_FNMADD(KP618033988, TT, TR);
            T17           = SIMD_FMADD(KP951056516, T12, T14);
            T11           = SIMD_FNMADD(KP250000000, T10, TX);
            io[WS(os, 2)] = T10 + TX;
            T1d           = SIMD_FMADD(KP559016994, T1c, T1b);
            T1h           = SIMD_FMADD(KP587785252, T1c, T1f);
            TG            = SIMD_FNMADD(KP618033988, TF, Tw);
            ro[WS(os, 1)] = SIMD_FNMADD(KP951056516, TI, TH);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TI, TH);
            ro[0]         = SIMD_FMADD(KP951056516, TS, TL);
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, TS, TL);
            ro[WS(os, 6)] = SIMD_FMADD(KP951056516, TU, TJ);
            T18           = SIMD_FMADD(KP618033988, T17, T15);
            T13           = SIMD_FNMADD(KP559016994, T12, T11);
            io[WS(os, 3)] = SIMD_FNMADD(KP951056516, T1g, T1d);
            io[WS(os, 1)] = SIMD_FMADD(KP951056516, T1g, T1d);
            T1i           = SIMD_FNMADD(KP618033988, T1e, T1h);
            ro[WS(os, 5)] = SIMD_FMADD(KP951056516, TG, Tp);
            io[WS(os, 6)] = SIMD_FMADD(KP951056516, T18, T11);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, T16, T13);
            io[0]         = SIMD_FNMADD(KP951056516, T16, T13);
            io[WS(os, 5)] = SIMD_FNMADD(KP951056516, T1i, T1b);
        }
    }
}

template <>
struct c2cb_traits<10, 4>
{
    static constexpr long_t flops           = 106;
    static constexpr long_t operations      = 76;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 85;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 4 -name c2cb
 * -standalone */

/*
 * This function contains 76 FP additions, 30 FP multiplications,
 * (or, 46 additions, 0 multiplications, 30 fused multiply/add),
 * 85 stack variables, 5 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 4>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, TY, TZ, T3, T10, TC, Tj, T6, Tn, Tg, Tk, T9, Tm, Td;
        SIMD_FLOAT TD, Tu, TN, Tv, Tw, Tz, TA, T4, T5, Te, Tf, T7, T8, Tb, Tc;
        SIMD_FLOAT Ts, Tt, T1e, Tl, T13, Ta, T1f, To, T12, Th, TE, TK, Tx, TO,
            TB;
        SIMD_FLOAT TL;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        TY  = ii[0];
        TZ  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Ts  = ii[WS(is, 2)];
        T3  = T1 - T2;
        Tt  = ii[WS(is, 7)];
        T10 = TY - TZ;
        TC  = ii[WS(is, 6)];
        Tj  = T4 + T5;
        T6  = T4 - T5;
        Tn  = Te + Tf;
        Tg  = Te - Tf;
        Tk  = T7 + T8;
        T9  = T7 - T8;
        Tm  = Tb + Tc;
        Td  = Tb - Tc;
        TD  = ii[WS(is, 1)];
        Tu  = Ts + Tt;
        TN  = Ts - Tt;
        Tv  = ii[WS(is, 8)];
        Tw  = ii[WS(is, 3)];
        Tz  = ii[WS(is, 4)];
        TA  = ii[WS(is, 9)];
        T1e = Tj - Tk;
        Tl  = Tj + Tk;
        T13 = T6 - T9;
        Ta  = T6 + T9;
        T1f = Tm - Tn;
        To  = Tm + Tn;
        T12 = Td - Tg;
        Th  = Td + Tg;
        TE  = TC + TD;
        TK  = TC - TD;
        Tx  = Tv + Tw;
        TO  = Tv - Tw;
        TB  = Tz + TA;
        TL  = Tz - TA;
        {
            SIMD_FLOAT Tp, Tq, T1g, Ti, TQ, TV, TP, T19, Ty, TW, TM, T1a, TF,
                Tr, TJ;
            SIMD_FLOAT TR, TH, T14, TX, TT, T1b, T1c, TG, TS, TI, T11, T15, T17,
                TU, T1d;
            SIMD_FLOAT T1h, T16, T18, T1i;
            Tp            = T1 + SIMD_FNMADD(KP250000000, Tl + To, T2);
            Tq            = Tl - To;
            T1g           = SIMD_FMADD(KP618033988, T1f, T1e);
            Ti            = Ta + Th;
            TQ            = Ta - Th;
            TV            = TN + TO;
            TP            = TN - TO;
            T19           = Tu + Tx;
            Ty            = Tu - Tx;
            TW            = TL + TK;
            TM            = TK - TL;
            T1a           = TB + TE;
            TF            = TB - TE;
            Tr            = SIMD_FMADD(KP559016994, Tq, Tp);
            ro[WS(os, 1)] = T3 + Ti;
            TJ            = SIMD_FNMADD(KP250000000, Ti, T3);
            TR            = SIMD_FNMADD(KP951056516, TQ, TP);
            TH            = SIMD_FMADD(KP951056516, Tq, Ty);
            T14           = TV - TW;
            TX            = TV + TW;
            TT            = SIMD_FMADD(KP951056516, TQ, TM);
            T1b           = TY + SIMD_FNMADD(KP250000000, T19 + T1a, TZ);
            T1c           = T19 - T1a;
            TG            = SIMD_FMADD(KP618033988, TF, Ty);
            TS            = SIMD_FMADD(KP618033988, TR, TM);
            TI            = SIMD_FNMADD(KP618033988, TH, TF);
            io[WS(os, 1)] = TX + T10;
            T11           = SIMD_FNMADD(KP250000000, TX, T10);
            T15           = SIMD_FMADD(KP951056516, T14, T13);
            T17           = SIMD_FMADD(KP951056516, T14, T12);
            TU            = SIMD_FNMADD(KP618033988, TT, TP);
            T1d           = SIMD_FMADD(KP559016994, T1c, T1b);
            T1h           = SIMD_FMADD(KP587785252, T1c, T1f);
            ro[WS(os, 2)] = SIMD_FMADD(KP951056516, TG, Tr);
            ro[0]         = SIMD_FNMADD(KP951056516, TG, Tr);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, TS, TJ);
            ro[WS(os, 4)] = SIMD_FMADD(KP951056516, TI, Tp);
            T16           = SIMD_FNMADD(KP618033988, T15, T12);
            T18           = SIMD_FMADD(KP618033988, T17, T13);
            ro[WS(os, 5)] = SIMD_FNMADD(KP951056516, TU, TJ);
            io[WS(os, 2)] = SIMD_FNMADD(KP951056516, T1g, T1d);
            io[0]         = SIMD_FMADD(KP951056516, T1g, T1d);
            T1i           = SIMD_FNMADD(KP618033988, T1e, T1h);
            io[WS(os, 3)] = SIMD_FMADD(KP951056516, T16, T11);
            io[WS(os, 5)] = SIMD_FMADD(KP951056516, T18, T11);
            io[WS(os, 4)] = SIMD_FNMADD(KP951056516, T1i, T1b);
        }
    }
}

template <>
struct c2cb_traits<10, 5>
{
    static constexpr long_t flops           = 102;
    static constexpr long_t operations      = 74;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 83;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 5 -name c2cb
 * -standalone */

/*
 * This function contains 74 FP additions, 28 FP multiplications,
 * (or, 46 additions, 0 multiplications, 28 fused multiply/add),
 * 83 stack variables, 3 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 5>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, Tj, Tk, T3, Tl, Tw, TR, T6, TV, Tg, TS, T9, TU, Td;
        SIMD_FLOAT Tx, To, TY, Tp, Tq, Tt, Tu, T4, T5, Te, Tf, T7, T8, Tb, Tc;
        SIMD_FLOAT Tm, Tn, T1d, TT, TD, Ta, T1c, TW, TC, Th, Ty, T12, Tr, TZ,
            Tv;
        SIMD_FLOAT T11, TX, T14, TM, Ti;
        T1  = ri[0];
        T2  = ri[WS(is, 5)];
        Tj  = ii[0];
        Tk  = ii[WS(is, 5)];
        T4  = ri[WS(is, 2)];
        T5  = ri[WS(is, 7)];
        Te  = ri[WS(is, 6)];
        Tf  = ri[WS(is, 1)];
        T7  = ri[WS(is, 8)];
        T8  = ri[WS(is, 3)];
        Tb  = ri[WS(is, 4)];
        Tc  = ri[WS(is, 9)];
        Tm  = ii[WS(is, 2)];
        T3  = T1 - T2;
        Tn  = ii[WS(is, 7)];
        Tl  = Tj - Tk;
        Tw  = ii[WS(is, 6)];
        TR  = T4 + T5;
        T6  = T4 - T5;
        TV  = Te + Tf;
        Tg  = Te - Tf;
        TS  = T7 + T8;
        T9  = T7 - T8;
        TU  = Tb + Tc;
        Td  = Tb - Tc;
        Tx  = ii[WS(is, 1)];
        To  = Tm - Tn;
        TY  = Tm + Tn;
        Tp  = ii[WS(is, 8)];
        Tq  = ii[WS(is, 3)];
        Tt  = ii[WS(is, 4)];
        Tu  = ii[WS(is, 9)];
        T1d = TR - TS;
        TT  = TR + TS;
        TD  = T6 - T9;
        Ta  = T6 + T9;
        T1c = TV - TU;
        TW  = TU + TV;
        TC  = Td - Tg;
        Th  = Td + Tg;
        Ty  = Tw - Tx;
        T12 = Tw + Tx;
        Tr  = Tp - Tq;
        TZ  = Tp + Tq;
        Tv  = Tt - Tu;
        T11 = Tt + Tu;
        TX  = T1 + SIMD_FNMADD(KP250000000, TT + TW, T2);
        T14 = TT - TW;
        TM  = Ta - Th;
        Ti  = Ta + Th;
        {
            SIMD_FLOAT T10, T19, TL, Ts, T13, T1a, TK, Tz, TJ, T17, TN, T1b,
                T1e, T15, TA;
            SIMD_FLOAT TE, TP, T18, TO, T1f, T1h, T16, TB, TF, TH, TQ, T1g, T1i,
                TG, TI;
            T10           = TY - TZ;
            T19           = TY + TZ;
            TL            = To - Tr;
            Ts            = To + Tr;
            T13           = T11 - T12;
            T1a           = T11 + T12;
            TK            = Ty - Tv;
            Tz            = Tv + Ty;
            ro[0]         = T3 + Ti;
            TJ            = SIMD_FNMADD(KP250000000, Ti, T3);
            T17           = SIMD_FMADD(KP951056516, T14, T10);
            TN            = SIMD_FNMADD(KP951056516, TM, TL);
            T1b           = Tj + SIMD_FNMADD(KP250000000, T19 + T1a, Tk);
            T1e           = T19 - T1a;
            T15           = SIMD_FMADD(KP951056516, T14, T13);
            TA            = Ts + Tz;
            TE            = Ts - Tz;
            TP            = SIMD_FMADD(KP951056516, TM, TK);
            T18           = SIMD_FNMADD(KP618033988, T17, T13);
            TO            = SIMD_FMADD(KP618033988, TN, TK);
            T1f           = SIMD_FNMADD(KP951056516, T1e, T1d);
            T1h           = SIMD_FMADD(KP951056516, T1e, T1c);
            T16           = SIMD_FMADD(KP618033988, T15, T10);
            io[0]         = Tl + TA;
            TB            = SIMD_FNMADD(KP250000000, TA, Tl);
            TF            = SIMD_FMADD(KP951056516, TE, TD);
            TH            = SIMD_FMADD(KP951056516, TE, TC);
            TQ            = SIMD_FNMADD(KP618033988, TP, TL);
            ro[WS(os, 3)] = SIMD_FMADD(KP951056516, T18, TX);
            ro[WS(os, 2)] = SIMD_FMADD(KP951056516, TO, TJ);
            T1g           = SIMD_FMADD(KP618033988, T1f, T1c);
            T1i           = SIMD_FNMADD(KP618033988, T1h, T1d);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, T16, TX);
            TG            = SIMD_FNMADD(KP618033988, TF, TC);
            TI            = SIMD_FMADD(KP618033988, TH, TD);
            ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, TQ, TJ);
            io[WS(os, 3)] = SIMD_FMADD(KP951056516, T1g, T1b);
            io[WS(os, 1)] = SIMD_FNMADD(KP951056516, T1i, T1b);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, TG, TB);
            io[WS(os, 4)] = SIMD_FMADD(KP951056516, TI, TB);
        }
    }
}

template <>
struct c2cb_traits<10, 6>
{
    static constexpr long_t flops           = 100;
    static constexpr long_t operations      = 72;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 79;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 6 -name c2cb
 * -standalone */

/*
 * This function contains 72 FP additions, 28 FP multiplications,
 * (or, 44 additions, 0 multiplications, 28 fused multiply/add),
 * 79 stack variables, 3 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 6>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, TV, T2, TW, T6, TL, Tk, TJ, Tu, TM, Tn, TI, Tr, TE, T5;
        SIMD_FLOAT TB, Tf, T7, Ta, Tb, Ti, Tj, Ts, Tt, Tl, Tm, Tp, Tq, T3, T4;
        SIMD_FLOAT Td, Te, TN, TU, To, T15, TK, TT, Tv, T16, T8, TF, Tc, TC;
        T1  = ri[0];
        TV  = ii[0];
        T2  = ri[WS(is, 5)];
        TW  = ii[WS(is, 5)];
        Ti  = ii[WS(is, 2)];
        Tj  = ii[WS(is, 7)];
        Ts  = ii[WS(is, 6)];
        Tt  = ii[WS(is, 1)];
        Tl  = ii[WS(is, 8)];
        Tm  = ii[WS(is, 3)];
        Tp  = ii[WS(is, 4)];
        Tq  = ii[WS(is, 9)];
        T3  = ri[WS(is, 2)];
        T4  = ri[WS(is, 7)];
        Td  = ri[WS(is, 6)];
        Te  = ri[WS(is, 1)];
        T6  = ri[WS(is, 8)];
        TL  = Ti - Tj;
        Tk  = Ti + Tj;
        TJ  = Ts - Tt;
        Tu  = Ts + Tt;
        TM  = Tm - Tl;
        Tn  = Tl + Tm;
        TI  = Tq - Tp;
        Tr  = Tp + Tq;
        TE  = T3 - T4;
        T5  = T3 + T4;
        TB  = Te - Td;
        Tf  = Td + Te;
        T7  = ri[WS(is, 3)];
        Ta  = ri[WS(is, 4)];
        Tb  = ri[WS(is, 9)];
        TN  = TL + TM;
        TU  = TL - TM;
        To  = Tk - Tn;
        T15 = Tk + Tn;
        TK  = TI + TJ;
        TT  = TI - TJ;
        Tv  = Tr - Tu;
        T16 = Tr + Tu;
        T8  = T6 + T7;
        TF  = T7 - T6;
        Tc  = Ta + Tb;
        TC  = Ta - Tb;
        {
            SIMD_FLOAT TX, T10, T17, T1a, TZ, TG, T18, T9, TY, TD, T19, Tg, T11,
                T1d, TH;
            SIMD_FLOAT TO, T13, Th, Tw, T1b, T12, T1e, TP, TR, T14, Tx, Tz, T1c,
                TQ, TS;
            SIMD_FLOAT Ty, TA;
            TX            = SIMD_FMADD(KP250000000, TT - TU, TV) - TW;
            T10           = TU + TT;
            T17           = TV + SIMD_FNMADD(KP250000000, T15 + T16, TW);
            T1a           = T15 - T16;
            TZ            = TE + TF;
            TG            = TE - TF;
            T18           = T5 - T8;
            T9            = T5 + T8;
            TY            = TC + TB;
            TD            = TB - TC;
            T19           = Tf - Tc;
            Tg            = Tc + Tf;
            T11           = SIMD_FMADD(KP951056516, T10, TZ);
            T1d           = SIMD_FNMADD(KP951056516, T1a, T18);
            TH            = SIMD_FMADD(KP250000000, TD - TG, T1) - T2;
            TO            = TG + TD;
            T13           = SIMD_FMADD(KP951056516, T10, TY);
            Th            = T1 + SIMD_FNMADD(KP250000000, T9 + Tg, T2);
            Tw            = T9 - Tg;
            T1b           = SIMD_FMADD(KP951056516, T1a, T19);
            T12           = SIMD_FNMADD(KP618033988, T11, TY);
            T1e           = SIMD_FMADD(KP618033988, T1d, T19);
            TP            = SIMD_FNMADD(KP951056516, TO, TN);
            TR            = SIMD_FMADD(KP951056516, TO, TK);
            T14           = SIMD_FMADD(KP618033988, T13, TZ);
            Tx            = SIMD_FMADD(KP951056516, Tw, Tv);
            Tz            = SIMD_FMADD(KP951056516, Tw, To);
            T1c           = SIMD_FNMADD(KP618033988, T1b, T18);
            io[WS(os, 1)] = SIMD_FMADD(KP951056516, T12, TX);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, T1e, T17);
            TQ            = SIMD_FMADD(KP618033988, TP, TK);
            TS            = SIMD_FNMADD(KP618033988, TR, TN);
            io[WS(os, 3)] = SIMD_FMADD(KP951056516, T14, TX);
            Ty            = SIMD_FMADD(KP618033988, Tx, To);
            TA            = SIMD_FNMADD(KP618033988, Tz, Tv);
            io[0]         = SIMD_FNMADD(KP951056516, T1c, T17);
            ro[WS(os, 1)] = SIMD_FMADD(KP951056516, TQ, TH);
            ro[WS(os, 3)] = SIMD_FNMADD(KP951056516, TS, TH);
            ro[0]         = SIMD_FMADD(KP951056516, Ty, Th);
            ro[WS(os, 2)] = SIMD_FMADD(KP951056516, TA, Th);
        }
    }
}

template <>
struct c2cb_traits<10, 7>
{
    static constexpr long_t flops           = 86;
    static constexpr long_t operations      = 62;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 72;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 7 -name c2cb
 * -standalone */

/*
 * This function contains 62 FP additions, 24 FP multiplications,
 * (or, 38 additions, 0 multiplications, 24 fused multiply/add),
 * 72 stack variables, 6 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 7>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, TQ, Tg, TR, T5, TH, Tk, TC, Tu, TG, Tn, TB, Tr, TK, T4;
        SIMD_FLOAT TF, Te, T6, T9, Ta, Ti, Tj, Ts, Tt, Tl, Tm, Tp, Tq, T2, T3;
        SIMD_FLOAT Tc, Td;
        T1 = ri[0];
        TQ = ii[0];
        Tg = ri[WS(is, 5)];
        TR = ii[WS(is, 5)];
        Ti = ii[WS(is, 2)];
        Tj = ii[WS(is, 7)];
        Ts = ii[WS(is, 6)];
        Tt = ii[WS(is, 1)];
        Tl = ii[WS(is, 3)];
        Tm = ii[WS(is, 8)];
        Tp = ii[WS(is, 9)];
        Tq = ii[WS(is, 4)];
        T2 = ri[WS(is, 1)];
        T3 = ri[WS(is, 6)];
        Tc = ri[WS(is, 3)];
        Td = ri[WS(is, 8)];
        T5 = ri[WS(is, 4)];
        TH = Ti + Tj;
        Tk = Ti - Tj;
        TC = Ts + Tt;
        Tu = Ts - Tt;
        TG = Tm + Tl;
        Tn = Tl - Tm;
        TB = Tq + Tp;
        Tr = Tp - Tq;
        TK = T3 + T2;
        T4 = T2 - T3;
        TF = Td + Tc;
        Te = Tc - Td;
        T6 = ri[WS(is, 9)];
        T9 = ri[WS(is, 2)];
        Ta = ri[WS(is, 7)];
        {
            SIMD_FLOAT TI, TP, To, T12, Tv, TO, T7, TJ, Tb, TD, TS, TV, T10, TL,
                TT;
            SIMD_FLOAT T8, TE, T11, TU, Tf, TM, TY, T13, Th, Tw, TW, TN, TZ,
                T14, Tx;
            SIMD_FLOAT Tz, TX, Ty, TA;
            TI  = TG - TH;
            TP  = Tk - Tn;
            To  = Tk + Tn;
            T12 = TB + TC;
            Tv  = Tr + Tu;
            TO  = Tr - Tu;
            T7  = T5 - T6;
            TJ  = T5 + T6;
            Tb  = T9 - Ta;
            TD  = T9 + Ta;
            TS  = SIMD_FMADD(KP250000000, TO - TP, TQ) - TR;
            TV  = TO + TP;
            T10 = TK - (SIMD_FMADD(KP850650808, TG, TJ));
            TL  = TJ + TK;
            TT  = T7 + T4;
            T8  = T4 - T7;
            TE  = TB - (SIMD_FMADD(KP850650808, TD, TC));
            T11 = TD - TF;
            TU  = Tb + Te;
            Tf  = Tb - Te;
            TM  = SIMD_FMADD(KP525731112, TL, TI);
            TY  = SIMD_FMADD(KP951056516, TV, TT);
            T13 = SIMD_FMADD(KP525731112, T12, T11);
            Th  = SIMD_FMADD(KP250000000, T8 - Tf, T1) - Tg;
            Tw  = Tf + T8;
            TW  = SIMD_FMADD(KP951056516, TV, TU);
            TN  = SIMD_FNMADD(KP726542528, TM, TF);
            TZ  = SIMD_FMADD(KP618033988, TY, TU);
            T14 = SIMD_FNMADD(KP726542528, T13, TH);
            Tx  = SIMD_FMADD(KP951056516, Tw, Tv);
            Tz  = SIMD_FNMADD(KP951056516, Tw, To);
            TX  = SIMD_FNMADD(KP618033988, TW, TT);
            ro[WS(os, 1)] =
                T1 +
                SIMD_FMADD(KP951056516, SIMD_FNMADD(KP850650808, TN, TE), Tg);
            io[WS(os, 2)] = SIMD_FMADD(KP951056516, TZ, TS);
            io[WS(os, 1)] =
                TQ +
                SIMD_FMADD(KP951056516, SIMD_FNMADD(KP850650808, T14, T10), TR);
            Ty            = SIMD_FNMADD(KP618033988, Tx, To);
            TA            = SIMD_FMADD(KP618033988, Tz, Tv);
            io[0]         = SIMD_FMADD(KP951056516, TX, TS);
            ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, Ty, Th);
            ro[0]         = SIMD_FMADD(KP951056516, TA, Th);
        }
    }
}

template <>
struct c2cb_traits<10, 8>
{
    static constexpr long_t flops           = 74;
    static constexpr long_t operations      = 52;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 60;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 8 -name c2cb
 * -standalone */

/*
 * This function contains 52 FP additions, 22 FP multiplications,
 * (or, 30 additions, 0 multiplications, 22 fused multiply/add),
 * 60 stack variables, 4 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 8>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    {
        SIMD_FLOAT T1, TJ, T2, TO, Tg, Ty, T5, Tz, T8, TH, Tp, Tx, Ts, TB, Tb;
        SIMD_FLOAT TC, Tf, Th, Tj, TA, TS, Tk, T3, T4, T6, T7, Tn, To, Tq, Tr;
        SIMD_FLOAT T9, Ta, Td, Te, TK, Tt, Tc, TP, TD, TR, Ti, Tw, Tl, TG, TE;
        SIMD_FLOAT TT, TQ, TI, TL, Tm, TF, TU, TM, Tu, TN, Tv;
        T1 = ri[0];
        TJ = ii[0];
        T2 = ri[WS(is, 5)];
        TO = ii[WS(is, 5)];
        T3 = ii[WS(is, 4)];
        T4 = ii[WS(is, 9)];
        T6 = ii[WS(is, 6)];
        T7 = ii[WS(is, 1)];
        Tn = ri[WS(is, 4)];
        To = ri[WS(is, 9)];
        Tq = ri[WS(is, 6)];
        Tr = ri[WS(is, 1)];
        T9 = ri[WS(is, 2)];
        Ta = ri[WS(is, 7)];
        Td = ri[WS(is, 8)];
        Te = ri[WS(is, 3)];
        Tg = ii[WS(is, 8)];
        Ty = T4 - T3;
        T5 = T3 + T4;
        Tz = T6 - T7;
        T8 = T6 + T7;
        TH = Tn - To;
        Tp = Tn + To;
        Tx = Tr - Tq;
        Ts = Tq + Tr;
        TB = T9 - Ta;
        Tb = T9 + Ta;
        TC = Td - Te;
        Tf = Td + Te;
        Th = ii[WS(is, 3)];
        Tj = ii[WS(is, 2)];
        TA = Ty + Tz;
        TS = T5 + T8;
        Tk = ii[WS(is, 7)];
        TK = TH + Tx;
        Tt = Tp + Ts;
        Tc = T5 - (SIMD_FMADD(KP850650808, Tb, T8));
        TP = SIMD_FMADD(KP850650808, Tz, TC);
        TD = TB + TC;
        TR = Tb - Tf;
        Ti = Tg + Th;
        Tw = Tg - Th;
        Tl = Tj + Tk;
        TG = Tj - Tk;
        TE = SIMD_FMADD(KP525731112, TD, TA);
        TT = SIMD_FMADD(KP525731112, TS, TR);
        TQ = Ts - (SIMD_FMADD(KP850650808, Ti, Tp));
        TI = SIMD_FMADD(KP850650808, TH, TG);
        TL = Tw + TG;
        Tm = Ti - Tl;
        TF = SIMD_FMADD(KP726542528, TE, Tx);
        TU = SIMD_FNMADD(KP726542528, TT, Tl);
        TM = SIMD_FMADD(KP525731112, TL, TK);
        Tu = SIMD_FMADD(KP525731112, Tt, Tm);
        ro[WS(os, 1)] =
            SIMD_FMADD(KP951056516, SIMD_FMADD(KP850650808, TF, Tw), T1) -
            (SIMD_FMADD(KP951056516, TI, T2));
        io[0] =
            TJ + SIMD_FMADD(KP951056516, SIMD_FNMADD(KP850650808, TU, TQ), TO);
        TN = SIMD_FMADD(KP726542528, TM, Ty);
        Tv = SIMD_FNMADD(KP726542528, Tu, Tf);
        io[WS(os, 1)] =
            SIMD_FMADD(KP951056516, SIMD_FMADD(KP850650808, TN, TB), TJ) -
            (SIMD_FMADD(KP951056516, TP, TO));
        ro[0] =
            T1 + SIMD_FMADD(KP951056516, SIMD_FNMADD(KP850650808, Tv, Tc), T2);
    }
}

template <>
struct c2cb_traits<10, 9>
{
    static constexpr long_t flops           = 38;
    static constexpr long_t operations      = 26;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 42;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 10 -skip-k 9 -name c2cb
 * -standalone */

/*
 * This function contains 26 FP additions, 12 FP multiplications,
 * (or, 14 additions, 0 multiplications, 12 fused multiply/add),
 * 42 stack variables, 4 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 10 && SkippedOutputs == 9>::type
c2cb(SIMD_FLOAT const* __restrict ii, SIMD_FLOAT const* __restrict ri,
     SIMD_FLOAT* __restrict io, SIMD_FLOAT* __restrict ro)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    {
        SIMD_FLOAT T1, Tw, To, TB, T5, T6, Ts, Tt, T8, T4, T9, Tr, Tb, Th, Tc;
        SIMD_FLOAT Tk, T2, T3, Tp, Tq, Tf, Tg, Ti, Tj, T7, Tu, Ta, Ty, Td, Tl;
        SIMD_FLOAT Tv, Tx, TC, Te, Tz, Tm, TA, Tn;
        T1    = ri[0];
        Tw    = ii[0];
        To    = ri[WS(is, 5)];
        TB    = ii[WS(is, 5)];
        T2    = ii[WS(is, 8)];
        T3    = ii[WS(is, 3)];
        Tp    = ii[WS(is, 2)];
        Tq    = ii[WS(is, 7)];
        Tf    = ri[WS(is, 2)];
        Tg    = ri[WS(is, 7)];
        Ti    = ri[WS(is, 8)];
        Tj    = ri[WS(is, 3)];
        T5    = ri[WS(is, 1)];
        T6    = ri[WS(is, 6)];
        Ts    = ri[WS(is, 4)];
        Tt    = ri[WS(is, 9)];
        T8    = ii[WS(is, 9)];
        T4    = T2 - T3;
        T9    = ii[WS(is, 4)];
        Tr    = Tp - Tq;
        Tb    = ii[WS(is, 6)];
        Th    = Tf - Tg;
        Tc    = ii[WS(is, 1)];
        Tk    = Ti - Tj;
        T7    = T5 - T6;
        Tu    = Ts - Tt;
        Ta    = T8 - T9;
        Ty    = T4 + Tr;
        Td    = Tb - Tc;
        Tl    = Th + Tk;
        Tv    = SIMD_FMADD(KP850650808, Tu, Tr);
        Tx    = T7 + Tu;
        TC    = SIMD_FMADD(KP850650808, Td, Tk);
        Te    = Ta + Td;
        Tz    = SIMD_FMADD(KP525731112, Ty, Tx);
        Tm    = SIMD_FMADD(KP525731112, Tl, Te);
        TA    = SIMD_FMADD(KP726542528, Tz, Ta);
        Tn    = SIMD_FMADD(KP726542528, Tm, T7);
        io[0] = SIMD_FMADD(KP951056516, SIMD_FMADD(KP850650808, TA, Th), Tw) -
                (SIMD_FMADD(KP951056516, TC, TB));
        ro[0] = SIMD_FMADD(KP951056516, SIMD_FMADD(KP850650808, Tn, T4), T1) -
                (SIMD_FMADD(KP951056516, Tv, To));
    }
}

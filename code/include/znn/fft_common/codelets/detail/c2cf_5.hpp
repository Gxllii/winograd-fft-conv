//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cf_traits<5, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 12;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 5 -first-k 1 -name c2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 12 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 5 && ProvidedElements == 1>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    {
        SIMD_FLOAT T1, T2;
        T1            = ri[0];
        T2            = ii[0];
        ro[WS(os, 3)] = T1;
        ro[WS(os, 2)] = T1;
        ro[WS(os, 1)] = T1;
        ro[WS(os, 4)] = T1;
        ro[0]         = T1;
        io[WS(os, 3)] = T2;
        io[WS(os, 2)] = T2;
        io[WS(os, 1)] = T2;
        io[WS(os, 4)] = T2;
        io[0]         = T2;
    }
}

template <>
struct c2cf_traits<5, 2>
{
    static constexpr long_t flops           = 26;
    static constexpr long_t operations      = 14;
    static constexpr long_t memory_accesses = 14;
    static constexpr long_t stack_vars      = 12;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 5 -first-k 2 -name c2cf
 * -standalone */

/*
 * This function contains 14 FP additions, 12 FP multiplications,
 * (or, 2 additions, 0 multiplications, 12 fused multiply/add),
 * 12 stack variables, 4 constants, and 14 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 5 && ProvidedElements == 2>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP587785252, +0.587785252292473129168705954639072768597652438);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP309016994, +0.309016994374947424102293417182819058860154590);
    {
        SIMD_FLOAT T1, T2, T3, T4, T8, T6, T5, T7;
        T1            = ri[0];
        T2            = ri[WS(is, 1)];
        T3            = ii[0];
        T4            = ii[WS(is, 1)];
        ro[0]         = T1 + T2;
        T8            = SIMD_FMADD(KP309016994, T2, T1);
        T6            = SIMD_FNMADD(KP809016994, T2, T1);
        io[0]         = T3 + T4;
        T5            = SIMD_FMADD(KP309016994, T4, T3);
        T7            = SIMD_FNMADD(KP809016994, T4, T3);
        ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, T4, T8);
        ro[WS(os, 1)] = SIMD_FMADD(KP951056516, T4, T8);
        ro[WS(os, 3)] = SIMD_FNMADD(KP587785252, T4, T6);
        ro[WS(os, 2)] = SIMD_FMADD(KP587785252, T4, T6);
        io[WS(os, 3)] = SIMD_FMADD(KP587785252, T2, T7);
        io[WS(os, 2)] = SIMD_FNMADD(KP587785252, T2, T7);
        io[WS(os, 4)] = SIMD_FMADD(KP951056516, T2, T5);
        io[WS(os, 1)] = SIMD_FNMADD(KP951056516, T2, T5);
    }
}

template <>
struct c2cf_traits<5, 3>
{
    static constexpr long_t flops           = 42;
    static constexpr long_t operations      = 24;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 24;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 5 -first-k 3 -name c2cf
 * -standalone */

/*
 * This function contains 24 FP additions, 18 FP multiplications,
 * (or, 6 additions, 0 multiplications, 18 fused multiply/add),
 * 24 stack variables, 4 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 5 && ProvidedElements == 3>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, T2, T3, Td, T8, T9, T4, Tk, T6, Ti, Te, Ta, Tg, Tc, T5;
        SIMD_FLOAT Tf, T7, Tb, Th, Tj;
        T1            = ri[0];
        T2            = ri[WS(is, 1)];
        T3            = ri[WS(is, 2)];
        Td            = ii[0];
        T8            = ii[WS(is, 1)];
        T9            = ii[WS(is, 2)];
        T4            = T2 + T3;
        Tk            = SIMD_FNMADD(KP618033988, T2, T3);
        T6            = T3 - T2;
        Ti            = SIMD_FMADD(KP618033988, T3, T2);
        Te            = T8 + T9;
        Ta            = SIMD_FMADD(KP618033988, T9, T8);
        Tg            = T9 - T8;
        Tc            = SIMD_FNMADD(KP618033988, T8, T9);
        ro[0]         = T1 + T4;
        T5            = SIMD_FNMADD(KP250000000, T4, T1);
        io[0]         = Td + Te;
        Tf            = SIMD_FNMADD(KP250000000, Te, Td);
        T7            = SIMD_FNMADD(KP559016994, T6, T5);
        Tb            = SIMD_FMADD(KP559016994, T6, T5);
        Th            = SIMD_FNMADD(KP559016994, Tg, Tf);
        Tj            = SIMD_FMADD(KP559016994, Tg, Tf);
        ro[WS(os, 3)] = SIMD_FMADD(KP951056516, Tc, Tb);
        ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, Tc, Tb);
        ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Ta, T7);
        ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, Ta, T7);
        io[WS(os, 3)] = SIMD_FNMADD(KP951056516, Tk, Tj);
        io[WS(os, 2)] = SIMD_FMADD(KP951056516, Tk, Tj);
        io[WS(os, 4)] = SIMD_FMADD(KP951056516, Ti, Th);
        io[WS(os, 1)] = SIMD_FNMADD(KP951056516, Ti, Th);
    }
}

template <>
struct c2cf_traits<5, 4>
{
    static constexpr long_t flops           = 46;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 30;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 5 -first-k 4 -name c2cf
 * -standalone */

/*
 * This function contains 28 FP additions, 18 FP multiplications,
 * (or, 10 additions, 0 multiplications, 18 fused multiply/add),
 * 30 stack variables, 4 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 5 && ProvidedElements == 4>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, Th, T2, T3, T4, Ta, Tb, Tc, T5, Tn, Ti, Td, To, Tq, T6;
        SIMD_FLOAT T8, Te, Tg, Tl, Tj, T7, Tk, T9, Tf, Tm, Tp;
        T1            = ri[0];
        Th            = ii[0];
        T2            = ri[WS(is, 1)];
        T3            = ri[WS(is, 2)];
        T4            = ri[WS(is, 3)];
        Ta            = ii[WS(is, 1)];
        Tb            = ii[WS(is, 2)];
        Tc            = ii[WS(is, 3)];
        T5            = T3 + T4;
        Tn            = T3 - T4;
        Ti            = Tb + Tc;
        Td            = Tb - Tc;
        To            = SIMD_FMADD(KP618033988, Tn, T2);
        Tq            = SIMD_FNMADD(KP618033988, T2, Tn);
        T6            = T2 + T5;
        T8            = T2 - T5;
        Te            = SIMD_FMADD(KP618033988, Td, Ta);
        Tg            = SIMD_FNMADD(KP618033988, Ta, Td);
        Tl            = Ta - Ti;
        Tj            = Ta + Ti;
        T7            = SIMD_FNMADD(KP250000000, T6, T1);
        ro[0]         = T1 + T6;
        Tk            = SIMD_FNMADD(KP250000000, Tj, Th);
        io[0]         = Th + Tj;
        T9            = SIMD_FMADD(KP559016994, T8, T7);
        Tf            = SIMD_FNMADD(KP559016994, T8, T7);
        Tm            = SIMD_FMADD(KP559016994, Tl, Tk);
        Tp            = SIMD_FNMADD(KP559016994, Tl, Tk);
        ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, Tg, Tf);
        ro[WS(os, 3)] = SIMD_FMADD(KP951056516, Tg, Tf);
        ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Te, T9);
        ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, Te, T9);
        io[WS(os, 2)] = SIMD_FMADD(KP951056516, Tq, Tp);
        io[WS(os, 3)] = SIMD_FNMADD(KP951056516, Tq, Tp);
        io[WS(os, 4)] = SIMD_FMADD(KP951056516, To, Tm);
        io[WS(os, 1)] = SIMD_FNMADD(KP951056516, To, Tm);
    }
}

template <>
struct c2cf_traits<5, 5>
{
    static constexpr long_t flops           = 50;
    static constexpr long_t operations      = 32;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 36;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 5 -first-k 5 -name c2cf
 * -standalone */

/*
 * This function contains 32 FP additions, 18 FP multiplications,
 * (or, 14 additions, 0 multiplications, 18 fused multiply/add),
 * 36 stack variables, 4 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 5 && ProvidedElements == 5>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    {
        SIMD_FLOAT T1, Tl, T2, T3, T5, T6, Tc, Td, Tf, Tg, T4, Ts, T7, Tt, Tm;
        SIMD_FLOAT Te, Tn, Th, Tu, Tw, T8, Ta, Ti, Tk, Tq, To, T9, Tp, Tb, Tj;
        SIMD_FLOAT Tr, Tv;
        T1            = ri[0];
        Tl            = ii[0];
        T2            = ri[WS(is, 1)];
        T3            = ri[WS(is, 4)];
        T5            = ri[WS(is, 2)];
        T6            = ri[WS(is, 3)];
        Tc            = ii[WS(is, 1)];
        Td            = ii[WS(is, 4)];
        Tf            = ii[WS(is, 2)];
        Tg            = ii[WS(is, 3)];
        T4            = T2 + T3;
        Ts            = T2 - T3;
        T7            = T5 + T6;
        Tt            = T5 - T6;
        Tm            = Tc + Td;
        Te            = Tc - Td;
        Tn            = Tf + Tg;
        Th            = Tf - Tg;
        Tu            = SIMD_FMADD(KP618033988, Tt, Ts);
        Tw            = SIMD_FNMADD(KP618033988, Ts, Tt);
        T8            = T4 + T7;
        Ta            = T4 - T7;
        Ti            = SIMD_FMADD(KP618033988, Th, Te);
        Tk            = SIMD_FNMADD(KP618033988, Te, Th);
        Tq            = Tm - Tn;
        To            = Tm + Tn;
        T9            = SIMD_FNMADD(KP250000000, T8, T1);
        ro[0]         = T1 + T8;
        Tp            = SIMD_FNMADD(KP250000000, To, Tl);
        io[0]         = Tl + To;
        Tb            = SIMD_FMADD(KP559016994, Ta, T9);
        Tj            = SIMD_FNMADD(KP559016994, Ta, T9);
        Tr            = SIMD_FMADD(KP559016994, Tq, Tp);
        Tv            = SIMD_FNMADD(KP559016994, Tq, Tp);
        ro[WS(os, 2)] = SIMD_FNMADD(KP951056516, Tk, Tj);
        ro[WS(os, 3)] = SIMD_FMADD(KP951056516, Tk, Tj);
        ro[WS(os, 1)] = SIMD_FMADD(KP951056516, Ti, Tb);
        ro[WS(os, 4)] = SIMD_FNMADD(KP951056516, Ti, Tb);
        io[WS(os, 2)] = SIMD_FMADD(KP951056516, Tw, Tv);
        io[WS(os, 3)] = SIMD_FNMADD(KP951056516, Tw, Tv);
        io[WS(os, 4)] = SIMD_FMADD(KP951056516, Tu, Tr);
        io[WS(os, 1)] = SIMD_FNMADD(KP951056516, Tu, Tr);
    }
}

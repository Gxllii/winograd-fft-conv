//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<24, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 14;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 14 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1             = R0[0];
        Cr[WS(cs, 5)]  = T1;
        Cr[WS(cs, 4)]  = T1;
        Cr[WS(cs, 8)]  = T1;
        Cr[WS(cs, 7)]  = T1;
        Cr[WS(cs, 6)]  = T1;
        Cr[WS(cs, 9)]  = T1;
        Cr[WS(cs, 3)]  = T1;
        Cr[WS(cs, 1)]  = T1;
        Cr[WS(cs, 11)] = T1;
        Cr[WS(cs, 2)]  = T1;
        Cr[WS(cs, 10)] = T1;
        Cr[WS(cs, 12)] = T1;
        Cr[0]          = T1;
    }
}

template <>
struct r2cf_traits<24, 2>
{
    static constexpr long_t flops           = 32;
    static constexpr long_t operations      = 22;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 7;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 12 FP additions, 20 FP multiplications,
 * (or, 2 additions, 10 multiplications, 10 fused multiply/add),
 * 7 stack variables, 5 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP258819045, +0.258819045102520762348898837624048328349068901);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2;
        T1             = R0[0];
        T2             = R0[WS(rs, 1)];
        Cr[WS(cs, 6)]  = T1;
        Cr[WS(cs, 8)]  = SIMD_FNMADD(KP500000000, T2, T1);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP965925826, T2, T1);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T2, T1);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP258819045, T2, T1);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP258819045, T2, T1);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T2, T1);
        Cr[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T2, T1);
        Cr[WS(cs, 12)] = T1 - T2;
        Cr[WS(cs, 4)]  = SIMD_FMADD(KP500000000, T2, T1);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP965925826, T2, T1);
        Cr[0]          = T1 + T2;
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, T2, T1);
        Ci[WS(cs, 5)]  = -(KP965925826 * T2);
        Ci[WS(cs, 10)] = -(KP500000000 * T2);
        Ci[WS(cs, 2)]  = -(KP500000000 * T2);
        Ci[WS(cs, 8)]  = -(KP866025403 * T2);
        Ci[WS(cs, 4)]  = -(KP866025403 * T2);
        Ci[WS(cs, 11)] = -(KP258819045 * T2);
        Ci[WS(cs, 9)]  = -(KP707106781 * T2);
        Ci[WS(cs, 7)]  = -(KP965925826 * T2);
        Ci[WS(cs, 3)]  = -(KP707106781 * T2);
        Ci[WS(cs, 1)]  = -(KP258819045 * T2);
        Ci[WS(cs, 6)]  = -T2;
    }
}

template <>
struct r2cf_traits<24, 3>
{
    static constexpr long_t flops           = 58;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 15;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 28 FP additions, 30 FP multiplications,
 * (or, 6 additions, 8 multiplications, 22 fused multiply/add),
 * 15 stack variables, 7 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP258819045, +0.258819045102520762348898837624048328349068901);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP517638090, +0.517638090205041524697797675248096656698137803);
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    {
        SIMD_FLOAT T3, T1, T2, T7, T6, T5, T8, T4;
        T3             = R0[WS(rs, 1)];
        T1             = R0[0];
        T2             = R0[WS(rs, 2)];
        Ci[WS(cs, 6)]  = -T3;
        Cr[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T3, T1);
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, T3, T1);
        Ci[WS(cs, 3)]  = -(SIMD_FMADD(KP707106781, T3, T2));
        Ci[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, T3, T2);
        Ci[WS(cs, 5)]  = -(KP965925826 * (SIMD_FMADD(KP517638090, T2, T3)));
        Ci[WS(cs, 11)] = KP500000000 * (SIMD_FNMADD(KP517638090, T3, T2));
        Ci[WS(cs, 1)]  = -(KP500000000 * (SIMD_FMADD(KP517638090, T3, T2)));
        Ci[WS(cs, 4)]  = -(KP866025403 * (T2 + T3));
        Ci[WS(cs, 2)]  = -(KP866025403 * (SIMD_FMADD(KP577350269, T3, T2)));
        Ci[WS(cs, 10)] = KP866025403 * (SIMD_FNMADD(KP577350269, T3, T2));
        Ci[WS(cs, 8)]  = KP866025403 * (T2 - T3);
        Ci[WS(cs, 7)]  = KP965925826 * (SIMD_FMSUB(KP517638090, T2, T3));
        Cr[WS(cs, 6)]  = T1 - T2;
        T7             = SIMD_FMADD(KP500000000, T2, T1);
        T6             = SIMD_FNMADD(KP866025403, T2, T1);
        T5             = SIMD_FNMADD(KP500000000, T2, T1);
        T8             = SIMD_FMADD(KP866025403, T2, T1);
        T4             = T1 + T2;
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T3, T7);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T3, T7);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP258819045, T3, T6);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP258819045, T3, T6);
        Cr[WS(cs, 4)]  = SIMD_FMADD(KP500000000, T3, T5);
        Cr[WS(cs, 8)]  = SIMD_FNMADD(KP500000000, T3, T5);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP965925826, T3, T8);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP965925826, T3, T8);
        Cr[0]          = T4 + T3;
        Cr[WS(cs, 12)] = T4 - T3;
    }
}

template <>
struct r2cf_traits<24, 4>
{
    static constexpr long_t flops           = 68;
    static constexpr long_t operations      = 42;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 24;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 36 FP additions, 32 FP multiplications,
 * (or, 10 additions, 6 multiplications, 26 fused multiply/add),
 * 24 stack variables, 7 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP517638090, +0.517638090205041524697797675248096656698137803);
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP732050807, +0.732050807568877293527446341505872366942805254);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    {
        SIMD_FLOAT T1, T2, T3, T4, Te, Ta, Tg, T7, T5, Tf, Th, T6, T8, Tb, Td;
        SIMD_FLOAT T9, Tc;
        T1             = R0[0];
        T2             = R0[WS(rs, 2)];
        T3             = R0[WS(rs, 3)];
        T4             = R0[WS(rs, 1)];
        Cr[WS(cs, 6)]  = T1 - T2;
        Te             = SIMD_FMADD(KP866025403, T2, T1);
        Tc             = SIMD_FMADD(KP500000000, T2, T1);
        Ta             = SIMD_FNMADD(KP500000000, T2, T1);
        Tg             = T1 + T2;
        T7             = SIMD_FNMADD(KP866025403, T2, T1);
        Ci[WS(cs, 8)]  = KP866025403 * (T2 - T4);
        Ci[WS(cs, 4)]  = -(KP866025403 * (T2 + T4));
        T5             = T3 - T4;
        Tf             = SIMD_FMADD(KP732050807, T3, T4);
        Th             = T3 + T4;
        T6             = SIMD_FMADD(KP366025403, T4, T3);
        T8             = SIMD_FMSUB(KP366025403, T4, T3);
        Tb             = SIMD_FNMADD(KP500000000, T4, T3);
        Td             = SIMD_FMSUB(KP732050807, T3, T4);
        T9             = SIMD_FMADD(KP500000000, T4, T3);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T4, Tc);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T4, Tc);
        Ci[WS(cs, 10)] = SIMD_FMSUB(KP866025403, T2, T9);
        Ci[WS(cs, 2)]  = -(SIMD_FMADD(KP866025403, T2, T9));
        Ci[WS(cs, 5)]  = KP965925826 * (SIMD_FNMADD(KP517638090, T2, Td));
        Ci[WS(cs, 7)]  = KP965925826 * (SIMD_FMADD(KP517638090, T2, Td));
        Cr[WS(cs, 8)]  = Ta + Tb;
        Cr[WS(cs, 4)]  = Ta - Tb;
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, T8, T7);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, T8, T7);
        Ci[WS(cs, 11)] = -(KP707106781 * (SIMD_FNMADD(KP707106781, T2, T6)));
        Ci[WS(cs, 1)]  = -(KP707106781 * (SIMD_FMADD(KP707106781, T2, T6)));
        Cr[WS(cs, 12)] = Tg - Th;
        Cr[0]          = Tg + Th;
        Ci[WS(cs, 3)]  = -(SIMD_FMADD(KP707106781, Th, T2));
        Ci[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, Th, T2);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP965925826, Tf, Te);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP965925826, Tf, Te);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T5, T1);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T5, T1);
        Ci[WS(cs, 6)]  = T5;
    }
}

template <>
struct r2cf_traits<24, 5>
{
    static constexpr long_t flops           = 80;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 35;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 5 -name r2cf
 * -standalone */

/*
 * This function contains 44 FP additions, 36 FP multiplications,
 * (or, 14 additions, 6 multiplications, 30 fused multiply/add),
 * 35 stack variables, 9 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 5>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP896575472, +0.896575472168053524103891048961601421871534073);
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP816496580, +0.816496580927726032732428024901963797321982494);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP732050807, +0.732050807568877293527446341505872366942805254);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T6, T7, T1, T4, T2, Te, Tl, Ti, Td, Ta, Tq, To, T8, Tb, Tg;
        SIMD_FLOAT T5, T3, Tf, T9, Tm, Tj, Tp, Tc, Tn, Th, Tk;
        T6             = R0[WS(rs, 3)];
        T7             = R0[WS(rs, 1)];
        T1             = R0[0];
        T4             = R0[WS(rs, 2)];
        T2             = R0[WS(rs, 4)];
        Te             = SIMD_FMADD(KP500000000, T7, T6);
        Tl             = SIMD_FMSUB(KP732050807, T6, T7);
        Ti             = SIMD_FNMADD(KP500000000, T7, T6);
        Td             = SIMD_FMSUB(KP366025403, T7, T6);
        Ta             = SIMD_FMADD(KP366025403, T7, T6);
        Tq             = T6 + T7;
        To             = SIMD_FMADD(KP732050807, T6, T7);
        T8             = T6 - T7;
        Tb             = SIMD_FMADD(KP500000000, T2, T1);
        Tg             = SIMD_FNMADD(KP500000000, T2, T1);
        T5             = T1 - T2;
        T3             = T1 + T2;
        Tf             = T2 + T4;
        T9             = SIMD_FMADD(KP577350269, T4, T2);
        Tm             = SIMD_FNMADD(KP577350269, T4, T2);
        Tj             = T2 - T4;
        Ci[WS(cs, 3)]  = -(SIMD_FMADD(KP707106781, Tq, T4));
        Ci[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, Tq, T4);
        Ci[WS(cs, 6)]  = T8;
        Tc             = SIMD_FNMADD(KP866025403, T4, Tb);
        Tn             = SIMD_FMADD(KP866025403, T4, Tb);
        Th             = SIMD_FNMADD(KP500000000, T4, Tg);
        Tk             = SIMD_FMADD(KP500000000, T4, Tg);
        Ci[WS(cs, 10)] = SIMD_FMSUB(KP866025403, Tf, Te);
        Ci[WS(cs, 2)]  = -(SIMD_FMADD(KP866025403, Tf, Te));
        Ci[WS(cs, 11)] = KP866025403 * (SIMD_FNMADD(KP816496580, Ta, T9));
        Ci[WS(cs, 1)]  = -(KP866025403 * (SIMD_FMADD(KP816496580, Ta, T9)));
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T8, T5);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T8, T5);
        Ci[WS(cs, 5)]  = KP965925826 * (SIMD_FMADD(KP896575472, Tm, Tl));
        Ci[WS(cs, 7)]  = KP965925826 * (SIMD_FNMADD(KP896575472, Tm, Tl));
        Ci[WS(cs, 8)]  = -(KP866025403 * (Tj + T7));
        Ci[WS(cs, 4)]  = KP866025403 * (Tj - T7);
        Tp             = T3 + T4;
        Cr[WS(cs, 6)]  = T3 - T4;
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP965925826, To, Tn);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP965925826, To, Tn);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, Td, Tc);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, Td, Tc);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T7, Tk);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T7, Tk);
        Cr[WS(cs, 8)]  = Th + Ti;
        Cr[WS(cs, 4)]  = Th - Ti;
        Cr[0]          = Tp + Tq;
        Cr[WS(cs, 12)] = Tp - Tq;
    }
}

template <>
struct r2cf_traits<24, 6>
{
    static constexpr long_t flops           = 88;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 37;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 6 -name r2cf
 * -standalone */

/*
 * This function contains 50 FP additions, 38 FP multiplications,
 * (or, 18 additions, 6 multiplications, 32 fused multiply/add),
 * 37 stack variables, 5 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 6>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP816496580, +0.816496580927726032732428024901963797321982494);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    {
        SIMD_FLOAT T5, T6, T7, T1, T4, T2, T8, Th, Tv, Ta, Tn, Tg, T3, Tt, Tb;
        SIMD_FLOAT Tk, Tl, Tq, Tp, Tr, Tj, Tm, Tu, Ts, T9, Td, Tf, Ti, To, Tw;
        SIMD_FLOAT Tc, Te;
        T5             = R0[WS(rs, 3)];
        T6             = R0[WS(rs, 5)];
        T7             = R0[WS(rs, 1)];
        T1             = R0[0];
        T4             = R0[WS(rs, 2)];
        T2             = R0[WS(rs, 4)];
        T8             = T6 + T7;
        Th             = T7 - T6;
        Tv             = T2 - T4;
        Ta             = T2 + T4;
        Tn             = SIMD_FNMADD(KP577350269, T4, T2);
        Tg             = SIMD_FMADD(KP577350269, T4, T2);
        T3             = T1 + T2;
        Tt             = T1 - T2;
        Tb             = SIMD_FNMADD(KP500000000, T2, T1);
        Tk             = SIMD_FMADD(KP500000000, T2, T1);
        Tu             = Th - T5;
        Ts             = T5 + Th;
        T9             = SIMD_FMADD(KP500000000, T8, T5);
        Td             = SIMD_FNMADD(KP500000000, T8, T5);
        Tf             = T5 + T8;
        Ci[WS(cs, 6)]  = T5 - T8;
        Ti             = SIMD_FNMADD(KP577350269, Th, T8);
        To             = SIMD_FMADD(KP577350269, Th, T8);
        Tl             = SIMD_FNMADD(KP866025403, T4, Tk);
        Tq             = SIMD_FMADD(KP866025403, T4, Tk);
        Tw             = SIMD_FMADD(KP500000000, T4, Tb);
        Tc             = SIMD_FNMADD(KP500000000, T4, Tb);
        Ci[WS(cs, 4)]  = KP866025403 * (Tv - Th);
        Ci[WS(cs, 8)]  = -(KP866025403 * (Tv + Th));
        Te             = T3 + T4;
        Cr[WS(cs, 6)]  = T3 - T4;
        Ci[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, Ts, T4);
        Ci[WS(cs, 3)]  = -(SIMD_FMADD(KP707106781, Ts, T4));
        Cr[WS(cs, 3)]  = SIMD_FMADD(KP707106781, Tu, Tt);
        Cr[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, Tu, Tt);
        Ci[WS(cs, 10)] = SIMD_FMSUB(KP866025403, Ta, T9);
        Ci[WS(cs, 2)]  = -(SIMD_FMADD(KP866025403, Ta, T9));
        Tp             = SIMD_FNMADD(KP866025403, To, T5);
        Tr             = SIMD_FMADD(KP866025403, To, T5);
        Tj             = SIMD_FMADD(KP866025403, Ti, T5);
        Tm             = SIMD_FMSUB(KP866025403, Ti, T5);
        Cr[WS(cs, 8)]  = Tc + Td;
        Cr[WS(cs, 4)]  = Tc - Td;
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Th, Tw);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Th, Tw);
        Cr[0]          = Te + Tf;
        Cr[WS(cs, 12)] = Te - Tf;
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, Tr, Tq);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tr, Tq);
        Ci[WS(cs, 7)]  = -(KP866025403 * (SIMD_FNMADD(KP816496580, Tp, Tn)));
        Ci[WS(cs, 5)]  = KP866025403 * (SIMD_FMADD(KP816496580, Tp, Tn));
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, Tm, Tl);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, Tm, Tl);
        Ci[WS(cs, 11)] = KP866025403 * (SIMD_FNMADD(KP816496580, Tj, Tg));
        Ci[WS(cs, 1)]  = -(KP866025403 * (SIMD_FMADD(KP816496580, Tj, Tg)));
    }
}

template <>
struct r2cf_traits<24, 7>
{
    static constexpr long_t flops           = 88;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 31;
    static constexpr long_t stack_vars      = 41;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 7 -name r2cf
 * -standalone */

/*
 * This function contains 54 FP additions, 34 FP multiplications,
 * (or, 22 additions, 2 multiplications, 32 fused multiply/add),
 * 41 stack variables, 4 constants, and 31 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 7>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T7, T8, T9, T1, T5, T2, T4;
        T7 = R0[WS(rs, 3)];
        T8 = R0[WS(rs, 5)];
        T9 = R0[WS(rs, 1)];
        T1 = R0[0];
        T5 = R0[WS(rs, 2)];
        T2 = R0[WS(rs, 4)];
        T4 = R0[WS(rs, 6)];
        {
            SIMD_FLOAT Tl, Ta, Tu, Tp, Tk, Tr, Tv, Tt, Tn, Tq, To, Td, Ty, T3,
                Tc;
            SIMD_FLOAT TA, Te, Tj, Tw, T6, Tz, Tx, Ti, Tg, Tb, Ts, Tm, Tf, TB,
                Th;
            Tl             = T9 - T8;
            Ta             = T8 + T9;
            To             = SIMD_FMADD(KP500000000, T2, T1);
            Td             = SIMD_FNMADD(KP500000000, T2, T1);
            Ty             = T1 - T2;
            T3             = T1 + T2;
            Tc             = T2 + T5;
            TA             = T2 - T5;
            Te             = SIMD_FNMADD(KP500000000, T5, T4);
            Tj             = SIMD_FMADD(KP500000000, T5, T4);
            Tw             = T4 - T5;
            T6             = T4 + T5;
            Tz             = Tl - T7;
            Tx             = T7 + Tl;
            Ti             = T7 + Ta;
            Tg             = SIMD_FNMADD(KP500000000, Ta, T7);
            Tb             = SIMD_FMADD(KP500000000, Ta, T7);
            Ci[WS(cs, 6)]  = T7 - Ta;
            Ts             = SIMD_FMADD(KP577350269, Tl, Ta);
            Tm             = SIMD_FNMADD(KP577350269, Tl, Ta);
            Tu             = SIMD_FMADD(KP866025403, T5, To);
            Tp             = SIMD_FNMADD(KP866025403, T5, To);
            Ci[WS(cs, 4)]  = KP866025403 * (TA - Tl);
            Ci[WS(cs, 8)]  = -(KP866025403 * (TA + Tl));
            Tf             = Td + Te;
            TB             = Td - Te;
            Tk             = SIMD_FMADD(KP866025403, T2, Tj);
            Tr             = SIMD_FNMADD(KP866025403, T2, Tj);
            Th             = T3 + T6;
            Cr[WS(cs, 6)]  = T3 - T6;
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP707106781, Tz, Ty);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, Tz, Ty);
            Ci[WS(cs, 9)]  = -(SIMD_FMADD(KP707106781, Tx, Tw));
            Ci[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, Tx, Tw);
            Ci[WS(cs, 10)] = SIMD_FMSUB(KP866025403, Tc, Tb);
            Ci[WS(cs, 2)]  = -(SIMD_FMADD(KP866025403, Tc, Tb));
            Tv             = SIMD_FMADD(KP866025403, Ts, T7);
            Tt             = SIMD_FNMADD(KP866025403, Ts, T7);
            Tn             = SIMD_FMADD(KP866025403, Tm, T7);
            Tq             = SIMD_FMSUB(KP866025403, Tm, T7);
            Cr[WS(cs, 8)]  = Tf + Tg;
            Cr[WS(cs, 4)]  = Tf - Tg;
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Tl, TB);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Tl, TB);
            Cr[0]          = Th + Ti;
            Cr[WS(cs, 12)] = Th - Ti;
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, Tv, Tu);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tv, Tu);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, Tt, Tr);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, Tt, Tr);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tn, Tk);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, Tn, Tk));
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, Tq, Tp);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, Tq, Tp);
        }
    }
}

template <>
struct r2cf_traits<24, 8>
{
    static constexpr long_t flops           = 98;
    static constexpr long_t operations      = 63;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 53;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 8 -name r2cf
 * -standalone */

/*
 * This function contains 61 FP additions, 37 FP multiplications,
 * (or, 26 additions, 2 multiplications, 35 fused multiply/add),
 * 53 stack variables, 8 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 8>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP633974596, +0.633974596215561353236276829247063816528597373);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP732050807, +0.732050807568877293527446341505872366942805254);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Ta, Tb, T7, T8, T1, T5, T2, T4, Tc, Tp, T9, TC, Td, To, Tw;
        Ta = R0[WS(rs, 5)];
        Tb = R0[WS(rs, 1)];
        T7 = R0[WS(rs, 3)];
        T8 = R0[WS(rs, 7)];
        T1 = R0[0];
        T5 = R0[WS(rs, 2)];
        T2 = R0[WS(rs, 4)];
        T4 = R0[WS(rs, 6)];
        Tc = Ta + Tb;
        Tp = Tb - Ta;
        T9 = T7 + T8;
        TC = T8 - T7;
        Td = SIMD_FNMADD(KP500000000, T8, T7);
        To = SIMD_FNMADD(KP366025403, T8, T7);
        Tw = SIMD_FMADD(KP732050807, T7, T8);
        {
            SIMD_FLOAT Ts, Tg, TE, T3, Tf, TG, Th, Tm, TB, T6, TJ, TH, Tx, Tq,
                Tj;
            SIMD_FLOAT Te, TD, TF, Tl, Tz, Tt, TI, Ti, Tn, Tv, Tk, TA, Ty, Tr,
                Tu;
            Ts             = SIMD_FMADD(KP500000000, T2, T1);
            Tg             = SIMD_FNMADD(KP500000000, T2, T1);
            TE             = T1 - T2;
            T3             = T1 + T2;
            Tf             = T2 + T5;
            TG             = T2 - T5;
            Th             = SIMD_FNMADD(KP500000000, T5, T4);
            Tm             = SIMD_FMADD(KP500000000, T5, T4);
            TB             = T4 - T5;
            T6             = T4 + T5;
            TJ             = Tp - T8;
            TH             = T8 + Tp;
            Tx             = SIMD_FNMADD(KP577350269, Tp, Tc);
            Tq             = SIMD_FMADD(KP577350269, Tp, Tc);
            Tj             = SIMD_FNMADD(KP500000000, Tc, Td);
            Te             = SIMD_FMADD(KP500000000, Tc, Td);
            TD             = TC - Tp;
            TF             = TC + Tp;
            Tl             = T9 + Tc;
            Ci[WS(cs, 6)]  = T9 - Tc;
            Tz             = SIMD_FNMADD(KP866025403, T5, Ts);
            Tt             = SIMD_FMADD(KP866025403, T5, Ts);
            TI             = Tg - Th;
            Ti             = Tg + Th;
            Tn             = SIMD_FNMADD(KP866025403, T2, Tm);
            Tv             = SIMD_FMADD(KP866025403, T2, Tm);
            Tk             = T3 + T6;
            Cr[WS(cs, 6)]  = T3 - T6;
            Ci[WS(cs, 8)]  = -(KP866025403 * (TG + TH));
            Ci[WS(cs, 4)]  = KP866025403 * (TG - TH);
            TA             = SIMD_FNMADD(KP633974596, Tx, Tw);
            Ty             = SIMD_FMADD(KP633974596, Tx, Tw);
            Tr             = SIMD_FNMADD(KP866025403, Tq, To);
            Tu             = SIMD_FMADD(KP866025403, Tq, To);
            Ci[WS(cs, 10)] = SIMD_FMSUB(KP866025403, Tf, Te);
            Ci[WS(cs, 2)]  = -(SIMD_FMADD(KP866025403, Tf, Te));
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TD, TB);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TD, TB);
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TF, TE);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, TF, TE);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TJ, TI);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TJ, TI);
            Cr[WS(cs, 8)]  = Ti + Tj;
            Cr[WS(cs, 4)]  = Ti - Tj;
            Cr[0]          = Tk + Tl;
            Cr[WS(cs, 12)] = Tk - Tl;
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP965925826, TA, Tz);
            Cr[WS(cs, 5)]  = SIMD_FNMADD(KP965925826, TA, Tz);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP965925826, Ty, Tv);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP965925826, Ty, Tv));
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, Tr, Tn);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, Tr, Tn);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, Tu, Tt);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tu, Tt);
        }
    }
}

template <>
struct r2cf_traits<24, 9>
{
    static constexpr long_t flops           = 103;
    static constexpr long_t operations      = 67;
    static constexpr long_t memory_accesses = 33;
    static constexpr long_t stack_vars      = 58;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 9 -name r2cf
 * -standalone */

/*
 * This function contains 65 FP additions, 38 FP multiplications,
 * (or, 29 additions, 2 multiplications, 36 fused multiply/add),
 * 58 stack variables, 8 constants, and 33 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 9>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP633974596, +0.633974596215561353236276829247063816528597373);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP732050807, +0.732050807568877293527446341505872366942805254);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T6, T7, Tc, Td, T9, Ta, T4, T1, T2;
        T6 = R0[WS(rs, 6)];
        T7 = R0[WS(rs, 2)];
        Tc = R0[WS(rs, 5)];
        Td = R0[WS(rs, 1)];
        T9 = R0[WS(rs, 3)];
        Ta = R0[WS(rs, 7)];
        T4 = R0[WS(rs, 4)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        {
            SIMD_FLOAT Tq, Tl, TG, T8, Tu, Te, TB, Tt, Tf, TH, Tb, Th, Tr, T3,
                Tj;
            SIMD_FLOAT TO, TM, Tv, TC, Tg, Tn, TI, TK, Tp, TA, Ts, Ti, TL, Tx,
                Tk;
            SIMD_FLOAT T5, TJ, TD, TF, Tz, Tw, TN, Tm, Ty, TE, To;
            Tq             = SIMD_FMADD(KP500000000, T7, T6);
            Tl             = SIMD_FNMADD(KP500000000, T7, T6);
            TG             = T6 - T7;
            T8             = T6 + T7;
            Tu             = Td - Tc;
            Te             = Tc + Td;
            TB             = SIMD_FMADD(KP732050807, T9, Ta);
            Tt             = SIMD_FNMADD(KP366025403, Ta, T9);
            Tf             = SIMD_FNMADD(KP500000000, Ta, T9);
            TH             = Ta - T9;
            Tb             = T9 + Ta;
            Th             = T2 - T4;
            Tr             = T2 + T4;
            T3             = T1 + T2;
            Tj             = SIMD_FNMADD(KP500000000, T2, T1);
            TO             = Tu - Ta;
            TM             = Ta + Tu;
            Tv             = SIMD_FMADD(KP577350269, Tu, Te);
            TC             = SIMD_FNMADD(KP577350269, Tu, Te);
            Tg             = SIMD_FMADD(KP500000000, Te, Tf);
            Tn             = SIMD_FNMADD(KP500000000, Te, Tf);
            TI             = TH - Tu;
            TK             = TH + Tu;
            Tp             = Tb + Te;
            Ci[WS(cs, 6)]  = Tb - Te;
            TA             = SIMD_FMADD(KP866025403, Tr, Tq);
            Ts             = SIMD_FNMADD(KP866025403, Tr, Tq);
            Ti             = Th - T7;
            TL             = Th + T7;
            Tx             = SIMD_FMADD(KP500000000, T4, Tj);
            Tk             = SIMD_FNMADD(KP500000000, T4, Tj);
            T5             = T3 + T4;
            TJ             = T3 - T4;
            TD             = SIMD_FMADD(KP633974596, TC, TB);
            TF             = SIMD_FNMADD(KP633974596, TC, TB);
            Tz             = SIMD_FMADD(KP866025403, Tv, Tt);
            Tw             = SIMD_FNMADD(KP866025403, Tv, Tt);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TI, TG);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TI, TG);
            Ci[WS(cs, 8)]  = KP866025403 * (TL - TM);
            Ci[WS(cs, 4)]  = -(KP866025403 * (TL + TM));
            Ci[WS(cs, 10)] = -(SIMD_FMADD(KP866025403, Ti, Tg));
            Ci[WS(cs, 2)]  = SIMD_FMSUB(KP866025403, Ti, Tg);
            TN             = Tk - Tl;
            Tm             = Tk + Tl;
            Ty             = SIMD_FMADD(KP866025403, T7, Tx);
            TE             = SIMD_FNMADD(KP866025403, T7, Tx);
            Cr[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TK, TJ);
            Cr[WS(cs, 9)]  = SIMD_FNMADD(KP707106781, TK, TJ);
            To             = T5 + T8;
            Cr[WS(cs, 6)]  = T5 - T8;
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP965925826, TD, TA);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP965925826, TD, TA));
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, Tw, Ts);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, Tw, Ts);
            Cr[WS(cs, 8)]  = Tm + Tn;
            Cr[WS(cs, 4)]  = Tm - Tn;
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TO, TN);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TO, TN);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP965925826, TF, TE);
            Cr[WS(cs, 5)]  = SIMD_FNMADD(KP965925826, TF, TE);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, Tz, Ty);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tz, Ty);
            Cr[0]          = To + Tp;
            Cr[WS(cs, 12)] = To - Tp;
        }
    }
}

template <>
struct r2cf_traits<24, 10>
{
    static constexpr long_t flops           = 108;
    static constexpr long_t operations      = 73;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 63;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 10 -name r2cf
 * -standalone */

/*
 * This function contains 71 FP additions, 37 FP multiplications,
 * (or, 36 additions, 2 multiplications, 35 fused multiply/add),
 * 63 stack variables, 6 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 10>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP732050807, +0.732050807568877293527446341505872366942805254);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T6, T7, Tc, Td, T4, T1, T2, Ti, Tf, Tg, T8, TD, Tn, Tx, Te;
        SIMD_FLOAT TS, Ts, TG, TN, Tu, To, T9, T3, TA, Tk, TE, Th;
        T6 = R0[WS(rs, 6)];
        T7 = R0[WS(rs, 2)];
        Tc = R0[WS(rs, 3)];
        Td = R0[WS(rs, 7)];
        T4 = R0[WS(rs, 4)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        Ti = R0[WS(rs, 5)];
        Tf = R0[WS(rs, 9)];
        Tg = R0[WS(rs, 1)];
        T8 = T6 + T7;
        TD = T6 - T7;
        Tn = SIMD_FMADD(KP500000000, T7, T6);
        Tx = SIMD_FNMADD(KP500000000, T7, T6);
        Te = SIMD_FNMADD(KP366025403, Td, Tc);
        TS = Tc + Td;
        Ts = SIMD_FNMADD(KP500000000, Td, Tc);
        TG = Tc - Td;
        TN = SIMD_FMADD(KP732050807, Tc, Td);
        Tu = T2 - T4;
        To = T2 + T4;
        T9 = SIMD_FNMADD(KP500000000, T2, T1);
        T3 = T1 + T2;
        TA = Ti - Tg;
        Tk = Tg + Ti;
        TE = Tf + Tg;
        Th = SIMD_FNMADD(KP500000000, Tg, Tf);
        {
            SIMD_FLOAT TC, Tv, TM, Tp, Ta, Tw, TI, T5, TB, TL, TF, TT, Tr, Tj,
                TQ;
            SIMD_FLOAT Tb, Ty, TU, TJ, TH, TV, Tz, Tt, TO, Tl, TK, TR, TP, Tq,
                Tm;
            TC             = Tu + T7;
            Tv             = Tu - T7;
            TM             = SIMD_FMADD(KP866025403, To, Tn);
            Tp             = SIMD_FNMADD(KP866025403, To, Tn);
            Ta             = SIMD_FMADD(KP500000000, T4, T9);
            Tw             = SIMD_FNMADD(KP500000000, T4, T9);
            TI             = T3 - T4;
            T5             = T3 + T4;
            TB             = TA - Td;
            TL             = TA + Td;
            TF             = Ti - TE;
            TT             = TE + Ti;
            Tr             = SIMD_FNMADD(KP500000000, Ti, Th);
            Tj             = SIMD_FMADD(KP500000000, Ti, Th);
            TQ             = SIMD_FNMADD(KP866025403, T7, Ta);
            Tb             = SIMD_FMADD(KP866025403, T7, Ta);
            Ty             = Tw + Tx;
            TK             = Tw - Tx;
            TU             = T5 + T8;
            Cr[WS(cs, 6)]  = T5 - T8;
            Ci[WS(cs, 8)]  = KP866025403 * (TC + TB);
            Ci[WS(cs, 4)]  = KP866025403 * (TB - TC);
            TJ             = TF + TG;
            TH             = TF - TG;
            TV             = TT + TS;
            Ci[WS(cs, 6)]  = TS - TT;
            Tz             = Tr + Ts;
            Tt             = Tr - Ts;
            TO             = SIMD_FMADD(KP866025403, Tk, Tj);
            Tl             = SIMD_FNMADD(KP866025403, Tk, Tj);
            Cr[WS(cs, 10)] = SIMD_FMADD(KP866025403, TL, TK);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TL, TK);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TJ, TI);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TJ, TI);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TH, TD);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TH, TD);
            Cr[0]          = TU + TV;
            Cr[WS(cs, 12)] = TU - TV;
            Cr[WS(cs, 8)]  = Ty + Tz;
            Cr[WS(cs, 4)]  = Ty - Tz;
            Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Tv, Tt);
            Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Tv, Tt);
            TR             = SIMD_FNMADD(KP732050807, TO, TN);
            TP             = SIMD_FMADD(KP732050807, TO, TN);
            Tq             = Tl + Te;
            Tm             = Te - Tl;
            Cr[WS(cs, 5)]  = SIMD_FNMADD(KP965925826, TR, TQ);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP965925826, TR, TQ);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP965925826, TP, TM);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP965925826, TP, TM));
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, Tq, Tp);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, Tq, Tp);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, Tm, Tb);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tm, Tb);
        }
    }
}

template <>
struct r2cf_traits<24, 11>
{
    static constexpr long_t flops           = 110;
    static constexpr long_t operations      = 75;
    static constexpr long_t memory_accesses = 35;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 11 -name r2cf
 * -standalone */

/*
 * This function contains 73 FP additions, 37 FP multiplications,
 * (or, 38 additions, 2 multiplications, 35 fused multiply/add),
 * 66 stack variables, 6 constants, and 35 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 11>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP732050807, +0.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT Tf, Tg, T6, T7, T8, T4, T1, T2, Tl, Ti, Tj, TQ, TJ, Tv, TV;
        SIMD_FLOAT Th, T9, Td, Tr, Tx, T3, Tb, Tn, TE, Tk, TH;
        Tf = R0[WS(rs, 3)];
        Tg = R0[WS(rs, 7)];
        T6 = R0[WS(rs, 6)];
        T7 = R0[WS(rs, 2)];
        T8 = R0[WS(rs, 10)];
        T4 = R0[WS(rs, 4)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        Tl = R0[WS(rs, 5)];
        Ti = R0[WS(rs, 9)];
        Tj = R0[WS(rs, 1)];
        TQ = SIMD_FMADD(KP732050807, Tf, Tg);
        TJ = Tf - Tg;
        Tv = SIMD_FNMADD(KP500000000, Tg, Tf);
        TV = Tf + Tg;
        Th = SIMD_FNMADD(KP366025403, Tg, Tf);
        T9 = T7 + T8;
        Td = T8 - T7;
        Tr = T2 + T4;
        Tx = T2 - T4;
        T3 = T1 + T2;
        Tb = SIMD_FNMADD(KP500000000, T2, T1);
        Tn = Tj + Tl;
        TE = Tl - Tj;
        Tk = SIMD_FNMADD(KP500000000, Tj, Ti);
        TH = Ti + Tj;
        {
            SIMD_FLOAT TG, Ty, TL, Ts, TP, Te, TT, TB, TX, TK, TM, TY, Tw, TC,
                To;
            SIMD_FLOAT TR, Ta, TA, Tq, TD, Tz, Tc, T5, TO, TF, TW, TI, Tm, Tu,
                TN;
            SIMD_FLOAT TS, TU, Tp, Tt;
            Ta             = T6 + T9;
            TA             = SIMD_FNMADD(KP500000000, T9, T6);
            Tq             = SIMD_FMADD(KP500000000, T9, T6);
            TG             = T6 - T9;
            Ty             = Tx + Td;
            TD             = Td - Tx;
            Tz             = SIMD_FNMADD(KP500000000, T4, Tb);
            Tc             = SIMD_FMADD(KP500000000, T4, Tb);
            T5             = T3 + T4;
            TL             = T3 - T4;
            TO             = TE + Tg;
            TF             = TE - Tg;
            TW             = TH + Tl;
            TI             = Tl - TH;
            Tm             = SIMD_FMADD(KP500000000, Tl, Tk);
            Tu             = SIMD_FNMADD(KP500000000, Tl, Tk);
            Ts             = SIMD_FNMADD(KP866025403, Tr, Tq);
            TP             = SIMD_FMADD(KP866025403, Tr, Tq);
            Te             = SIMD_FNMADD(KP866025403, Td, Tc);
            TT             = SIMD_FMADD(KP866025403, Td, Tc);
            TN             = Tz - TA;
            TB             = Tz + TA;
            TX             = T5 + Ta;
            Cr[WS(cs, 6)]  = T5 - Ta;
            Ci[WS(cs, 8)]  = KP866025403 * (TF - TD);
            Ci[WS(cs, 4)]  = KP866025403 * (TD + TF);
            TK             = TI - TJ;
            TM             = TI + TJ;
            TY             = TW + TV;
            Ci[WS(cs, 6)]  = TV - TW;
            Tw             = Tu - Tv;
            TC             = Tu + Tv;
            To             = SIMD_FNMADD(KP866025403, Tn, Tm);
            TR             = SIMD_FMADD(KP866025403, Tn, Tm);
            Cr[WS(cs, 10)] = SIMD_FMADD(KP866025403, TO, TN);
            Cr[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TO, TN);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TM, TL);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TM, TL);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TK, TG);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TK, TG);
            Cr[0]          = TX + TY;
            Cr[WS(cs, 12)] = TX - TY;
            Cr[WS(cs, 8)]  = TB + TC;
            Cr[WS(cs, 4)]  = TB - TC;
            Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Ty, Tw);
            Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Ty, Tw);
            TS             = SIMD_FMADD(KP732050807, TR, TQ);
            TU             = SIMD_FNMADD(KP732050807, TR, TQ);
            Tp             = Th - To;
            Tt             = To + Th;
            Cr[WS(cs, 5)]  = SIMD_FNMADD(KP965925826, TU, TT);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP965925826, TU, TT);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP965925826, TS, TP);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP965925826, TS, TP));
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, Tt, Ts);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, Tt, Ts);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, Tp, Te);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, Tp, Te);
        }
    }
}

template <>
struct r2cf_traits<24, 12>
{
    static constexpr long_t flops           = 115;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 69;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 12 -name r2cf
 * -standalone */

/*
 * This function contains 78 FP additions, 37 FP multiplications,
 * (or, 43 additions, 2 multiplications, 35 fused multiply/add),
 * 69 stack variables, 3 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 12>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T6, T7, T8, T4, T1, T2, Te, Tb, Tc, Tj, Tg, Th, T9, Tn, TZ;
        SIMD_FLOAT To, TT, TF, TH, Tv, TL, Ts, T13, TB, TJ, TY, T10, T14, Ty,
            TI;
        SIMD_FLOAT Tl, Tt, TK, TM, TC, TG;
        T6 = R0[WS(rs, 6)];
        T7 = R0[WS(rs, 2)];
        T8 = R0[WS(rs, 10)];
        T4 = R0[WS(rs, 4)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        Te = R0[WS(rs, 5)];
        Tb = R0[WS(rs, 9)];
        Tc = R0[WS(rs, 1)];
        Tj = R0[WS(rs, 7)];
        Tg = R0[WS(rs, 3)];
        Th = R0[WS(rs, 11)];
        T9 = T7 + T8;
        Tn = T8 - T7;
        {
            SIMD_FLOAT TE, Tm, T3, Tp, TP, TA, Td, TW, TO, Tx, Ti, TU, Ta, TD,
                Tr;
            SIMD_FLOAT TR, Tq, Tu, T5, T12, TX, Tf, Tz, TQ, TS, T11, TV, Tk, Tw,
                TN;
            TE             = T2 + T4;
            Tm             = T2 - T4;
            T3             = T1 + T2;
            Tp             = SIMD_FNMADD(KP500000000, T2, T1);
            TP             = Te - Tc;
            TA             = Te + Tc;
            Td             = SIMD_FNMADD(KP500000000, Tc, Tb);
            TW             = Tb + Tc;
            TO             = Th - Tj;
            Tx             = Th + Tj;
            Ti             = SIMD_FNMADD(KP500000000, Th, Tg);
            TU             = Tg + Th;
            Ta             = T6 + T9;
            TD             = SIMD_FMADD(KP500000000, T9, T6);
            Tr             = SIMD_FNMADD(KP500000000, T9, T6);
            TZ             = T6 - T9;
            To             = Tm + Tn;
            TR             = Tn - Tm;
            Tq             = SIMD_FNMADD(KP500000000, T4, Tp);
            Tu             = SIMD_FMADD(KP500000000, T4, Tp);
            T5             = T3 + T4;
            TT             = T3 - T4;
            T12            = Te + TW;
            TX             = Te - TW;
            Tf             = SIMD_FNMADD(KP500000000, Te, Td);
            Tz             = SIMD_FMADD(KP500000000, Te, Td);
            TQ             = TO - TP;
            TS             = TO + TP;
            T11            = TU + Tj;
            TV             = TU - Tj;
            Tk             = SIMD_FNMADD(KP500000000, Tj, Ti);
            Tw             = SIMD_FMADD(KP500000000, Tj, Ti);
            TF             = SIMD_FNMADD(KP866025403, TE, TD);
            TH             = SIMD_FMADD(KP866025403, TE, TD);
            Tv             = SIMD_FNMADD(KP866025403, Tn, Tu);
            TL             = SIMD_FMADD(KP866025403, Tn, Tu);
            TN             = Tq - Tr;
            Ts             = Tq + Tr;
            T13            = T5 + Ta;
            Cr[WS(cs, 6)]  = T5 - Ta;
            TB             = SIMD_FNMADD(KP866025403, TA, Tz);
            TJ             = SIMD_FMADD(KP866025403, TA, Tz);
            Ci[WS(cs, 8)]  = KP866025403 * (TS - TR);
            Ci[WS(cs, 4)]  = KP866025403 * (TR + TS);
            TY             = TV + TX;
            T10            = TX - TV;
            T14            = T11 + T12;
            Ci[WS(cs, 6)]  = T11 - T12;
            Ty             = SIMD_FNMADD(KP866025403, Tx, Tw);
            TI             = SIMD_FMADD(KP866025403, Tx, Tw);
            Tl             = Tf - Tk;
            Tt             = Tk + Tf;
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TQ, TN);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TQ, TN);
        }
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T10, TZ);
        Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T10, TZ);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TY, TT);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TY, TT);
        Cr[0]          = T13 + T14;
        Cr[WS(cs, 12)] = T13 - T14;
        TK             = TI + TJ;
        TM             = TJ - TI;
        TC             = Ty - TB;
        TG             = Ty + TB;
        Cr[WS(cs, 8)]  = Ts + Tt;
        Cr[WS(cs, 4)]  = Ts - Tt;
        Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, To, Tl);
        Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, To, Tl);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, TM, TL);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, TM, TL);
        Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TK, TH);
        Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, TK, TH));
        Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, TG, TF);
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, TG, TF);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, TC, Tv);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TC, Tv);
    }
}

template <>
struct r2cf_traits<24, 13>
{
    static constexpr long_t flops           = 116;
    static constexpr long_t operations      = 82;
    static constexpr long_t memory_accesses = 37;
    static constexpr long_t stack_vars      = 72;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 13 -name r2cf
 * -standalone */

/*
 * This function contains 80 FP additions, 36 FP multiplications,
 * (or, 46 additions, 2 multiplications, 34 fused multiply/add),
 * 72 stack variables, 3 constants, and 37 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 13>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T8, T9, Ta, Tl, Ti, Tj, Tg, Td, Te, T1, T2, T4, T5, Tp, Tb;
        SIMD_FLOAT TA, TR, TX, Tk, TD, TS, TZ, Tf, Tr, T3, To, TH, Ts, T6, T12;
        SIMD_FLOAT Tu, TG, Tc, TY, T14, Tz, Tm, TV, TT;
        T8  = R0[WS(rs, 6)];
        T9  = R0[WS(rs, 2)];
        Ta  = R0[WS(rs, 10)];
        Tl  = R0[WS(rs, 7)];
        Ti  = R0[WS(rs, 3)];
        Tj  = R0[WS(rs, 11)];
        Tg  = R0[WS(rs, 5)];
        Td  = R0[WS(rs, 9)];
        Te  = R0[WS(rs, 1)];
        T1  = R0[0];
        T2  = R0[WS(rs, 8)];
        T4  = R0[WS(rs, 12)];
        T5  = R0[WS(rs, 4)];
        Tp  = Ta - T9;
        Tb  = T9 + Ta;
        TA  = Tj + Tl;
        TR  = Tj - Tl;
        TX  = Ti + Tj;
        Tk  = SIMD_FNMADD(KP500000000, Tj, Ti);
        TD  = Tg + Te;
        TS  = Tg - Te;
        TZ  = Td + Te;
        Tf  = SIMD_FNMADD(KP500000000, Te, Td);
        Tr  = SIMD_FNMADD(KP500000000, T2, T1);
        T3  = T1 + T2;
        To  = T2 - T5;
        TH  = T2 + T5;
        Ts  = SIMD_FNMADD(KP500000000, T5, T4);
        T6  = T4 + T5;
        T12 = T8 - Tb;
        Tu  = SIMD_FNMADD(KP500000000, Tb, T8);
        TG  = SIMD_FMADD(KP500000000, Tb, T8);
        Tc  = T8 + Tb;
        TY  = TX - Tl;
        T14 = TX + Tl;
        Tz  = SIMD_FMADD(KP500000000, Tl, Tk);
        Tm  = SIMD_FNMADD(KP500000000, Tl, Tk);
        TV  = TR + TS;
        TT  = TR - TS;
        {
            SIMD_FLOAT T10, T15, TC, Th, TU, Tq, Tx, Tt, TW, T7, TK, TI, TL, TB,
                T13;
            SIMD_FLOAT T11, T17, TM, TE, Tw, Tn, TO, Ty, Tv, TQ, T16, TP, TN,
                TJ, TF;
            T10            = Tg - TZ;
            T15            = Tg + TZ;
            TC             = SIMD_FMADD(KP500000000, Tg, Tf);
            Th             = SIMD_FNMADD(KP500000000, Tg, Tf);
            TU             = Tp - To;
            Tq             = To + Tp;
            Tx             = Tr - Ts;
            Tt             = Tr + Ts;
            TW             = T3 - T6;
            T7             = T3 + T6;
            TK             = SIMD_FMADD(KP866025403, TH, TG);
            TI             = SIMD_FNMADD(KP866025403, TH, TG);
            TL             = SIMD_FMADD(KP866025403, TA, Tz);
            TB             = SIMD_FNMADD(KP866025403, TA, Tz);
            T13            = T10 - TY;
            T11            = TY + T10;
            T17            = T14 + T15;
            Ci[WS(cs, 6)]  = T14 - T15;
            TM             = SIMD_FMADD(KP866025403, TD, TC);
            TE             = SIMD_FNMADD(KP866025403, TD, TC);
            Tw             = Tm + Th;
            Tn             = Th - Tm;
            Ci[WS(cs, 8)]  = KP866025403 * (TV - TU);
            Ci[WS(cs, 4)]  = KP866025403 * (TU + TV);
            TO             = SIMD_FMADD(KP866025403, Tp, Tx);
            Ty             = SIMD_FNMADD(KP866025403, Tp, Tx);
            Tv             = Tt + Tu;
            TQ             = Tt - Tu;
            T16            = T7 + Tc;
            Cr[WS(cs, 6)]  = T7 - Tc;
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T13, T12);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T13, T12);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T11, TW);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T11, TW);
            TP             = TM - TL;
            TN             = TL + TM;
            TJ             = TB + TE;
            TF             = TB - TE;
            Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Tq, Tn);
            Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Tq, Tn);
            Cr[WS(cs, 8)]  = Tv + Tw;
            Cr[WS(cs, 4)]  = Tv - Tw;
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TT, TQ);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TT, TQ);
            Cr[0]          = T16 + T17;
            Cr[WS(cs, 12)] = T16 - T17;
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, TP, TO);
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, TP, TO);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TN, TK);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, TN, TK));
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, TJ, TI);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, TJ, TI);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, TF, Ty);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TF, Ty);
        }
    }
}

template <>
struct r2cf_traits<24, 14>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 75;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 14 -name r2cf
 * -standalone */

/*
 * This function contains 82 FP additions, 36 FP multiplications,
 * (or, 48 additions, 2 multiplications, 34 fused multiply/add),
 * 75 stack variables, 3 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 14>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T8, Tn, Tk, Tl, T1, T2, T4, T5, Td, Te, Tg, Th, Tb, Tr, T9;
        SIMD_FLOAT Ta, T15, Ts, TT, TZ, TB, TR, TE, TO, TX, Tx, TL, TN, T19, TY;
        SIMD_FLOAT TW, T14, T16, T1a, TI, TP, Tp, Ty, TQ, TS, TJ, TM;
        T8 = R0[WS(rs, 6)];
        T9 = R0[WS(rs, 2)];
        Ta = R0[WS(rs, 10)];
        Tn = R0[WS(rs, 7)];
        Tk = R0[WS(rs, 3)];
        Tl = R0[WS(rs, 11)];
        T1 = R0[0];
        T2 = R0[WS(rs, 8)];
        T4 = R0[WS(rs, 12)];
        T5 = R0[WS(rs, 4)];
        Td = R0[WS(rs, 9)];
        Te = R0[WS(rs, 1)];
        Tg = R0[WS(rs, 5)];
        Th = R0[WS(rs, 13)];
        Tb = T9 + Ta;
        Tr = Ta - T9;
        {
            SIMD_FLOAT TU, TD, Tm, T10, T3, Tt, Tq, TA, T6, Tu, Tf, T12, Ti, TG,
                Tc;
            SIMD_FLOAT Tz, Tw, T17, T11, To, TC, TK, Tv, T7, TV, TH, T18, T13,
                Tj, TF;
            TU            = Tl - Tn;
            TD            = Tl + Tn;
            Tm            = SIMD_FNMADD(KP500000000, Tl, Tk);
            T10           = Tk + Tl;
            T3            = T1 + T2;
            Tt            = SIMD_FNMADD(KP500000000, T2, T1);
            Tq            = T2 - T5;
            TA            = T2 + T5;
            T6            = T4 + T5;
            Tu            = SIMD_FNMADD(KP500000000, T5, T4);
            Tf            = SIMD_FNMADD(KP500000000, Te, Td);
            T12           = Td + Te;
            Ti            = Tg + Th;
            TG            = Th - Tg;
            Tc            = T8 + Tb;
            Tz            = SIMD_FMADD(KP500000000, Tb, T8);
            Tw            = SIMD_FNMADD(KP500000000, Tb, T8);
            T15           = T8 - Tb;
            T17           = T10 + Tn;
            T11           = T10 - Tn;
            To            = SIMD_FNMADD(KP500000000, Tn, Tm);
            TC            = SIMD_FMADD(KP500000000, Tn, Tm);
            Ts            = Tq + Tr;
            TT            = Tr - Tq;
            TK            = Tt - Tu;
            Tv            = Tt + Tu;
            T7            = T3 + T6;
            TZ            = T3 - T6;
            TV            = TG + Te;
            TH            = TG - Te;
            T18           = Ti + T12;
            T13           = Ti - T12;
            Tj            = SIMD_FNMADD(KP500000000, Ti, Tf);
            TF            = SIMD_FMADD(KP500000000, Ti, Tf);
            TB            = SIMD_FMADD(KP866025403, TA, Tz);
            TR            = SIMD_FNMADD(KP866025403, TA, Tz);
            TE            = SIMD_FMADD(KP866025403, TD, TC);
            TO            = SIMD_FNMADD(KP866025403, TD, TC);
            TX            = Tv - Tw;
            Tx            = Tv + Tw;
            TL            = SIMD_FMADD(KP866025403, Tr, TK);
            TN            = SIMD_FNMADD(KP866025403, Tr, TK);
            T19           = T7 + Tc;
            Cr[WS(cs, 6)] = T7 - Tc;
            TY            = TU + TV;
            TW            = TU - TV;
            T14           = T11 + T13;
            T16           = T13 - T11;
            T1a           = T17 + T18;
            Ci[WS(cs, 6)] = T17 - T18;
            TI            = SIMD_FNMADD(KP866025403, TH, TF);
            TP            = SIMD_FMADD(KP866025403, TH, TF);
            Tp            = Tj - To;
            Ty            = To + Tj;
        }
        Ci[WS(cs, 8)]  = KP866025403 * (TW - TT);
        Ci[WS(cs, 4)]  = KP866025403 * (TT + TW);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TY, TX);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TY, TX);
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T16, T15);
        Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T16, T15);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T14, TZ);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T14, TZ);
        Cr[0]          = T19 + T1a;
        Cr[WS(cs, 12)] = T19 - T1a;
        TQ             = TO - TP;
        TS             = TO + TP;
        TJ             = TE + TI;
        TM             = TI - TE;
        Cr[WS(cs, 8)]  = Tx + Ty;
        Cr[WS(cs, 4)]  = Tx - Ty;
        Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Ts, Tp);
        Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Ts, Tp);
        Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, TS, TR);
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, TS, TR);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, TQ, TN);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TQ, TN);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, TM, TL);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, TM, TL);
        Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TJ, TB);
        Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, TJ, TB));
    }
}

template <>
struct r2cf_traits<24, 15>
{
    static constexpr long_t flops           = 123;
    static constexpr long_t operations      = 88;
    static constexpr long_t memory_accesses = 39;
    static constexpr long_t stack_vars      = 80;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 15 -name r2cf
 * -standalone */

/*
 * This function contains 86 FP additions, 37 FP multiplications,
 * (or, 51 additions, 2 multiplications, 35 fused multiply/add),
 * 80 stack variables, 3 constants, and 39 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 15>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tg, TY, Th, T17, T1c, T16, Tq, T1a, T14, TI, TT, Tv, T11, TW,
            TF;
        SIMD_FLOAT TB, T12, TS, TQ, T1e, TK, Tk, TL, TZ, T18, T1d, TJ, Tl, T10,
            T13;
        SIMD_FLOAT T1b, T19, T1f, TU, TM, TC, Tr, TX, TV, TR, TN;
        {
            SIMD_FLOAT Ti, TH, Ts, TE, TG, TP, Tu, TA, TD, Te, Ty, TO, T7, Tj,
                Tp;
            SIMD_FLOAT Tm, Tn, T8, T9, Tb, Tc, T1, T2, T4, T5, Tf, To, T15, Ta,
                Tz;
            SIMD_FLOAT Td, Tt, T3, Tw, T6, Tx;
            Tp            = R0[WS(rs, 7)];
            Tm            = R0[WS(rs, 3)];
            Tn            = R0[WS(rs, 11)];
            T8            = R0[WS(rs, 6)];
            T9            = R0[WS(rs, 14)];
            Tb            = R0[WS(rs, 2)];
            Tc            = R0[WS(rs, 10)];
            T1            = R0[0];
            T2            = R0[WS(rs, 8)];
            T4            = R0[WS(rs, 12)];
            T5            = R0[WS(rs, 4)];
            Tf            = R0[WS(rs, 9)];
            Tg            = R0[WS(rs, 1)];
            Ti            = R0[WS(rs, 5)];
            TY            = Tn - Tp;
            TH            = Tn + Tp;
            To            = SIMD_FNMADD(KP500000000, Tn, Tm);
            T15           = Tm + Tn;
            Ta            = T8 + T9;
            Tz            = SIMD_FNMADD(KP500000000, T9, T8);
            Td            = Tb + Tc;
            Tt            = Tc - Tb;
            T3            = T1 + T2;
            Tw            = SIMD_FNMADD(KP500000000, T2, T1);
            Ts            = T2 - T5;
            TE            = T2 + T5;
            T6            = T4 + T5;
            Tx            = SIMD_FNMADD(KP500000000, T5, T4);
            Th            = SIMD_FNMADD(KP500000000, Tg, Tf);
            T17           = Tf + Tg;
            T1c           = T15 + Tp;
            T16           = T15 - Tp;
            Tq            = SIMD_FNMADD(KP500000000, Tp, To);
            TG            = SIMD_FMADD(KP500000000, Tp, To);
            TP            = T9 + Tt;
            Tu            = T9 - Tt;
            TA            = SIMD_FNMADD(KP500000000, Td, Tz);
            TD            = SIMD_FMADD(KP500000000, Td, Tz);
            T1a           = Ta - Td;
            Te            = Ta + Td;
            Ty            = Tw + Tx;
            TO            = Tw - Tx;
            T7            = T3 + T6;
            T14           = T3 - T6;
            Tj            = R0[WS(rs, 13)];
            TI            = SIMD_FMADD(KP866025403, TH, TG);
            TT            = SIMD_FNMADD(KP866025403, TH, TG);
            Tv            = Ts - Tu;
            T11           = Ts + Tu;
            TW            = SIMD_FNMADD(KP866025403, TE, TD);
            TF            = SIMD_FMADD(KP866025403, TE, TD);
            TB            = Ty + TA;
            T12           = Ty - TA;
            TS            = SIMD_FNMADD(KP866025403, TP, TO);
            TQ            = SIMD_FMADD(KP866025403, TP, TO);
            T1e           = T7 + Te;
            Cr[WS(cs, 6)] = T7 - Te;
            TK            = Tj - Ti;
            Tk            = Ti + Tj;
        }
        TL             = TK - Tg;
        TZ             = TK + Tg;
        T18            = Tk - T17;
        T1d            = Tk + T17;
        TJ             = SIMD_FMADD(KP500000000, Tk, Th);
        Tl             = SIMD_FNMADD(KP500000000, Tk, Th);
        T10            = TY - TZ;
        T13            = TY + TZ;
        T1b            = T18 - T16;
        T19            = T16 + T18;
        T1f            = T1c + T1d;
        Ci[WS(cs, 6)]  = T1c - T1d;
        TU             = SIMD_FMADD(KP866025403, TL, TJ);
        TM             = SIMD_FNMADD(KP866025403, TL, TJ);
        TC             = Tq + Tl;
        Tr             = Tl - Tq;
        Ci[WS(cs, 8)]  = KP866025403 * (T11 + T10);
        Ci[WS(cs, 4)]  = KP866025403 * (T10 - T11);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T13, T12);
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T13, T12);
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T1b, T1a);
        Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T1b, T1a);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T19, T14);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T19, T14);
        Cr[0]          = T1e + T1f;
        Cr[WS(cs, 12)] = T1e - T1f;
        TX             = TT + TU;
        TV             = TT - TU;
        TR             = TM - TI;
        TN             = TI + TM;
        Cr[WS(cs, 8)]  = TB + TC;
        Cr[WS(cs, 4)]  = TB - TC;
        Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Tv, Tr);
        Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Tv, Tr);
        Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, TX, TW);
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, TX, TW);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, TV, TS);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TV, TS);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, TR, TQ);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, TR, TQ);
        Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TN, TF);
        Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, TN, TF));
    }
}

template <>
struct r2cf_traits<24, 16>
{
    static constexpr long_t flops           = 124;
    static constexpr long_t operations      = 90;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 83;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 16 -name r2cf
 * -standalone */

/*
 * This function contains 88 FP additions, 36 FP multiplications,
 * (or, 54 additions, 2 multiplications, 34 fused multiply/add),
 * 83 stack variables, 3 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 16>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TY, TZ;
        {
            SIMD_FLOAT TG, Tu, TA, TQ, T7, T16, Tw, TR, TF, TC, Te, T1d, T11,
                TN, T1g;
            SIMD_FLOAT T1b, Tl, TL, To, T17, T18, Tr, TJ, T10, T1, T2, T4, T5,
                T8, T9;
            SIMD_FLOAT Tb, Tc, Tf, Tg, Ti, Tj, Tn, Tq, Tm, Ty, T3, Tz, T6, TB,
                Ta;
            SIMD_FLOAT Tv, Td, T1a, Th, TM, Tk, Tp, Tx, T13, TD, T14, T1h, Ts,
                TI, T1f;
            SIMD_FLOAT T19, T15, T12, TH, TS, TU, TW, TO, TX, TK, TV, Tt, TE,
                T1c, T1e;
            SIMD_FLOAT T1i, TT, TP;
            T1             = R0[0];
            T2             = R0[WS(rs, 8)];
            T4             = R0[WS(rs, 12)];
            T5             = R0[WS(rs, 4)];
            T8             = R0[WS(rs, 6)];
            T9             = R0[WS(rs, 14)];
            Tb             = R0[WS(rs, 2)];
            Tc             = R0[WS(rs, 10)];
            Tf             = R0[WS(rs, 9)];
            Tg             = R0[WS(rs, 1)];
            Ti             = R0[WS(rs, 5)];
            Tj             = R0[WS(rs, 13)];
            Tm             = R0[WS(rs, 3)];
            Ty             = SIMD_FNMADD(KP500000000, T2, T1);
            T3             = T1 + T2;
            TG             = T2 + T5;
            Tu             = T2 - T5;
            Tz             = SIMD_FNMADD(KP500000000, T5, T4);
            T6             = T4 + T5;
            TB             = SIMD_FNMADD(KP500000000, T9, T8);
            Ta             = T8 + T9;
            Tv             = Tc - Tb;
            Td             = Tb + Tc;
            T1a            = Tf + Tg;
            Th             = SIMD_FNMADD(KP500000000, Tg, Tf);
            TM             = Tj - Ti;
            Tk             = Ti + Tj;
            Tn             = R0[WS(rs, 11)];
            Tp             = R0[WS(rs, 15)];
            TA             = Ty + Tz;
            TQ             = Ty - Tz;
            T7             = T3 + T6;
            T16            = T3 - T6;
            Tq             = R0[WS(rs, 7)];
            Tw             = T9 - Tv;
            TR             = T9 + Tv;
            TF             = SIMD_FMADD(KP500000000, Td, TB);
            TC             = SIMD_FNMADD(KP500000000, Td, TB);
            Te             = Ta + Td;
            T1d            = Ta - Td;
            T11            = TM + Tg;
            TN             = TM - Tg;
            T1g            = Tk + T1a;
            T1b            = Tk - T1a;
            Tl             = SIMD_FNMADD(KP500000000, Tk, Th);
            TL             = SIMD_FMADD(KP500000000, Tk, Th);
            To             = SIMD_FNMADD(KP500000000, Tn, Tm);
            T17            = Tm + Tn;
            T18            = Tp + Tq;
            Tr             = SIMD_FNMADD(KP500000000, Tq, Tp);
            TJ             = Tn + Tq;
            T10            = Tn - Tq;
            Cr[WS(cs, 6)]  = T7 - Te;
            Tx             = Tu - Tw;
            T13            = Tu + Tw;
            TD             = TA + TC;
            T14            = TA - TC;
            T1h            = T7 + Te;
            Ts             = To + Tr;
            TI             = To - Tr;
            T1f            = T17 + T18;
            T19            = T17 - T18;
            T15            = T10 + T11;
            T12            = T10 - T11;
            TY             = SIMD_FNMADD(KP866025403, TG, TF);
            TH             = SIMD_FMADD(KP866025403, TG, TF);
            TS             = SIMD_FMADD(KP866025403, TR, TQ);
            TU             = SIMD_FNMADD(KP866025403, TR, TQ);
            TW             = SIMD_FMADD(KP866025403, TN, TL);
            TO             = SIMD_FNMADD(KP866025403, TN, TL);
            TK             = SIMD_FMADD(KP866025403, TJ, TI);
            TV             = SIMD_FNMADD(KP866025403, TJ, TI);
            Tt             = Tl - Ts;
            TE             = Ts + Tl;
            T1c            = T19 + T1b;
            T1e            = T1b - T19;
            T1i            = T1f + T1g;
            Ci[WS(cs, 6)]  = T1f - T1g;
            Ci[WS(cs, 8)]  = KP866025403 * (T13 + T12);
            Ci[WS(cs, 4)]  = KP866025403 * (T12 - T13);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T15, T14);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T15, T14);
            TZ             = TV + TW;
            TX             = TV - TW;
            TT             = TO - TK;
            TP             = TK + TO;
            Cr[WS(cs, 8)]  = TD + TE;
            Cr[WS(cs, 4)]  = TD - TE;
            Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, Tx, Tt);
            Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, Tx, Tt);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T1e, T1d);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T1e, T1d);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T1c, T16);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T1c, T16);
            Cr[0]          = T1h + T1i;
            Cr[WS(cs, 12)] = T1h - T1i;
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, TT, TS);
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, TT, TS);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TP, TH);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, TP, TH));
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TX, TU);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, TX, TU);
        }
        Ci[WS(cs, 5)] = SIMD_FMSUB(KP707106781, TZ, TY);
        Ci[WS(cs, 7)] = SIMD_FMADD(KP707106781, TZ, TY);
    }
}

template <>
struct r2cf_traits<24, 17>
{
    static constexpr long_t flops           = 126;
    static constexpr long_t operations      = 92;
    static constexpr long_t memory_accesses = 41;
    static constexpr long_t stack_vars      = 86;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 17 -name r2cf
 * -standalone */

/*
 * This function contains 90 FP additions, 36 FP multiplications,
 * (or, 56 additions, 2 multiplications, 34 fused multiply/add),
 * 86 stack variables, 3 constants, and 41 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 17>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TM, T14, T8, TC, Tz, TU, TI, TF, Tg, T1g, Th, T1c, T1i, TL,
            Tu;
        SIMD_FLOAT Tx, TJ, TB, T5, Ti, Tk, Tl, Ta, Tb, Td, Te, To, Tp, Tr, Ts;
        SIMD_FLOAT T1, T7, T1a, Tq, T1b, Tt, T4, Tw, T6, T2, T3, TE, Tc, Ty, Tf;
        Ta  = R0[WS(rs, 6)];
        Tb  = R0[WS(rs, 14)];
        Td  = R0[WS(rs, 2)];
        Te  = R0[WS(rs, 10)];
        To  = R0[WS(rs, 3)];
        Tp  = R0[WS(rs, 11)];
        Tr  = R0[WS(rs, 15)];
        Ts  = R0[WS(rs, 7)];
        T1  = R0[0];
        T7  = R0[WS(rs, 4)];
        T6  = R0[WS(rs, 12)];
        T2  = R0[WS(rs, 8)];
        T3  = R0[WS(rs, 16)];
        TE  = SIMD_FNMADD(KP500000000, Tb, Ta);
        Tc  = Ta + Tb;
        Ty  = Te - Td;
        Tf  = Td + Te;
        T1a = To + Tp;
        Tq  = SIMD_FNMADD(KP500000000, Tp, To);
        TM  = Tp + Ts;
        T14 = Tp - Ts;
        T1b = Tr + Ts;
        Tt  = SIMD_FNMADD(KP500000000, Ts, Tr);
        T8  = T6 + T7;
        TC  = SIMD_FNMADD(KP500000000, T7, T6);
        T4  = T2 + T3;
        Tw  = T3 - T2;
        Tz  = Tb - Ty;
        TU  = Tb + Ty;
        TI  = SIMD_FMADD(KP500000000, Tf, TE);
        TF  = SIMD_FNMADD(KP500000000, Tf, TE);
        Tg  = Tc + Tf;
        T1g = Tc - Tf;
        Th  = R0[WS(rs, 9)];
        T1c = T1a - T1b;
        T1i = T1a + T1b;
        TL  = Tq - Tt;
        Tu  = Tq + Tt;
        Tx  = Tw + T7;
        TJ  = Tw - T7;
        TB  = SIMD_FNMADD(KP500000000, T4, T1);
        T5  = T1 + T4;
        Ti  = R0[WS(rs, 1)];
        Tk  = R0[WS(rs, 5)];
        Tl  = R0[WS(rs, 13)];
        {
            SIMD_FLOAT TY, TN, T13, TA, T11, TK, TT, TD, T19, T9, T1d, Tj, TP,
                Tm, TX;
            SIMD_FLOAT TV, T17, TG, T1k, TQ, T15, T1e, T1j, TO, Tn, T18, T16,
                T1f, T1h, T1l;
            SIMD_FLOAT TZ, TR, TH, Tv, T12, T10, TW, TS;
            TY             = SIMD_FNMADD(KP866025403, TM, TL);
            TN             = SIMD_FMADD(KP866025403, TM, TL);
            T13            = Tx - Tz;
            TA             = Tx + Tz;
            T11            = SIMD_FMADD(KP866025403, TJ, TI);
            TK             = SIMD_FNMADD(KP866025403, TJ, TI);
            TT             = TB - TC;
            TD             = TB + TC;
            T19            = T5 - T8;
            T9             = T5 + T8;
            T1d            = Th + Ti;
            Tj             = SIMD_FNMADD(KP500000000, Ti, Th);
            TP             = Tl - Tk;
            Tm             = Tk + Tl;
            TX             = SIMD_FNMADD(KP866025403, TU, TT);
            TV             = SIMD_FMADD(KP866025403, TU, TT);
            T17            = TD - TF;
            TG             = TD + TF;
            Cr[WS(cs, 6)]  = T9 - Tg;
            T1k            = T9 + Tg;
            TQ             = TP - Ti;
            T15            = TP + Ti;
            T1e            = Tm - T1d;
            T1j            = Tm + T1d;
            TO             = SIMD_FMADD(KP500000000, Tm, Tj);
            Tn             = SIMD_FNMADD(KP500000000, Tm, Tj);
            T18            = T14 + T15;
            T16            = T14 - T15;
            T1f            = T1c + T1e;
            T1h            = T1e - T1c;
            T1l            = T1i + T1j;
            Ci[WS(cs, 6)]  = T1i - T1j;
            TZ             = SIMD_FMADD(KP866025403, TQ, TO);
            TR             = SIMD_FNMADD(KP866025403, TQ, TO);
            TH             = Tu + Tn;
            Tv             = Tn - Tu;
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T18, T17);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T18, T17);
            Ci[WS(cs, 8)]  = KP866025403 * (T16 - T13);
            Ci[WS(cs, 4)]  = KP866025403 * (T13 + T16);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T1f, T19);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T1f, T19);
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T1h, T1g);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T1h, T1g);
            Cr[WS(cs, 12)] = T1k - T1l;
            Cr[0]          = T1k + T1l;
            T12            = TY + TZ;
            T10            = TY - TZ;
            TW             = TR - TN;
            TS             = TN + TR;
            Cr[WS(cs, 8)]  = TG + TH;
            Cr[WS(cs, 4)]  = TG - TH;
            Ci[WS(cs, 10)] = SIMD_FMADD(KP866025403, TA, Tv);
            Ci[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TA, Tv);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T12, T11);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T12, T11);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T10, TX);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T10, TX);
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, TW, TV);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, TW, TV);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, TS, TK);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, TS, TK));
        }
    }
}

template <>
struct r2cf_traits<24, 18>
{
    static constexpr long_t flops           = 128;
    static constexpr long_t operations      = 94;
    static constexpr long_t memory_accesses = 42;
    static constexpr long_t stack_vars      = 89;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 18 -name r2cf
 * -standalone */

/*
 * This function contains 92 FP additions, 36 FP multiplications,
 * (or, 58 additions, 2 multiplications, 34 fused multiply/add),
 * 89 stack variables, 3 constants, and 42 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 18>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T11, T1k, T8, TE, TB, T1a, TX, TH, Tg, TR, Th, TT, TN, T10,
            Tw;
        SIMD_FLOAT Tz, TY, TD, T5, Tm, Tn, Ti, Tj, Ta, Tb, Td, Te, Tq, Tr, Tt;
        SIMD_FLOAT Tu, T1, T7, TL, Ts, TM, Tv, T4, Ty, T6, T2, T3, TG, Tc, TA;
        SIMD_FLOAT Tf;
        Ta  = R0[WS(rs, 6)];
        Tb  = R0[WS(rs, 14)];
        Td  = R0[WS(rs, 2)];
        Te  = R0[WS(rs, 10)];
        Tq  = R0[WS(rs, 3)];
        Tr  = R0[WS(rs, 11)];
        Tt  = R0[WS(rs, 15)];
        Tu  = R0[WS(rs, 7)];
        T1  = R0[0];
        T7  = R0[WS(rs, 4)];
        T6  = R0[WS(rs, 12)];
        T2  = R0[WS(rs, 8)];
        T3  = R0[WS(rs, 16)];
        TG  = SIMD_FNMADD(KP500000000, Tb, Ta);
        Tc  = Ta + Tb;
        TA  = Te - Td;
        Tf  = Td + Te;
        TL  = Tq + Tr;
        Ts  = SIMD_FNMADD(KP500000000, Tr, Tq);
        T11 = Tr + Tu;
        T1k = Tr - Tu;
        TM  = Tt + Tu;
        Tv  = SIMD_FNMADD(KP500000000, Tu, Tt);
        T8  = T6 + T7;
        TE  = SIMD_FNMADD(KP500000000, T7, T6);
        T4  = T2 + T3;
        Ty  = T3 - T2;
        TB  = Tb - TA;
        T1a = Tb + TA;
        TX  = SIMD_FMADD(KP500000000, Tf, TG);
        TH  = SIMD_FNMADD(KP500000000, Tf, TG);
        Tg  = Tc + Tf;
        TR  = Tc - Tf;
        Th  = R0[WS(rs, 9)];
        TT  = TL + TM;
        TN  = TL - TM;
        T10 = Ts - Tv;
        Tw  = Ts + Tv;
        Tz  = Ty + T7;
        TY  = Ty - T7;
        TD  = SIMD_FNMADD(KP500000000, T4, T1);
        T5  = T1 + T4;
        Tm  = R0[WS(rs, 5)];
        Tn  = R0[WS(rs, 13)];
        Ti  = R0[WS(rs, 17)];
        Tj  = R0[WS(rs, 1)];
        {
            SIMD_FLOAT T12, T1e, T1j, TC, TZ, T1h, TF, T19, T9, TK, To, T14, Tk,
                T15, T1b;
            SIMD_FLOAT T1d, TI, T1n, TV, T1l, T16, TO, Tl, T1m, T1o, T13, Tp,
                TU, TP, Tx;
            SIMD_FLOAT TJ, T17, T1f, TQ, TS, TW, T1g, T1i, T18, T1c;
            T12            = SIMD_FMADD(KP866025403, T11, T10);
            T1e            = SIMD_FNMADD(KP866025403, T11, T10);
            T1j            = Tz - TB;
            TC             = Tz + TB;
            TZ             = SIMD_FNMADD(KP866025403, TY, TX);
            T1h            = SIMD_FMADD(KP866025403, TY, TX);
            TF             = TD + TE;
            T19            = TD - TE;
            T9             = T5 + T8;
            TK             = T5 - T8;
            To             = Tm + Tn;
            T14            = Tn - Tm;
            Tk             = Ti + Tj;
            T15            = Tj - Ti;
            T1b            = SIMD_FMADD(KP866025403, T1a, T19);
            T1d            = SIMD_FNMADD(KP866025403, T1a, T19);
            TI             = TF + TH;
            T1n            = TF - TH;
            Cr[WS(cs, 6)]  = T9 - Tg;
            TV             = T9 + Tg;
            T1l            = T14 + T15;
            T16            = T14 - T15;
            TO             = Th + Tk;
            Tl             = SIMD_FNMADD(KP500000000, Tk, Th);
            T1m            = T1k - T1l;
            T1o            = T1k + T1l;
            T13            = SIMD_FMADD(KP500000000, To, Tl);
            Tp             = SIMD_FNMADD(KP500000000, To, Tl);
            TU             = To + TO;
            TP             = To - TO;
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1o, T1n);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1o, T1n);
            Ci[WS(cs, 8)]  = KP866025403 * (T1m - T1j);
            Ci[WS(cs, 4)]  = KP866025403 * (T1j + T1m);
            Tx             = Tp - Tw;
            TJ             = Tw + Tp;
            T17            = SIMD_FNMADD(KP866025403, T16, T13);
            T1f            = SIMD_FMADD(KP866025403, T16, T13);
            TQ             = TN + TP;
            TS             = TP - TN;
            Ci[WS(cs, 6)]  = TT - TU;
            TW             = TT + TU;
            Cr[WS(cs, 4)]  = TI - TJ;
            Cr[WS(cs, 8)]  = TI + TJ;
            Ci[WS(cs, 10)] = SIMD_FMADD(KP866025403, TC, Tx);
            Ci[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TC, Tx);
            T1g            = T1e - T1f;
            T1i            = T1e + T1f;
            T18            = T12 + T17;
            T1c            = T17 - T12;
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TS, TR);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TS, TR);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TQ, TK);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TQ, TK);
            Cr[0]          = TV + TW;
            Cr[WS(cs, 12)] = TV - TW;
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1i, T1h);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1i, T1h);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1g, T1d);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1g, T1d);
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, T1c, T1b);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, T1c, T1b);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T18, TZ);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, T18, TZ));
        }
    }
}

template <>
struct r2cf_traits<24, 19>
{
    static constexpr long_t flops           = 129;
    static constexpr long_t operations      = 96;
    static constexpr long_t memory_accesses = 43;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 19 -name r2cf
 * -standalone */

/*
 * This function contains 94 FP additions, 35 FP multiplications,
 * (or, 61 additions, 2 multiplications, 33 fused multiply/add),
 * 92 stack variables, 3 constants, and 43 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 19>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1n, T11, Tj, TQ, TW, Ty, TN, T9, TH, T15, T1h, T1m, TE, TK,
            T10;
        SIMD_FLOAT TU, Ti, Tq, T17, Tm, T18, T1e, T1g, T1k, T12, T1q, TL, TY,
            T19, T1o;
        SIMD_FLOAT Tn, TR, T1r, T1p, Tr, T16, TX, TS, TM, Tz, T1i, T1a, TZ, TV,
            TT;
        SIMD_FLOAT T1l, T1j, T1f, T1b;
        {
            SIMD_FLOAT T8, TG, T14, TI, Tc, TB, T5, TF, To, T13, T1d, TD, Th,
                TJ, Tp;
            SIMD_FLOAT Tk, Tl, T1, T7, T6, T2, T3, Ts, Tt, Tv, Tw, Td, Tb, Tu,
                TO;
            SIMD_FLOAT Tx, TP, TC, Tg, Ta, Te, Tf, T4, TA, T1c;
            T1  = R0[0];
            T7  = R0[WS(rs, 4)];
            T6  = R0[WS(rs, 12)];
            T2  = R0[WS(rs, 8)];
            T3  = R0[WS(rs, 16)];
            Ts  = R0[WS(rs, 3)];
            Tt  = R0[WS(rs, 11)];
            Tv  = R0[WS(rs, 15)];
            Tw  = R0[WS(rs, 7)];
            Ta  = R0[WS(rs, 6)];
            Td  = R0[WS(rs, 18)];
            Tb  = R0[WS(rs, 14)];
            Te  = R0[WS(rs, 2)];
            Tf  = R0[WS(rs, 10)];
            T8  = T6 + T7;
            TG  = SIMD_FNMADD(KP500000000, T7, T6);
            T4  = T2 + T3;
            TA  = T3 - T2;
            Tu  = SIMD_FNMADD(KP500000000, Tt, Ts);
            TO  = Ts + Tt;
            T1n = Tt - Tw;
            T14 = Tt + Tw;
            Tx  = SIMD_FNMADD(KP500000000, Tw, Tv);
            TP  = Tv + Tw;
            TI  = SIMD_FNMADD(KP500000000, Tb, Ta);
            Tc  = Ta + Tb;
            TC  = Tf - Te;
            Tg  = Te + Tf;
            T11 = TA - T7;
            TB  = TA + T7;
            T5  = T1 + T4;
            TF  = SIMD_FNMADD(KP500000000, T4, T1);
            Tj  = R0[WS(rs, 9)];
            To  = R0[WS(rs, 5)];
            TQ  = TO - TP;
            TW  = TO + TP;
            Ty  = Tu + Tx;
            T13 = Tu - Tx;
            T1d = Tb + TC;
            TD  = Tb - TC;
            Th  = Td + Tg;
            TJ  = SIMD_FNMADD(KP500000000, Tg, Td);
            Tp  = R0[WS(rs, 13)];
            Tk  = R0[WS(rs, 17)];
            Tl  = R0[WS(rs, 1)];
            TN  = T5 - T8;
            T9  = T5 + T8;
            TH  = TF + TG;
            T1c = TF - TG;
            T15 = SIMD_FMADD(KP866025403, T14, T13);
            T1h = SIMD_FNMADD(KP866025403, T14, T13);
            T1m = TB - TD;
            TE  = TB + TD;
            TK  = TI + TJ;
            T10 = TI - TJ;
            TU  = Tc - Th;
            Ti  = Tc + Th;
            Tq  = To + Tp;
            T17 = Tp - To;
            Tm  = Tk + Tl;
            T18 = Tl - Tk;
            T1e = SIMD_FMADD(KP866025403, T1d, T1c);
            T1g = SIMD_FNMADD(KP866025403, T1d, T1c);
        }
        T1k            = SIMD_FMADD(KP866025403, T11, T10);
        T12            = SIMD_FNMADD(KP866025403, T11, T10);
        T1q            = TH - TK;
        TL             = TH + TK;
        Cr[WS(cs, 6)]  = T9 - Ti;
        TY             = T9 + Ti;
        T19            = T17 - T18;
        T1o            = T17 + T18;
        Tn             = SIMD_FNMADD(KP500000000, Tm, Tj);
        TR             = Tj + Tm;
        T1r            = T1n + T1o;
        T1p            = T1n - T1o;
        Tr             = SIMD_FNMADD(KP500000000, Tq, Tn);
        T16            = SIMD_FMADD(KP500000000, Tq, Tn);
        TX             = Tq + TR;
        TS             = Tq - TR;
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1r, T1q);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1r, T1q);
        Ci[WS(cs, 8)]  = KP866025403 * (T1p - T1m);
        Ci[WS(cs, 4)]  = KP866025403 * (T1m + T1p);
        TM             = Ty + Tr;
        Tz             = Tr - Ty;
        T1i            = SIMD_FMADD(KP866025403, T19, T16);
        T1a            = SIMD_FNMADD(KP866025403, T19, T16);
        Ci[WS(cs, 6)]  = TW - TX;
        TZ             = TW + TX;
        TV             = TS - TQ;
        TT             = TQ + TS;
        Cr[WS(cs, 4)]  = TL - TM;
        Cr[WS(cs, 8)]  = TL + TM;
        Ci[WS(cs, 10)] = SIMD_FMADD(KP866025403, TE, Tz);
        Ci[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TE, Tz);
        T1l            = T1h + T1i;
        T1j            = T1h - T1i;
        T1f            = T1a - T15;
        T1b            = T15 + T1a;
        Cr[0]          = TY + TZ;
        Cr[WS(cs, 12)] = TY - TZ;
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TV, TU);
        Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TV, TU);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TT, TN);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TT, TN);
        Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1l, T1k);
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1l, T1k);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1j, T1g);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1j, T1g);
        Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, T1f, T1e);
        Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, T1f, T1e);
        Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1b, T12);
        Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, T1b, T12));
    }
}

template <>
struct r2cf_traits<24, 20>
{
    static constexpr long_t flops           = 131;
    static constexpr long_t operations      = 98;
    static constexpr long_t memory_accesses = 44;
    static constexpr long_t stack_vars      = 61;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 20 -name r2cf
 * -standalone */

/*
 * This function contains 96 FP additions, 35 FP multiplications,
 * (or, 63 additions, 2 multiplications, 33 fused multiply/add),
 * 61 stack variables, 3 constants, and 44 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 20>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Ts, Tq, Ty, T13, T1g, Tz, TR, T1f, TJ, T9, TP, T1c, T1r, Tn,
            TT;
        SIMD_FLOAT TG, T1p, Ti, TW, T16, Tv, TM, T12;
        {
            SIMD_FLOAT Tj, T8, TI, TK, Tc, T1a, TD, T5, TH, Tm, T1b, TF, Th, TL,
                Tt;
            SIMD_FLOAT Tu, T1, T7, T6, T2, T3, Ta, Td, Tb, Te, Tf, To, Tp, Tk,
                T4;
            SIMD_FLOAT TC, Tl, TE, Tg, Tx;
            T1  = R0[0];
            T7  = R0[WS(rs, 4)];
            T6  = R0[WS(rs, 12)];
            T2  = R0[WS(rs, 8)];
            T3  = R0[WS(rs, 16)];
            Ta  = R0[WS(rs, 6)];
            Td  = R0[WS(rs, 18)];
            Tb  = R0[WS(rs, 14)];
            Te  = R0[WS(rs, 2)];
            Tf  = R0[WS(rs, 10)];
            Tj  = R0[WS(rs, 9)];
            To  = R0[WS(rs, 5)];
            Tp  = R0[WS(rs, 13)];
            Tk  = R0[WS(rs, 17)];
            T8  = T6 + T7;
            TI  = SIMD_FNMADD(KP500000000, T7, T6);
            T4  = T2 + T3;
            TC  = T3 - T2;
            Tl  = R0[WS(rs, 1)];
            TK  = SIMD_FNMADD(KP500000000, Tb, Ta);
            Tc  = Ta + Tb;
            TE  = Tf - Te;
            Tg  = Te + Tf;
            Ts  = R0[WS(rs, 3)];
            Tq  = To + Tp;
            T1a = Tp - To;
            Tx  = R0[WS(rs, 15)];
            Ty  = R0[WS(rs, 7)];
            T13 = TC - T7;
            TD  = TC + T7;
            T5  = T1 + T4;
            TH  = SIMD_FNMADD(KP500000000, T4, T1);
            Tm  = Tk + Tl;
            T1b = Tl - Tk;
            T1g = Tb + TE;
            TF  = Tb - TE;
            Th  = Td + Tg;
            TL  = SIMD_FNMADD(KP500000000, Tg, Td);
            Tt  = R0[WS(rs, 11)];
            Tz  = SIMD_FNMADD(KP500000000, Ty, Tx);
            TR  = Tx + Ty;
            Tu  = R0[WS(rs, 19)];
            T1f = TH - TI;
            TJ  = TH + TI;
            T9  = T5 + T8;
            TP  = T5 - T8;
            T1c = T1a - T1b;
            T1r = T1a + T1b;
            Tn  = SIMD_FNMADD(KP500000000, Tm, Tj);
            TT  = Tj + Tm;
            TG  = TD + TF;
            T1p = TD - TF;
            Ti  = Tc + Th;
            TW  = Tc - Th;
            T16 = Tt - Tu;
            Tv  = Tt + Tu;
            TM  = TK + TL;
            T12 = TK - TL;
        }
        {
            SIMD_FLOAT Tr, TU, TZ, T10, T1q, T17, TQ, Tw, TN, T1t, T14, T1n,
                T1h, T1j, T1d;
            SIMD_FLOAT T1l, T19, T1s, T1u, T15, TA, TS, TY, TB, TO, T18, T1k,
                T11, TV, TX;
            SIMD_FLOAT T1m, T1o, T1e, T1i;
            T19            = SIMD_FMADD(KP500000000, Tq, Tn);
            Tr             = SIMD_FNMADD(KP500000000, Tq, Tn);
            TU             = Tq - TT;
            TZ             = Tq + TT;
            Cr[WS(cs, 6)]  = T9 - Ti;
            T10            = T9 + Ti;
            T1q            = T16 - Ty;
            T17            = T16 + Ty;
            TQ             = Ts + Tv;
            Tw             = SIMD_FNMADD(KP500000000, Tv, Ts);
            TN             = TJ + TM;
            T1t            = TJ - TM;
            T14            = SIMD_FNMADD(KP866025403, T13, T12);
            T1n            = SIMD_FMADD(KP866025403, T13, T12);
            T1h            = SIMD_FMADD(KP866025403, T1g, T1f);
            T1j            = SIMD_FNMADD(KP866025403, T1g, T1f);
            T1d            = SIMD_FNMADD(KP866025403, T1c, T19);
            T1l            = SIMD_FMADD(KP866025403, T1c, T19);
            T1s            = T1q - T1r;
            T1u            = T1q + T1r;
            T15            = Tw - Tz;
            TA             = Tw + Tz;
            TS             = TQ - TR;
            TY             = TQ + TR;
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1u, T1t);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1u, T1t);
            Ci[WS(cs, 8)]  = KP866025403 * (T1s - T1p);
            Ci[WS(cs, 4)]  = KP866025403 * (T1p + T1s);
            TB             = Tr - TA;
            TO             = TA + Tr;
            T18            = SIMD_FMADD(KP866025403, T17, T15);
            T1k            = SIMD_FNMADD(KP866025403, T17, T15);
            Ci[WS(cs, 6)]  = TY - TZ;
            T11            = TY + TZ;
            TV             = TS + TU;
            TX             = TU - TS;
            Cr[WS(cs, 4)]  = TN - TO;
            Cr[WS(cs, 8)]  = TN + TO;
            Ci[WS(cs, 10)] = SIMD_FMADD(KP866025403, TG, TB);
            Ci[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TG, TB);
            T1m            = T1k - T1l;
            T1o            = T1k + T1l;
            T1e            = T18 + T1d;
            T1i            = T1d - T18;
            Cr[0]          = T10 + T11;
            Cr[WS(cs, 12)] = T10 - T11;
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, TX, TW);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, TX, TW);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TV, TP);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TV, TP);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1o, T1n);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1o, T1n);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1m, T1j);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1m, T1j);
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, T1i, T1h);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, T1i, T1h);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1e, T14);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, T1e, T14));
        }
    }
}

template <>
struct r2cf_traits<24, 21>
{
    static constexpr long_t flops           = 133;
    static constexpr long_t operations      = 100;
    static constexpr long_t memory_accesses = 45;
    static constexpr long_t stack_vars      = 98;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 21 -name r2cf
 * -standalone */

/*
 * This function contains 98 FP additions, 35 FP multiplications,
 * (or, 65 additions, 2 multiplications, 33 fused multiply/add),
 * 98 stack variables, 3 constants, and 45 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 21>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tl, Te, TN, TU, TB, T1, Ts, T1d, T6, T2, T1j, TI, Tj, TO, To;
        SIMD_FLOAT T1e, T1t, T1a, TT, Ty, T3, T7, T8, Tc, Tf, Td, Tg, Th, Tu,
            Tz;
        SIMD_FLOAT TA, Tv, Tw, Tq, Tr, Tm, Ti, TH, Tn, T19, Tx, T15, TP, Tk, TZ;
        SIMD_FLOAT T1f, T1u, Tp, TW, TC, T18, T11, TV, TE, T4, TF, T9, T1x, T1v,
            Tt;
        SIMD_FLOAT T1c, T12, TX, T1n, T1b;
        Tc  = R0[WS(rs, 6)];
        Tf  = R0[WS(rs, 18)];
        Td  = R0[WS(rs, 14)];
        Tg  = R0[WS(rs, 2)];
        Th  = R0[WS(rs, 10)];
        Tu  = R0[WS(rs, 3)];
        Tz  = R0[WS(rs, 15)];
        TA  = R0[WS(rs, 7)];
        Tv  = R0[WS(rs, 11)];
        Tw  = R0[WS(rs, 19)];
        Tl  = R0[WS(rs, 9)];
        Tq  = R0[WS(rs, 5)];
        Tr  = R0[WS(rs, 13)];
        Tm  = R0[WS(rs, 17)];
        Te  = Tc + Td;
        TN  = SIMD_FNMADD(KP500000000, Td, Tc);
        Ti  = Tg + Th;
        TH  = Th - Tg;
        Tn  = R0[WS(rs, 1)];
        TU  = Tz + TA;
        TB  = SIMD_FNMADD(KP500000000, TA, Tz);
        T19 = Tv - Tw;
        Tx  = Tv + Tw;
        T1  = R0[0];
        Ts  = Tq + Tr;
        T1d = Tr - Tq;
        T6  = R0[WS(rs, 12)];
        T2  = R0[WS(rs, 8)];
        T1j = Td + TH;
        TI  = Td - TH;
        Tj  = Tf + Ti;
        TO  = SIMD_FNMADD(KP500000000, Ti, Tf);
        To  = Tm + Tn;
        T1e = Tn - Tm;
        T1t = T19 - TA;
        T1a = T19 + TA;
        TT  = Tu + Tx;
        Ty  = SIMD_FNMADD(KP500000000, Tx, Tu);
        T3  = R0[WS(rs, 16)];
        T7  = R0[WS(rs, 20)];
        T8  = R0[WS(rs, 4)];
        T15 = TN - TO;
        TP  = TN + TO;
        Tk  = Te + Tj;
        TZ  = Te - Tj;
        T1f = T1d - T1e;
        T1u = T1d + T1e;
        Tp  = SIMD_FNMADD(KP500000000, To, Tl);
        TW  = Tl + To;
        TC  = Ty + TB;
        T18 = Ty - TB;
        T11 = TT + TU;
        TV  = TT - TU;
        TE  = T3 - T2;
        T4  = T2 + T3;
        TF  = T8 - T7;
        T9  = T7 + T8;
        T1x = T1t + T1u;
        T1v = T1t - T1u;
        Tt  = SIMD_FNMADD(KP500000000, Ts, Tp);
        T1c = SIMD_FMADD(KP500000000, Ts, Tp);
        T12 = Ts + TW;
        TX  = Ts - TW;
        T1n = SIMD_FNMADD(KP866025403, T1a, T18);
        T1b = SIMD_FMADD(KP866025403, T1a, T18);
        {
            SIMD_FLOAT TK, T5, TG, T16, TL, Ta, TR, TD, T1o, T1g, T14, T10, TY,
                TJ, T1s;
            SIMD_FLOAT T1q, T17, T1i, TM, Tb, TS, T1r, T1p, T1l, T1h, T1m, T1k,
                T1w, TQ, T13;
            TK             = SIMD_FNMADD(KP500000000, T4, T1);
            T5             = T1 + T4;
            TG             = TE + TF;
            T16            = TE - TF;
            TL             = SIMD_FNMADD(KP500000000, T9, T6);
            Ta             = T6 + T9;
            TR             = TC + Tt;
            TD             = Tt - TC;
            T1o            = SIMD_FMADD(KP866025403, T1f, T1c);
            T1g            = SIMD_FNMADD(KP866025403, T1f, T1c);
            Ci[WS(cs, 6)]  = T11 - T12;
            T14            = T11 + T12;
            T10            = TX - TV;
            TY             = TV + TX;
            TJ             = TG + TI;
            T1s            = TG - TI;
            T1q            = SIMD_FMADD(KP866025403, T16, T15);
            T17            = SIMD_FNMADD(KP866025403, T16, T15);
            T1i            = TK - TL;
            TM             = TK + TL;
            Tb             = T5 + Ta;
            TS             = T5 - Ta;
            T1r            = T1n + T1o;
            T1p            = T1n - T1o;
            T1l            = T1g - T1b;
            T1h            = T1b + T1g;
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T10, TZ);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T10, TZ);
            Ci[WS(cs, 10)] = SIMD_FMADD(KP866025403, TJ, TD);
            Ci[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TJ, TD);
            Ci[WS(cs, 8)]  = KP866025403 * (T1v - T1s);
            Ci[WS(cs, 4)]  = KP866025403 * (T1s + T1v);
            T1m            = SIMD_FNMADD(KP866025403, T1j, T1i);
            T1k            = SIMD_FMADD(KP866025403, T1j, T1i);
            T1w            = TM - TP;
            TQ             = TM + TP;
            Cr[WS(cs, 6)]  = Tb - Tk;
            T13            = Tb + Tk;
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, TY, TS);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, TY, TS);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1r, T1q);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1r, T1q);
            Ci[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1h, T17);
            Ci[WS(cs, 1)]  = -(SIMD_FMADD(KP707106781, T1h, T17));
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1p, T1m);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1p, T1m);
            Cr[WS(cs, 5)]  = SIMD_FMADD(KP707106781, T1l, T1k);
            Cr[WS(cs, 7)]  = SIMD_FNMADD(KP707106781, T1l, T1k);
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1x, T1w);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1x, T1w);
            Cr[WS(cs, 4)]  = TQ - TR;
            Cr[WS(cs, 8)]  = TQ + TR;
            Cr[0]          = T13 + T14;
            Cr[WS(cs, 12)] = T13 - T14;
        }
    }
}

template <>
struct r2cf_traits<24, 22>
{
    static constexpr long_t flops           = 134;
    static constexpr long_t operations      = 102;
    static constexpr long_t memory_accesses = 46;
    static constexpr long_t stack_vars      = 65;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 22 -name r2cf
 * -standalone */

/*
 * This function contains 100 FP additions, 34 FP multiplications,
 * (or, 68 additions, 2 multiplications, 32 fused multiply/add),
 * 65 stack variables, 3 constants, and 46 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 22>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tl, Tq, T1m, TK, T1w, TM, T5, Tk, T12, T18, TR, TE, T14, TX,
            TI;
        SIMD_FLOAT T19, TN, Ta, T1g, To, T1h, Tt, T1r, T1e;
        {
            SIMD_FLOAT T6, Te, TP, TW, TD, TG, Tj, TQ, Tm, T1d, TA, TV, TH, T9,
                Tn;
            SIMD_FLOAT Tr, Ts, Tc, Tf, Td, Tg, Th, Tw, TB, TC, Tx, Ty, T1, T2,
                T3;
            SIMD_FLOAT Ti, TJ, T7, T1c, Tz, T8, T4, T1b;
            Tc  = R0[WS(rs, 6)];
            Tf  = R0[WS(rs, 18)];
            Td  = R0[WS(rs, 14)];
            Tg  = R0[WS(rs, 2)];
            Th  = R0[WS(rs, 10)];
            Tw  = R0[WS(rs, 3)];
            TB  = R0[WS(rs, 15)];
            TC  = R0[WS(rs, 7)];
            Tx  = R0[WS(rs, 11)];
            Ty  = R0[WS(rs, 19)];
            T1  = R0[0];
            T6  = R0[WS(rs, 12)];
            T2  = R0[WS(rs, 8)];
            T3  = R0[WS(rs, 16)];
            Te  = Tc + Td;
            TP  = SIMD_FNMADD(KP500000000, Td, Tc);
            Ti  = Tg + Th;
            TJ  = Th - Tg;
            T7  = R0[WS(rs, 20)];
            TW  = TB + TC;
            TD  = SIMD_FNMADD(KP500000000, TC, TB);
            T1c = Tx - Ty;
            Tz  = Tx + Ty;
            T8  = R0[WS(rs, 4)];
            Tl  = R0[WS(rs, 21)];
            TG  = T3 - T2;
            T4  = T2 + T3;
            Tq  = R0[WS(rs, 9)];
            T1m = Td + TJ;
            TK  = Td - TJ;
            Tj  = Tf + Ti;
            TQ  = SIMD_FNMADD(KP500000000, Ti, Tf);
            Tm  = R0[WS(rs, 5)];
            T1d = T1c + TC;
            T1w = T1c - TC;
            TA  = SIMD_FNMADD(KP500000000, Tz, Tw);
            TV  = Tw + Tz;
            TH  = T8 - T7;
            T9  = T7 + T8;
            TM  = SIMD_FNMADD(KP500000000, T4, T1);
            T5  = T1 + T4;
            Tn  = R0[WS(rs, 13)];
            Tr  = R0[WS(rs, 17)];
            Ts  = R0[WS(rs, 1)];
            Tk  = Te + Tj;
            T12 = Te - Tj;
            T18 = TP - TQ;
            TR  = TP + TQ;
            TE  = TA + TD;
            T1b = TA - TD;
            T14 = TV + TW;
            TX  = TV - TW;
            TI  = TG + TH;
            T19 = TG - TH;
            TN  = SIMD_FNMADD(KP500000000, T9, T6);
            Ta  = T6 + T9;
            T1g = Tn - Tm;
            To  = Tm + Tn;
            T1h = Ts - Tr;
            Tt  = Tr + Ts;
            T1r = SIMD_FMADD(KP866025403, T1d, T1b);
            T1e = SIMD_FNMADD(KP866025403, T1d, T1b);
        }
        {
            SIMD_FLOAT T1v, TL, TU, TY, Tp, T1x, T1i, TZ, Tu, T1a, T1p, T1n,
                T1t, TS, T1z;
            SIMD_FLOAT T16, TO, T1l, Tb, T1y, T1A, T1f, Tv, T10, T15, TF, TT,
                T1j, T1q, T17;
            SIMD_FLOAT T11, T13, T1s, T1u, T1k, T1o;
            T1v            = TI - TK;
            TL             = TI + TK;
            TO             = TM + TN;
            T1l            = TM - TN;
            TU             = T5 - Ta;
            Tb             = T5 + Ta;
            TY             = Tl + To;
            Tp             = SIMD_FNMADD(KP500000000, To, Tl);
            T1x            = T1g + T1h;
            T1i            = T1g - T1h;
            TZ             = Tq + Tt;
            Tu             = SIMD_FNMADD(KP500000000, Tt, Tq);
            T1a            = SIMD_FMADD(KP866025403, T19, T18);
            T1p            = SIMD_FNMADD(KP866025403, T19, T18);
            T1n            = SIMD_FNMADD(KP866025403, T1m, T1l);
            T1t            = SIMD_FMADD(KP866025403, T1m, T1l);
            TS             = TO + TR;
            T1z            = TO - TR;
            Cr[WS(cs, 6)]  = Tb - Tk;
            T16            = Tb + Tk;
            T1y            = T1w - T1x;
            T1A            = T1w + T1x;
            T1f            = Tp - Tu;
            Tv             = Tp + Tu;
            T10            = TY - TZ;
            T15            = TY + TZ;
            Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1A, T1z);
            Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1A, T1z);
            Ci[WS(cs, 8)]  = KP866025403 * (T1y - T1v);
            Ci[WS(cs, 4)]  = KP866025403 * (T1v + T1y);
            TF             = Tv - TE;
            TT             = TE + Tv;
            T1j            = SIMD_FNMADD(KP866025403, T1i, T1f);
            T1q            = SIMD_FMADD(KP866025403, T1i, T1f);
            Ci[WS(cs, 6)]  = T14 - T15;
            T17            = T14 + T15;
            T11            = TX + T10;
            T13            = T10 - TX;
            Cr[WS(cs, 4)]  = TS - TT;
            Cr[WS(cs, 8)]  = TS + TT;
            Ci[WS(cs, 10)] = SIMD_FMADD(KP866025403, TL, TF);
            Ci[WS(cs, 2)]  = SIMD_FNMADD(KP866025403, TL, TF);
            T1s            = T1q - T1r;
            T1u            = T1r + T1q;
            T1k            = T1e - T1j;
            T1o            = T1e + T1j;
            Cr[0]          = T16 + T17;
            Cr[WS(cs, 12)] = T16 - T17;
            Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T13, T12);
            Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T13, T12);
            Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T11, TU);
            Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T11, TU);
            Cr[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1u, T1t);
            Cr[WS(cs, 5)]  = SIMD_FNMADD(KP707106781, T1u, T1t);
            Ci[WS(cs, 1)]  = SIMD_FMSUB(KP707106781, T1s, T1p);
            Ci[WS(cs, 11)] = SIMD_FMADD(KP707106781, T1s, T1p);
            Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1o, T1n);
            Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1o, T1n);
            Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1k, T1a);
            Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1k, T1a);
        }
    }
}

template <>
struct r2cf_traits<24, 23>
{
    static constexpr long_t flops           = 136;
    static constexpr long_t operations      = 104;
    static constexpr long_t memory_accesses = 47;
    static constexpr long_t stack_vars      = 104;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 23 -name r2cf
 * -standalone */

/*
 * This function contains 102 FP additions, 34 FP multiplications,
 * (or, 70 additions, 2 multiplications, 32 fused multiply/add),
 * 104 stack variables, 3 constants, and 47 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 23>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1z, TG, T17, T10, T15, T1h, T1u, TO, T1y, TX, Tr, T11, T1l,
            T1A, Tw;
        SIMD_FLOAT T12, T1s, T1d, T1w, T1q, T1C, TV, T19, T1D, T1B, Tx, T1i,
            T18, T13, TW;
        SIMD_FLOAT TH, T1t, T1m, T1a, T16, T14, T1x, T1v, T1r, T1n;
        {
            SIMD_FLOAT T6, TZ, Tn, Ts, To, T1g, TY, TL, Tg, TS, T1p, TK, Tl, TT,
                T9;
            SIMD_FLOAT TM, T1e, Tp, Tt, TP, T5, Tu, Ty, TD, TE, Tz, TA, Tc, Th,
                Td;
            SIMD_FLOAT Te, Ti, Tj, T1, T2, TF, TB, T1f, T3, T7, Tf, TI, Tk, TJ,
                T8;
            SIMD_FLOAT T4, TC, Tm, TN, T1c, TQ, Ta, T1j, Tq, T1k, Tv, TU, T1b,
                T1o, TR;
            SIMD_FLOAT Tb;
            Ty            = R0[WS(rs, 3)];
            TD            = R0[WS(rs, 15)];
            TE            = R0[WS(rs, 7)];
            Tz            = R0[WS(rs, 11)];
            TA            = R0[WS(rs, 19)];
            Tc            = R0[WS(rs, 6)];
            Th            = R0[WS(rs, 18)];
            Td            = R0[WS(rs, 14)];
            Te            = R0[WS(rs, 22)];
            Ti            = R0[WS(rs, 2)];
            Tj            = R0[WS(rs, 10)];
            T1            = R0[0];
            T6            = R0[WS(rs, 12)];
            T2            = R0[WS(rs, 8)];
            TF            = SIMD_FNMADD(KP500000000, TE, TD);
            TZ            = TD + TE;
            TB            = Tz + TA;
            T1f           = Tz - TA;
            T3            = R0[WS(rs, 16)];
            T7            = R0[WS(rs, 20)];
            Tf            = Td + Te;
            TI            = Te - Td;
            Tk            = Ti + Tj;
            TJ            = Tj - Ti;
            T8            = R0[WS(rs, 4)];
            Tn            = R0[WS(rs, 21)];
            Ts            = R0[WS(rs, 9)];
            To            = R0[WS(rs, 5)];
            T1z           = T1f - TE;
            T1g           = T1f + TE;
            TY            = Ty + TB;
            TC            = SIMD_FNMADD(KP500000000, TB, Ty);
            T4            = T2 + T3;
            TL            = T3 - T2;
            Tg            = Tc + Tf;
            TS            = SIMD_FNMADD(KP500000000, Tf, Tc);
            T1p           = TI - TJ;
            TK            = TI + TJ;
            Tl            = Th + Tk;
            TT            = SIMD_FNMADD(KP500000000, Tk, Th);
            T9            = T7 + T8;
            TM            = T8 - T7;
            TG            = TC + TF;
            T1e           = TC - TF;
            Tp            = R0[WS(rs, 13)];
            Tt            = R0[WS(rs, 17)];
            TP            = SIMD_FNMADD(KP500000000, T4, T1);
            T5            = T1 + T4;
            Tu            = R0[WS(rs, 1)];
            T17           = TY + TZ;
            T10           = TY - TZ;
            Tm            = Tg + Tl;
            T15           = Tg - Tl;
            TN            = TL + TM;
            T1c           = TL - TM;
            TQ            = SIMD_FNMADD(KP500000000, T9, T6);
            Ta            = T6 + T9;
            T1j           = Tp - To;
            Tq            = To + Tp;
            T1k           = Tu - Tt;
            Tv            = Tt + Tu;
            TU            = TS + TT;
            T1b           = TS - TT;
            T1h           = SIMD_FNMADD(KP866025403, T1g, T1e);
            T1u           = SIMD_FMADD(KP866025403, T1g, T1e);
            TO            = TK - TN;
            T1y           = TN + TK;
            T1o           = TP - TQ;
            TR            = TP + TQ;
            Tb            = T5 + Ta;
            TX            = T5 - Ta;
            Tr            = SIMD_FNMADD(KP500000000, Tq, Tn);
            T11           = Tn + Tq;
            T1l           = T1j - T1k;
            T1A           = T1j + T1k;
            Tw            = SIMD_FNMADD(KP500000000, Tv, Ts);
            T12           = Ts + Tv;
            T1s           = SIMD_FNMADD(KP866025403, T1c, T1b);
            T1d           = SIMD_FMADD(KP866025403, T1c, T1b);
            T1w           = SIMD_FNMADD(KP866025403, T1p, T1o);
            T1q           = SIMD_FMADD(KP866025403, T1p, T1o);
            T1C           = TR - TU;
            TV            = TR + TU;
            Cr[WS(cs, 6)] = Tb - Tm;
            T19           = Tb + Tm;
        }
        T1D            = T1z + T1A;
        T1B            = T1z - T1A;
        Tx             = Tr + Tw;
        T1i            = Tr - Tw;
        T18            = T11 + T12;
        T13            = T11 - T12;
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1D, T1C);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1D, T1C);
        Ci[WS(cs, 8)]  = KP866025403 * (T1B - T1y);
        Ci[WS(cs, 4)]  = KP866025403 * (T1y + T1B);
        TW             = TG + Tx;
        TH             = Tx - TG;
        T1t            = SIMD_FMADD(KP866025403, T1l, T1i);
        T1m            = SIMD_FNMADD(KP866025403, T1l, T1i);
        Ci[WS(cs, 6)]  = T17 - T18;
        T1a            = T17 + T18;
        T16            = T13 - T10;
        T14            = T10 + T13;
        Cr[WS(cs, 4)]  = TV - TW;
        Cr[WS(cs, 8)]  = TV + TW;
        Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TO, TH);
        Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TO, TH);
        T1x            = T1u + T1t;
        T1v            = T1t - T1u;
        T1r            = T1h + T1m;
        T1n            = T1h - T1m;
        Cr[0]          = T19 + T1a;
        Cr[WS(cs, 12)] = T19 - T1a;
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T16, T15);
        Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T16, T15);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T14, TX);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T14, TX);
        Cr[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1x, T1w);
        Cr[WS(cs, 5)]  = SIMD_FNMADD(KP707106781, T1x, T1w);
        Ci[WS(cs, 1)]  = SIMD_FMSUB(KP707106781, T1v, T1s);
        Ci[WS(cs, 11)] = SIMD_FMADD(KP707106781, T1v, T1s);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1r, T1q);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1r, T1q);
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1n, T1d);
        Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1n, T1d);
    }
}

template <>
struct r2cf_traits<24, 24>
{
    static constexpr long_t flops           = 138;
    static constexpr long_t operations      = 106;
    static constexpr long_t memory_accesses = 48;
    static constexpr long_t stack_vars      = 107;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 24 -first-k 24 -name r2cf
 * -standalone */

/*
 * This function contains 104 FP additions, 34 FP multiplications,
 * (or, 72 additions, 2 multiplications, 32 fused multiply/add),
 * 107 stack variables, 3 constants, and 48 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && ProvidedElements == 24>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TQ, T1B, TZ, T17, T1D, Tx, T15, T1a, T10, TC, T1b, T1C, T1j,
            T11, TH;
        SIMD_FLOAT TX, T1F, T1f, T1v, T1z, T1t, T1w, T1p, T1E, T1G, T1g, TI,
            T12, T19, TJ;
        SIMD_FLOAT TY, T1k, T1x, T1c, T16, T18, T1y, T1A, T1q, T1u;
        {
            SIMD_FLOAT Ts, Ty, TD, T5, TR, T1e, TP, Ta, TS, T1m, Tg, TU, T1s,
                TM, Tl;
            SIMD_FLOAT TV, Tv, T1n, Tz, TA, TE, Tr, T13, TF, T1, T6, T2, T3, T7,
                T8;
            SIMD_FLOAT Tc, Th, Td, Te, Ti, Tj, Tn, To, TN, T4, TO, T9, Tp, Tt,
                TK;
            SIMD_FLOAT Tf, TL, Tk, Tu, Tq, Tb, Tm, T1o, T14, Tw, TB, T1i, T1h,
                TG, T1r;
            SIMD_FLOAT TT, TW, T1d, T1l;
            T1            = R0[0];
            T6            = R0[WS(rs, 12)];
            T2            = R0[WS(rs, 8)];
            T3            = R0[WS(rs, 16)];
            T7            = R0[WS(rs, 20)];
            T8            = R0[WS(rs, 4)];
            Tc            = R0[WS(rs, 6)];
            Th            = R0[WS(rs, 18)];
            Td            = R0[WS(rs, 14)];
            Te            = R0[WS(rs, 22)];
            Ti            = R0[WS(rs, 2)];
            Tj            = R0[WS(rs, 10)];
            Tn            = R0[WS(rs, 21)];
            Ts            = R0[WS(rs, 9)];
            To            = R0[WS(rs, 5)];
            TN            = T3 - T2;
            T4            = T2 + T3;
            TO            = T8 - T7;
            T9            = T7 + T8;
            Tp            = R0[WS(rs, 13)];
            Tt            = R0[WS(rs, 17)];
            TK            = Te - Td;
            Tf            = Td + Te;
            TL            = Tj - Ti;
            Tk            = Ti + Tj;
            Tu            = R0[WS(rs, 1)];
            Ty            = R0[WS(rs, 3)];
            TD            = R0[WS(rs, 15)];
            T5            = T1 + T4;
            TR            = SIMD_FNMADD(KP500000000, T4, T1);
            T1e           = TN - TO;
            TP            = TN + TO;
            Ta            = T6 + T9;
            TS            = SIMD_FNMADD(KP500000000, T9, T6);
            Tq            = To + Tp;
            T1m           = Tp - To;
            Tg            = Tc + Tf;
            TU            = SIMD_FNMADD(KP500000000, Tf, Tc);
            T1s           = TK - TL;
            TM            = TK + TL;
            Tl            = Th + Tk;
            TV            = SIMD_FNMADD(KP500000000, Tk, Th);
            Tv            = Tt + Tu;
            T1n           = Tu - Tt;
            Tz            = R0[WS(rs, 11)];
            TA            = R0[WS(rs, 19)];
            TE            = R0[WS(rs, 23)];
            Tr            = SIMD_FNMADD(KP500000000, Tq, Tn);
            T13           = Tn + Tq;
            TF            = R0[WS(rs, 7)];
            TQ            = TM - TP;
            T1B           = TP + TM;
            TZ            = T5 - Ta;
            Tb            = T5 + Ta;
            T17           = Tg - Tl;
            Tm            = Tg + Tl;
            T1D           = T1m + T1n;
            T1o           = T1m - T1n;
            T14           = Ts + Tv;
            Tw            = SIMD_FNMADD(KP500000000, Tv, Ts);
            TB            = Tz + TA;
            T1i           = Tz - TA;
            T1h           = TE - TF;
            TG            = TE + TF;
            T1r           = TR - TS;
            TT            = TR + TS;
            TW            = TU + TV;
            T1d           = TU - TV;
            T1l           = Tr - Tw;
            Tx            = Tr + Tw;
            T15           = T13 - T14;
            T1a           = T13 + T14;
            T10           = Ty + TB;
            TC            = SIMD_FNMADD(KP500000000, TB, Ty);
            Cr[WS(cs, 6)] = Tb - Tm;
            T1b           = Tb + Tm;
            T1C           = T1i + T1h;
            T1j           = T1h - T1i;
            T11           = TD + TG;
            TH            = SIMD_FNMADD(KP500000000, TG, TD);
            TX            = TT + TW;
            T1F           = TT - TW;
            T1f           = SIMD_FMADD(KP866025403, T1e, T1d);
            T1v           = SIMD_FNMADD(KP866025403, T1e, T1d);
            T1z           = SIMD_FNMADD(KP866025403, T1s, T1r);
            T1t           = SIMD_FMADD(KP866025403, T1s, T1r);
            T1w           = SIMD_FMADD(KP866025403, T1o, T1l);
            T1p           = SIMD_FNMADD(KP866025403, T1o, T1l);
        }
        T1E            = T1C - T1D;
        T1G            = T1C + T1D;
        T1g            = TC - TH;
        TI             = TC + TH;
        T12            = T10 - T11;
        T19            = T10 + T11;
        Cr[WS(cs, 10)] = SIMD_FNMADD(KP866025403, T1G, T1F);
        Cr[WS(cs, 2)]  = SIMD_FMADD(KP866025403, T1G, T1F);
        Ci[WS(cs, 8)]  = KP866025403 * (T1E - T1B);
        Ci[WS(cs, 4)]  = KP866025403 * (T1B + T1E);
        TJ             = Tx - TI;
        TY             = TI + Tx;
        T1k            = SIMD_FMADD(KP866025403, T1j, T1g);
        T1x            = SIMD_FNMADD(KP866025403, T1j, T1g);
        Ci[WS(cs, 6)]  = T19 - T1a;
        T1c            = T19 + T1a;
        T16            = T12 + T15;
        T18            = T15 - T12;
        Cr[WS(cs, 4)]  = TX - TY;
        Cr[WS(cs, 8)]  = TX + TY;
        Ci[WS(cs, 10)] = SIMD_FNMADD(KP866025403, TQ, TJ);
        Ci[WS(cs, 2)]  = SIMD_FMADD(KP866025403, TQ, TJ);
        T1y            = T1w - T1x;
        T1A            = T1x + T1w;
        T1q            = T1k - T1p;
        T1u            = T1k + T1p;
        Cr[0]          = T1b + T1c;
        Cr[WS(cs, 12)] = T1b - T1c;
        Ci[WS(cs, 9)]  = SIMD_FMSUB(KP707106781, T18, T17);
        Ci[WS(cs, 3)]  = SIMD_FMADD(KP707106781, T18, T17);
        Cr[WS(cs, 9)]  = SIMD_FMADD(KP707106781, T16, TZ);
        Cr[WS(cs, 3)]  = SIMD_FNMADD(KP707106781, T16, TZ);
        Cr[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1A, T1z);
        Cr[WS(cs, 5)]  = SIMD_FNMADD(KP707106781, T1A, T1z);
        Ci[WS(cs, 1)]  = SIMD_FMSUB(KP707106781, T1y, T1v);
        Ci[WS(cs, 11)] = SIMD_FMADD(KP707106781, T1y, T1v);
        Cr[WS(cs, 1)]  = SIMD_FMADD(KP707106781, T1u, T1t);
        Cr[WS(cs, 11)] = SIMD_FNMADD(KP707106781, T1u, T1t);
        Ci[WS(cs, 7)]  = SIMD_FMADD(KP707106781, T1q, T1f);
        Ci[WS(cs, 5)]  = SIMD_FMSUB(KP707106781, T1q, T1f);
    }
}

//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct c2cf_traits<16, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 1 -name c2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 1>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    {
        SIMD_FLOAT T1, T2;
        T1             = ri[0];
        T2             = ii[0];
        ro[WS(os, 10)] = T1;
        ro[WS(os, 9)]  = T1;
        ro[WS(os, 6)]  = T1;
        ro[WS(os, 5)]  = T1;
        ro[WS(os, 11)] = T1;
        ro[WS(os, 8)]  = T1;
        ro[WS(os, 7)]  = T1;
        ro[WS(os, 4)]  = T1;
        ro[WS(os, 14)] = T1;
        ro[WS(os, 13)] = T1;
        ro[WS(os, 2)]  = T1;
        ro[WS(os, 1)]  = T1;
        ro[WS(os, 15)] = T1;
        ro[WS(os, 12)] = T1;
        ro[WS(os, 3)]  = T1;
        ro[0]          = T1;
        io[WS(os, 10)] = T2;
        io[WS(os, 9)]  = T2;
        io[WS(os, 6)]  = T2;
        io[WS(os, 5)]  = T2;
        io[WS(os, 11)] = T2;
        io[WS(os, 8)]  = T2;
        io[WS(os, 7)]  = T2;
        io[WS(os, 4)]  = T2;
        io[WS(os, 14)] = T2;
        io[WS(os, 13)] = T2;
        io[WS(os, 2)]  = T2;
        io[WS(os, 1)]  = T2;
        io[WS(os, 15)] = T2;
        io[WS(os, 12)] = T2;
        io[WS(os, 3)]  = T2;
        io[0]          = T2;
    }
}

template <>
struct c2cf_traits<16, 2>
{
    static constexpr long_t flops           = 66;
    static constexpr long_t operations      = 38;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 13;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 2 -name c2cf
 * -standalone */

/*
 * This function contains 38 FP additions, 28 FP multiplications,
 * (or, 10 additions, 0 multiplications, 28 fused multiply/add),
 * 13 stack variables, 3 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 2>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1, T3, T2, T4, T5, T6, Ta, T9, T8, T7;
        T1             = ri[0];
        T3             = ii[0];
        T2             = ri[WS(is, 1)];
        T4             = ii[WS(is, 1)];
        io[WS(os, 12)] = T2 + T3;
        io[WS(os, 4)]  = T3 - T2;
        ro[0]          = T1 + T2;
        ro[WS(os, 8)]  = T1 - T2;
        ro[WS(os, 12)] = T1 - T4;
        ro[WS(os, 4)]  = T1 + T4;
        io[0]          = T3 + T4;
        io[WS(os, 8)]  = T3 - T4;
        T5             = SIMD_FMADD(KP414213562, T4, T2);
        T6             = SIMD_FMSUB(KP414213562, T4, T2);
        Ta             = SIMD_FMADD(KP414213562, T2, T4);
        T9             = SIMD_FNMADD(KP414213562, T2, T4);
        T8             = T4 - T2;
        T7             = T2 + T4;
        io[WS(os, 14)] = SIMD_FMADD(KP707106781, T7, T3);
        ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T7, T1);
        ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T7, T1);
        io[WS(os, 6)]  = SIMD_FNMADD(KP707106781, T7, T3);
        ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T8, T1);
        io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T8, T3);
        io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T8, T3);
        ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T8, T1);
        ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T9, T1);
        io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T9, T3);
        io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T9, T3);
        ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T9, T1);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, Ta, T3);
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, Ta, T1);
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, Ta, T3);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, Ta, T1);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T6, T1);
        io[WS(os, 3)]  = SIMD_FMADD(KP923879532, T6, T3);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T6, T1);
        io[WS(os, 11)] = SIMD_FNMADD(KP923879532, T6, T3);
        io[WS(os, 13)] = SIMD_FMADD(KP923879532, T5, T3);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T5, T1);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T5, T1);
        io[WS(os, 5)]  = SIMD_FNMADD(KP923879532, T5, T3);
    }
}

template <>
struct c2cf_traits<16, 3>
{
    static constexpr long_t flops           = 92;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 33;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 3 -name c2cf
 * -standalone */

/*
 * This function contains 56 FP additions, 36 FP multiplications,
 * (or, 20 additions, 0 multiplications, 36 fused multiply/add),
 * 33 stack variables, 3 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 3>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T4, T9, T1, T5, T2, T6, Td, Th, Tt, Tq, Tn, Tk, Tm, Tj, Ta;
        SIMD_FLOAT T3, Te, Tb, To, Tl, T7, T8, Tu, Ti, Tc, Tp, Tg, Ts, Tr, Tf;
        T4             = ri[WS(is, 1)];
        T9             = ii[WS(is, 1)];
        T1             = ri[0];
        T5             = ii[0];
        T2             = ri[WS(is, 2)];
        T6             = ii[WS(is, 2)];
        Td             = SIMD_FMADD(KP414213562, T9, T4);
        Th             = SIMD_FMSUB(KP414213562, T9, T4);
        Tt             = SIMD_FMADD(KP414213562, T4, T9);
        Tq             = SIMD_FNMADD(KP414213562, T4, T9);
        Tn             = T9 - T4;
        Tk             = T4 + T9;
        Tm             = T5 - T2;
        Tj             = T2 + T5;
        Ta             = T1 - T2;
        T3             = T1 + T2;
        Te             = T2 + T6;
        Tb             = T6 - T2;
        To             = T1 - T6;
        Tl             = T1 + T6;
        T7             = T5 - T6;
        T8             = T5 + T6;
        io[WS(os, 14)] = SIMD_FMADD(KP707106781, Tk, Tj);
        io[WS(os, 6)]  = SIMD_FNMADD(KP707106781, Tk, Tj);
        ro[WS(os, 12)] = Ta - T9;
        ro[WS(os, 4)]  = Ta + T9;
        io[WS(os, 2)]  = SIMD_FMADD(KP707106781, Tn, Tm);
        io[WS(os, 10)] = SIMD_FNMADD(KP707106781, Tn, Tm);
        ro[0]          = T3 + T4;
        ro[WS(os, 8)]  = T3 - T4;
        Tu             = SIMD_FMADD(KP707106781, Tb, T1);
        Ti             = SIMD_FNMADD(KP707106781, Tb, T1);
        Tc             = SIMD_FNMADD(KP707106781, Tb, T5);
        Tp             = SIMD_FMADD(KP707106781, Tb, T5);
        Tg             = SIMD_FNMADD(KP707106781, Te, T5);
        Ts             = SIMD_FMADD(KP707106781, Te, T5);
        Tr             = SIMD_FNMADD(KP707106781, Te, T1);
        Tf             = SIMD_FMADD(KP707106781, Te, T1);
        ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, Tk, Tl);
        ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, Tk, Tl);
        io[WS(os, 12)] = T4 + T7;
        io[WS(os, 4)]  = T7 - T4;
        ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, Tn, To);
        ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, Tn, To);
        io[0]          = T8 + T9;
        io[WS(os, 8)]  = T8 - T9;
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, Th, Ti);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, Th, Ti);
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, Tt, Tu);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, Tt, Tu);
        io[WS(os, 1)]  = SIMD_FMADD(KP923879532, Tq, Tp);
        io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, Tq, Tp);
        io[WS(os, 13)] = SIMD_FMADD(KP923879532, Td, Tc);
        io[WS(os, 5)]  = SIMD_FNMADD(KP923879532, Td, Tc);
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, Tt, Ts);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, Tt, Ts);
        io[WS(os, 3)]  = SIMD_FMADD(KP923879532, Th, Tg);
        io[WS(os, 11)] = SIMD_FNMADD(KP923879532, Th, Tg);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, Td, Tf);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, Td, Tf);
        ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, Tq, Tr);
        ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, Tq, Tr);
    }
}

template <>
struct c2cf_traits<16, 4>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 78;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 57;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 4 -name c2cf
 * -standalone */

/*
 * This function contains 78 FP additions, 40 FP multiplications,
 * (or, 38 additions, 0 multiplications, 40 fused multiply/add),
 * 57 stack variables, 3 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 4>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1, T8, T2, T9, T4, Td, T5, Tf, T3, Tl, TD, TF, Tb, Ti, Tz;
        SIMD_FLOAT TJ, Ta, TR, Te, TM, Tu, TG, To, TA;
        T1 = ri[0];
        T8 = ii[0];
        T2 = ri[WS(is, 2)];
        T9 = ii[WS(is, 2)];
        T4 = ri[WS(is, 1)];
        Td = ii[WS(is, 1)];
        T5 = ri[WS(is, 3)];
        Tf = ii[WS(is, 3)];
        T3 = T1 + T2;
        Tl = T1 - T2;
        TD = T2 + T8;
        TF = T8 - T2;
        Tb = T9 - T2;
        Ti = T2 + T9;
        Tz = T1 + T9;
        TJ = T1 - T9;
        Ta = T8 - T9;
        TR = T8 + T9;
        Te = SIMD_FMSUB(KP414213562, Td, T4);
        TM = SIMD_FMADD(KP414213562, Td, T4);
        Tu = SIMD_FMADD(KP414213562, T4, Td);
        TG = Td - T4;
        To = SIMD_FNMADD(KP414213562, T4, Td);
        TA = T4 + Td;
        {
            SIMD_FLOAT T6, T7, Tg, TH, TN, Tv, Tp, TB, Tm, TS, TL, Tn, Tx, Tj,
                Tr;
            SIMD_FLOAT TP, Tc, Tt, TC, TE, Ts, Tq, Ty, Tw, TO, TQ, TI, TK, Th,
                Tk;
            T6             = T4 + T5;
            T7             = T5 - T4;
            Tg             = SIMD_FMSUB(KP414213562, T5, Tf);
            TH             = T5 + Tf;
            TN             = SIMD_FMADD(KP414213562, T5, Tf);
            Tv             = SIMD_FMADD(KP414213562, Tf, T5);
            Tp             = SIMD_FMSUB(KP414213562, Tf, T5);
            TB             = Tf - T5;
            Tm             = Td - Tf;
            TS             = Td + Tf;
            TL             = SIMD_FMADD(KP707106781, Ti, T1);
            Tn             = SIMD_FNMADD(KP707106781, Ti, T1);
            Tx             = SIMD_FMADD(KP707106781, Ti, T8);
            Tj             = SIMD_FNMADD(KP707106781, Ti, T8);
            Tr             = SIMD_FMADD(KP707106781, Tb, T8);
            TP             = SIMD_FNMADD(KP707106781, Tb, T8);
            Tc             = SIMD_FNMADD(KP707106781, Tb, T1);
            Tt             = SIMD_FMADD(KP707106781, Tb, T1);
            io[WS(os, 12)] = Ta - T7;
            io[WS(os, 4)]  = T7 + Ta;
            ro[0]          = T3 + T6;
            ro[WS(os, 8)]  = T3 - T6;
            TC             = TA + TB;
            TE             = TB - TA;
            Ts             = To + Tp;
            Tq             = To - Tp;
            Ty             = Tu + Tv;
            Tw             = Tu - Tv;
            ro[WS(os, 12)] = Tl - Tm;
            ro[WS(os, 4)]  = Tl + Tm;
            TO             = TM + TN;
            TQ             = TN - TM;
            io[0]          = TR + TS;
            io[WS(os, 8)]  = TR - TS;
            TI             = TG - TH;
            TK             = TG + TH;
            Th             = Te - Tg;
            Tk             = Te + Tg;
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TE, TD);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TE, TD);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TC, Tz);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TC, Tz);
            ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, Tq, Tn);
            ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, Tq, Tn);
            io[WS(os, 1)]  = SIMD_FMADD(KP923879532, Ts, Tr);
            io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, Ts, Tr);
            ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, Tw, Tt);
            ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, Tw, Tt);
            io[WS(os, 15)] = SIMD_FMADD(KP923879532, Ty, Tx);
            io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, Ty, Tx);
            io[WS(os, 5)]  = SIMD_FMADD(KP923879532, TQ, TP);
            io[WS(os, 13)] = SIMD_FNMADD(KP923879532, TQ, TP);
            ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, TO, TL);
            ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TO, TL);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, TK, TJ);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, TK, TJ);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, TI, TF);
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, TI, TF);
            io[WS(os, 3)]  = SIMD_FMADD(KP923879532, Tk, Tj);
            io[WS(os, 11)] = SIMD_FNMADD(KP923879532, Tk, Tj);
            ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, Th, Tc);
            ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, Th, Tc);
        }
    }
}

template <>
struct c2cf_traits<16, 5>
{
    static constexpr long_t flops           = 126;
    static constexpr long_t operations      = 86;
    static constexpr long_t memory_accesses = 42;
    static constexpr long_t stack_vars      = 67;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 5 -name c2cf
 * -standalone */

/*
 * This function contains 86 FP additions, 40 FP multiplications,
 * (or, 46 additions, 0 multiplications, 40 fused multiply/add),
 * 67 stack variables, 3 constants, and 42 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 5>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T4, Td, T1, Ta, T2, Tb, T6, Ti, T7, Tk, Tg, To, Ty, Tn, T3;
        SIMD_FLOAT TH, Tf, Tt, TM, Tc, Tj, TW, TC, TQ, Tv, TJ, T8, T9, Tl, TR;
        SIMD_FLOAT TX, TD, Tw, TK;
        T4 = ri[WS(is, 2)];
        Td = ii[WS(is, 2)];
        T1 = ri[0];
        Ta = ii[0];
        T2 = ri[WS(is, 4)];
        Tb = ii[WS(is, 4)];
        T6 = ri[WS(is, 1)];
        Ti = ii[WS(is, 1)];
        T7 = ri[WS(is, 3)];
        Tk = ii[WS(is, 3)];
        Tg = Td - T4;
        To = T4 + Td;
        Ty = Ta - T2;
        Tn = T2 + Ta;
        T3 = T1 + T2;
        TH = T1 - T2;
        Tf = T1 - Tb;
        Tt = T1 + Tb;
        TM = Ta - Tb;
        Tc = Ta + Tb;
        Tj = SIMD_FMSUB(KP414213562, Ti, T6);
        TW = SIMD_FMADD(KP414213562, Ti, T6);
        TC = SIMD_FMADD(KP414213562, T6, Ti);
        TQ = Ti - T6;
        Tv = SIMD_FNMADD(KP414213562, T6, Ti);
        TJ = T6 + Ti;
        T8 = T6 + T7;
        T9 = T7 - T6;
        Tl = SIMD_FMSUB(KP414213562, T7, Tk);
        TR = T7 + Tk;
        TX = SIMD_FMADD(KP414213562, T7, Tk);
        TD = SIMD_FMADD(KP414213562, Tk, T7);
        Tw = SIMD_FMSUB(KP414213562, Tk, T7);
        TK = Tk - T7;
        {
            SIMD_FLOAT Ts, T12, TF, Tp, TZ, Tz, TI, TT, T5, Tr, Tu, TV, Th, TB,
                T11;
            SIMD_FLOAT Te, TP, TN, TL, TO, Tx, TA, TG, TE, T10, TY, TS, TU, Tm,
                Tq;
            Ts             = Ti - Tk;
            T12            = Ti + Tk;
            TF             = SIMD_FMADD(KP707106781, To, Tn);
            Tp             = SIMD_FNMADD(KP707106781, To, Tn);
            TZ             = SIMD_FNMADD(KP707106781, Tg, Ty);
            Tz             = SIMD_FMADD(KP707106781, Tg, Ty);
            TI             = TH + Td;
            TT             = TH - Td;
            T5             = T3 + T4;
            Tr             = T3 - T4;
            Tu             = SIMD_FNMADD(KP707106781, To, Tt);
            TV             = SIMD_FMADD(KP707106781, To, Tt);
            Th             = SIMD_FNMADD(KP707106781, Tg, Tf);
            TB             = SIMD_FMADD(KP707106781, Tg, Tf);
            T11            = Tc + Td;
            Te             = Tc - Td;
            TP             = TM - T4;
            TN             = T4 + TM;
            TL             = TJ + TK;
            TO             = TK - TJ;
            Tx             = Tv - Tw;
            TA             = Tv + Tw;
            TG             = TC + TD;
            TE             = TC - TD;
            T10            = TX - TW;
            TY             = TW + TX;
            TS             = TQ - TR;
            TU             = TQ + TR;
            Tm             = Tj - Tl;
            Tq             = Tj + Tl;
            ro[WS(os, 4)]  = Tr + Ts;
            ro[WS(os, 12)] = Tr - Ts;
            ro[0]          = T5 + T8;
            ro[WS(os, 8)]  = T5 - T8;
            io[WS(os, 12)] = Te - T9;
            io[WS(os, 4)]  = T9 + Te;
            io[0]          = T11 + T12;
            io[WS(os, 8)]  = T11 - T12;
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TO, TN);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TO, TN);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TL, TI);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TL, TI);
            io[WS(os, 1)]  = SIMD_FMADD(KP923879532, TA, Tz);
            io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TA, Tz);
            ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, Tx, Tu);
            ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, Tx, Tu);
            ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, TE, TB);
            ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, TE, TB);
            io[WS(os, 15)] = SIMD_FMADD(KP923879532, TG, TF);
            io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, TG, TF);
            ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, TY, TV);
            ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TY, TV);
            io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T10, TZ);
            io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T10, TZ);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, TU, TT);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, TU, TT);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, TS, TP);
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, TS, TP);
            io[WS(os, 3)]  = SIMD_FMADD(KP923879532, Tq, Tp);
            io[WS(os, 11)] = SIMD_FNMADD(KP923879532, Tq, Tp);
            ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, Tm, Th);
            ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, Tm, Th);
        }
    }
}

template <>
struct c2cf_traits<16, 6>
{
    static constexpr long_t flops           = 134;
    static constexpr long_t operations      = 94;
    static constexpr long_t memory_accesses = 44;
    static constexpr long_t stack_vars      = 77;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 6 -name c2cf
 * -standalone */

/*
 * This function contains 94 FP additions, 40 FP multiplications,
 * (or, 54 additions, 0 multiplications, 40 fused multiply/add),
 * 77 stack variables, 3 constants, and 44 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 6>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T4, Tf, T9, Tk, T1, Tc, T2, Td, T6, To, T7, Tm;
        T4 = ri[WS(is, 2)];
        Tf = ii[WS(is, 2)];
        T9 = ri[WS(is, 3)];
        Tk = ii[WS(is, 3)];
        T1 = ri[0];
        Tc = ii[0];
        T2 = ri[WS(is, 4)];
        Td = ii[WS(is, 4)];
        T6 = ri[WS(is, 1)];
        To = ii[WS(is, 1)];
        T7 = ri[WS(is, 5)];
        Tm = ii[WS(is, 5)];
        {
            SIMD_FLOAT Tl, TE, T17, T11, TU, TL, T19, TH, Tj, TN, TQ, T13, T5,
                Tw, TJ;
            SIMD_FLOAT Tu, TA, T15, T1b, Tg, TZ, TX, Ta, Tb, T1c, Ty, T16, TD,
                T10, TT;
            SIMD_FLOAT Tq, TK, Ti, Tt, Th, TG, T3, TP, Tz, Ts, TW, Te, TR, T8,
                TB;
            SIMD_FLOAT Tp, TS, Tx, TC, Tn, TF, TI, T1a, T18, TV, TY, T12, T14,
                TM, TO;
            SIMD_FLOAT Tr, Tv;
            Ti             = T4 + Tf;
            Tt             = Tf - T4;
            Tl             = SIMD_FMSUB(KP414213562, T9, Tk);
            TE             = SIMD_FMSUB(KP414213562, Tk, T9);
            T17            = SIMD_FMADD(KP414213562, T9, Tk);
            T11            = T9 + Tk;
            TU             = Tk - T9;
            TL             = SIMD_FMADD(KP414213562, Tk, T9);
            Th             = T2 + Tc;
            TG             = Tc - T2;
            T3             = T1 + T2;
            TP             = T1 - T2;
            Tz             = T1 + Td;
            Ts             = T1 - Td;
            TW             = Tc - Td;
            Te             = Tc + Td;
            TR             = T6 - T7;
            T8             = T6 + T7;
            TB             = To - T7;
            Tp             = T7 + To;
            TS             = To - Tm;
            Tx             = To + Tm;
            TC             = T6 + Tm;
            Tn             = T6 - Tm;
            T19            = SIMD_FNMADD(KP707106781, Tt, TG);
            TH             = SIMD_FMADD(KP707106781, Tt, TG);
            Tj             = SIMD_FNMADD(KP707106781, Ti, Th);
            TN             = SIMD_FMADD(KP707106781, Ti, Th);
            TQ             = TP + Tf;
            T13            = TP - Tf;
            T5             = T3 + T4;
            Tw             = T3 - T4;
            TJ             = SIMD_FMADD(KP707106781, Tt, Ts);
            Tu             = SIMD_FNMADD(KP707106781, Tt, Ts);
            TA             = SIMD_FNMADD(KP707106781, Ti, Tz);
            T15            = SIMD_FMADD(KP707106781, Ti, Tz);
            T1b            = Te + Tf;
            Tg             = Te - Tf;
            TZ             = TW - T4;
            TX             = T4 + TW;
            Ta             = T8 + T9;
            Tb             = T9 - T8;
            T1c            = Tx + Tk;
            Ty             = Tx - Tk;
            T16            = SIMD_FMADD(KP414213562, TB, TC);
            TD             = SIMD_FNMADD(KP414213562, TC, TB);
            T10            = TS - TR;
            TT             = TR + TS;
            Tq             = SIMD_FNMADD(KP414213562, Tp, Tn);
            TK             = SIMD_FMADD(KP414213562, Tn, Tp);
            io[WS(os, 12)] = Tg - Tb;
            io[WS(os, 4)]  = Tb + Tg;
            ro[0]          = T5 + Ta;
            ro[WS(os, 8)]  = T5 - Ta;
            ro[WS(os, 4)]  = Tw + Ty;
            ro[WS(os, 12)] = Tw - Ty;
            io[0]          = T1b + T1c;
            io[WS(os, 8)]  = T1b - T1c;
            TF             = TD - TE;
            TI             = TD + TE;
            T1a            = T17 - T16;
            T18            = T16 + T17;
            TV             = TT + TU;
            TY             = TU - TT;
            T12            = T10 - T11;
            T14            = T10 + T11;
            TM             = TK - TL;
            TO             = TK + TL;
            Tr             = Tl - Tq;
            Tv             = Tq + Tl;
            io[WS(os, 1)]  = SIMD_FMADD(KP923879532, TI, TH);
            io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TI, TH);
            ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, TF, TA);
            ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, TF, TA);
            ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T18, T15);
            ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T18, T15);
            io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1a, T19);
            io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1a, T19);
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TY, TX);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TY, TX);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TV, TQ);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TV, TQ);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T14, T13);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T14, T13);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T12, TZ);
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T12, TZ);
            io[WS(os, 15)] = SIMD_FMADD(KP923879532, TO, TN);
            io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, TO, TN);
            ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, TM, TJ);
            ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, TM, TJ);
            ro[WS(os, 15)] = SIMD_FMADD(KP923879532, Tv, Tu);
            ro[WS(os, 7)]  = SIMD_FNMADD(KP923879532, Tv, Tu);
            io[WS(os, 3)]  = SIMD_FMADD(KP923879532, Tr, Tj);
            io[WS(os, 11)] = SIMD_FNMADD(KP923879532, Tr, Tj);
        }
    }
}

template <>
struct c2cf_traits<16, 7>
{
    static constexpr long_t flops           = 144;
    static constexpr long_t operations      = 104;
    static constexpr long_t memory_accesses = 46;
    static constexpr long_t stack_vars      = 89;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 7 -name c2cf
 * -standalone */

/*
 * This function contains 104 FP additions, 40 FP multiplications,
 * (or, 64 additions, 0 multiplications, 40 fused multiply/add),
 * 89 stack variables, 3 constants, and 46 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 7>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT Tb, Tq, T8, Tu, TV, T15, T1d, T1j, TN, Tr, TP, Tl, TZ, T3,
            Ty;
        SIMD_FLOAT TH, Tg, T17, Tz, Tn, T18, T6, Tj, T10, TA, Tm, Ts, TK, Tv,
            T12;
        SIMD_FLOAT Ta, T1, Te, T2, Tf, T4, Th, T5, Ti, T9;
        Tb  = ri[WS(is, 3)];
        Tq  = ii[WS(is, 3)];
        T1  = ri[0];
        Te  = ii[0];
        T2  = ri[WS(is, 4)];
        Tf  = ii[WS(is, 4)];
        T4  = ri[WS(is, 2)];
        Th  = ii[WS(is, 2)];
        T5  = ri[WS(is, 6)];
        Ti  = ii[WS(is, 6)];
        T8  = ri[WS(is, 1)];
        Tu  = ii[WS(is, 1)];
        T9  = ri[WS(is, 5)];
        TV  = SIMD_FMADD(KP414213562, Tq, Tb);
        T15 = Tq - Tb;
        T1d = Tb + Tq;
        T1j = SIMD_FMADD(KP414213562, Tb, Tq);
        TN  = SIMD_FMSUB(KP414213562, Tq, Tb);
        Tr  = SIMD_FMSUB(KP414213562, Tb, Tq);
        TP  = Te - T2;
        Tl  = T2 + Te;
        TZ  = T1 - T2;
        T3  = T1 + T2;
        Ty  = T1 - Tf;
        TH  = T1 + Tf;
        Tg  = Te + Tf;
        T17 = Te - Tf;
        Tz  = Th - T4;
        Tn  = T4 + Th;
        T18 = T5 - T4;
        T6  = T4 + T5;
        Tj  = Th + Ti;
        T10 = Th - Ti;
        TA  = T5 + Ti;
        Tm  = Ti - T5;
        Ts  = ii[WS(is, 5)];
        TK  = Tu - T9;
        Tv  = T9 + Tu;
        T12 = T8 - T9;
        Ta  = T8 + T9;
        {
            SIMD_FLOAT T1b, T19, T7, TE, T1n, Tk, T11, T1f, TQ, TB, To, TI, T13,
                TF, TL;
            SIMD_FLOAT Tt, Tc, Td, TT, TC, T1l, TR, TJ, T1h, Tp, TX, T1o, TG,
                T1i, TM;
            SIMD_FLOAT T1c, T14, Tw, TU, TO, TS, T1m, T1k, T16, T1a, T1e, T1g,
                TW, TY, Tx;
            SIMD_FLOAT TD;
            T1b            = T18 + T17;
            T19            = T17 - T18;
            T7             = T3 + T6;
            TE             = T3 - T6;
            T1n            = Tg + Tj;
            Tk             = Tg - Tj;
            T11            = TZ + T10;
            T1f            = TZ - T10;
            TQ             = Tz - TA;
            TB             = Tz + TA;
            To             = Tm - Tn;
            TI             = Tn + Tm;
            T13            = Tu - Ts;
            TF             = Tu + Ts;
            TL             = T8 + Ts;
            Tt             = T8 - Ts;
            Tc             = Ta + Tb;
            Td             = Tb - Ta;
            TT             = SIMD_FMADD(KP707106781, TB, Ty);
            TC             = SIMD_FNMADD(KP707106781, TB, Ty);
            T1l            = SIMD_FNMADD(KP707106781, TQ, TP);
            TR             = SIMD_FMADD(KP707106781, TQ, TP);
            TJ             = SIMD_FNMADD(KP707106781, TI, TH);
            T1h            = SIMD_FMADD(KP707106781, TI, TH);
            Tp             = SIMD_FMADD(KP707106781, To, Tl);
            TX             = SIMD_FNMADD(KP707106781, To, Tl);
            T1o            = TF + Tq;
            TG             = TF - Tq;
            T1i            = SIMD_FMADD(KP414213562, TK, TL);
            TM             = SIMD_FNMADD(KP414213562, TL, TK);
            T1c            = T13 - T12;
            T14            = T12 + T13;
            Tw             = SIMD_FNMADD(KP414213562, Tv, Tt);
            TU             = SIMD_FMADD(KP414213562, Tt, Tv);
            io[WS(os, 12)] = Tk - Td;
            io[WS(os, 4)]  = Td + Tk;
            ro[0]          = T7 + Tc;
            ro[WS(os, 8)]  = T7 - Tc;
            ro[WS(os, 4)]  = TE + TG;
            ro[WS(os, 12)] = TE - TG;
            io[0]          = T1n + T1o;
            io[WS(os, 8)]  = T1n - T1o;
            TO             = TM - TN;
            TS             = TM + TN;
            T1m            = T1j - T1i;
            T1k            = T1i + T1j;
            T16            = T14 + T15;
            T1a            = T15 - T14;
            T1e            = T1c - T1d;
            T1g            = T1c + T1d;
            TW             = TU - TV;
            TY             = TU + TV;
            Tx             = Tr - Tw;
            TD             = Tw + Tr;
            io[WS(os, 1)]  = SIMD_FMADD(KP923879532, TS, TR);
            io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TS, TR);
            ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, TO, TJ);
            ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, TO, TJ);
            ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1k, T1h);
            ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1k, T1h);
            io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1m, T1l);
            io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1m, T1l);
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1a, T19);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1a, T19);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T16, T11);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T16, T11);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1g, T1f);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1g, T1f);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1e, T1b);
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1e, T1b);
            io[WS(os, 15)] = SIMD_FMADD(KP923879532, TY, TX);
            io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, TY, TX);
            ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, TW, TT);
            ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, TW, TT);
            ro[WS(os, 15)] = SIMD_FMADD(KP923879532, TD, TC);
            ro[WS(os, 7)]  = SIMD_FNMADD(KP923879532, TD, TC);
            io[WS(os, 3)]  = SIMD_FMADD(KP923879532, Tx, Tp);
            io[WS(os, 11)] = SIMD_FNMADD(KP923879532, Tx, Tp);
        }
    }
}

template <>
struct c2cf_traits<16, 8>
{
    static constexpr long_t flops           = 152;
    static constexpr long_t operations      = 112;
    static constexpr long_t memory_accesses = 48;
    static constexpr long_t stack_vars      = 99;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 8 -name c2cf
 * -standalone */

/*
 * This function contains 112 FP additions, 40 FP multiplications,
 * (or, 72 additions, 0 multiplications, 40 fused multiply/add),
 * 99 stack variables, 3 constants, and 48 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 8>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1r, T1b, T1i, T1m, T1l, T1n, T1q, T1s;
        {
            SIMD_FLOAT Tb, Tw, T1j, TL, Tn, T3, Ti, TB, TX, T19, T6, TC, Tl, To,
                Tq;
            SIMD_FLOAT Ta, TQ, T1c, Tt, T1u, TR, T1d, Tc, Tx, T1k, T10, T1a, TO,
                T1, Tg;
            SIMD_FLOAT T2, Th, T4, Tj, T5, Tk, T8, Tr, T9, Ts, TM, TY, TN, TZ;
            T1  = ri[0];
            Tg  = ii[0];
            T2  = ri[WS(is, 4)];
            Th  = ii[WS(is, 4)];
            T4  = ri[WS(is, 2)];
            Tj  = ii[WS(is, 2)];
            T5  = ri[WS(is, 6)];
            Tk  = ii[WS(is, 6)];
            T8  = ri[WS(is, 1)];
            Tr  = ii[WS(is, 1)];
            T9  = ri[WS(is, 5)];
            Ts  = ii[WS(is, 5)];
            Tb  = ri[WS(is, 7)];
            Tw  = ii[WS(is, 7)];
            T1j = T2 + Tg;
            TL  = Tg - T2;
            Tn  = T1 - T2;
            T3  = T1 + T2;
            Ti  = Tg + Th;
            TB  = Tg - Th;
            TX  = T1 + Th;
            T19 = T1 - Th;
            TM  = Tj - T4;
            TY  = T4 + Tj;
            T6  = T4 + T5;
            TC  = T5 - T4;
            Tl  = Tj + Tk;
            To  = Tj - Tk;
            TN  = T5 + Tk;
            TZ  = Tk - T5;
            Tq  = T8 - T9;
            Ta  = T8 + T9;
            TQ  = Tr - T9;
            T1c = T9 + Tr;
            Tt  = Tr - Ts;
            T1u = Tr + Ts;
            TR  = T8 + Ts;
            T1d = T8 - Ts;
            Tc  = ri[WS(is, 3)];
            Tx  = ii[WS(is, 3)];
            T1k = TZ - TY;
            T10 = TY + TZ;
            T1a = TM + TN;
            TO  = TM - TN;
            {
                SIMD_FLOAT T1t, T7, T1x, Tm, TS, T14, T1e, T1o, TG, Tu, Tv, T1f,
                    TT, T1v, Ty;
                SIMD_FLOAT T1g, TU, TF, Tp, TJ, TD, Tf, Te, Td, T17, TP, T1h,
                    T1p, TW, T12;
                SIMD_FLOAT T11, T13, TI, TK, TE, TA, T16, T18, T15, TH, Tz, T1w,
                    T1y, TV;
                T1t            = T3 - T6;
                T7             = T3 + T6;
                T1x            = Ti + Tl;
                Tm             = Ti - Tl;
                TS             = SIMD_FNMADD(KP414213562, TR, TQ);
                T14            = SIMD_FMADD(KP414213562, TQ, TR);
                T1e            = SIMD_FMADD(KP414213562, T1d, T1c);
                T1o            = SIMD_FNMADD(KP414213562, T1c, T1d);
                TG             = Tt - Tq;
                Tu             = Tq + Tt;
                Td             = Tb + Tc;
                Tv             = Tb - Tc;
                T1f            = Tc - Tw;
                TT             = Tc + Tw;
                T1v            = Tw + Tx;
                Ty             = Tw - Tx;
                T1g            = Tb + Tx;
                TU             = Tx - Tb;
                TF             = Tn - To;
                Tp             = Tn + To;
                TJ             = TC + TB;
                TD             = TB - TC;
                Tf             = Td - Ta;
                Te             = Ta + Td;
                T17            = SIMD_FNMADD(KP707106781, TO, TL);
                TP             = SIMD_FMADD(KP707106781, TO, TL);
                T1w            = T1u - T1v;
                T1y            = T1u + T1v;
                TV             = SIMD_FNMADD(KP414213562, TU, TT);
                T15            = SIMD_FMADD(KP414213562, TT, TU);
                T1h            = SIMD_FMADD(KP414213562, T1g, T1f);
                T1p            = SIMD_FNMADD(KP414213562, T1f, T1g);
                TH             = Tv + Ty;
                Tz             = Tv - Ty;
                io[WS(os, 12)] = Tm - Tf;
                io[WS(os, 4)]  = Tf + Tm;
                ro[0]          = T7 + Te;
                ro[WS(os, 8)]  = T7 - Te;
                ro[WS(os, 4)]  = T1t + T1w;
                ro[WS(os, 12)] = T1t - T1w;
                io[0]          = T1x + T1y;
                io[WS(os, 8)]  = T1x - T1y;
                TW             = TS - TV;
                T12            = TS + TV;
                T11            = SIMD_FNMADD(KP707106781, T10, TX);
                T13            = SIMD_FMADD(KP707106781, T10, TX);
                TI             = TG - TH;
                TK             = TG + TH;
                TE             = Tz - Tu;
                TA             = Tu + Tz;
                T16            = T14 + T15;
                T18            = T15 - T14;
                T1r            = SIMD_FNMADD(KP707106781, T1a, T19);
                T1b            = SIMD_FMADD(KP707106781, T1a, T19);
                io[WS(os, 1)]  = SIMD_FMADD(KP923879532, TW, TP);
                io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TW, TP);
                ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, TI, TF);
                ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, TI, TF);
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, TK, TJ);
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, TK, TJ);
                io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TE, TD);
                io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TE, TD);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TA, Tp);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TA, Tp);
                ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T16, T13);
                ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T16, T13);
                ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T12, T11);
                ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T12, T11);
                io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T18, T17);
                io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T18, T17);
                T1i            = T1e - T1h;
                T1m            = T1e + T1h;
                T1l            = SIMD_FNMADD(KP707106781, T1k, T1j);
                T1n            = SIMD_FMADD(KP707106781, T1k, T1j);
                T1q            = T1o + T1p;
                T1s            = T1p - T1o;
            }
        }
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1i, T1b);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1i, T1b);
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1q, T1n);
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1q, T1n);
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1m, T1l);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1m, T1l);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1s, T1r);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1s, T1r);
    }
}

template <>
struct c2cf_traits<16, 9>
{
    static constexpr long_t flops           = 156;
    static constexpr long_t operations      = 116;
    static constexpr long_t memory_accesses = 50;
    static constexpr long_t stack_vars      = 105;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 9 -name c2cf
 * -standalone */

/*
 * This function contains 116 FP additions, 40 FP multiplications,
 * (or, 76 additions, 0 multiplications, 40 fused multiply/add),
 * 105 stack variables, 3 constants, and 50 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 9>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T4, TG, T8, Ts, Tp, T16, T1q, TT, T1g, Tl, Th, Tg, T1E, T1C,
            T18;
        SIMD_FLOAT T11, TM, TO, TI, TE, T12, T3, TP, Tk, T1c, T1e, T1s, T1o,
            T1w, T1y;
        SIMD_FLOAT T1f, T13, T5, Tr, T1p, TQ, Tm, TF, T19, T17, T1h, T1x, Tt,
            TJ, T9;
        SIMD_FLOAT T1z, TU, T1d, T1t, T1r, TN, TH, T1D, Tq;
        {
            SIMD_FLOAT Tf, T1B, Tc, T1A, T10, T1b, T1n, T1v, TL, TD, TX, T1a,
                T1k, T1u, TK;
            SIMD_FLOAT Ty, T1, T2, Ti, Tj, T6, Tn, T7, To, Td, TA, Te, TB, Ta,
                Tv;
            SIMD_FLOAT Tb, Tw, T14, TR, T15, TS, Tz, T1l, TY, TC, T1m, TZ, Tu,
                T1i, TV;
            SIMD_FLOAT Tx, T1j, TW;
            T6  = ri[WS(is, 2)];
            Tn  = ii[WS(is, 2)];
            T7  = ri[WS(is, 6)];
            To  = ii[WS(is, 6)];
            Td  = ri[WS(is, 7)];
            TA  = ii[WS(is, 7)];
            Te  = ri[WS(is, 3)];
            TB  = ii[WS(is, 3)];
            Ta  = ri[WS(is, 1)];
            Tv  = ii[WS(is, 1)];
            Tb  = ri[WS(is, 5)];
            Tw  = ii[WS(is, 5)];
            T4  = ri[WS(is, 4)];
            T14 = T6 + Tn;
            TR  = Tn - T6;
            TG  = T7 - T6;
            T8  = T6 + T7;
            Ts  = Tn - To;
            Tp  = Tn + To;
            T15 = To - T7;
            TS  = T7 + To;
            Tf  = Td + Te;
            Tz  = Td - Te;
            T1l = Te - TA;
            TY  = Te + TA;
            T1B = TA + TB;
            TC  = TA - TB;
            T1m = Td + TB;
            TZ  = TB - Td;
            Tc  = Ta + Tb;
            Tu  = Ta - Tb;
            T1i = Tb + Tv;
            TV  = Tv - Tb;
            T1A = Tv + Tw;
            Tx  = Tv - Tw;
            T1j = Ta - Tw;
            TW  = Ta + Tw;
            T16 = T14 + T15;
            T1q = T15 - T14;
            TT  = TR - TS;
            T1g = TR + TS;
            T10 = SIMD_FNMADD(KP414213562, TZ, TY);
            T1b = SIMD_FMADD(KP414213562, TY, TZ);
            T1n = SIMD_FMADD(KP414213562, T1m, T1l);
            T1v = SIMD_FNMADD(KP414213562, T1l, T1m);
            TL  = Tz + TC;
            TD  = Tz - TC;
            TX  = SIMD_FNMADD(KP414213562, TW, TV);
            T1a = SIMD_FMADD(KP414213562, TV, TW);
            T1k = SIMD_FMADD(KP414213562, T1j, T1i);
            T1u = SIMD_FNMADD(KP414213562, T1i, T1j);
            TK  = Tx - Tu;
            Ty  = Tu + Tx;
            Tl  = ii[WS(is, 4)];
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            Ti  = ii[0];
            Tj  = ii[WS(is, 8)];
            Th  = Tf - Tc;
            Tg  = Tc + Tf;
            T1E = T1A + T1B;
            T1C = T1A - T1B;
            T18 = TX + T10;
            T11 = TX - T10;
            TM  = TK - TL;
            TO  = TK + TL;
            TI  = TD - Ty;
            TE  = Ty + TD;
            T12 = T1 - T2;
            T3  = T1 + T2;
            TP  = Ti - Tj;
            Tk  = Ti + Tj;
            T1c = T1a + T1b;
            T1e = T1b - T1a;
            T1s = T1k + T1n;
            T1o = T1k - T1n;
            T1w = T1u + T1v;
            T1y = T1v - T1u;
        }
        T1f            = T12 - Tl;
        T13            = T12 + Tl;
        T5             = T3 + T4;
        Tr             = T3 - T4;
        T1p            = T4 + TP;
        TQ             = TP - T4;
        Tm             = Tk + Tl;
        TF             = Tk - Tl;
        T19            = SIMD_FMADD(KP707106781, T16, T13);
        T17            = SIMD_FNMADD(KP707106781, T16, T13);
        T1h            = SIMD_FMADD(KP707106781, T1g, T1f);
        T1x            = SIMD_FNMADD(KP707106781, T1g, T1f);
        Tt             = Tr + Ts;
        TJ             = Tr - Ts;
        T9             = T5 + T8;
        T1z            = T5 - T8;
        TU             = SIMD_FMADD(KP707106781, TT, TQ);
        T1d            = SIMD_FNMADD(KP707106781, TT, TQ);
        T1t            = SIMD_FMADD(KP707106781, T1q, T1p);
        T1r            = SIMD_FNMADD(KP707106781, T1q, T1p);
        TN             = TG + TF;
        TH             = TF - TG;
        T1D            = Tm + Tp;
        Tq             = Tm - Tp;
        ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T18, T17);
        ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T18, T17);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1c, T19);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1c, T19);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1y, T1x);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1y, T1x);
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1o, T1h);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1o, T1h);
        ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, TM, TJ);
        ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, TM, TJ);
        ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TE, Tt);
        ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TE, Tt);
        ro[WS(os, 4)]  = T1z + T1C;
        ro[WS(os, 12)] = T1z - T1C;
        ro[0]          = T9 + Tg;
        ro[WS(os, 8)]  = T9 - Tg;
        io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1e, T1d);
        io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1e, T1d);
        io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T11, TU);
        io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T11, TU);
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1s, T1r);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1s, T1r);
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1w, T1t);
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1w, T1t);
        io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TI, TH);
        io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TI, TH);
        io[WS(os, 2)]  = SIMD_FMADD(KP707106781, TO, TN);
        io[WS(os, 10)] = SIMD_FNMADD(KP707106781, TO, TN);
        io[WS(os, 12)] = Tq - Th;
        io[WS(os, 4)]  = Th + Tq;
        io[0]          = T1D + T1E;
        io[WS(os, 8)]  = T1D - T1E;
    }
}

template <>
struct c2cf_traits<16, 10>
{
    static constexpr long_t flops           = 160;
    static constexpr long_t operations      = 120;
    static constexpr long_t memory_accesses = 52;
    static constexpr long_t stack_vars      = 111;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 10 -name c2cf
 * -standalone */

/*
 * This function contains 120 FP additions, 40 FP multiplications,
 * (or, 80 additions, 0 multiplications, 40 fused multiply/add),
 * 111 stack variables, 3 constants, and 52 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 10>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T4, Tn, TK, T8, Tu, Tr, Th, T1H, T1c, T1w, TX, T1m, Td, TA,
            T1h;
        SIMD_FLOAT T16, T1B, T1t, TH, TP, T1l, T19, T5, Tt, Tm, TT, Ta, Tb, Tx,
            Ty;
        SIMD_FLOAT T6, Tp, T7, Tq, Tf, TE, Tg, TF, Tk, TD, T1r, T14, TG, T1s,
            T15;
        SIMD_FLOAT T18, T3, Tl, T1, T2, T1a, TV, T1b, TW, T1d, T1f, T1D, T1n,
            Tv, TN;
        SIMD_FLOAT T9, T1F, T1v, TU, To, TJ, Tc, T11, Tz, TZ;
        T6  = ri[WS(is, 2)];
        Tp  = ii[WS(is, 2)];
        T7  = ri[WS(is, 6)];
        Tq  = ii[WS(is, 6)];
        Tf  = ri[WS(is, 7)];
        TE  = ii[WS(is, 7)];
        Tg  = ri[WS(is, 3)];
        TF  = ii[WS(is, 3)];
        T4  = ri[WS(is, 4)];
        Tn  = ii[WS(is, 4)];
        T1  = ri[0];
        T2  = ri[WS(is, 8)];
        Tk  = ii[0];
        T1a = T6 + Tp;
        TV  = Tp - T6;
        TK  = T7 - T6;
        T8  = T6 + T7;
        Tu  = Tp - Tq;
        Tr  = Tp + Tq;
        T1b = Tq - T7;
        TW  = T7 + Tq;
        Th  = Tf + Tg;
        TD  = Tf - Tg;
        T1r = Tg - TE;
        T14 = Tg + TE;
        T1H = TE + TF;
        TG  = TE - TF;
        T1s = Tf + TF;
        T15 = TF - Tf;
        T18 = T1 - T2;
        T3  = T1 + T2;
        T1c = T1a + T1b;
        T1w = T1b - T1a;
        TX  = TV - TW;
        T1m = TV + TW;
        Tl  = ii[WS(is, 8)];
        Td  = ri[WS(is, 5)];
        TA  = ii[WS(is, 5)];
        T1h = SIMD_FMADD(KP414213562, T14, T15);
        T16 = SIMD_FNMADD(KP414213562, T15, T14);
        T1B = SIMD_FNMADD(KP414213562, T1r, T1s);
        T1t = SIMD_FMADD(KP414213562, T1s, T1r);
        TH  = TD - TG;
        TP  = TD + TG;
        T1l = T18 - Tn;
        T19 = T18 + Tn;
        T5  = T3 + T4;
        Tt  = T3 - T4;
        Tm  = Tk + Tl;
        TT  = Tk - Tl;
        Ta  = ri[WS(is, 1)];
        Tb  = ri[WS(is, 9)];
        Tx  = ii[WS(is, 1)];
        Ty  = ii[WS(is, 9)];
        T1d = SIMD_FNMADD(KP707106781, T1c, T19);
        T1f = SIMD_FMADD(KP707106781, T1c, T19);
        T1D = SIMD_FNMADD(KP707106781, T1m, T1l);
        T1n = SIMD_FMADD(KP707106781, T1m, T1l);
        Tv  = Tt + Tu;
        TN  = Tt - Tu;
        T9  = T5 + T8;
        T1F = T5 - T8;
        T1v = T4 + TT;
        TU  = TT - T4;
        To  = Tm + Tn;
        TJ  = Tm - Tn;
        Tc  = Ta + Tb;
        T11 = Ta - Tb;
        Tz  = Tx + Ty;
        TZ  = Tx - Ty;
        {
            SIMD_FLOAT TY, T1j, T1z, T1x, TL, TR, T1J, Ts, T1p, T12, Te, Tw,
                T1o, T10, T1G;
            SIMD_FLOAT TB, Ti, Tj, T13, T1g, T1A, T1q, TC, TO, T1K, T1I, T1i,
                T1k, T17, T1e;
            SIMD_FLOAT T1u, T1y, T1C, T1E, TQ, TS, TI, TM;
            TY             = SIMD_FMADD(KP707106781, TX, TU);
            T1j            = SIMD_FNMADD(KP707106781, TX, TU);
            T1z            = SIMD_FMADD(KP707106781, T1w, T1v);
            T1x            = SIMD_FNMADD(KP707106781, T1w, T1v);
            TL             = TJ - TK;
            TR             = TK + TJ;
            T1J            = To + Tr;
            Ts             = To - Tr;
            T1p            = T11 - TA;
            T12            = T11 + TA;
            Te             = Tc + Td;
            Tw             = Tc - Td;
            T1o            = Td + TZ;
            T10            = TZ - Td;
            T1G            = Tz + TA;
            TB             = Tz - TA;
            Ti             = Te + Th;
            Tj             = Th - Te;
            T13            = SIMD_FNMADD(KP414213562, T12, T10);
            T1g            = SIMD_FMADD(KP414213562, T10, T12);
            T1A            = SIMD_FNMADD(KP414213562, T1o, T1p);
            T1q            = SIMD_FMADD(KP414213562, T1p, T1o);
            TC             = Tw + TB;
            TO             = TB - Tw;
            T1K            = T1G + T1H;
            T1I            = T1G - T1H;
            io[WS(os, 12)] = Ts - Tj;
            io[WS(os, 4)]  = Tj + Ts;
            ro[0]          = T9 + Ti;
            ro[WS(os, 8)]  = T9 - Ti;
            T1i            = T1g + T1h;
            T1k            = T1h - T1g;
            T17            = T13 - T16;
            T1e            = T13 + T16;
            T1u            = T1q - T1t;
            T1y            = T1q + T1t;
            T1C            = T1A + T1B;
            T1E            = T1B - T1A;
            TQ             = TO - TP;
            TS             = TO + TP;
            TI             = TC + TH;
            TM             = TH - TC;
            ro[WS(os, 4)]  = T1F + T1I;
            ro[WS(os, 12)] = T1F - T1I;
            io[0]          = T1J + T1K;
            io[WS(os, 8)]  = T1J - T1K;
            io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1k, T1j);
            io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1k, T1j);
            ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1i, T1f);
            ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1i, T1f);
            ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1e, T1d);
            ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1e, T1d);
            io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T17, TY);
            io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T17, TY);
            io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1y, T1x);
            io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1y, T1x);
            ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1u, T1n);
            ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1u, T1n);
            ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1E, T1D);
            ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1E, T1D);
            io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1C, T1z);
            io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1C, T1z);
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, TS, TR);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, TS, TR);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, TQ, TN);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, TQ, TN);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TM, TL);
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TM, TL);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TI, Tv);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TI, Tv);
        }
    }
}

template <>
struct c2cf_traits<16, 11>
{
    static constexpr long_t flops           = 164;
    static constexpr long_t operations      = 124;
    static constexpr long_t memory_accesses = 54;
    static constexpr long_t stack_vars      = 87;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 11 -name c2cf
 * -standalone */

/*
 * This function contains 124 FP additions, 40 FP multiplications,
 * (or, 84 additions, 0 multiplications, 40 fused multiply/add),
 * 87 stack variables, 3 constants, and 54 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 11>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T9, T1c, T1n, T1z, T1H, TT, Tx, T5, T1f, T1r, Tu, Tl, Tk,
            T1Q, T1O;
        SIMD_FLOAT TS, TY, T1B, TN, Tq, T12, T1h, T10, T8, TZ, Tt, TM, TQ, T19,
            T1m;
        SIMD_FLOAT T1w, T1G, Ta, TO, T1g, T11, Tv, Ty;
        {
            SIMD_FLOAT T4, Tp, Tj, T1N, TL, T18, T1v, TA, Tg, T16, T1u, TF, T1M,
                TX, To;
            SIMD_FLOAT T6, T7, Tr, Ts, Th, TI, Ti, TJ, Tf, TE, Tc, Td, TB, TC,
                TH;
            SIMD_FLOAT T1a, T1x, TK, T1b, T1y, Te, T17, TD, T15, T1e, T3, Tm,
                Tn, T1, T2;
            SIMD_FLOAT TG;
            Th  = ri[WS(is, 7)];
            TI  = ii[WS(is, 7)];
            Ti  = ri[WS(is, 3)];
            TJ  = ii[WS(is, 3)];
            Tf  = ri[WS(is, 5)];
            TE  = ii[WS(is, 5)];
            Tc  = ri[WS(is, 1)];
            Td  = ri[WS(is, 9)];
            TB  = ii[WS(is, 1)];
            TC  = ii[WS(is, 9)];
            T4  = ri[WS(is, 4)];
            Tp  = ii[WS(is, 4)];
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            TH  = Th - Ti;
            Tj  = Th + Ti;
            T1a = Ti + TI;
            T1x = Ti - TI;
            TK  = TI - TJ;
            T1N = TI + TJ;
            T1b = TJ - Th;
            T1y = Th + TJ;
            Te  = Tc + Td;
            T17 = Tc - Td;
            TD  = TB + TC;
            T15 = TB - TC;
            T1e = T1 - T2;
            T3  = T1 + T2;
            Tm  = ii[0];
            Tn  = ii[WS(is, 8)];
            T9  = ri[WS(is, 6)];
            T1c = SIMD_FNMADD(KP414213562, T1b, T1a);
            T1n = SIMD_FMADD(KP414213562, T1a, T1b);
            T1z = SIMD_FMADD(KP414213562, T1y, T1x);
            T1H = SIMD_FNMADD(KP414213562, T1x, T1y);
            TT  = TH + TK;
            TL  = TH - TK;
            T18 = T17 + TE;
            T1v = T17 - TE;
            TA  = Te - Tf;
            Tg  = Te + Tf;
            T16 = T15 - Tf;
            T1u = Tf + T15;
            TF  = TD - TE;
            T1M = TD + TE;
            Tx  = T3 - T4;
            T5  = T3 + T4;
            T1f = T1e + Tp;
            T1r = T1e - Tp;
            TX  = Tm - Tn;
            To  = Tm + Tn;
            Tu  = ii[WS(is, 6)];
            T6  = ri[WS(is, 2)];
            T7  = ri[WS(is, 10)];
            Tr  = ii[WS(is, 2)];
            Ts  = ii[WS(is, 10)];
            Tl  = Tj - Tg;
            Tk  = Tg + Tj;
            T1Q = T1M + T1N;
            T1O = T1M - T1N;
            TS  = TF - TA;
            TG  = TA + TF;
            TY  = TX - T4;
            T1B = T4 + TX;
            TN  = To - Tp;
            Tq  = To + Tp;
            T12 = T9 + Tu;
            T1h = Tu - T9;
            T10 = T6 - T7;
            T8  = T6 + T7;
            TZ  = Tr - Ts;
            Tt  = Tr + Ts;
            TM  = TG + TL;
            TQ  = TL - TG;
            T19 = SIMD_FNMADD(KP414213562, T18, T16);
            T1m = SIMD_FMADD(KP414213562, T16, T18);
            T1w = SIMD_FMADD(KP414213562, T1v, T1u);
            T1G = SIMD_FNMADD(KP414213562, T1u, T1v);
        }
        Ta  = T8 + T9;
        TO  = T9 - T8;
        T1g = T10 + TZ;
        T11 = TZ - T10;
        Tv  = Tt + Tu;
        Ty  = Tt - Tu;
        {
            SIMD_FLOAT TU, TW, T1o, T1q, T1d, T1k, T1I, T1K, T1A, T1E, TP, TV,
                Tb, T1L, T13;
            SIMD_FLOAT T1s, T1i, T1C, Tz, TR, T1P, Tw, T1t, T1J, T14, T1p, T1D,
                T1F, T1j, T1l;
            TU             = TS - TT;
            TW             = TS + TT;
            T1o            = T1m + T1n;
            T1q            = T1n - T1m;
            T1d            = T19 - T1c;
            T1k            = T19 + T1c;
            T1I            = T1G + T1H;
            T1K            = T1H - T1G;
            T1A            = T1w - T1z;
            T1E            = T1w + T1z;
            TP             = TN - TO;
            TV             = TO + TN;
            Tb             = T5 + Ta;
            T1L            = T5 - Ta;
            T13            = T11 - T12;
            T1s            = T11 + T12;
            T1i            = T1g + T1h;
            T1C            = T1h - T1g;
            Tz             = Tx + Ty;
            TR             = Tx - Ty;
            T1P            = Tq + Tv;
            Tw             = Tq - Tv;
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, TW, TV);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, TW, TV);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, TQ, TP);
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, TQ, TP);
            ro[WS(os, 4)]  = T1L + T1O;
            ro[WS(os, 12)] = T1L - T1O;
            ro[0]          = Tb + Tk;
            ro[WS(os, 8)]  = Tb - Tk;
            T1t            = SIMD_FMADD(KP707106781, T1s, T1r);
            T1J            = SIMD_FNMADD(KP707106781, T1s, T1r);
            T14            = SIMD_FMADD(KP707106781, T13, TY);
            T1p            = SIMD_FNMADD(KP707106781, T13, TY);
            T1D            = SIMD_FNMADD(KP707106781, T1C, T1B);
            T1F            = SIMD_FMADD(KP707106781, T1C, T1B);
            T1j            = SIMD_FNMADD(KP707106781, T1i, T1f);
            T1l            = SIMD_FMADD(KP707106781, T1i, T1f);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, TU, TR);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, TU, TR);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, TM, Tz);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, TM, Tz);
            io[WS(os, 12)] = Tw - Tl;
            io[WS(os, 4)]  = Tl + Tw;
            io[0]          = T1P + T1Q;
            io[WS(os, 8)]  = T1P - T1Q;
            ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1K, T1J);
            ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1K, T1J);
            ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1A, T1t);
            ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1A, T1t);
            io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1q, T1p);
            io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1q, T1p);
            io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1d, T14);
            io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1d, T14);
            io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1I, T1F);
            io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1I, T1F);
            io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1E, T1D);
            io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1E, T1D);
            ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1o, T1l);
            ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1o, T1l);
            ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1k, T1j);
            ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1k, T1j);
        }
    }
}

template <>
struct c2cf_traits<16, 12>
{
    static constexpr long_t flops           = 168;
    static constexpr long_t operations      = 128;
    static constexpr long_t memory_accesses = 56;
    static constexpr long_t stack_vars      = 123;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 12 -name c2cf
 * -standalone */

/*
 * This function contains 128 FP additions, 40 FP multiplications,
 * (or, 88 additions, 0 multiplications, 40 fused multiply/add),
 * 123 stack variables, 3 constants, and 56 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 12>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1t, T1p, T1u, T1s;
        {
            SIMD_FLOAT Tw, TE, T11, TZ, T1b, T1v, T5, T1l, TA, Ts, T1H, TC, T1h,
                TR, T1C;
            SIMD_FLOAT Tl, T1T, T1E, T1i, TV, TB, Tv, Ta, T1I, Tf, TM, Tc, Td,
                TH, TI;
            SIMD_FLOAT T4, Tr, T1, T2, To, Tp, Th, TQ, Ti, Tj, TS, TT, T9, T8,
                T6;
            SIMD_FLOAT TY, T3, Tz, Tq, T7, Tt, TP, Tk, T1D, TU, Tu, T1N, T1F,
                T10, TD;
            SIMD_FLOAT Tx, T1w, T1J, T1P, Tb, T1R, TL, Te, T1z, TJ;
            T4  = ri[WS(is, 4)];
            Tr  = ii[WS(is, 4)];
            T1  = ri[0];
            T2  = ri[WS(is, 8)];
            To  = ii[0];
            Tp  = ii[WS(is, 8)];
            Th  = ri[WS(is, 7)];
            TQ  = ii[WS(is, 7)];
            Ti  = ri[WS(is, 3)];
            Tj  = ri[WS(is, 11)];
            TS  = ii[WS(is, 3)];
            TT  = ii[WS(is, 11)];
            T9  = ri[WS(is, 6)];
            Tw  = ii[WS(is, 6)];
            T6  = ri[WS(is, 2)];
            TY  = T1 - T2;
            T3  = T1 + T2;
            Tz  = To - Tp;
            Tq  = To + Tp;
            T7  = ri[WS(is, 10)];
            Tt  = ii[WS(is, 2)];
            TP  = Ti - Tj;
            Tk  = Ti + Tj;
            T1D = TS + TT;
            TU  = TS - TT;
            Tu  = ii[WS(is, 10)];
            TE  = T9 + Tw;
            T11 = Tw - T9;
            TZ  = TY + Tr;
            T1b = TY - Tr;
            T1v = T3 - T4;
            T5  = T3 + T4;
            T1l = T4 + Tz;
            TA  = Tz - T4;
            Ts  = Tq + Tr;
            T1H = Tq - Tr;
            TC  = T6 - T7;
            T8  = T6 + T7;
            T1h = TP - TQ;
            TR  = TP + TQ;
            T1C = Th - Tk;
            Tl  = Th + Tk;
            T1T = TQ + T1D;
            T1E = TQ - T1D;
            T1i = Th + TU;
            TV  = TU - Th;
            TB  = Tt - Tu;
            Tv  = Tt + Tu;
            Ta  = T8 + T9;
            T1I = T9 - T8;
            Tf  = ri[WS(is, 5)];
            TM  = ii[WS(is, 5)];
            Tc  = ri[WS(is, 1)];
            Td  = ri[WS(is, 9)];
            TH  = ii[WS(is, 1)];
            TI  = ii[WS(is, 9)];
            T1N = T1C + T1E;
            T1F = T1C - T1E;
            T10 = TC + TB;
            TD  = TB - TC;
            Tx  = Tv + Tw;
            T1w = Tv - Tw;
            T1J = T1H - T1I;
            T1P = T1I + T1H;
            Tb  = T5 + Ta;
            T1R = T5 - Ta;
            TL  = Tc - Td;
            Te  = Tc + Td;
            T1z = TH + TI;
            TJ  = TH - TI;
            {
                SIMD_FLOAT T1c, Ty, T1V, T1L, T1x, T1m, T17, TW, T1f, TN, T1y,
                    Tg, T1S, T1A, T1e;
                SIMD_FLOAT TK, T19, TG, T15, T13, TF, T12, T1d, T1n, T1o, T1k,
                    Tm, Tn, T1W, T1U;
                SIMD_FLOAT T1B, T1M, TO, T16, T1q, T1r, T1O, T1Q, T1G, T1K, T18,
                    T1a, TX, T14, T1g;
                SIMD_FLOAT T1j;
                T1c            = TD + TE;
                TF             = TD - TE;
                Ty             = Ts - Tx;
                T1V            = Ts + Tx;
                T1L            = T1v - T1w;
                T1x            = T1v + T1w;
                T12            = T10 + T11;
                T1m            = T11 - T10;
                T17            = SIMD_FMADD(KP414213562, TR, TV);
                TW             = SIMD_FNMADD(KP414213562, TV, TR);
                T1f            = TL - TM;
                TN             = TL + TM;
                T1y            = Te - Tf;
                Tg             = Te + Tf;
                T1S            = T1z + TM;
                T1A            = T1z - TM;
                T1e            = Tf + TJ;
                TK             = TJ - Tf;
                T19            = SIMD_FNMADD(KP707106781, TF, TA);
                TG             = SIMD_FMADD(KP707106781, TF, TA);
                T15            = SIMD_FMADD(KP707106781, T12, TZ);
                T13            = SIMD_FNMADD(KP707106781, T12, TZ);
                Tm             = Tg + Tl;
                Tn             = Tl - Tg;
                T1W            = T1S + T1T;
                T1U            = T1S - T1T;
                T1B            = T1y + T1A;
                T1M            = T1A - T1y;
                TO             = SIMD_FNMADD(KP414213562, TN, TK);
                T16            = SIMD_FMADD(KP414213562, TK, TN);
                T1q            = SIMD_FNMADD(KP414213562, T1e, T1f);
                T1g            = SIMD_FMADD(KP414213562, T1f, T1e);
                T1j            = SIMD_FMADD(KP414213562, T1i, T1h);
                T1r            = SIMD_FNMADD(KP414213562, T1h, T1i);
                T1d            = SIMD_FMADD(KP707106781, T1c, T1b);
                T1t            = SIMD_FNMADD(KP707106781, T1c, T1b);
                T1n            = SIMD_FNMADD(KP707106781, T1m, T1l);
                T1p            = SIMD_FMADD(KP707106781, T1m, T1l);
                io[WS(os, 12)] = Ty - Tn;
                io[WS(os, 4)]  = Tn + Ty;
                ro[0]          = Tb + Tm;
                ro[WS(os, 8)]  = Tb - Tm;
                ro[WS(os, 4)]  = T1R + T1U;
                ro[WS(os, 12)] = T1R - T1U;
                io[0]          = T1V + T1W;
                io[WS(os, 8)]  = T1V - T1W;
                T1O            = T1M - T1N;
                T1Q            = T1M + T1N;
                T1G            = T1B + T1F;
                T1K            = T1F - T1B;
                T18            = T16 + T17;
                T1a            = T17 - T16;
                TX             = TO - TW;
                T14            = TO + TW;
                T1o            = T1g + T1j;
                T1k            = T1g - T1j;
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1Q, T1P);
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1Q, T1P);
                ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1O, T1L);
                ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1O, T1L);
                io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1K, T1J);
                io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1K, T1J);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1G, T1x);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1G, T1x);
                io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1a, T19);
                io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1a, T19);
                ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T18, T15);
                ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T18, T15);
                ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T14, T13);
                ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T14, T13);
                io[WS(os, 1)]  = SIMD_FMADD(KP923879532, TX, TG);
                io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, TX, TG);
                T1u            = T1r - T1q;
                T1s            = T1q + T1r;
                ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1k, T1d);
                ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1k, T1d);
                io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1o, T1n);
                io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1o, T1n);
            }
        }
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1s, T1p);
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1s, T1p);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1u, T1t);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1u, T1t);
    }
}

template <>
struct c2cf_traits<16, 13>
{
    static constexpr long_t flops           = 172;
    static constexpr long_t operations      = 132;
    static constexpr long_t memory_accesses = 58;
    static constexpr long_t stack_vars      = 129;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 13 -name c2cf
 * -standalone */

/*
 * This function contains 132 FP additions, 40 FP multiplications,
 * (or, 92 additions, 0 multiplications, 40 fused multiply/add),
 * 129 stack variables, 3 constants, and 58 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 13>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    {
        SIMD_FLOAT T1r, T1h, T1i, T1s, TL, T1f, T1c, TT, T1b, T19, T11, T1d,
            T1w, T1m, T1p;
        SIMD_FLOAT T1x, T12, T1a, T1e, T1g, T1j, T1z, T1t, T1v, T1q, T1u, T1y,
            T1A;
        {
            SIMD_FLOAT TJ, T17, Tc, T1O, TI, T16, T1C, TB, TW, T1n, Tn, T1I,
                T1K, T1Z, T10;
            SIMD_FLOAT T1o, TS, T1l, Ti, T1E, TP, T1k, T1G, T1Y, T3, T13, Ts,
                TD, T6, TE;
            SIMD_FLOAT T14, Tv, Tp, To, T20, T22, T1S, T1H, T1L, T1T, TF, T7,
                T1B, T1N, Tw;
            SIMD_FLOAT T15, T1Q, T1M, T1W, T1U, T18, T1D, T1R, Td, T1X, T21, TC,
                T1P, T1V, TK;
            {
                SIMD_FLOAT Tb, TA, T8, T9, Tx, Ty, Tj, TV, Tk, Tl, TX, TY, Th,
                    TR, Tg;
                SIMD_FLOAT TQ, T1F, TO, TH, Ta, TG, Tz, Te, TU, Tm, T1J, TZ, Tf,
                    TM, TN;
                SIMD_FLOAT T1, T2, Tq, Tr, T4, T5, Tt, Tu;
                Tb  = ri[WS(is, 6)];
                TA  = ii[WS(is, 6)];
                T8  = ri[WS(is, 2)];
                T9  = ri[WS(is, 10)];
                Tx  = ii[WS(is, 2)];
                Ty  = ii[WS(is, 10)];
                Tj  = ri[WS(is, 7)];
                TV  = ii[WS(is, 7)];
                Tk  = ri[WS(is, 3)];
                Tl  = ri[WS(is, 11)];
                TX  = ii[WS(is, 3)];
                TY  = ii[WS(is, 11)];
                Th  = ri[WS(is, 5)];
                TJ  = Tb + TA;
                T17 = TA - Tb;
                TH  = T8 - T9;
                Ta  = T8 + T9;
                TG  = Tx - Ty;
                Tz  = Tx + Ty;
                TR  = ii[WS(is, 5)];
                Te  = ri[WS(is, 1)];
                TU  = Tk - Tl;
                Tm  = Tk + Tl;
                T1J = TX + TY;
                TZ  = TX - TY;
                Tf  = ri[WS(is, 9)];
                TM  = ii[WS(is, 1)];
                TN  = ii[WS(is, 9)];
                Tc  = Ta + Tb;
                T1O = Tb - Ta;
                TI  = TG - TH;
                T16 = TH + TG;
                T1C = Tz - TA;
                TB  = Tz + TA;
                TW  = TU + TV;
                T1n = TU - TV;
                Tn  = Tj + Tm;
                T1I = Tj - Tm;
                T1K = TV - T1J;
                T1Z = TV + T1J;
                T10 = TZ - Tj;
                T1o = Tj + TZ;
                Tg  = Te + Tf;
                TQ  = Te - Tf;
                T1F = TM + TN;
                TO  = TM - TN;
                T1  = ri[0];
                T2  = ri[WS(is, 8)];
                Tq  = ii[0];
                Tr  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                Tt  = ii[WS(is, 4)];
                Tu  = ii[WS(is, 12)];
                TS  = TQ + TR;
                T1l = TQ - TR;
                Ti  = Tg + Th;
                T1E = Tg - Th;
                TP  = TO - Th;
                T1k = Th + TO;
                T1G = T1F - TR;
                T1Y = T1F + TR;
                T3  = T1 + T2;
                T13 = T1 - T2;
                Ts  = Tq + Tr;
                TD  = Tq - Tr;
                T6  = T4 + T5;
                TE  = T4 - T5;
                T14 = Tt - Tu;
                Tv  = Tt + Tu;
            }
            Tp             = Tn - Ti;
            To             = Ti + Tn;
            T20            = T1Y - T1Z;
            T22            = T1Y + T1Z;
            T1S            = T1G - T1E;
            T1H            = T1E + T1G;
            T1L            = T1I - T1K;
            T1T            = T1I + T1K;
            TF             = TD - TE;
            T1r            = TE + TD;
            T7             = T3 + T6;
            T1B            = T3 - T6;
            T1N            = Ts - Tv;
            Tw             = Ts + Tv;
            T1h            = T13 - T14;
            T15            = T13 + T14;
            T1i            = TI + TJ;
            TK             = TI - TJ;
            T1Q            = T1L - T1H;
            T1M            = T1H + T1L;
            T1W            = T1S + T1T;
            T1U            = T1S - T1T;
            T18            = T16 + T17;
            T1s            = T17 - T16;
            T1D            = T1B + T1C;
            T1R            = T1B - T1C;
            Td             = T7 + Tc;
            T1X            = T7 - Tc;
            T21            = Tw + TB;
            TC             = Tw - TB;
            T1P            = T1N - T1O;
            T1V            = T1O + T1N;
            TL             = SIMD_FMADD(KP707106781, TK, TF);
            T1f            = SIMD_FNMADD(KP707106781, TK, TF);
            T1c            = SIMD_FMADD(KP414213562, TP, TS);
            TT             = SIMD_FNMADD(KP414213562, TS, TP);
            T1b            = SIMD_FMADD(KP707106781, T18, T15);
            T19            = SIMD_FNMADD(KP707106781, T18, T15);
            ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1U, T1R);
            ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1U, T1R);
            ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1M, T1D);
            ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1M, T1D);
            ro[WS(os, 4)]  = T1X + T20;
            ro[WS(os, 12)] = T1X - T20;
            ro[0]          = Td + To;
            ro[WS(os, 8)]  = Td - To;
            io[WS(os, 12)] = TC - Tp;
            io[WS(os, 4)]  = Tp + TC;
            io[0]          = T21 + T22;
            io[WS(os, 8)]  = T21 - T22;
            io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1W, T1V);
            io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1W, T1V);
            io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1Q, T1P);
            io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1Q, T1P);
            T11            = SIMD_FNMADD(KP414213562, T10, TW);
            T1d            = SIMD_FMADD(KP414213562, TW, T10);
            T1w            = SIMD_FNMADD(KP414213562, T1k, T1l);
            T1m            = SIMD_FMADD(KP414213562, T1l, T1k);
            T1p            = SIMD_FMADD(KP414213562, T1o, T1n);
            T1x            = SIMD_FNMADD(KP414213562, T1n, T1o);
        }
        T12            = TT - T11;
        T1a            = TT + T11;
        T1e            = T1c + T1d;
        T1g            = T1d - T1c;
        T1j            = SIMD_FMADD(KP707106781, T1i, T1h);
        T1z            = SIMD_FNMADD(KP707106781, T1i, T1h);
        T1t            = SIMD_FNMADD(KP707106781, T1s, T1r);
        T1v            = SIMD_FMADD(KP707106781, T1s, T1r);
        T1q            = T1m - T1p;
        T1u            = T1m + T1p;
        T1y            = T1w + T1x;
        T1A            = T1x - T1w;
        ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1a, T19);
        ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1a, T19);
        io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T12, TL);
        io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T12, TL);
        io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1g, T1f);
        io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1g, T1f);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1e, T1b);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1e, T1b);
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1u, T1t);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1u, T1t);
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1q, T1j);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1q, T1j);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1A, T1z);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1A, T1z);
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1y, T1v);
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1y, T1v);
    }
}

template <>
struct c2cf_traits<16, 14>
{
    static constexpr long_t flops           = 176;
    static constexpr long_t operations      = 136;
    static constexpr long_t memory_accesses = 60;
    static constexpr long_t stack_vars      = 95;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 14 -name c2cf
 * -standalone */

/*
 * This function contains 136 FP additions, 40 FP multiplications,
 * (or, 96 additions, 0 multiplications, 40 fused multiply/add),
 * 95 stack variables, 3 constants, and 60 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 14>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1B, T1C, T1o, T1E, T1y, T1A, T1z, T1v, T1D, T1F;
        {
            SIMD_FLOAT TL, T1c, Tc, T1U, TK, T1b, T1H, TD, T18, T11, T1s, Tp,
                T1O, T1Q, T25;
            SIMD_FLOAT T15, T1t, Tu, T7, T1G, TH, T1w, Tx, T19, Tg, TT, TQ, T1K,
                Tj, TR;
            SIMD_FLOAT T1L, TW, T23, Td, T1m, T1a, T1T, Ty;
            {
                SIMD_FLOAT Tb, TC, T8, T9, Tz, TA, Tl, T10, Tm, Tn, T12, T13,
                    T3, TF, TG;
                SIMD_FLOAT T6, Tv, Tw, T1, TJ, Ta, TI, TB, T2, Ts, TZ, To, T1P,
                    T14, Tt;
                SIMD_FLOAT T4, T5, Te, Tf, TO, TP, Th, Ti, TU, TV;
                Tb  = ri[WS(is, 6)];
                TC  = ii[WS(is, 6)];
                T8  = ri[WS(is, 2)];
                T9  = ri[WS(is, 10)];
                Tz  = ii[WS(is, 2)];
                TA  = ii[WS(is, 10)];
                Tl  = ri[WS(is, 7)];
                T10 = ii[WS(is, 7)];
                Tm  = ri[WS(is, 3)];
                Tn  = ri[WS(is, 11)];
                T12 = ii[WS(is, 3)];
                T13 = ii[WS(is, 11)];
                T1  = ri[0];
                TL  = Tb + TC;
                T1c = TC - Tb;
                TJ  = T8 - T9;
                Ta  = T8 + T9;
                TI  = Tz - TA;
                TB  = Tz + TA;
                T2  = ri[WS(is, 8)];
                Ts  = ii[0];
                TZ  = Tm - Tn;
                To  = Tm + Tn;
                T1P = T12 + T13;
                T14 = T12 - T13;
                Tt  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                Tc  = Ta + Tb;
                T1U = Tb - Ta;
                TK  = TI - TJ;
                T1b = TJ + TI;
                T1H = TB - TC;
                TD  = TB + TC;
                T3  = T1 + T2;
                T18 = T1 - T2;
                T11 = TZ + T10;
                T1s = TZ - T10;
                Tp  = Tl + To;
                T1O = Tl - To;
                T1Q = T10 - T1P;
                T25 = T10 + T1P;
                T15 = T14 - Tl;
                T1t = Tl + T14;
                Tu  = Ts + Tt;
                TF  = Ts - Tt;
                TG  = T4 - T5;
                T6  = T4 + T5;
                Tv  = ii[WS(is, 4)];
                Tw  = ii[WS(is, 12)];
                Te  = ri[WS(is, 1)];
                Tf  = ri[WS(is, 9)];
                TO  = ii[WS(is, 1)];
                TP  = ii[WS(is, 9)];
                Th  = ri[WS(is, 5)];
                Ti  = ri[WS(is, 13)];
                TU  = ii[WS(is, 5)];
                TV  = ii[WS(is, 13)];
                T7  = T3 + T6;
                T1G = T3 - T6;
                TH  = TF - TG;
                T1w = TG + TF;
                Tx  = Tv + Tw;
                T19 = Tv - Tw;
                Tg  = Te + Tf;
                TT  = Te - Tf;
                TQ  = TO - TP;
                T1K = TO + TP;
                Tj  = Th + Ti;
                TR  = Th - Ti;
                T1L = TU + TV;
                TW  = TU - TV;
            }
            T23 = T7 - Tc;
            Td  = T7 + Tc;
            T1m = T18 - T19;
            T1a = T18 + T19;
            T1T = Tu - Tx;
            Ty  = Tu + Tx;
            {
                SIMD_FLOAT T1X, T1I, T1R, T1Z, TS, T1p, Tk, T1J, TX, T1q, T1M,
                    T24, T27, TE, T21;
                SIMD_FLOAT T1V, T1n, T1x, TN, T1k, T1e, T1g, T20, T22, T1S, T1W,
                    T17, T1f, T1l, T1j;
                SIMD_FLOAT TM, Tr, Tq, T1d, T28, T26, T1N, T1Y, T1h, TY, T16,
                    T1i, T1r, T1u;
                T1X            = T1G - T1H;
                T1I            = T1G + T1H;
                T1R            = T1O - T1Q;
                T1Z            = T1O + T1Q;
                TS             = TQ - TR;
                T1p            = TR + TQ;
                Tk             = Tg + Tj;
                T1J            = Tg - Tj;
                TX             = TT + TW;
                T1q            = TT - TW;
                T1M            = T1K - T1L;
                T24            = T1K + T1L;
                T27            = Ty + TD;
                TE             = Ty - TD;
                T21            = T1U + T1T;
                T1V            = T1T - T1U;
                T1n            = TK + TL;
                TM             = TK - TL;
                Tr             = Tp - Tk;
                Tq             = Tk + Tp;
                T1d            = T1b + T1c;
                T1x            = T1c - T1b;
                T28            = T24 + T25;
                T26            = T24 - T25;
                T1N            = T1J + T1M;
                T1Y            = T1M - T1J;
                T1h            = SIMD_FMADD(KP414213562, TS, TX);
                TY             = SIMD_FNMADD(KP414213562, TX, TS);
                T16            = SIMD_FNMADD(KP414213562, T15, T11);
                T1i            = SIMD_FMADD(KP414213562, T11, T15);
                TN             = SIMD_FMADD(KP707106781, TM, TH);
                T1k            = SIMD_FNMADD(KP707106781, TM, TH);
                io[WS(os, 12)] = TE - Tr;
                io[WS(os, 4)]  = Tr + TE;
                ro[0]          = Td + Tq;
                ro[WS(os, 8)]  = Td - Tq;
                T1e            = SIMD_FNMADD(KP707106781, T1d, T1a);
                T1g            = SIMD_FMADD(KP707106781, T1d, T1a);
                ro[WS(os, 4)]  = T23 + T26;
                ro[WS(os, 12)] = T23 - T26;
                io[0]          = T27 + T28;
                io[WS(os, 8)]  = T27 - T28;
                T20            = T1Y - T1Z;
                T22            = T1Y + T1Z;
                T1S            = T1N + T1R;
                T1W            = T1R - T1N;
                T17            = TY - T16;
                T1f            = TY + T16;
                T1l            = T1i - T1h;
                T1j            = T1h + T1i;
                T1B            = SIMD_FNMADD(KP414213562, T1p, T1q);
                T1r            = SIMD_FMADD(KP414213562, T1q, T1p);
                T1u            = SIMD_FMADD(KP414213562, T1t, T1s);
                T1C            = SIMD_FNMADD(KP414213562, T1s, T1t);
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T22, T21);
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T22, T21);
                ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T20, T1X);
                ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T20, T1X);
                io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T1W, T1V);
                io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T1W, T1V);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1S, T1I);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1S, T1I);
                ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1f, T1e);
                ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1f, T1e);
                io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T17, TN);
                io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T17, TN);
                ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1j, T1g);
                ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1j, T1g);
                io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1l, T1k);
                io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1l, T1k);
                T1o            = SIMD_FMADD(KP707106781, T1n, T1m);
                T1E            = SIMD_FNMADD(KP707106781, T1n, T1m);
                T1y            = SIMD_FNMADD(KP707106781, T1x, T1w);
                T1A            = SIMD_FMADD(KP707106781, T1x, T1w);
                T1z            = T1r + T1u;
                T1v            = T1r - T1u;
            }
        }
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1v, T1o);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1v, T1o);
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1z, T1y);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1z, T1y);
        T1D            = T1B + T1C;
        T1F            = T1C - T1B;
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1F, T1E);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1F, T1E);
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1D, T1A);
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1D, T1A);
    }
}

template <>
struct c2cf_traits<16, 15>
{
    static constexpr long_t flops           = 180;
    static constexpr long_t operations      = 140;
    static constexpr long_t memory_accesses = 62;
    static constexpr long_t stack_vars      = 108;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 15 -name c2cf
 * -standalone */

/*
 * This function contains 140 FP additions, 40 FP multiplications,
 * (or, 100 additions, 0 multiplications, 40 fused multiply/add),
 * 108 stack variables, 3 constants, and 62 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 15>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1C, T1D, T1u, T1K, T1H, T1x, T1A, T1I, T1E, T1G, T1B, T1F,
            T1J, T1L;
        {
            SIMD_FLOAT T1y, T17, T1U, Tr, T2b, T1W, T1z, T1b, T1v, TY, T1P, Tm,
                T2a, T1S, T1w;
            SIMD_FLOAT T13, Tb, T1e, T3, TJ, Tw, TK, T6, T1f, Tz, TN, Ta, TM,
                TD, Tc;
            SIMD_FLOAT TE, TF, Tt, Ts, TL, T1M, T7, T1g, T1s, TA, T1Z, T1h, TO,
                TP, Td;
            SIMD_FLOAT TQ, TG, T2e, T2c, T24, T1T, T1X, T25;
            {
                SIMD_FLOAT Tn, T16, To, Tp, T18, T19, Tg, Th, TU, TV, Tj, Tk,
                    T10, T11, T1;
                SIMD_FLOAT T2, Tu, Tv, T4, T5, Tx, Ty, T15, Tq, T1V, T1a, TZ,
                    Ti, T1Q, TW;
                SIMD_FLOAT TX, Tl, T1R, T12, T8, T9, TB, TC;
                Tn  = ri[WS(is, 7)];
                T16 = ii[WS(is, 7)];
                To  = ri[WS(is, 3)];
                Tp  = ri[WS(is, 11)];
                T18 = ii[WS(is, 3)];
                T19 = ii[WS(is, 11)];
                Tg  = ri[WS(is, 1)];
                Th  = ri[WS(is, 9)];
                TU  = ii[WS(is, 1)];
                TV  = ii[WS(is, 9)];
                Tj  = ri[WS(is, 5)];
                Tk  = ri[WS(is, 13)];
                T10 = ii[WS(is, 5)];
                T11 = ii[WS(is, 13)];
                T1  = ri[0];
                T15 = To - Tp;
                Tq  = To + Tp;
                T1V = T18 + T19;
                T1a = T18 - T19;
                TZ  = Tg - Th;
                Ti  = Tg + Th;
                T1Q = TU + TV;
                TW  = TU - TV;
                TX  = Tj - Tk;
                Tl  = Tj + Tk;
                T1R = T10 + T11;
                T12 = T10 - T11;
                T1y = T15 - T16;
                T17 = T15 + T16;
                T1U = Tn - Tq;
                Tr  = Tn + Tq;
                T2b = T16 + T1V;
                T1W = T16 - T1V;
                T1z = Tn + T1a;
                T1b = T1a - Tn;
                T1v = TX + TW;
                TY  = TW - TX;
                T1P = Ti - Tl;
                Tm  = Ti + Tl;
                T2a = T1Q + T1R;
                T1S = T1Q - T1R;
                T1w = TZ - T12;
                T13 = TZ + T12;
                T2  = ri[WS(is, 8)];
                Tu  = ii[0];
                Tv  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                Tx  = ii[WS(is, 4)];
                Ty  = ii[WS(is, 12)];
                T8  = ri[WS(is, 2)];
                T9  = ri[WS(is, 10)];
                TB  = ii[WS(is, 2)];
                TC  = ii[WS(is, 10)];
                Tb  = ri[WS(is, 14)];
                T1e = T1 - T2;
                T3  = T1 + T2;
                TJ  = Tu - Tv;
                Tw  = Tu + Tv;
                TK  = T4 - T5;
                T6  = T4 + T5;
                T1f = Tx - Ty;
                Tz  = Tx + Ty;
                TN  = T8 - T9;
                Ta  = T8 + T9;
                TM  = TB - TC;
                TD  = TB + TC;
                Tc  = ri[WS(is, 6)];
                TE  = ii[WS(is, 14)];
                TF  = ii[WS(is, 6)];
            }
            Tt  = Tr - Tm;
            Ts  = Tm + Tr;
            T1C = TK + TJ;
            TL  = TJ - TK;
            T1M = T3 - T6;
            T7  = T3 + T6;
            T1g = T1e + T1f;
            T1s = T1e - T1f;
            TA  = Tw + Tz;
            T1Z = Tw - Tz;
            T1h = TN + TM;
            TO  = TM - TN;
            TP  = Tb - Tc;
            Td  = Tb + Tc;
            TQ  = TE - TF;
            TG  = TE + TF;
            T2e = T2a + T2b;
            T2c = T2a - T2b;
            T24 = T1S - T1P;
            T1T = T1P + T1S;
            T1X = T1U - T1W;
            T25 = T1U + T1W;
            {
                SIMD_FLOAT T1n, T1o, T22, T1Y, T28, T26, T1l, T1d, T27, T21,
                    T29, Tf, TS, T1t, T1j;
                SIMD_FLOAT TI, T2d, T23, T1O, T14, T1c, Te, T20, T1i, TR, T1N,
                    TH, T1q, T1m, T1r;
                SIMD_FLOAT T1p, TT, T1k;
                T1n            = SIMD_FMADD(KP414213562, TY, T13);
                T14            = SIMD_FNMADD(KP414213562, T13, TY);
                T1c            = SIMD_FNMADD(KP414213562, T1b, T17);
                T1o            = SIMD_FMADD(KP414213562, T17, T1b);
                Te             = Ta + Td;
                T20            = Td - Ta;
                T1i            = TP - TQ;
                TR             = TP + TQ;
                T1N            = TD - TG;
                TH             = TD + TG;
                T22            = T1X - T1T;
                T1Y            = T1T + T1X;
                T28            = T24 + T25;
                T26            = T24 - T25;
                T1l            = T14 + T1c;
                T1d            = T14 - T1c;
                T27            = T20 + T1Z;
                T21            = T1Z - T20;
                T29            = T7 - Te;
                Tf             = T7 + Te;
                TS             = TO + TR;
                T1t            = TO - TR;
                T1D            = T1i - T1h;
                T1j            = T1h + T1i;
                TI             = TA - TH;
                T2d            = TA + TH;
                T23            = T1M - T1N;
                T1O            = T1M + T1N;
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T28, T27);
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T28, T27);
                io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T22, T21);
                io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T22, T21);
                ro[WS(os, 4)]  = T29 + T2c;
                ro[WS(os, 12)] = T29 - T2c;
                ro[0]          = Tf + Ts;
                ro[WS(os, 8)]  = Tf - Ts;
                T1q            = SIMD_FNMADD(KP707106781, TS, TL);
                TT             = SIMD_FMADD(KP707106781, TS, TL);
                T1m            = SIMD_FMADD(KP707106781, T1j, T1g);
                T1k            = SIMD_FNMADD(KP707106781, T1j, T1g);
                io[WS(os, 12)] = TI - Tt;
                io[WS(os, 4)]  = Tt + TI;
                io[0]          = T2d + T2e;
                io[WS(os, 8)]  = T2d - T2e;
                ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T26, T23);
                ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T26, T23);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T1Y, T1O);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T1Y, T1O);
                T1r            = T1o - T1n;
                T1p            = T1n + T1o;
                io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1d, TT);
                io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1d, TT);
                ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1l, T1k);
                ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1l, T1k);
                T1u            = SIMD_FMADD(KP707106781, T1t, T1s);
                T1K            = SIMD_FNMADD(KP707106781, T1t, T1s);
                T1H            = SIMD_FNMADD(KP414213562, T1v, T1w);
                T1x            = SIMD_FMADD(KP414213562, T1w, T1v);
                T1A            = SIMD_FMADD(KP414213562, T1z, T1y);
                T1I            = SIMD_FNMADD(KP414213562, T1y, T1z);
                io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1r, T1q);
                io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1r, T1q);
                ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1p, T1m);
                ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1p, T1m);
            }
        }
        T1E            = SIMD_FNMADD(KP707106781, T1D, T1C);
        T1G            = SIMD_FMADD(KP707106781, T1D, T1C);
        T1B            = T1x - T1A;
        T1F            = T1x + T1A;
        T1J            = T1H + T1I;
        T1L            = T1I - T1H;
        io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1F, T1E);
        io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1F, T1E);
        ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1B, T1u);
        ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1B, T1u);
        ro[WS(os, 15)] = SIMD_FNMADD(KP923879532, T1L, T1K);
        ro[WS(os, 7)]  = SIMD_FMADD(KP923879532, T1L, T1K);
        io[WS(os, 3)]  = SIMD_FNMADD(KP923879532, T1J, T1G);
        io[WS(os, 11)] = SIMD_FMADD(KP923879532, T1J, T1G);
    }
}

template <>
struct c2cf_traits<16, 16>
{
    static constexpr long_t flops           = 184;
    static constexpr long_t operations      = 144;
    static constexpr long_t memory_accesses = 64;
    static constexpr long_t stack_vars      = 108;
    static constexpr long_t constants       = 3;
};
/* Generated by: ./gen_notwf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 16 -first-k 16 -name c2cf
 * -standalone */

/*
 * This function contains 144 FP additions, 40 FP multiplications,
 * (or, 104 additions, 0 multiplications, 40 fused multiply/add),
 * 108 stack variables, 3 constants, and 64 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t is, long_t os>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 16 && ProvidedElements == 16>::type
c2cf(SIMD_FLOAT const* __restrict ri, SIMD_FLOAT const* __restrict ii,
     SIMD_FLOAT* __restrict ro, SIMD_FLOAT* __restrict io)
{
    DK(KP923879532, +0.923879532511286756128183189396788286822416626);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP414213562, +0.414213562373095048801688724209698078569671875);
    {
        SIMD_FLOAT T1H, T1I, T1z, T1L, T1M, T1C, T1F, T1N, T1J, T1P, T1G, T1K,
            T1O, T1Q;
        {
            SIMD_FLOAT T1l, T1R, T7, T1x, TN, TC, T25, T1E, T1b, T1Z, Tt, T2h,
                T22, T1D, T1g;
            SIMD_FLOAT T1n, TQ, Te, T26, T1m, TT, T1S, TJ, Ti, T11, TZ, T1V, Tl,
                TW, T1W;
            SIMD_FLOAT T14, T2f, Tf, T2j, TK;
            {
                SIMD_FLOAT Tq, TL, T3, T1k, Ty, T1j, T6, TM, TB, T1c, Tp, T20,
                    T1a, Tr, T1d;
                SIMD_FLOAT T1e, T1, T2, Tw, Tx, T4, T5, Tz, TA, Tn, To, T18,
                    T19, T8, T17;
                SIMD_FLOAT Ts, T21, T1f, T9, TD, TE, Tb, Tc, TG, TH, Tg, TP, Ta,
                    TO, TF;
                SIMD_FLOAT TR, Td, TS, TI, Th, TX, TY, Tj, Tk, T12, T13;
                T1  = ri[0];
                T2  = ri[WS(is, 8)];
                Tw  = ii[0];
                Tx  = ii[WS(is, 8)];
                T4  = ri[WS(is, 4)];
                T5  = ri[WS(is, 12)];
                Tz  = ii[WS(is, 4)];
                TA  = ii[WS(is, 12)];
                Tn  = ri[WS(is, 15)];
                To  = ri[WS(is, 7)];
                T18 = ii[WS(is, 15)];
                T19 = ii[WS(is, 7)];
                Tq  = ri[WS(is, 3)];
                TL  = T1 - T2;
                T3  = T1 + T2;
                T1k = Tw - Tx;
                Ty  = Tw + Tx;
                T1j = T4 - T5;
                T6  = T4 + T5;
                TM  = Tz - TA;
                TB  = Tz + TA;
                T1c = Tn - To;
                Tp  = Tn + To;
                T20 = T18 + T19;
                T1a = T18 - T19;
                Tr  = ri[WS(is, 11)];
                T1d = ii[WS(is, 3)];
                T1e = ii[WS(is, 11)];
                T8  = ri[WS(is, 2)];
                T1l = T1j + T1k;
                T1H = T1k - T1j;
                T1R = T3 - T6;
                T7  = T3 + T6;
                T1x = TL + TM;
                TN  = TL - TM;
                TC  = Ty + TB;
                T25 = Ty - TB;
                T17 = Tq - Tr;
                Ts  = Tq + Tr;
                T21 = T1d + T1e;
                T1f = T1d - T1e;
                T9  = ri[WS(is, 10)];
                TD  = ii[WS(is, 2)];
                TE  = ii[WS(is, 10)];
                Tb  = ri[WS(is, 14)];
                Tc  = ri[WS(is, 6)];
                TG  = ii[WS(is, 14)];
                TH  = ii[WS(is, 6)];
                Tg  = ri[WS(is, 1)];
                T1E = T1a - T17;
                T1b = T17 + T1a;
                T1Z = Tp - Ts;
                Tt  = Tp + Ts;
                T2h = T20 + T21;
                T22 = T20 - T21;
                T1D = T1c + T1f;
                T1g = T1c - T1f;
                TP  = T8 - T9;
                Ta  = T8 + T9;
                TO  = TD - TE;
                TF  = TD + TE;
                TR  = Tb - Tc;
                Td  = Tb + Tc;
                TS  = TG - TH;
                TI  = TG + TH;
                Th  = ri[WS(is, 9)];
                TX  = ii[WS(is, 1)];
                TY  = ii[WS(is, 9)];
                Tj  = ri[WS(is, 5)];
                Tk  = ri[WS(is, 13)];
                T12 = ii[WS(is, 5)];
                T1n = TP + TO;
                TQ  = TO - TP;
                T13 = ii[WS(is, 13)];
                Te  = Ta + Td;
                T26 = Td - Ta;
                T1m = TR - TS;
                TT  = TR + TS;
                T1S = TF - TI;
                TJ  = TF + TI;
                Ti  = Tg + Th;
                T11 = Tg - Th;
                TZ  = TX - TY;
                T1V = TX + TY;
                Tl  = Tj + Tk;
                TW  = Tj - Tk;
                T1W = T12 + T13;
                T14 = T12 - T13;
            }
            T2f = T7 - Te;
            Tf  = T7 + Te;
            T2j = TC + TJ;
            TK  = TC - TJ;
            {
                SIMD_FLOAT T29, T1T, T27, T2d, T2b, T23, T10, T1B, Tm, T1U, T15,
                    T1A, T1X, T2g, TU;
                SIMD_FLOAT T1o, T1y, T1s, T1h, Tv, Tu, T1t, T16, T2i, T2k, T2a,
                    T1Y, T1v, TV, T1r;
                SIMD_FLOAT T1p, T1w, T1u, T1q, T1i, T2e, T2c, T28, T24;
                T29            = T1R - T1S;
                T1T            = T1R + T1S;
                T27            = T25 - T26;
                T2d            = T26 + T25;
                T2b            = T1Z + T22;
                T23            = T1Z - T22;
                T10            = TW + TZ;
                T1B            = TZ - TW;
                Tm             = Ti + Tl;
                T1U            = Ti - Tl;
                T15            = T11 - T14;
                T1A            = T11 + T14;
                T1X            = T1V - T1W;
                T2g            = T1V + T1W;
                T1I            = TQ + TT;
                TU             = TQ - TT;
                T1o            = T1m - T1n;
                T1y            = T1n + T1m;
                T1s            = SIMD_FMADD(KP414213562, T1b, T1g);
                T1h            = SIMD_FNMADD(KP414213562, T1g, T1b);
                Tv             = Tt - Tm;
                Tu             = Tm + Tt;
                T1t            = SIMD_FNMADD(KP414213562, T10, T15);
                T16            = SIMD_FMADD(KP414213562, T15, T10);
                T2i            = T2g - T2h;
                T2k            = T2g + T2h;
                T2a            = T1X - T1U;
                T1Y            = T1U + T1X;
                T1v            = SIMD_FNMADD(KP707106781, TU, TN);
                TV             = SIMD_FMADD(KP707106781, TU, TN);
                T1r            = SIMD_FMADD(KP707106781, T1o, T1l);
                T1p            = SIMD_FNMADD(KP707106781, T1o, T1l);
                io[WS(os, 12)] = TK - Tv;
                io[WS(os, 4)]  = Tv + TK;
                ro[0]          = Tf + Tu;
                ro[WS(os, 8)]  = Tf - Tu;
                T1w            = T1t + T1s;
                T1u            = T1s - T1t;
                T1q            = T16 + T1h;
                T1i            = T16 - T1h;
                ro[WS(os, 4)]  = T2f + T2i;
                ro[WS(os, 12)] = T2f - T2i;
                io[0]          = T2j + T2k;
                io[WS(os, 8)]  = T2j - T2k;
                T2e            = T2a + T2b;
                T2c            = T2a - T2b;
                T28            = T23 - T1Y;
                T24            = T1Y + T23;
                ro[WS(os, 15)] = SIMD_FMADD(KP923879532, T1w, T1v);
                ro[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1w, T1v);
                io[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1u, T1r);
                io[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1u, T1r);
                io[WS(os, 15)] = SIMD_FMADD(KP923879532, T1q, T1p);
                io[WS(os, 7)]  = SIMD_FNMADD(KP923879532, T1q, T1p);
                ro[WS(os, 3)]  = SIMD_FMADD(KP923879532, T1i, TV);
                ro[WS(os, 11)] = SIMD_FNMADD(KP923879532, T1i, TV);
                io[WS(os, 10)] = SIMD_FNMADD(KP707106781, T2e, T2d);
                io[WS(os, 2)]  = SIMD_FMADD(KP707106781, T2e, T2d);
                ro[WS(os, 6)]  = SIMD_FMADD(KP707106781, T2c, T29);
                ro[WS(os, 14)] = SIMD_FNMADD(KP707106781, T2c, T29);
                io[WS(os, 14)] = SIMD_FNMADD(KP707106781, T28, T27);
                io[WS(os, 6)]  = SIMD_FMADD(KP707106781, T28, T27);
                ro[WS(os, 2)]  = SIMD_FMADD(KP707106781, T24, T1T);
                ro[WS(os, 10)] = SIMD_FNMADD(KP707106781, T24, T1T);
                T1z            = SIMD_FMADD(KP707106781, T1y, T1x);
                T1L            = SIMD_FNMADD(KP707106781, T1y, T1x);
                T1M            = SIMD_FNMADD(KP414213562, T1A, T1B);
                T1C            = SIMD_FMADD(KP414213562, T1B, T1A);
                T1F            = SIMD_FNMADD(KP414213562, T1E, T1D);
                T1N            = SIMD_FMADD(KP414213562, T1D, T1E);
            }
        }
        T1J            = SIMD_FNMADD(KP707106781, T1I, T1H);
        T1P            = SIMD_FMADD(KP707106781, T1I, T1H);
        T1G            = T1C + T1F;
        T1K            = T1F - T1C;
        T1O            = T1M - T1N;
        T1Q            = T1M + T1N;
        io[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1K, T1J);
        io[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1K, T1J);
        ro[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1G, T1z);
        ro[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1G, T1z);
        io[WS(os, 1)]  = SIMD_FMADD(KP923879532, T1Q, T1P);
        io[WS(os, 9)]  = SIMD_FNMADD(KP923879532, T1Q, T1P);
        ro[WS(os, 5)]  = SIMD_FMADD(KP923879532, T1O, T1L);
        ro[WS(os, 13)] = SIMD_FNMADD(KP923879532, T1O, T1L);
    }
}

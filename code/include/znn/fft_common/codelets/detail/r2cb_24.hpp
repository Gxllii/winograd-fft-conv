//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<24, 0>
{
    static constexpr long_t flops           = 148;
    static constexpr long_t operations      = 104;
    static constexpr long_t memory_accesses = 48;
    static constexpr long_t stack_vars      = 108;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 0 -name
 * r2cb -standalone */

/*
 * This function contains 104 FP additions, 44 FP multiplications,
 * (or, 60 additions, 0 multiplications, 44 fused multiply/add),
 * 108 stack variables, 4 constants, and 48 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Ti, TA, TV, T1x, T1D, Td, T1F, T1z, T1b, TG, TS, TK, T1h, TR,
            T1j;
        SIMD_FLOAT Tv, T17, T1m, TH, Tn, T1k, T10, T1A, T1a, TB, T1t, TL, TT,
            To, T1y;
        SIMD_FLOAT T1l, T1r, T1c, T1n, T1G, T1B, T11, T1f, TU, T12, TM, T1p,
            T1u, T1o, T1i;
        SIMD_FLOAT T1d, T1C, T1E, T1q, T1s, T1e, T1g;
        {
            SIMD_FLOAT T14, TZ, Tz, Tj, Tw, Tc, T19, T1w, TY, T16, Tr, TN, TO,
                Tu, T7;
            SIMD_FLOAT T1v, TF, T13, Tk, Tl, TI, TC, TJ, T8, T9, Ta, TX, Tx, Ty,
                Tq;
            SIMD_FLOAT T1, T2, Tt, T4, T5, Te, Tb, Tf, TW, Tg, T3, Tp, TD, Ts,
                T6;
            SIMD_FLOAT TE, Th, Tm, T18, T15, TQ, TP;
            T8  = Cr[WS(cs, 6)];
            T9  = Cr[WS(cs, 10)];
            Ta  = Cr[WS(cs, 2)];
            TX  = Ci[WS(cs, 6)];
            Tx  = Ci[WS(cs, 10)];
            Ty  = Ci[WS(cs, 2)];
            Tq  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            Tt  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Te  = Cr[WS(cs, 3)];
            T14 = Ci[WS(cs, 3)];
            Tb  = T9 + Ta;
            TZ  = T9 - Ta;
            Tf  = Cr[WS(cs, 11)];
            Tz  = Tx - Ty;
            TW  = Tx + Ty;
            Tg  = Cr[WS(cs, 5)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            Tp  = T1 - T2;
            TD  = Ci[WS(cs, 11)];
            Ts  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            TE  = Ci[WS(cs, 5)];
            Tj  = Cr[WS(cs, 9)];
            Tw  = SIMD_FNMADD(KP2_000000000, T8, Tb);
            Tc  = T8 + Tb;
            T19 = Ci[WS(cs, 9)];
            T1w = TX - TW;
            TY  = SIMD_FMADD(KP2_000000000, TX, TW);
            Th  = Tf + Tg;
            T16 = Tf - Tg;
            Tr  = SIMD_FMADD(KP1_732050807, Tq, Tp);
            TN  = SIMD_FNMADD(KP1_732050807, Tq, Tp);
            TO  = SIMD_FMADD(KP1_732050807, Tt, Ts);
            Tu  = SIMD_FNMADD(KP1_732050807, Tt, Ts);
            T7  = T3 + T6;
            T1v = T3 - T6;
            TF  = TD + TE;
            T13 = TE - TD;
            Tk  = Cr[WS(cs, 1)];
            Tl  = Cr[WS(cs, 7)];
            TI  = Ci[WS(cs, 1)];
            TC  = SIMD_FNMADD(KP2_000000000, Te, Th);
            Ti  = Te + Th;
            TJ  = Ci[WS(cs, 7)];
            TA  = SIMD_FMADD(KP1_732050807, Tz, Tw);
            TQ  = SIMD_FNMADD(KP1_732050807, Tz, Tw);
            TP  = TN + TO;
            TV  = TN - TO;
            T1x = SIMD_FNMADD(KP2_000000000, T1w, T1v);
            T1D = SIMD_FMADD(KP2_000000000, T1w, T1v);
            Td  = SIMD_FMADD(KP2_000000000, Tc, T7);
            T1F = SIMD_FNMADD(KP2_000000000, Tc, T7);
            T1z = T14 - T13;
            T15 = SIMD_FMADD(KP2_000000000, T14, T13);
            Tm  = Tk + Tl;
            T1b = Tk - Tl;
            TG  = SIMD_FNMADD(KP1_732050807, TF, TC);
            TS  = SIMD_FMADD(KP1_732050807, TF, TC);
            TK  = TI + TJ;
            T18 = TI - TJ;
            T1h = TP + TQ;
            TR  = TP - TQ;
            T1j = Tr - Tu;
            Tv  = Tr + Tu;
            T17 = SIMD_FMADD(KP1_732050807, T16, T15);
            T1m = SIMD_FNMADD(KP1_732050807, T16, T15);
            TH  = SIMD_FNMADD(KP2_000000000, Tj, Tm);
            Tn  = Tj + Tm;
            T1k = SIMD_FNMADD(KP1_732050807, TZ, TY);
            T10 = SIMD_FMADD(KP1_732050807, TZ, TY);
            T1A = T18 + T19;
            T1a = SIMD_FNMADD(KP2_000000000, T19, T18);
        }
        TB             = Tv - TA;
        T1t            = Tv + TA;
        TL             = SIMD_FMADD(KP1_732050807, TK, TH);
        TT             = SIMD_FNMADD(KP1_732050807, TK, TH);
        To             = Ti + Tn;
        T1y            = Ti - Tn;
        T1l            = T1j - T1k;
        T1r            = T1j + T1k;
        T1c            = SIMD_FMADD(KP1_732050807, T1b, T1a);
        T1n            = SIMD_FNMADD(KP1_732050807, T1b, T1a);
        T1G            = T1z - T1A;
        T1B            = T1z + T1A;
        T11            = TV - T10;
        T1f            = TV + T10;
        TU             = TS + TT;
        T12            = TT - TS;
        TM             = TG + TL;
        T1p            = TL - TG;
        R0[0]          = SIMD_FMADD(KP2_000000000, To, Td);
        R0[WS(rs, 12)] = SIMD_FNMADD(KP2_000000000, To, Td);
        T1u            = T1m + T1n;
        T1o            = T1m - T1n;
        T1i            = T17 + T1c;
        T1d            = T17 - T1c;
        T1C            = T1y - T1B;
        T1E            = T1y + T1B;
        R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, T1G, T1F);
        R0[WS(rs, 18)] = SIMD_FNMADD(KP2_000000000, T1G, T1F);
        R0[WS(rs, 16)] = TR - TU;
        R0[WS(rs, 4)]  = TR + TU;
        R0[WS(rs, 8)]  = TB - TM;
        R0[WS(rs, 20)] = TB + TM;
        T1q            = T1o - T1p;
        T1s            = T1p + T1o;
        R0[WS(rs, 2)]  = T1t - T1u;
        R0[WS(rs, 14)] = T1t + T1u;
        T1e            = T12 - T1d;
        T1g            = T12 + T1d;
        R0[WS(rs, 10)] = T1h - T1i;
        R0[WS(rs, 22)] = T1h + T1i;
        R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_414213562, T1E, T1D);
        R0[WS(rs, 15)] = SIMD_FMADD(KP1_414213562, T1E, T1D);
        R0[WS(rs, 9)]  = SIMD_FMADD(KP1_414213562, T1C, T1x);
        R0[WS(rs, 21)] = SIMD_FNMADD(KP1_414213562, T1C, T1x);
        R0[WS(rs, 11)] = SIMD_FNMADD(KP707106781, T1s, T1r);
        R0[WS(rs, 23)] = SIMD_FMADD(KP707106781, T1s, T1r);
        R0[WS(rs, 5)]  = SIMD_FMADD(KP707106781, T1q, T1l);
        R0[WS(rs, 17)] = SIMD_FNMADD(KP707106781, T1q, T1l);
        R0[WS(rs, 19)] = SIMD_FNMADD(KP707106781, T1g, T1f);
        R0[WS(rs, 7)]  = SIMD_FMADD(KP707106781, T1g, T1f);
        R0[WS(rs, 1)]  = SIMD_FMADD(KP707106781, T1e, T11);
        R0[WS(rs, 13)] = SIMD_FNMADD(KP707106781, T1e, T11);
    }
}

template <>
struct r2cb_traits<24, 1>
{
    static constexpr long_t flops           = 146;
    static constexpr long_t operations      = 104;
    static constexpr long_t memory_accesses = 47;
    static constexpr long_t stack_vars      = 106;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 1 -name
 * r2cb -standalone */

/*
 * This function contains 104 FP additions, 42 FP multiplications,
 * (or, 62 additions, 0 multiplications, 42 fused multiply/add),
 * 106 stack variables, 4 constants, and 47 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tp, T1B, To, T1A, T1b, T1i, T1C, Tb, T1f, TV, TI, T11, Tu,
            TC, T1z;
        SIMD_FLOAT T1w, TZ, TO, TW, Tk, T1c, Tz, TH, T1e, T1s, T1q, TX, T15, TD,
            T12;
        SIMD_FLOAT T1d, T1E, TJ, TY, T1D, T1g, Tl, TR, T1t, T13, T1y, TE, T10,
            T1r, TP;
        SIMD_FLOAT T1x, T1j, T1h, T16, T14, TS, TQ;
        {
            SIMD_FLOAT TL, T1o, Tj, Ty, T1a, Tg, TG, T1n, TN, T5, TT, T19, Ta,
                TU, Tt;
            SIMD_FLOAT TK, Tv, Tw, TA, Tq, TB, Tf, Tc, Td, T1m, Th, Ti, T4, T1,
                T2;
            SIMD_FLOAT T9, T6, T7, Te, Tm, T1l, Tn, T3, T17, Tr, T18, T8, Ts,
                T1v, T1p;
            SIMD_FLOAT T1u, TM, T1k, Tx, TF;
            Tf  = Ci[WS(cs, 6)];
            Tc  = Ci[WS(cs, 10)];
            Td  = Ci[WS(cs, 2)];
            T1m = Cr[WS(cs, 6)];
            Th  = Cr[WS(cs, 10)];
            Ti  = Cr[WS(cs, 2)];
            T4  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            T9  = Ci[WS(cs, 4)];
            T6  = Cr[WS(cs, 12)];
            T7  = Cr[WS(cs, 4)];
            Tp  = Cr[WS(cs, 9)];
            TL  = Ci[WS(cs, 9)];
            Te  = Tc + Td;
            T1o = Tc - Td;
            Tm  = Cr[WS(cs, 1)];
            Tj  = Th - Ti;
            T1l = Th + Ti;
            Tn  = Cr[WS(cs, 7)];
            T3  = T1 - T2;
            T17 = SIMD_FMADD(KP2_000000000, T2, T1);
            Tr  = Ci[WS(cs, 1)];
            T18 = SIMD_FMADD(KP2_000000000, T7, T6);
            T8  = T6 - T7;
            Ts  = Ci[WS(cs, 7)];
            Ty  = Cr[WS(cs, 3)];
            T1a = Tf - Te;
            Tg  = SIMD_FMADD(KP2_000000000, Tf, Te);
            TG  = Ci[WS(cs, 3)];
            T1B = T1l + T1m;
            T1n = SIMD_FNMADD(KP2_000000000, T1m, T1l);
            To  = Tm + Tn;
            TN  = Tm - Tn;
            T5  = SIMD_FNMADD(KP1_732050807, T4, T3);
            TT  = SIMD_FMADD(KP1_732050807, T4, T3);
            T1A = T17 + T18;
            T19 = T17 - T18;
            Ta  = SIMD_FMADD(KP1_732050807, T9, T8);
            TU  = SIMD_FNMADD(KP1_732050807, T9, T8);
            Tt  = Tr + Ts;
            TK  = Tr - Ts;
            Tv  = Cr[WS(cs, 11)];
            Tw  = Cr[WS(cs, 5)];
            TA  = Ci[WS(cs, 11)];
            Tq  = SIMD_FNMADD(KP2_000000000, Tp, To);
            TB  = Ci[WS(cs, 5)];
            T1v = SIMD_FNMADD(KP1_732050807, T1o, T1n);
            T1p = SIMD_FMADD(KP1_732050807, T1o, T1n);
            T1b = SIMD_FNMADD(KP2_000000000, T1a, T19);
            T1i = SIMD_FMADD(KP2_000000000, T1a, T19);
            T1C = SIMD_FNMADD(KP2_000000000, T1B, T1A);
            T1u = T5 + Ta;
            Tb  = T5 - Ta;
            T1f = TK + TL;
            TM  = SIMD_FNMADD(KP2_000000000, TL, TK);
            TV  = TT - TU;
            T1k = TT + TU;
            TI  = Tv - Tw;
            Tx  = Tv + Tw;
            T11 = SIMD_FMADD(KP1_732050807, Tt, Tq);
            Tu  = SIMD_FNMADD(KP1_732050807, Tt, Tq);
            TF  = TB - TA;
            TC  = TA + TB;
            T1z = T1u - T1v;
            T1w = T1u + T1v;
            TZ  = SIMD_FNMADD(KP1_732050807, TN, TM);
            TO  = SIMD_FMADD(KP1_732050807, TN, TM);
            TW  = SIMD_FNMADD(KP1_732050807, Tj, Tg);
            Tk  = SIMD_FMADD(KP1_732050807, Tj, Tg);
            T1c = Ty + Tx;
            Tz  = SIMD_FNMADD(KP2_000000000, Ty, Tx);
            TH  = SIMD_FMADD(KP2_000000000, TG, TF);
            T1e = TG - TF;
            T1s = T1k - T1p;
            T1q = T1k + T1p;
        }
        TX             = TV - TW;
        T15            = TV + TW;
        TD             = SIMD_FMADD(KP1_732050807, TC, Tz);
        T12            = SIMD_FNMADD(KP1_732050807, TC, Tz);
        T1d            = T1c - (Tp + To);
        T1E            = T1B - (Tp + To) - T1c;
        TJ             = SIMD_FMADD(KP1_732050807, TI, TH);
        TY             = SIMD_FNMADD(KP1_732050807, TI, TH);
        T1D            = T1e - T1f;
        T1g            = T1e + T1f;
        Tl             = Tb - Tk;
        TR             = Tb + Tk;
        T1t            = T12 + T11;
        T13            = T11 - T12;
        T1y            = TD + Tu;
        TE             = Tu - TD;
        R0[WS(rs, 11)] = SIMD_FMADD(KP2_000000000, T1E, T1A);
        T10            = TY - TZ;
        T1r            = TY + TZ;
        TP             = TJ - TO;
        T1x            = TJ + TO;
        T1j            = T1d + T1g;
        T1h            = T1d - T1g;
        R0[WS(rs, 17)] = SIMD_FNMADD(KP2_000000000, T1D, T1C);
        R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, T1D, T1C);
        R0[WS(rs, 7)]  = T1s - T1t;
        R0[WS(rs, 19)] = T1t + T1s;
        R0[WS(rs, 3)]  = T1y + T1z;
        R0[WS(rs, 15)] = T1z - T1y;
        T16            = T13 + T10;
        T14            = T10 - T13;
        R0[WS(rs, 13)] = T1r + T1q;
        R0[WS(rs, 1)]  = T1q - T1r;
        TS             = TE + TP;
        TQ             = TE - TP;
        R0[WS(rs, 21)] = T1x + T1w;
        R0[WS(rs, 9)]  = T1w - T1x;
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_414213562, T1j, T1i);
        R0[WS(rs, 14)] = SIMD_FMADD(KP1_414213562, T1j, T1i);
        R0[WS(rs, 8)]  = SIMD_FMADD(KP1_414213562, T1h, T1b);
        R0[WS(rs, 20)] = SIMD_FNMADD(KP1_414213562, T1h, T1b);
        R0[WS(rs, 10)] = SIMD_FNMADD(KP707106781, T16, T15);
        R0[WS(rs, 22)] = SIMD_FMADD(KP707106781, T16, T15);
        R0[WS(rs, 4)]  = SIMD_FMADD(KP707106781, T14, TX);
        R0[WS(rs, 16)] = SIMD_FNMADD(KP707106781, T14, TX);
        R0[WS(rs, 18)] = SIMD_FNMADD(KP707106781, TS, TR);
        R0[WS(rs, 6)]  = SIMD_FMADD(KP707106781, TS, TR);
        R0[0]          = SIMD_FMADD(KP707106781, TQ, Tl);
        R0[WS(rs, 12)] = SIMD_FNMADD(KP707106781, TQ, Tl);
    }
}

template <>
struct r2cb_traits<24, 2>
{
    static constexpr long_t flops           = 145;
    static constexpr long_t operations      = 103;
    static constexpr long_t memory_accesses = 46;
    static constexpr long_t stack_vars      = 104;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 2 -name
 * r2cb -standalone */

/*
 * This function contains 103 FP additions, 42 FP multiplications,
 * (or, 61 additions, 0 multiplications, 42 fused multiply/add),
 * 104 stack variables, 4 constants, and 46 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T15, Tc, T7, T14, Tn, T1s, T1f, T1b, TP, TZ, T18, Td, T1k,
            TT, TL;
        SIMD_FLOAT TF, T1n, TA, TQ, Tv, T1r, T1v, T1i, Ti, TC, T1j, T13, T1p,
            TR, T1B;
        SIMD_FLOAT TB, TS, TG, T10, To, T1z, T1t, T1w, T1l, T16, T1a, T1c, T1u,
            T1x, T1C;
        SIMD_FLOAT T1q, T1m, T19, T17, TU, TM, T1o, T1y, T1A;
        {
            SIMD_FLOAT T1e, Tz, Te, Tw, T12, T1d, TY, T1h, Tr, TN, TO, Tu, TV,
                TK, Tf;
            SIMD_FLOAT Tg, TD, TH, TE, T8, T9, Ta, TW, Tx, Ty, Tq, T1, T2, Tt,
                T4;
            SIMD_FLOAT T5, Tj, Tb, Tk, TX, Tl, T3, Tp, TI, Ts, T6, TJ, Tm, T1g,
                Th;
            SIMD_FLOAT T11;
            T8  = Cr[WS(cs, 6)];
            T9  = Cr[WS(cs, 10)];
            Ta  = Cr[WS(cs, 2)];
            TW  = Ci[WS(cs, 6)];
            Tx  = Ci[WS(cs, 10)];
            Ty  = Ci[WS(cs, 2)];
            Tq  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            Tt  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Tj  = Ci[WS(cs, 9)];
            T15 = Cr[WS(cs, 9)];
            Tb  = T9 + Ta;
            T1e = T9 - Ta;
            Tk  = Ci[WS(cs, 1)];
            Tz  = Tx - Ty;
            TX  = Tx + Ty;
            Tl  = Ci[WS(cs, 7)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            Tp  = T1 - T2;
            TI  = Cr[WS(cs, 1)];
            Ts  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            TJ  = Cr[WS(cs, 7)];
            Te  = Ci[WS(cs, 3)];
            Tw  = SIMD_FNMADD(KP2_000000000, T8, Tb);
            Tc  = T8 + Tb;
            T12 = Cr[WS(cs, 3)];
            T1d = SIMD_FMADD(KP2_000000000, TW, TX);
            TY  = TW - TX;
            Tm  = Tk - Tl;
            T1h = Tk + Tl;
            Tr  = SIMD_FMADD(KP1_732050807, Tq, Tp);
            TN  = SIMD_FNMADD(KP1_732050807, Tq, Tp);
            TO  = SIMD_FMADD(KP1_732050807, Tt, Ts);
            Tu  = SIMD_FNMADD(KP1_732050807, Tt, Ts);
            T7  = T3 + T6;
            TV  = T3 - T6;
            TK  = TI - TJ;
            T14 = TI + TJ;
            Tf  = Ci[WS(cs, 5)];
            Tg  = Ci[WS(cs, 11)];
            TD  = Cr[WS(cs, 11)];
            TH  = SIMD_FNMADD(KP2_000000000, Tj, Tm);
            Tn  = Tj + Tm;
            TE  = Cr[WS(cs, 5)];
            T1s = SIMD_FNMADD(KP1_732050807, T1e, T1d);
            T1f = SIMD_FMADD(KP1_732050807, T1e, T1d);
            T1b = TN - TO;
            TP  = TN + TO;
            TZ  = SIMD_FMADD(KP2_000000000, TY, TV);
            T18 = SIMD_FNMADD(KP2_000000000, TY, TV);
            Td  = SIMD_FNMADD(KP2_000000000, Tc, T7);
            T1g = SIMD_FNMADD(KP2_000000000, T15, T14);
            T1k = Tf + Tg;
            Th  = Tf - Tg;
            TT  = SIMD_FMADD(KP1_732050807, TK, TH);
            TL  = SIMD_FNMADD(KP1_732050807, TK, TH);
            T11 = TD + TE;
            TF  = TD - TE;
            T1n = T1b + T1f;
            TA  = SIMD_FMADD(KP1_732050807, Tz, Tw);
            TQ  = SIMD_FNMADD(KP1_732050807, Tz, Tw);
            Tv  = Tr + Tu;
            T1r = Tr - Tu;
            T1v = SIMD_FMADD(KP1_732050807, T1h, T1g);
            T1i = SIMD_FNMADD(KP1_732050807, T1h, T1g);
            Ti  = Te - Th;
            TC  = SIMD_FMADD(KP2_000000000, Te, Th);
            T1j = SIMD_FNMADD(KP2_000000000, T12, T11);
            T13 = T11 + T12;
        }
        T1p            = TP - TQ;
        TR             = TP + TQ;
        T1B            = Tv - TA;
        TB             = Tv + TA;
        TS             = SIMD_FMADD(KP1_732050807, TF, TC);
        TG             = SIMD_FNMADD(KP1_732050807, TF, TC);
        T10            = Ti + Tn;
        To             = Ti - Tn;
        T1z            = T1r + T1s;
        T1t            = T1r - T1s;
        T1w            = SIMD_FNMADD(KP1_732050807, T1k, T1j);
        T1l            = SIMD_FMADD(KP1_732050807, T1k, T1j);
        T16            = T13 - (T14 + T15);
        T1a            = Tc - (T14 + T15) - T13;
        TU             = TS + TT;
        T1c            = TS - TT;
        T1u            = TG - TL;
        TM             = TG + TL;
        R0[WS(rs, 4)]  = SIMD_FMADD(KP2_000000000, To, Td);
        R0[WS(rs, 16)] = SIMD_FNMADD(KP2_000000000, To, Td);
        T1x            = T1v - T1w;
        T1C            = T1w + T1v;
        T1q            = T1l + T1i;
        T1m            = T1i - T1l;
        T19            = T16 - T10;
        T17            = T10 + T16;
        R0[WS(rs, 10)] = SIMD_FMADD(KP2_000000000, T1a, T7);
        R0[WS(rs, 20)] = TR + TU;
        R0[WS(rs, 8)]  = TR - TU;
        R0[WS(rs, 12)] = TB + TM;
        R0[0]          = TB - TM;
        T1y            = T1u - T1x;
        T1A            = T1u + T1x;
        R0[WS(rs, 18)] = T1B + T1C;
        R0[WS(rs, 6)]  = T1B - T1C;
        R0[WS(rs, 2)]  = T1p + T1q;
        R0[WS(rs, 14)] = T1p - T1q;
        R0[WS(rs, 11)] = SIMD_FMADD(KP707106781, T1c, T1b) -
                         (SIMD_FMADD(KP707106781, T1m, T1f));
        T1o            = T1c + T1m;
        R0[WS(rs, 19)] = SIMD_FNMADD(KP1_414213562, T19, T18);
        R0[WS(rs, 7)]  = SIMD_FMADD(KP1_414213562, T19, T18);
        R0[WS(rs, 13)] = SIMD_FMADD(KP1_414213562, T17, TZ);
        R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_414213562, T17, TZ);
        R0[WS(rs, 9)]  = SIMD_FNMADD(KP707106781, T1A, T1z);
        R0[WS(rs, 21)] = SIMD_FMADD(KP707106781, T1A, T1z);
        R0[WS(rs, 3)]  = SIMD_FMADD(KP707106781, T1y, T1t);
        R0[WS(rs, 15)] = SIMD_FNMADD(KP707106781, T1y, T1t);
        R0[WS(rs, 5)]  = SIMD_FMADD(KP707106781, T1o, T1n);
        R0[WS(rs, 17)] = SIMD_FNMADD(KP707106781, T1o, T1n);
    }
}

template <>
struct r2cb_traits<24, 3>
{
    static constexpr long_t flops           = 146;
    static constexpr long_t operations      = 103;
    static constexpr long_t memory_accesses = 45;
    static constexpr long_t stack_vars      = 101;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 3 -name
 * r2cb -standalone */

/*
 * This function contains 103 FP additions, 43 FP multiplications,
 * (or, 60 additions, 0 multiplications, 43 fused multiply/add),
 * 101 stack variables, 4 constants, and 45 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tj, TT, To, TH, TS, Tm, TC, T1w, T1n, TR, T1v, T1e, T1k, TI,
            Td;
        SIMD_FLOAT TA, Tx, TX, T1i, T18, T14, Tr, T1y, T1g, TU, T1f, T11, Ti,
            T13, TW;
        SIMD_FLOAT Ts, T1a, TV, T1h, T15, Tn, TK, T1s, T1o, T1b, TY, Ty, TJ,
            T1q, T1j;
        SIMD_FLOAT T19, T1x, T1r, T1t, T1z, T1p, T1u, T12, Tz, TB;
        {
            SIMD_FLOAT Tw, T1m, Te, T1l, Tc, T10, T1c, TN, T1d, TQ, T7, Tv, T17,
                Tf, Tg;
            SIMD_FLOAT Tp, T16, Tq, T8, T9, Ta, TD, TE, TF, TM, T1, T2, TP, T4,
                T5;
            SIMD_FLOAT Tb, Tk, TG, Tl, T3, TL, Tt, TO, T6, Tu, TZ, Th;
            T8  = Ci[WS(cs, 6)];
            T9  = Ci[WS(cs, 10)];
            Ta  = Ci[WS(cs, 2)];
            TD  = Cr[WS(cs, 6)];
            TE  = Cr[WS(cs, 10)];
            TF  = Cr[WS(cs, 2)];
            TM  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            TP  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Tj  = Cr[WS(cs, 9)];
            Tw  = Ci[WS(cs, 9)];
            Tb  = T9 + Ta;
            TT  = T9 - Ta;
            Tk  = Cr[WS(cs, 1)];
            T1m = TE - TF;
            TG  = TE + TF;
            Tl  = Cr[WS(cs, 7)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            TL  = T1 - T2;
            Tt  = Ci[WS(cs, 7)];
            TO  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tu  = Ci[WS(cs, 1)];
            Te  = Cr[WS(cs, 3)];
            T1l = SIMD_FMADD(KP2_000000000, T8, Tb);
            Tc  = T8 - Tb;
            To  = Ci[WS(cs, 3)];
            TH  = TD + TG;
            TS  = SIMD_FNMADD(KP2_000000000, TD, TG);
            Tm  = Tk + Tl;
            T10 = Tk - Tl;
            T1c = SIMD_FMADD(KP1_732050807, TM, TL);
            TN  = SIMD_FNMADD(KP1_732050807, TM, TL);
            T1d = SIMD_FNMADD(KP1_732050807, TP, TO);
            TQ  = SIMD_FMADD(KP1_732050807, TP, TO);
            T7  = T3 - T6;
            TC  = T3 + T6;
            Tv  = Tt - Tu;
            T17 = Tt + Tu;
            Tf  = Cr[WS(cs, 11)];
            Tg  = Cr[WS(cs, 5)];
            Tp  = Ci[WS(cs, 5)];
            T16 = SIMD_FNMADD(KP2_000000000, Tj, Tm);
            Tq  = Ci[WS(cs, 11)];
            T1w = SIMD_FMADD(KP1_732050807, T1m, T1l);
            T1n = SIMD_FNMADD(KP1_732050807, T1m, T1l);
            TR  = TN + TQ;
            T1v = TN - TQ;
            T1e = T1c + T1d;
            T1k = T1c - T1d;
            TI  = SIMD_FNMADD(KP2_000000000, TH, TC);
            Td  = SIMD_FNMADD(KP2_000000000, Tc, T7);
            TA  = SIMD_FMADD(KP2_000000000, Tc, T7);
            TZ  = SIMD_FMADD(KP2_000000000, Tw, Tv);
            Tx  = Tv - Tw;
            TX  = Tf - Tg;
            Th  = Tf + Tg;
            T1i = SIMD_FMADD(KP1_732050807, T17, T16);
            T18 = SIMD_FNMADD(KP1_732050807, T17, T16);
            T14 = Tq + Tp;
            Tr  = Tp - Tq;
            T1y = T1v + T1w;
            T1g = T1e - (SIMD_FMADD(KP1_732050807, TT, TS));
            TU  = SIMD_FNMADD(KP1_732050807, TT, TS);
            T1f = SIMD_FMADD(KP1_732050807, T10, TZ);
            T11 = SIMD_FNMADD(KP1_732050807, T10, TZ);
            Ti  = Te + Th;
            T13 = SIMD_FNMADD(KP2_000000000, Te, Th);
        }
        TW            = SIMD_FMADD(KP2_000000000, To, Tr);
        Ts            = To - Tr;
        T1a           = TR - TU;
        TV            = TR + TU;
        T1h           = SIMD_FNMADD(KP1_732050807, T14, T13);
        T15           = SIMD_FMADD(KP1_732050807, T14, T13);
        Tn            = Ti - (Tj + Tm);
        TK            = TH - (Tj + Tm) - Ti;
        T1s           = T1k + T1n;
        T1o           = T1k - T1n;
        T1b           = SIMD_FNMADD(KP1_732050807, TX, TW);
        TY            = SIMD_FMADD(KP1_732050807, TX, TW);
        Ty            = Ts - Tx;
        TJ            = Ts + Tx;
        T1q           = T1i - T1h;
        T1j           = T1h + T1i;
        T19           = T15 + T18;
        T1x           = T18 - T15;
        R0[WS(rs, 9)] = SIMD_FMADD(KP2_000000000, TK, TC);
        T1p           = T1b + T1f;
        R0[WS(rs, 11)] =
            T1b + T1e - (T1f - (SIMD_FMADD(KP1_732050807, TT, TS)));
        T1u            = TY + T11;
        T12            = TY - T11;
        Tz             = Tn - Ty;
        TB             = Tn + Ty;
        R0[WS(rs, 15)] = SIMD_FNMADD(KP2_000000000, TJ, TI);
        R0[WS(rs, 3)]  = SIMD_FMADD(KP2_000000000, TJ, TI);
        R0[WS(rs, 17)] = T1j + T1g;
        R0[WS(rs, 5)]  = T1g - T1j;
        R0[WS(rs, 1)]  = T19 + T1a;
        R0[WS(rs, 13)] = T1a - T19;
        T1r            = T1p - T1q;
        T1t            = T1q + T1p;
        R0[WS(rs, 19)] = T12 + TV;
        R0[WS(rs, 7)]  = TV - T12;
        R0[WS(rs, 10)] = SIMD_FMADD(KP707106781, T1u, T1v) -
                         (SIMD_FMADD(KP707106781, T1x, T1w));
        T1z            = T1x + T1u;
        R0[0]          = SIMD_FNMADD(KP1_414213562, TB, TA);
        R0[WS(rs, 12)] = SIMD_FMADD(KP1_414213562, TB, TA);
        R0[WS(rs, 6)]  = SIMD_FMADD(KP1_414213562, Tz, Td);
        R0[WS(rs, 18)] = SIMD_FNMADD(KP1_414213562, Tz, Td);
        R0[WS(rs, 8)]  = SIMD_FNMADD(KP707106781, T1t, T1s);
        R0[WS(rs, 20)] = SIMD_FMADD(KP707106781, T1t, T1s);
        R0[WS(rs, 14)] = SIMD_FNMADD(KP707106781, T1r, T1o);
        R0[WS(rs, 2)]  = SIMD_FMADD(KP707106781, T1r, T1o);
        R0[WS(rs, 16)] = SIMD_FNMADD(KP707106781, T1z, T1y);
        R0[WS(rs, 4)]  = SIMD_FMADD(KP707106781, T1z, T1y);
    }
}

template <>
struct r2cb_traits<24, 4>
{
    static constexpr long_t flops           = 144;
    static constexpr long_t operations      = 102;
    static constexpr long_t memory_accesses = 44;
    static constexpr long_t stack_vars      = 101;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 4 -name
 * r2cb -standalone */

/*
 * This function contains 102 FP additions, 42 FP multiplications,
 * (or, 60 additions, 0 multiplications, 42 fused multiply/add),
 * 101 stack variables, 4 constants, and 44 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Td, Tx, Tu, Tc, TV, TS, T7, Tg, T1t, T1d, Tt, T1s, TM, T1a,
            TW;
        SIMD_FLOAT T18, T13, T1h, TC, Ty, T1e, TN, TI, TQ, T1l, T1r, Tl, Tz,
            T1g, T10;
        SIMD_FLOAT TO, T1o, T1u, T1y, TD, TP, Tm, TX, T14, T19, T1i, T1q, T1f,
            T1w, T15;
        SIMD_FLOAT T16, T1v, T1p, T1m, TR, TJ, T17, T1x, T1z, T1n;
        {
            SIMD_FLOAT T12, T1c, Th, TY, T1b, Tp, TK, Ti, Ts, TL, T1k, T11, TH,
                Tj, TA;
            SIMD_FLOAT TB, T8, T9, Ta, TT, Tv, Tw, To, T1, T2, Tr, T4, T5, Tb,
                TU;
            SIMD_FLOAT T3, Tn, Te, Tq, T6, Tf, TF, TG, TE, T1j, Tk, TZ;
            T8  = Cr[WS(cs, 6)];
            T9  = Cr[WS(cs, 10)];
            Ta  = Cr[WS(cs, 2)];
            TT  = Ci[WS(cs, 6)];
            Tv  = Ci[WS(cs, 10)];
            Tw  = Ci[WS(cs, 2)];
            To  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            Tr  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Td  = Cr[WS(cs, 9)];
            T12 = Ci[WS(cs, 9)];
            Tb  = T9 + Ta;
            T1c = T9 - Ta;
            Th  = Cr[WS(cs, 3)];
            Tx  = Tv - Tw;
            TU  = Tv + Tw;
            TY  = Ci[WS(cs, 3)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            Tn  = T1 - T2;
            Te  = Cr[WS(cs, 1)];
            Tq  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tf  = Cr[WS(cs, 7)];
            TF  = Ci[WS(cs, 1)];
            Tu  = SIMD_FNMADD(KP2_000000000, T8, Tb);
            Tc  = T8 + Tb;
            TG  = Ci[WS(cs, 7)];
            T1b = SIMD_FMADD(KP2_000000000, TT, TU);
            TV  = TT - TU;
            Tp  = SIMD_FMADD(KP1_732050807, To, Tn);
            TK  = SIMD_FNMADD(KP1_732050807, To, Tn);
            Ti  = Cr[WS(cs, 11)];
            Ts  = SIMD_FNMADD(KP1_732050807, Tr, Tq);
            TL  = SIMD_FMADD(KP1_732050807, Tr, Tq);
            TS  = T3 - T6;
            T7  = T3 + T6;
            T1k = Te - Tf;
            Tg  = Te + Tf;
            T11 = TG - TF;
            TH  = TF + TG;
            Tj  = Cr[WS(cs, 5)];
            TA  = Ci[WS(cs, 11)];
            TB  = Ci[WS(cs, 5)];
            T1t = SIMD_FNMADD(KP1_732050807, T1c, T1b);
            T1d = SIMD_FMADD(KP1_732050807, T1c, T1b);
            Tt  = Tp + Ts;
            T1s = Tp - Ts;
            TM  = TK + TL;
            T1a = TK - TL;
            TW  = SIMD_FNMADD(KP2_000000000, TV, TS);
            T18 = SIMD_FNMADD(KP2_000000000, Tc, T7);
            TE  = SIMD_FNMADD(KP2_000000000, Td, Tg);
            T13 = T11 - T12;
            T1j = SIMD_FMADD(KP2_000000000, T12, T11);
            T1h = Ti - Tj;
            Tk  = Ti + Tj;
            TZ  = TB - TA;
            TC  = TA + TB;
            Ty  = Tt - (SIMD_FMADD(KP1_732050807, Tx, Tu));
            T1e = T1a + T1d;
            TN  = SIMD_FNMADD(KP1_732050807, Tx, Tu);
            TI  = SIMD_FMADD(KP1_732050807, TH, TE);
            TQ  = SIMD_FNMADD(KP1_732050807, TH, TE);
            T1l = SIMD_FNMADD(KP1_732050807, T1k, T1j);
            T1r = SIMD_FMADD(KP1_732050807, T1k, T1j);
            Tl  = Th + Tk;
            Tz  = SIMD_FNMADD(KP2_000000000, Th, Tk);
            T1g = SIMD_FMADD(KP2_000000000, TY, TZ);
            T10 = TY - TZ;
        }
        TO             = TM - TN;
        T1o            = TM + TN;
        T1u            = T1s - T1t;
        T1y            = T1s + T1t;
        TD             = SIMD_FNMADD(KP1_732050807, TC, Tz);
        TP             = SIMD_FMADD(KP1_732050807, TC, Tz);
        Tm             = Tc - (Td + Tg) - Tl;
        TX             = Tl - (Td + Tg);
        T14            = T10 - T13;
        T19            = T10 + T13;
        T1i            = SIMD_FMADD(KP1_732050807, T1h, T1g);
        T1q            = SIMD_FNMADD(KP1_732050807, T1h, T1g);
        T1f            = TQ - TP;
        TR             = TP + TQ;
        TJ             = TD + TI;
        T1w            = TI - TD;
        R0[WS(rs, 8)]  = SIMD_FMADD(KP2_000000000, Tm, T7);
        R0[WS(rs, 2)]  = SIMD_FMADD(KP2_000000000, T19, T18);
        R0[WS(rs, 14)] = SIMD_FNMADD(KP2_000000000, T19, T18);
        T15            = TX - T14;
        T16            = TX + T14;
        T1v            = T1q + T1r;
        R0[WS(rs, 10)] = Tt + T1q - (T1r - (SIMD_FMADD(KP1_732050807, Tx, Tu)));
        T1p            = T1i - T1l;
        T1m            = T1i + T1l;
        R0[WS(rs, 12)] = TO - TR;
        R0[0]          = TO + TR;
        R0[WS(rs, 4)]  = Ty - TJ;
        R0[WS(rs, 16)] = Ty + TJ;
        R0[WS(rs, 5)]  = SIMD_FMADD(KP1_414213562, T15, TW);
        R0[WS(rs, 17)] = SIMD_FNMADD(KP1_414213562, T15, TW);
        T17            = SIMD_FMADD(KP707106781, T16, TV);
        T1x            = T1v - T1w;
        T1z            = T1w + T1v;
        R0[WS(rs, 6)]  = T1o - T1p;
        R0[WS(rs, 18)] = T1o + T1p;
        R0[WS(rs, 9)]  = SIMD_FMADD(KP707106781, T1m, T1a) -
                        (SIMD_FMADD(KP707106781, T1f, T1d));
        T1n            = T1f + T1m;
        R0[WS(rs, 11)] = SIMD_FMADD(KP2_000000000, T17, TS);
        R0[WS(rs, 7)]  = SIMD_FNMADD(KP707106781, T1z, T1y);
        R0[WS(rs, 19)] = SIMD_FMADD(KP707106781, T1z, T1y);
        R0[WS(rs, 1)]  = SIMD_FMADD(KP707106781, T1x, T1u);
        R0[WS(rs, 13)] = SIMD_FNMADD(KP707106781, T1x, T1u);
        R0[WS(rs, 3)]  = SIMD_FMADD(KP707106781, T1n, T1e);
        R0[WS(rs, 15)] = SIMD_FNMADD(KP707106781, T1n, T1e);
    }
}

template <>
struct r2cb_traits<24, 5>
{
    static constexpr long_t flops           = 145;
    static constexpr long_t operations      = 102;
    static constexpr long_t memory_accesses = 43;
    static constexpr long_t stack_vars      = 98;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 5 -name
 * r2cb -standalone */

/*
 * This function contains 102 FP additions, 43 FP multiplications,
 * (or, 59 additions, 0 multiplications, 43 fused multiply/add),
 * 98 stack variables, 4 constants, and 43 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1q, Tm, Tw, Tc, T1p, T1k, T1h, T7, TQ, T10, T1u, T1o, TI,
            T18, T1t;
        SIMD_FLOAT T1l, Td, TZ, Ti, TP, Ts, Tl, TT, Tv, TX, T1r, T1v, TN, T1c,
            T11;
        SIMD_FLOAT TR, T19, T1n, TW, Tn, Tx, TS, T1f, TO, T14, T1d, TY, T1m, Ty,
            T1a;
        SIMD_FLOAT TU, T1e, T12, T1s, Tz, TA, T1b, T1w, TV, TB, T1g, T13, T15;
        {
            SIMD_FLOAT Th, To, TM, TJ, TE, T16, Tj, TH, T17, Tg, Tr, Tk, Tt, Tu,
                T8;
            SIMD_FLOAT T9, Ta, T1j, TK, TL, TD, T1, T2, TG, T4, T5, Tb, T1i, T3,
                TC;
            SIMD_FLOAT Te, TF, T6, Tf, Tp, Tq;
            T8  = Ci[WS(cs, 6)];
            T9  = Ci[WS(cs, 10)];
            Ta  = Ci[WS(cs, 2)];
            T1j = Cr[WS(cs, 6)];
            TK  = Cr[WS(cs, 10)];
            TL  = Cr[WS(cs, 2)];
            TD  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            TG  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Th  = Cr[WS(cs, 3)];
            To  = Ci[WS(cs, 3)];
            Tb  = T9 + Ta;
            T1q = T9 - Ta;
            Tm  = Cr[WS(cs, 9)];
            TM  = TK - TL;
            T1i = TK + TL;
            Tw  = Ci[WS(cs, 9)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            TC  = T1 - T2;
            Te  = Cr[WS(cs, 11)];
            TF  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tf  = Cr[WS(cs, 5)];
            Tp  = Ci[WS(cs, 5)];
            TJ  = SIMD_FMADD(KP2_000000000, T8, Tb);
            Tc  = T8 - Tb;
            Tq  = Ci[WS(cs, 11)];
            T1p = SIMD_FNMADD(KP2_000000000, T1j, T1i);
            T1k = T1i + T1j;
            TE  = SIMD_FMADD(KP1_732050807, TD, TC);
            T16 = SIMD_FNMADD(KP1_732050807, TD, TC);
            Tj  = Cr[WS(cs, 1)];
            TH  = SIMD_FNMADD(KP1_732050807, TG, TF);
            T17 = SIMD_FMADD(KP1_732050807, TG, TF);
            T1h = T3 + T6;
            T7  = T3 - T6;
            TQ  = Te - Tf;
            Tg  = Te + Tf;
            T10 = Tp + Tq;
            Tr  = Tp - Tq;
            Tk  = Cr[WS(cs, 7)];
            Tt  = Ci[WS(cs, 7)];
            Tu  = Ci[WS(cs, 1)];
            T1u = SIMD_FNMADD(KP1_732050807, T1q, T1p);
            T1o = TE + TH;
            TI  = TE - TH;
            T18 = T16 - T17;
            T1t = T16 + T17;
            T1l = SIMD_FNMADD(KP2_000000000, T1k, T1h);
            Td  = SIMD_FNMADD(KP2_000000000, Tc, T7);
            TZ  = SIMD_FNMADD(KP2_000000000, Th, Tg);
            Ti  = Tg + Th;
            TP  = SIMD_FMADD(KP2_000000000, To, Tr);
            Ts  = To - Tr;
            Tl  = Tj + Tk;
            TT  = Tj - Tk;
            Tv  = Tt - Tu;
            TX  = Tu + Tt;
            T1r = T1o - (SIMD_FMADD(KP1_732050807, T1q, T1p));
            T1v = T1t + T1u;
            TN  = SIMD_FNMADD(KP1_732050807, TM, TJ);
            T1c = SIMD_FMADD(KP1_732050807, TM, TJ);
            T11 = SIMD_FNMADD(KP1_732050807, T10, TZ);
        }
        TR             = SIMD_FNMADD(KP1_732050807, TQ, TP);
        T19            = SIMD_FMADD(KP1_732050807, TQ, TP);
        T1n            = T1k - (Tl + Tm) - Ti;
        TW             = SIMD_FNMADD(KP2_000000000, Tm, Tl);
        Tn             = Ti - (Tl + Tm);
        Tx             = Tv - Tw;
        TS             = SIMD_FMADD(KP2_000000000, Tw, Tv);
        T1f            = T18 + T1c;
        TO             = TI - TN;
        T14            = TI + TN;
        R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, T1n, T1h);
        T1d            = SIMD_FNMADD(KP1_732050807, TX, TW);
        TY             = SIMD_FMADD(KP1_732050807, TX, TW);
        T1m            = Ts + Tx;
        Ty             = Ts - Tx;
        T1a            = SIMD_FNMADD(KP1_732050807, TT, TS);
        TU             = SIMD_FMADD(KP1_732050807, TT, TS);
        T1e            = T1d - (SIMD_FMADD(KP1_732050807, T10, TZ));
        R0[WS(rs, 11)] = T1t - T1u - T1d - (SIMD_FMADD(KP1_732050807, T10, TZ));
        T12            = TY - T11;
        T1s            = T11 + TY;
        R0[WS(rs, 13)] = SIMD_FNMADD(KP2_000000000, T1m, T1l);
        R0[WS(rs, 1)]  = SIMD_FMADD(KP2_000000000, T1m, T1l);
        Tz             = Tn - Ty;
        TA             = Ty + Tn;
        T1b            = T19 + T1a;
        T1w            = T19 - T1a;
        TV             = TR + TU;
        R0[WS(rs, 9)] = T1o + TR - (TU - (SIMD_FMADD(KP1_732050807, T1q, T1p)));
        R0[WS(rs, 15)] = T1s + T1r;
        R0[WS(rs, 3)]  = T1r - T1s;
        R0[WS(rs, 4)]  = SIMD_FMADD(KP1_414213562, Tz, Td);
        R0[WS(rs, 16)] = SIMD_FNMADD(KP1_414213562, Tz, Td);
        TB             = SIMD_FMADD(KP707106781, TA, Tc);
        R0[WS(rs, 8)]  = SIMD_FMADD(KP707106781, T1b, T18) -
                        (SIMD_FMADD(KP707106781, T1e, T1c));
        T1g            = T1b + T1e;
        R0[WS(rs, 17)] = T1w + T1v;
        R0[WS(rs, 5)]  = T1v - T1w;
        T13            = TV - T12;
        T15            = TV + T12;
        R0[WS(rs, 10)] = SIMD_FMADD(KP2_000000000, TB, T7);
        R0[WS(rs, 2)]  = SIMD_FMADD(KP707106781, T1g, T1f);
        R0[WS(rs, 14)] = SIMD_FNMADD(KP707106781, T1g, T1f);
        R0[WS(rs, 6)]  = SIMD_FNMADD(KP707106781, T15, T14);
        R0[WS(rs, 18)] = SIMD_FMADD(KP707106781, T15, T14);
        R0[0]          = SIMD_FMADD(KP707106781, T13, TO);
        R0[WS(rs, 12)] = SIMD_FNMADD(KP707106781, T13, TO);
    }
}

template <>
struct r2cb_traits<24, 6>
{
    static constexpr long_t flops           = 144;
    static constexpr long_t operations      = 101;
    static constexpr long_t memory_accesses = 42;
    static constexpr long_t stack_vars      = 96;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 6 -name
 * r2cb -standalone */

/*
 * This function contains 101 FP additions, 43 FP multiplications,
 * (or, 58 additions, 0 multiplications, 43 fused multiply/add),
 * 96 stack variables, 4 constants, and 42 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tm, TM, Tz, TJ, Tc, TY, TV, T7, TI, TN, Tv, T17, T1p, TQ, TZ;
        SIMD_FLOAT Td, Ti, TH, T10, Tl, TB, Ty, T1h, T1l, TR, T1a, T1r, T1n,
            T1f, TS;
        SIMD_FLOAT T1g, Tn, T16, T11, TA, T1t, T1b, To, T12, T1o, T1i, TC, TT,
            T14, T13;
        SIMD_FLOAT T1s, T1m, T1j, TU, T1q, T1c, T15, T1u, T1k;
        {
            SIMD_FLOAT Te, TG, T19, T18, Tr, TO, Tj, Tu, TP, Th, T1e, TF, Tk,
                Tw, Tx;
            SIMD_FLOAT T8, T9, Ta, TW, TK, TL, Tq, T1, T2, Tt, T4, T5, Tb, TX,
                T3;
            SIMD_FLOAT Tp, Tf, Ts, T6, Tg, TD, TE, T1d;
            T8  = Cr[WS(cs, 6)];
            T9  = Cr[WS(cs, 10)];
            Ta  = Cr[WS(cs, 2)];
            TW  = Ci[WS(cs, 6)];
            TK  = Ci[WS(cs, 10)];
            TL  = Ci[WS(cs, 2)];
            Tq  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            Tt  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Te  = Ci[WS(cs, 3)];
            TG  = Cr[WS(cs, 3)];
            Tb  = T9 + Ta;
            T19 = T9 - Ta;
            Tm  = Ci[WS(cs, 9)];
            TM  = TK - TL;
            TX  = TK + TL;
            Tz  = Cr[WS(cs, 9)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            Tp  = T1 - T2;
            Tf  = Ci[WS(cs, 5)];
            Ts  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tg  = Ci[WS(cs, 11)];
            TD  = Cr[WS(cs, 11)];
            TJ  = SIMD_FNMADD(KP2_000000000, T8, Tb);
            Tc  = T8 + Tb;
            TE  = Cr[WS(cs, 5)];
            T18 = SIMD_FMADD(KP2_000000000, TW, TX);
            TY  = TW - TX;
            Tr  = SIMD_FNMADD(KP1_732050807, Tq, Tp);
            TO  = SIMD_FMADD(KP1_732050807, Tq, Tp);
            Tj  = Ci[WS(cs, 7)];
            Tu  = SIMD_FMADD(KP1_732050807, Tt, Ts);
            TP  = SIMD_FNMADD(KP1_732050807, Tt, Ts);
            TV  = T3 - T6;
            T7  = T3 + T6;
            TI  = Tg + Tf;
            Th  = Tf - Tg;
            T1e = TD - TE;
            TF  = TD + TE;
            Tk  = Ci[WS(cs, 1)];
            Tw  = Cr[WS(cs, 1)];
            Tx  = Cr[WS(cs, 7)];
            TN  = SIMD_FNMADD(KP1_732050807, TM, TJ);
            Tv  = Tr + Tu;
            T17 = Tr - Tu;
            T1p = TO - TP;
            TQ  = TO + TP;
            TZ  = SIMD_FNMADD(KP2_000000000, TY, TV);
            Td  = SIMD_FNMADD(KP2_000000000, Tc, T7);
            T1d = SIMD_FMADD(KP2_000000000, Te, Th);
            Ti  = Te - Th;
            TH  = SIMD_FNMADD(KP2_000000000, TG, TF);
            T10 = TG + TF;
            Tl  = Tj - Tk;
            TB  = Tj + Tk;
            Ty  = Tw + Tx;
            T1h = Tw - Tx;
            T1l = Tv + TN;
            TR  = TQ - (SIMD_FMADD(KP1_732050807, TM, TJ));
            T1a = SIMD_FMADD(KP1_732050807, T19, T18);
            T1r = SIMD_FNMADD(KP1_732050807, T19, T18);
            T1n = SIMD_FNMADD(KP1_732050807, T1e, T1d);
            T1f = SIMD_FMADD(KP1_732050807, T1e, T1d);
            TS  = SIMD_FNMADD(KP1_732050807, TI, TH);
        }
        T1g            = SIMD_FMADD(KP2_000000000, Tm, Tl);
        Tn             = Tl - Tm;
        T16            = Tc - (Tz + Ty) - T10;
        T11            = T10 - (Tz + Ty);
        TA             = SIMD_FNMADD(KP2_000000000, Tz, Ty);
        T1t            = T1p + T1r;
        T1b            = T17 + T1a;
        To             = Ti + Tn;
        T12            = Ti - Tn;
        T1o            = SIMD_FMADD(KP1_732050807, T1h, T1g);
        T1i            = SIMD_FNMADD(KP1_732050807, T1h, T1g);
        R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, T16, T7);
        TC             = SIMD_FNMADD(KP1_732050807, TB, TA);
        TT             = SIMD_FMADD(KP1_732050807, TB, TA);
        R0[0]          = SIMD_FMADD(KP2_000000000, To, Td);
        R0[WS(rs, 12)] = SIMD_FNMADD(KP2_000000000, To, Td);
        T14            = T12 + T11;
        T13            = T11 - T12;
        T1s            = T1n + T1o;
        R0[WS(rs, 8)]  = TQ + T1n - (T1o - (SIMD_FMADD(KP1_732050807, TM, TJ)));
        T1m            = T1f - T1i;
        T1j            = T1f + T1i;
        TU             = TS + TT;
        T1q            = TT - TS;
        T1c            = TC - (SIMD_FMADD(KP1_732050807, TI, TH));
        R0[WS(rs, 10)] = Tv - TC - (SIMD_FMADD(KP1_732050807, TI, TH)) - TN;
        R0[WS(rs, 3)]  = SIMD_FMADD(KP1_414213562, T13, TZ);
        R0[WS(rs, 15)] = SIMD_FNMADD(KP1_414213562, T13, TZ);
        T15            = SIMD_FMADD(KP707106781, T14, TY);
        R0[WS(rs, 16)] = T1l + T1m;
        R0[WS(rs, 4)]  = T1l - T1m;
        R0[WS(rs, 11)] = SIMD_FMADD(KP707106781, T1q, T1p) -
                         (SIMD_FMADD(KP707106781, T1s, T1r));
        T1u            = T1q + T1s;
        R0[WS(rs, 2)]  = TR - TU;
        R0[WS(rs, 14)] = TR + TU;
        R0[WS(rs, 7)]  = SIMD_FMADD(KP707106781, T1j, T17) -
                        (SIMD_FMADD(KP707106781, T1c, T1a));
        T1k            = T1c + T1j;
        R0[WS(rs, 9)]  = SIMD_FMADD(KP2_000000000, T15, TV);
        R0[WS(rs, 17)] = SIMD_FMADD(KP707106781, T1u, T1t);
        R0[WS(rs, 5)]  = SIMD_FNMADD(KP707106781, T1u, T1t);
        R0[WS(rs, 1)]  = SIMD_FMADD(KP707106781, T1k, T1b);
        R0[WS(rs, 13)] = SIMD_FNMADD(KP707106781, T1k, T1b);
    }
}

template <>
struct r2cb_traits<24, 7>
{
    static constexpr long_t flops           = 141;
    static constexpr long_t operations      = 100;
    static constexpr long_t memory_accesses = 41;
    static constexpr long_t stack_vars      = 95;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 7 -name
 * r2cb -standalone */

/*
 * This function contains 100 FP additions, 41 FP multiplications,
 * (or, 59 additions, 0 multiplications, 41 fused multiply/add),
 * 95 stack variables, 4 constants, and 41 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 7>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tp, T1j, T15, T1r, T1i, T14, T1q, To, T1n, T16, TS, T1f, T1m,
            Tb, TH;
        SIMD_FLOAT T1a, TC, Tk, TW, T1k, T1o, TT, Tu, T17, Tz, TY, TN, T19, TG,
            T10;
        SIMD_FLOAT Tl, T1t, T18, TD, TU, T1s, T1b, TI, TX, TV, T1l, T1d, T1c,
            TZ, T1p;
        SIMD_FLOAT TO, T1e, T11, TP;
        {
            SIMD_FLOAT TK, Ty, Tj, TF, Tg, Tv, TQ, T5, Ta, TR, TM, Tw, TJ, Tt,
                TA;
            SIMD_FLOAT TB, Tf, Tc, Td, T1h, Th, Ti, T4, T1, T2, T9, T6, T7, Te,
                T1g;
            SIMD_FLOAT T3, T12, Tm, T13, T8, Tn, Tr, Ts, Tq, Tx, TL, TE;
            Tf  = Ci[WS(cs, 6)];
            Tc  = Ci[WS(cs, 10)];
            Td  = Ci[WS(cs, 2)];
            T1h = Cr[WS(cs, 6)];
            Th  = Cr[WS(cs, 10)];
            Ti  = Cr[WS(cs, 2)];
            T4  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            T9  = Ci[WS(cs, 4)];
            T6  = Cr[WS(cs, 12)];
            T7  = Cr[WS(cs, 4)];
            Tp  = Cr[WS(cs, 9)];
            TK  = Ci[WS(cs, 9)];
            Te  = Tc + Td;
            T1j = Tc - Td;
            Ty  = Cr[WS(cs, 3)];
            Tj  = Th - Ti;
            T1g = Th + Ti;
            TF  = Ci[WS(cs, 3)];
            T3  = T1 - T2;
            T12 = SIMD_FMADD(KP2_000000000, T2, T1);
            Tm  = Cr[WS(cs, 1)];
            T13 = SIMD_FMADD(KP2_000000000, T7, T6);
            T8  = T6 - T7;
            Tn  = Cr[WS(cs, 7)];
            Tr  = Ci[WS(cs, 1)];
            T15 = Tf - Te;
            Tg  = SIMD_FMADD(KP2_000000000, Tf, Te);
            Ts  = Ci[WS(cs, 7)];
            T1r = T1g + T1h;
            T1i = SIMD_FNMADD(KP2_000000000, T1h, T1g);
            Tv  = Cr[WS(cs, 11)];
            TQ  = SIMD_FMADD(KP1_732050807, T4, T3);
            T5  = SIMD_FNMADD(KP1_732050807, T4, T3);
            T14 = T12 - T13;
            T1q = T12 + T13;
            Ta  = SIMD_FMADD(KP1_732050807, T9, T8);
            TR  = SIMD_FNMADD(KP1_732050807, T9, T8);
            To  = Tm + Tn;
            TM  = Tm - Tn;
            Tw  = Cr[WS(cs, 5)];
            TJ  = Ts - Tr;
            Tt  = Tr + Ts;
            TA  = Ci[WS(cs, 11)];
            TB  = Ci[WS(cs, 5)];
            T1n = SIMD_FNMADD(KP1_732050807, T1j, T1i);
            T16 = SIMD_FNMADD(KP2_000000000, T15, T14);
            TS  = TQ - TR;
            T1f = TQ + TR;
            T1m = T5 + Ta;
            Tb  = T5 - Ta;
            Tq  = SIMD_FNMADD(KP2_000000000, Tp, To);
            Tx  = Tv + Tw;
            TH  = Tv - Tw;
            TL  = SIMD_FMADD(KP2_000000000, TK, TJ);
            T1a = TK - TJ;
            TC  = TA + TB;
            TE  = TB - TA;
            Tk  = SIMD_FMADD(KP1_732050807, Tj, Tg);
            TW  = SIMD_FNMADD(KP1_732050807, Tj, Tg);
            T1k = T1f - (SIMD_FMADD(KP1_732050807, T1j, T1i));
            T1o = T1m + T1n;
            TT  = SIMD_FMADD(KP1_732050807, Tt, Tq);
            Tu  = SIMD_FNMADD(KP1_732050807, Tt, Tq);
            T17 = Ty + Tx;
            Tz  = SIMD_FNMADD(KP2_000000000, Ty, Tx);
            TY  = SIMD_FMADD(KP1_732050807, TM, TL);
            TN  = SIMD_FNMADD(KP1_732050807, TM, TL);
            T19 = TF - TE;
            TG  = SIMD_FMADD(KP2_000000000, TF, TE);
            T10 = TS + TW;
        }
        Tl             = Tb + Tk;
        T1t            = T1r - (Tp + To) - T17;
        T18            = T17 - (Tp + To);
        TD             = Tu - (SIMD_FMADD(KP1_732050807, TC, Tz));
        R0[WS(rs, 9)]  = T1m - T1n - Tu - (SIMD_FMADD(KP1_732050807, TC, Tz));
        TU             = SIMD_FNMADD(KP1_732050807, TC, Tz);
        T1s            = T1a - (T19 + T1r);
        T1b            = T19 + T1a;
        TI             = SIMD_FMADD(KP1_732050807, TH, TG);
        TX             = SIMD_FNMADD(KP1_732050807, TH, TG);
        R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, T1t, T1q);
        TV             = TT - TU;
        T1l            = TU + TT;
        R0[WS(rs, 11)] = SIMD_FMADD(KP2_000000000, T1s, T1q);
        T1d            = T18 + T1b;
        T1c            = T18 - T1b;
        TZ             = TX + TY;
        R0[WS(rs, 7)] = T1f + TX - (TY - (SIMD_FMADD(KP1_732050807, T1j, T1i)));
        T1p           = TI - TN;
        TO            = TI + TN;
        R0[WS(rs, 13)] = T1l + T1k;
        R0[WS(rs, 1)]  = T1k - T1l;
        R0[WS(rs, 2)]  = SIMD_FMADD(KP1_414213562, T1c, T16);
        R0[WS(rs, 14)] = SIMD_FNMADD(KP1_414213562, T1c, T16);
        T1e            = SIMD_FMADD(KP707106781, T1d, T15);
        R0[WS(rs, 10)] =
            SIMD_FMADD(KP707106781, TV, TS) - (SIMD_FMADD(KP707106781, TZ, TW));
        T11 = TV + TZ;
        R0[WS(rs, 6)] =
            SIMD_FMADD(KP707106781, TO, Tb) - (SIMD_FMADD(KP707106781, TD, Tk));
        TP             = TD + TO;
        R0[WS(rs, 15)] = T1p + T1o;
        R0[WS(rs, 3)]  = T1o - T1p;
        R0[WS(rs, 8)]  = SIMD_FMADD(KP2_000000000, T1e, T14);
        R0[WS(rs, 16)] = SIMD_FMADD(KP707106781, T11, T10);
        R0[WS(rs, 4)]  = SIMD_FNMADD(KP707106781, T11, T10);
        R0[0]          = SIMD_FMADD(KP707106781, TP, Tl);
        R0[WS(rs, 12)] = SIMD_FNMADD(KP707106781, TP, Tl);
    }
}

template <>
struct r2cb_traits<24, 8>
{
    static constexpr long_t flops           = 136;
    static constexpr long_t operations      = 97;
    static constexpr long_t memory_accesses = 40;
    static constexpr long_t stack_vars      = 64;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 8 -name
 * r2cb -standalone */

/*
 * This function contains 97 FP additions, 39 FP multiplications,
 * (or, 58 additions, 0 multiplications, 39 fused multiply/add),
 * 64 stack variables, 5 constants, and 40 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 8>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Td, T18, Th, Tx, TV, Tu, Tc, T17, TS, TK, TL, TP, T7, Tg,
            T1d;
        SIMD_FLOAT TH, T1o, TM, Tt, T1m, TT, TE, Tk, T1a, T1c, T10, TC, TW, TO;
        {
            SIMD_FLOAT TY, Tp, Ti, Ts, Tj, TZ, TA, TB, T8, T9, Ta, TQ, Tv, Tw,
                To;
            SIMD_FLOAT T1, T2, Tr, T4, T5, Tb, TR, T3, Tn, Te, Tq, T6, Tf, TF,
                TG;
            T8  = Cr[WS(cs, 6)];
            T9  = Cr[WS(cs, 10)];
            Ta  = Cr[WS(cs, 2)];
            TQ  = Ci[WS(cs, 6)];
            Tv  = Ci[WS(cs, 10)];
            Tw  = Ci[WS(cs, 2)];
            To  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            Tr  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Td  = Cr[WS(cs, 9)];
            TY  = Ci[WS(cs, 9)];
            Tb  = T9 + Ta;
            T18 = Ta - T9;
            Th  = Cr[WS(cs, 3)];
            Tx  = Tv - Tw;
            TR  = Tv + Tw;
            TV  = Ci[WS(cs, 3)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            Tn  = T1 - T2;
            Te  = Cr[WS(cs, 1)];
            Tq  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tf  = Cr[WS(cs, 7)];
            TF  = Ci[WS(cs, 1)];
            Tu  = SIMD_FNMADD(KP2_000000000, T8, Tb);
            Tc  = T8 + Tb;
            TG  = Ci[WS(cs, 7)];
            T17 = SIMD_FMADD(KP2_000000000, TQ, TR);
            TS  = TQ - TR;
            Tp  = SIMD_FMADD(KP1_732050807, To, Tn);
            TK  = SIMD_FNMADD(KP1_732050807, To, Tn);
            Ti  = Cr[WS(cs, 11)];
            TL  = SIMD_FMADD(KP1_732050807, Tr, Tq);
            Ts  = SIMD_FNMADD(KP1_732050807, Tr, Tq);
            TP  = T3 - T6;
            T7  = T3 + T6;
            Tg  = Te + Tf;
            T1d = Te - Tf;
            Tj  = Cr[WS(cs, 5)];
            TZ  = TG - TF;
            TH  = TF + TG;
            TA  = Ci[WS(cs, 11)];
            TB  = Ci[WS(cs, 5)];
            T1o = SIMD_FMADD(KP1_732050807, T18, T17);
            TM  = TK + TL;
            Tt  = Tp + Ts;
            T1m = Tp - Ts;
            TT  = SIMD_FNMADD(KP2_000000000, TS, TP);
            TE  = SIMD_FNMADD(KP2_000000000, Td, Tg);
            Tk  = Ti + Tj;
            T1a = Ti - Tj;
            T1c = SIMD_FMADD(KP2_000000000, TY, TZ);
            T10 = TY - TZ;
            TC  = TA + TB;
            TW  = TB - TA;
            TO  = SIMD_FNMADD(KP1_732050807, Tx, Tu);
        }
        {
            SIMD_FLOAT T1q, Ty, TI, Tz, Tl, T1e, T1l, T19, TX, T1i, Tm, TU, TN,
                TD, T15;
            SIMD_FLOAT T11, T1k, T1b, T16, TJ, T1n, T12, T13, T1p, T1f, T1j,
                T14, T1r, T1g, T1h;
            T1q           = T1m + T1o;
            Ty            = Tt - (SIMD_FMADD(KP1_732050807, Tx, Tu));
            TI            = SIMD_FMADD(KP1_732050807, TH, TE);
            Tz            = SIMD_FNMADD(KP2_000000000, Th, Tk);
            Tl            = Th + Tk;
            T1e           = SIMD_FNMADD(KP1_732050807, T1d, T1c);
            T1l           = SIMD_FMADD(KP1_732050807, T1d, T1c);
            T19           = SIMD_FMADD(KP2_000000000, TV, TW);
            TX            = TV - TW;
            T1i           = TM + TO;
            Tm            = Tc - (Td + Tg) - Tl;
            TU            = Tl - (Td + Tg);
            TN            = SIMD_FMADD(KP1_732050807, TC, Tz);
            TD            = SIMD_FNMADD(KP1_732050807, TC, Tz);
            T15           = T10 - (Tc + TX);
            T11           = TX + T10;
            T1k           = SIMD_FNMADD(KP1_732050807, T1a, T19);
            T1b           = SIMD_FMADD(KP1_732050807, T1a, T19);
            R0[WS(rs, 4)] = SIMD_FMADD(KP2_000000000, Tm, T7);
            R0[WS(rs, 8)] = TM - (SIMD_FNMADD(KP1_732050807, TH, TE)) - TN - TO;
            T16           = SIMD_FMADD(KP707106781,
                             TN - (SIMD_FNMADD(KP1_732050807, TH, TE)), TK) -
                  TL;
            TJ             = TD + TI;
            T1n            = TI - TD;
            R0[WS(rs, 10)] = SIMD_FMADD(KP2_000000000, T15, T7);
            T12            = TU - T11;
            T13            = TU + T11;
            T1p            = T1k + T1l;
            R0[WS(rs, 6)] =
                Tt + T1k - (T1l - (SIMD_FMADD(KP1_732050807, Tx, Tu)));
            T1f            = T1b + T1e;
            T1j            = T1b - T1e;
            R0[0]          = Ty - TJ;
            R0[WS(rs, 12)] = Ty + TJ;
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_414213562, T12, TT);
            R0[WS(rs, 13)] = SIMD_FNMADD(KP1_414213562, T12, TT);
            T14            = SIMD_FMADD(KP707106781, T13, TS);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP707106781, T1n, T1m) -
                            (SIMD_FMADD(KP707106781, T1p, T1o));
            T1r            = T1n + T1p;
            T1g            = SIMD_FMADD(KP408248290, T1f, T18);
            R0[WS(rs, 14)] = T1i + T1j;
            R0[WS(rs, 2)]  = T1i - T1j;
            R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, T14, TP);
            R0[WS(rs, 15)] = SIMD_FMADD(KP707106781, T1r, T1q);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP707106781, T1r, T1q);
            T1h            = SIMD_FNMADD(KP1_732050807, T1g, T17);
            R0[WS(rs, 5)]  = T16 - T1h;
            R0[WS(rs, 11)] = T16 + T1h;
        }
    }
}

template <>
struct r2cb_traits<24, 9>
{
    static constexpr long_t flops           = 135;
    static constexpr long_t operations      = 96;
    static constexpr long_t memory_accesses = 39;
    static constexpr long_t stack_vars      = 92;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 9 -name
 * r2cb -standalone */

/*
 * This function contains 96 FP additions, 39 FP multiplications,
 * (or, 57 additions, 0 multiplications, 39 fused multiply/add),
 * 92 stack variables, 5 constants, and 39 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 9>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TS, Tj, T1h, Tt, T1g, Tc, TH, TR, TM, TP, T7, TC, TW, T15,
            T1i;
        SIMD_FLOAT TQ, T1a, T1f, Td, Ti, T14, TZ, Tm, Ts, TV, T13, Tw, TT, T1k,
            T16;
        SIMD_FLOAT T1c, TJ, Tn, T12, TX, T17, TY, Tx, TU, T1m, T1d, TI, Ty, T1b,
            T10;
        SIMD_FLOAT T1e, TA, Tz, T1j, T11, T1n, TB, T1l, T1o, T1p;
        {
            SIMD_FLOAT Te, To, T18, Tk, T19, Th, Tl, Tr, Tu, Tv, T8, T9, Ta, TD,
                TE;
            SIMD_FLOAT TF, TL, T1, T2, TO, T4, T5, Tb, TG, T3, TK, Tf, TN, T6,
                Tg;
            SIMD_FLOAT Tp, Tq;
            T8  = Ci[WS(cs, 6)];
            T9  = Ci[WS(cs, 10)];
            Ta  = Ci[WS(cs, 2)];
            TD  = Cr[WS(cs, 6)];
            TE  = Cr[WS(cs, 10)];
            TF  = Cr[WS(cs, 2)];
            TL  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            TO  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            Te  = Cr[WS(cs, 3)];
            To  = Ci[WS(cs, 3)];
            Tb  = T9 + Ta;
            TS  = T9 - Ta;
            Tj  = Cr[WS(cs, 9)];
            T1h = TE - TF;
            TG  = TE + TF;
            Tt  = Ci[WS(cs, 9)];
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            TK  = T1 - T2;
            Tf  = Cr[WS(cs, 11)];
            TN  = T4 - T5;
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tg  = Cr[WS(cs, 5)];
            Tp  = Ci[WS(cs, 5)];
            T1g = SIMD_FMADD(KP2_000000000, T8, Tb);
            Tc  = T8 - Tb;
            Tq  = Ci[WS(cs, 11)];
            TH  = TD + TG;
            TR  = SIMD_FNMADD(KP2_000000000, TD, TG);
            TM  = SIMD_FNMADD(KP1_732050807, TL, TK);
            T18 = SIMD_FMADD(KP1_732050807, TL, TK);
            Tk  = Cr[WS(cs, 1)];
            TP  = SIMD_FMADD(KP1_732050807, TO, TN);
            T19 = SIMD_FNMADD(KP1_732050807, TO, TN);
            T7  = T3 - T6;
            TC  = T3 + T6;
            Th  = Tf + Tg;
            TW  = Tf - Tg;
            Tl  = Cr[WS(cs, 7)];
            T15 = Tq + Tp;
            Tr  = Tp - Tq;
            Tu  = Ci[WS(cs, 7)];
            Tv  = Ci[WS(cs, 1)];
            T1i = SIMD_FNMADD(KP1_732050807, T1h, T1g);
            TQ  = TM + TP;
            T1a = T18 + T19;
            T1f = T18 - T19;
            Td  = SIMD_FNMADD(KP2_000000000, Tc, T7);
            Ti  = Te + Th;
            T14 = SIMD_FNMADD(KP2_000000000, Te, Th);
            TZ  = Tk - Tl;
            Tm  = Tk + Tl;
            Ts  = To - Tr;
            TV  = SIMD_FMADD(KP2_000000000, To, Tr);
            T13 = Tu + Tv;
            Tw  = Tu - Tv;
            TT  = SIMD_FNMADD(KP1_732050807, TS, TR);
            T1k = T1f + T1i;
        }
        T16           = SIMD_FMADD(KP1_732050807, T15, T14);
        T1c           = SIMD_FNMADD(KP1_732050807, T15, T14);
        TJ            = TH - (Tj + Tm) - Ti;
        Tn            = Ti - (Tj + Tm);
        T12           = SIMD_FNMADD(KP2_000000000, Tj, Tm);
        TX            = SIMD_FMADD(KP1_732050807, TW, TV);
        T17           = SIMD_FNMADD(KP1_732050807, TW, TV);
        TY            = SIMD_FMADD(KP2_000000000, Tt, Tw);
        Tx            = Tt - Tw;
        TU            = TQ + TT;
        R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, TJ, TC);
        R0[WS(rs, 7)] = TQ - TT - (SIMD_FNMADD(KP1_732050807, T13, T12)) - T16;
        T1m           = SIMD_FMADD(KP707106781,
                         T16 - (SIMD_FNMADD(KP1_732050807, T13, T12)), TM) -
              TP;
        T1d            = SIMD_FMADD(KP1_732050807, T13, T12);
        TI             = Tx - (Ts + TH);
        Ty             = Ts + Tx;
        T1b            = SIMD_FMADD(KP1_732050807, TZ, TY);
        T10            = SIMD_FNMADD(KP1_732050807, TZ, TY);
        T1e            = T1d - T1c;
        R0[WS(rs, 11)] = T1c + T1d + T1a - (SIMD_FMADD(KP1_732050807, TS, TR));
        R0[WS(rs, 9)]  = SIMD_FMADD(KP2_000000000, TI, TC);
        TA             = Tn + Ty;
        Tz             = Tn - Ty;
        T1j            = T17 + T1b;
        R0[WS(rs, 5)] = T17 + T1a - (T1b - (SIMD_FMADD(KP1_732050807, TS, TR)));
        T11           = TX - T10;
        T1n           = TX + T10;
        R0[0]         = SIMD_FMADD(KP1_414213562, Tz, Td);
        R0[WS(rs, 12)] = SIMD_FNMADD(KP1_414213562, Tz, Td);
        TB             = SIMD_FMADD(KP707106781, TA, Tc);
        R0[WS(rs, 8)]  = SIMD_FMADD(KP707106781, T1e, T1f) -
                        (SIMD_FMADD(KP707106781, T1j, T1i));
        T1l            = T1e + T1j;
        T1o            = SIMD_FNMADD(KP408248290, T1n, T1h);
        R0[WS(rs, 13)] = T11 + TU;
        R0[WS(rs, 1)]  = TU - T11;
        R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, TB, T7);
        R0[WS(rs, 14)] = SIMD_FMADD(KP707106781, T1l, T1k);
        R0[WS(rs, 2)]  = SIMD_FNMADD(KP707106781, T1l, T1k);
        T1p            = SIMD_FMADD(KP1_732050807, T1o, T1g);
        R0[WS(rs, 10)] = T1m + T1p;
        R0[WS(rs, 4)]  = T1m - T1p;
    }
}

template <>
struct r2cb_traits<24, 10>
{
    static constexpr long_t flops           = 131;
    static constexpr long_t operations      = 93;
    static constexpr long_t memory_accesses = 38;
    static constexpr long_t stack_vars      = 88;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 10 -name
 * r2cb -standalone */

/*
 * This function contains 93 FP additions, 38 FP multiplications,
 * (or, 55 additions, 0 multiplications, 38 fused multiply/add),
 * 88 stack variables, 5 constants, and 38 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 10>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TS, T3, T15, Ty, T6, Ti, Tq, TU, Th, Tv, T1a, T14, T10, Tt,
            TR;
        SIMD_FLOAT T7, Tc, T16, Tu, T13, TO, T19, Tz, T1d, Tl, TT, TE, TQ, TK,
            T17;
        SIMD_FLOAT T1b, TA, Tm, TB, TV, T1c, TF, TP, Tn, TX, T1e, T1h, TW, T11,
            T18;
        SIMD_FLOAT TL, T1j, T1i, T1f, T12, T1k, T1g, T1l;
        {
            SIMD_FLOAT T8, TM, Tb, TN, TJ, Tj, Tk, TC, TD, Tp, T1, T2, Td, Te,
                Tf;
            SIMD_FLOAT TY, Tw, Tx, Ts, T4, T5, To, T9, Tg, Ta, TZ, TH, Tr, TI,
                TG;
            Tp  = Ci[WS(cs, 8)];
            T1  = Cr[0];
            T2  = Cr[WS(cs, 8)];
            Td  = Cr[WS(cs, 6)];
            Te  = Cr[WS(cs, 10)];
            Tf  = Cr[WS(cs, 2)];
            TY  = Ci[WS(cs, 6)];
            Tw  = Ci[WS(cs, 10)];
            Tx  = Ci[WS(cs, 2)];
            Ts  = Ci[WS(cs, 4)];
            T4  = Cr[WS(cs, 12)];
            T5  = Cr[WS(cs, 4)];
            T8  = Ci[WS(cs, 9)];
            TS  = Cr[WS(cs, 9)];
            To  = T1 - T2;
            T3  = SIMD_FMADD(KP2_000000000, T2, T1);
            T9  = Ci[WS(cs, 7)];
            T15 = Te - Tf;
            Tg  = Te + Tf;
            Ta  = Ci[WS(cs, 1)];
            TZ  = Tw + Tx;
            Ty  = Tw - Tx;
            TH  = Cr[WS(cs, 1)];
            T6  = SIMD_FMADD(KP2_000000000, T5, T4);
            Tr  = T4 - T5;
            TI  = Cr[WS(cs, 7)];
            Ti  = Ci[WS(cs, 3)];
            Tq  = SIMD_FNMADD(KP1_732050807, Tp, To);
            TM  = SIMD_FMADD(KP1_732050807, Tp, To);
            TU  = Cr[WS(cs, 3)];
            Th  = Td + Tg;
            Tv  = SIMD_FNMADD(KP2_000000000, Td, Tg);
            Tb  = T9 - Ta;
            T1a = Ta + T9;
            T14 = SIMD_FMADD(KP2_000000000, TY, TZ);
            T10 = TY - TZ;
            TN  = SIMD_FNMADD(KP1_732050807, Ts, Tr);
            Tt  = SIMD_FMADD(KP1_732050807, Ts, Tr);
            TJ  = TH - TI;
            TR  = TH + TI;
            Tj  = Ci[WS(cs, 5)];
            Tk  = Ci[WS(cs, 11)];
            TC  = Cr[WS(cs, 11)];
            TD  = Cr[WS(cs, 5)];
            T7  = T3 + T6;
            TG  = SIMD_FMADD(KP2_000000000, T8, Tb);
            Tc  = T8 - Tb;
            T16 = SIMD_FNMADD(KP1_732050807, T15, T14);
            Tu  = Tq + Tt;
            T13 = TM - TN;
            TO  = TM + TN;
            T19 = SIMD_FNMADD(KP2_000000000, TS, TR);
            Tz  = SIMD_FNMADD(KP1_732050807, Ty, Tv);
            T1d = Tj + Tk;
            Tl  = Tj - Tk;
            TT  = TC + TD;
            TE  = TC - TD;
            TQ  = SIMD_FMADD(KP1_732050807, TJ, TG);
            TK  = SIMD_FNMADD(KP1_732050807, TJ, TG);
        }
        T17           = T13 + T16;
        T1b           = SIMD_FMADD(KP1_732050807, T1a, T19);
        TA            = Tu + Tz;
        Tm            = Ti - Tl;
        TB            = SIMD_FMADD(KP2_000000000, Ti, Tl);
        TV            = TT + TU;
        T1c           = SIMD_FNMADD(KP2_000000000, TU, TT);
        TF            = SIMD_FMADD(KP1_732050807, TE, TB);
        TP            = SIMD_FNMADD(KP1_732050807, TE, TB);
        Tn            = Tc - (Th + Tm);
        TX            = SIMD_FMADD(KP1_414213562, Tm + Tc, T3) - T6;
        T1e           = SIMD_FNMADD(KP1_732050807, T1d, T1c);
        T1h           = SIMD_FMADD(KP1_732050807, T1d, T1c);
        TW            = Th - (TR + TS) - TV;
        T11           = TV - (TR + TS);
        T18           = TP + TQ;
        R0[WS(rs, 4)] = TO + TP - (TQ - (SIMD_FMADD(KP1_732050807, Ty, Tv)));
        TL            = TF - TK;
        T1j           = TF + TK;
        R0[WS(rs, 8)] = SIMD_FMADD(KP2_000000000, Tn, T7);
        R0[WS(rs, 6)] = Tu - (SIMD_FNMADD(KP1_732050807, T1a, T19)) - T1h - Tz;
        T1i           = SIMD_FMADD(KP707106781,
                         T1h - (SIMD_FNMADD(KP1_732050807, T1a, T19)), Tq) -
              Tt;
        T1f            = T1b - T1e;
        R0[WS(rs, 10)] = TO + T1e + T1b - (SIMD_FMADD(KP1_732050807, Ty, Tv));
        R0[WS(rs, 2)]  = SIMD_FMADD(KP2_000000000, TW, T7);
        T12            = SIMD_FMADD(KP707106781, T11, T10);
        T1k            = SIMD_FNMADD(KP408248290, T1j, T15);
        R0[WS(rs, 12)] = TA + TL;
        R0[0]          = TA - TL;
        R0[WS(rs, 7)]  = SIMD_FMADD(KP707106781, T1f, T13) -
                        (SIMD_FMADD(KP707106781, T18, T16));
        T1g            = T18 + T1f;
        R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, T12, TX);
        R0[WS(rs, 11)] = SIMD_FNMADD(KP2_000000000, T12, TX);
        T1l            = SIMD_FMADD(KP1_732050807, T1k, T14);
        R0[WS(rs, 13)] = SIMD_FMADD(KP707106781, T1g, T17);
        R0[WS(rs, 1)]  = SIMD_FNMADD(KP707106781, T1g, T17);
        R0[WS(rs, 9)]  = T1l + T1i;
        R0[WS(rs, 3)]  = T1i - T1l;
    }
}

template <>
struct r2cb_traits<24, 11>
{
    static constexpr long_t flops           = 132;
    static constexpr long_t operations      = 93;
    static constexpr long_t memory_accesses = 37;
    static constexpr long_t stack_vars      = 85;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 11 -name
 * r2cb -standalone */

/*
 * This function contains 93 FP additions, 39 FP multiplications,
 * (or, 54 additions, 0 multiplications, 39 fused multiply/add),
 * 85 stack variables, 5 constants, and 37 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 11>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tf, TK, TC, T1h, T10, T13, To, T1c, T1g, TF, Tl, Tz, T15, Te,
            TM;
        SIMD_FLOAT T5, TR, Ta, TT, Tj, TJ, Tm, Tq, Tr, T19, TD, Tg, T1b, TA, TB;
        SIMD_FLOAT Ty, Tv, Tw, T4, T1, T2, T9, T6, T7, T1a, Tc, Tx, Td, T3, Th;
        SIMD_FLOAT T8, Ti;
        T1b = Cr[WS(cs, 6)];
        TA  = Cr[WS(cs, 2)];
        TB  = Cr[WS(cs, 10)];
        Ty  = Ci[WS(cs, 6)];
        Tv  = Ci[WS(cs, 10)];
        Tw  = Ci[WS(cs, 2)];
        T4  = Ci[WS(cs, 8)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 8)];
        T9  = Ci[WS(cs, 4)];
        T6  = Cr[WS(cs, 12)];
        T7  = Cr[WS(cs, 4)];
        Tf  = Cr[WS(cs, 9)];
        TK  = Ci[WS(cs, 9)];
        T1a = TB + TA;
        TC  = TA - TB;
        Tc  = Cr[WS(cs, 1)];
        T1h = Tv - Tw;
        Tx  = Tv + Tw;
        Td  = Cr[WS(cs, 7)];
        T3  = T1 - T2;
        T10 = SIMD_FMADD(KP2_000000000, T2, T1);
        Th  = Ci[WS(cs, 1)];
        T13 = SIMD_FMADD(KP2_000000000, T7, T6);
        T8  = T6 - T7;
        Ti  = Ci[WS(cs, 7)];
        To  = Cr[WS(cs, 3)];
        T1c = T1a + T1b;
        T1g = SIMD_FNMADD(KP2_000000000, T1b, T1a);
        TF  = Ci[WS(cs, 3)];
        Tl  = Cr[WS(cs, 11)];
        Tz  = SIMD_FMADD(KP2_000000000, Ty, Tx);
        T15 = Ty - Tx;
        Te  = Tc + Td;
        TM  = Tc - Td;
        T5  = SIMD_FMADD(KP1_732050807, T4, T3);
        TR  = SIMD_FNMADD(KP1_732050807, T4, T3);
        Ta  = SIMD_FNMADD(KP1_732050807, T9, T8);
        TT  = SIMD_FMADD(KP1_732050807, T9, T8);
        Tj  = Th + Ti;
        TJ  = Ti - Th;
        Tm  = Cr[WS(cs, 5)];
        Tq  = Ci[WS(cs, 11)];
        Tr  = Ci[WS(cs, 5)];
        T19 = T10 + T13;
        TD  = SIMD_FMADD(KP1_732050807, TC, Tz);
        Tg  = SIMD_FNMADD(KP2_000000000, Tf, Te);
        {
            SIMD_FLOAT T1i, Tb, T1f, T12, TL, Tn, TH, Ts, TE, Tk, TP, TN, TW,
                T16, Tp;
            SIMD_FLOAT T11, TG, Tt, TS, T1e, T17, TI, TV, T1d, T14, TU, Tu, T18,
                TX, TO;
            SIMD_FLOAT TY, TQ, TZ;
            T1i           = TR + TT;
            Tb            = T5 - Ta;
            T1f           = T5 + Ta;
            T12           = TK - TJ;
            TL            = SIMD_FMADD(KP2_000000000, TK, TJ);
            Tn            = Tl + Tm;
            TH            = Tl - Tm;
            Ts            = Tq + Tr;
            TE            = Tr - Tq;
            Tk            = SIMD_FMADD(KP1_732050807, Tj, Tg);
            TP            = Tb + TD;
            TN            = SIMD_FMADD(KP1_732050807, TM, TL);
            TW            = SIMD_FNMADD(KP1_732050807, TM, TL);
            T16           = To + Tn;
            Tp            = SIMD_FNMADD(KP2_000000000, To, Tn);
            T11           = TF - TE;
            TG            = SIMD_FMADD(KP2_000000000, TF, TE);
            Tt            = SIMD_FNMADD(KP1_732050807, Ts, Tp);
            TS            = SIMD_FMADD(KP1_732050807, Ts, Tp);
            T1e           = T1c - (Tf + Te) - T16;
            T17           = T16 - (Tf + Te);
            TI            = SIMD_FNMADD(KP1_732050807, TH, TG);
            TV            = SIMD_FMADD(KP1_732050807, TH, TG);
            T1d           = T12 - (T11 + T1c);
            T14           = SIMD_FMADD(KP1_414213562, T11 + T12, T10) - T13;
            R0[WS(rs, 5)] = T1i - (SIMD_FNMADD(KP1_732050807, T1h, T1g)) -
                            (SIMD_FNMADD(KP1_732050807, Tj, Tg)) - TS;
            TU = SIMD_FMADD(KP707106781,
                            TS - (SIMD_FNMADD(KP1_732050807, Tj, Tg)), TR) -
                 TT;
            R0[WS(rs, 9)] =
                T1f + Tt + Tk - (SIMD_FMADD(KP1_732050807, T1h, T1g));
            Tu            = Tk - Tt;
            R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, T1e, T19);
            T18           = SIMD_FMADD(KP707106781, T17, T15);
            R0[WS(rs, 11)] =
                T1i + TV - (TW - (SIMD_FNMADD(KP1_732050807, T1h, T1g)));
            TX = TV + TW;
            R0[WS(rs, 3)] =
                T1f + TI - (TN - (SIMD_FMADD(KP1_732050807, T1h, T1g)));
            TO             = TI + TN;
            R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, T1d, T19);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP2_000000000, T18, T14);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP2_000000000, T18, T14);
            TY             = SIMD_FMADD(KP408248290, TX, TC);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP707106781, Tu, Tb) -
                            (SIMD_FMADD(KP707106781, TO, TD));
            TQ             = Tu + TO;
            TZ             = SIMD_FNMADD(KP1_732050807, TY, Tz);
            R0[WS(rs, 12)] = SIMD_FMADD(KP707106781, TQ, TP);
            R0[0]          = SIMD_FNMADD(KP707106781, TQ, TP);
            R0[WS(rs, 2)]  = TU - TZ;
            R0[WS(rs, 8)]  = TU + TZ;
        }
    }
}

template <>
struct r2cb_traits<24, 12>
{
    static constexpr long_t flops           = 127;
    static constexpr long_t operations      = 90;
    static constexpr long_t memory_accesses = 36;
    static constexpr long_t stack_vars      = 83;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 12 -name
 * r2cb -standalone */

/*
 * This function contains 90 FP additions, 37 FP multiplications,
 * (or, 53 additions, 0 multiplications, 37 fused multiply/add),
 * 83 stack variables, 5 constants, and 36 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 12>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Td, T17, TU, T3, T6, Th, Tc, TT, Tn, To, TC, T16, T14, TV,
            TI;
        SIMD_FLOAT TW, TL, Tg, TR, Tp, Ti, Tj, T7, TQ, Tw, Ts, Tv, T8, T9, Ta;
        SIMD_FLOAT Ty, Tz, TA, TH, T1, T2, TK, T4, T5, Tb, Tt, TB, Tu, TG, Te;
        SIMD_FLOAT TJ, Tf;
        T8  = Cr[WS(cs, 6)];
        T9  = Cr[WS(cs, 10)];
        Ta  = Cr[WS(cs, 2)];
        Ty  = Ci[WS(cs, 6)];
        Tz  = Ci[WS(cs, 10)];
        TA  = Ci[WS(cs, 2)];
        TH  = Ci[WS(cs, 8)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 8)];
        TK  = Ci[WS(cs, 4)];
        T4  = Cr[WS(cs, 12)];
        T5  = Cr[WS(cs, 4)];
        Td  = Cr[WS(cs, 9)];
        Ts  = Ci[WS(cs, 9)];
        Tb  = T9 + Ta;
        T17 = Ta - T9;
        Tt  = Ci[WS(cs, 7)];
        TU  = Tz - TA;
        TB  = Tz + TA;
        Tu  = Ci[WS(cs, 1)];
        TG  = T1 - T2;
        T3  = SIMD_FMADD(KP2_000000000, T2, T1);
        Te  = Cr[WS(cs, 1)];
        T6  = SIMD_FMADD(KP2_000000000, T5, T4);
        TJ  = T4 - T5;
        Tf  = Cr[WS(cs, 7)];
        Th  = Cr[WS(cs, 3)];
        Tc  = T8 + Tb;
        TT  = SIMD_FNMADD(KP2_000000000, T8, Tb);
        Tn  = Ci[WS(cs, 3)];
        To  = Ci[WS(cs, 5)];
        TC  = Ty - TB;
        T16 = SIMD_FMADD(KP2_000000000, Ty, TB);
        Tv  = Tt - Tu;
        T14 = Tu + Tt;
        TV  = SIMD_FMADD(KP1_732050807, TH, TG);
        TI  = SIMD_FNMADD(KP1_732050807, TH, TG);
        TW  = SIMD_FNMADD(KP1_732050807, TK, TJ);
        TL  = SIMD_FMADD(KP1_732050807, TK, TJ);
        Tg  = Te + Tf;
        TR  = Te - Tf;
        Tp  = Ci[WS(cs, 11)];
        Ti  = Cr[WS(cs, 11)];
        Tj  = Cr[WS(cs, 5)];
        T7  = T3 + T6;
        TQ  = SIMD_FMADD(KP2_000000000, Ts, Tv);
        Tw  = Ts - Tv;
        {
            SIMD_FLOAT TM, TX, T13, Tq, T11, Tk, TO, TS, TZ, T1b, TN, Tr, T10,
                Tl, TY;
            SIMD_FLOAT TP, Tx, TF, T1c, T12, TD, Tm, T1e, T18, T1d, T15, TE,
                T1f, T19, T1g;
            SIMD_FLOAT T1a;
            TM  = TI + TL;
            TX  = TV + TW;
            T13 = SIMD_FNMADD(KP2_000000000, Td, Tg);
            Tq  = To - Tp;
            T11 = To + Tp;
            Tk  = Ti + Tj;
            TO  = Ti - Tj;
            TS  = SIMD_FNMADD(KP1_732050807, TR, TQ);
            TZ  = SIMD_FMADD(KP1_732050807, TR, TQ);
            T1b = SIMD_FMADD(KP1_732050807, T14, T13);
            TN  = SIMD_FMADD(KP2_000000000, Tn, Tq);
            Tr  = Tn - Tq;
            T10 = SIMD_FNMADD(KP2_000000000, Th, Tk);
            Tl  = Th + Tk;
            TY  = SIMD_FNMADD(KP1_732050807, TO, TN);
            TP  = SIMD_FMADD(KP1_732050807, TO, TN);
            Tx  = SIMD_FMADD(KP1_414213562, Tr + Tw, T3) - T6;
            TF  = Tw - (Tc + Tr);
            T1c = SIMD_FNMADD(KP1_732050807, T11, T10);
            T12 = SIMD_FMADD(KP1_732050807, T11, T10);
            TD  = Tl - (Td + Tg);
            Tm  = Tc - (Td + Tg) - Tl;
            R0[WS(rs, 2)] =
                TX + TY - (TZ - (SIMD_FMADD(KP1_732050807, TU, TT)));
            T1e = TY + TZ;
            R0[WS(rs, 10)] =
                TM + TP - (TS - (SIMD_FNMADD(KP1_732050807, TU, TT)));
            T18           = TP + TS;
            R0[WS(rs, 6)] = SIMD_FMADD(KP2_000000000, TF, T7);
            R0[WS(rs, 8)] =
                TX + T1c + T1b - (SIMD_FMADD(KP1_732050807, TU, TT));
            T1d           = SIMD_FMADD(KP707106781, T1b - T1c, TV) - TW;
            R0[WS(rs, 4)] = TM - (SIMD_FNMADD(KP1_732050807, T14, T13)) - T12 -
                            (SIMD_FNMADD(KP1_732050807, TU, TT));
            T15 = SIMD_FMADD(KP707106781,
                             T12 - (SIMD_FNMADD(KP1_732050807, T14, T13)), TI) -
                  TL;
            TE             = SIMD_FMADD(KP707106781, TD, TC);
            R0[0]          = SIMD_FMADD(KP2_000000000, Tm, T7);
            T1f            = SIMD_FMADD(KP408248290, T1e, T17);
            T19            = SIMD_FMADD(KP408248290, T18, T17);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP2_000000000, TE, Tx);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP2_000000000, TE, Tx);
            T1g            = SIMD_FMADD(KP1_732050807, T1f, T16);
            T1a            = SIMD_FNMADD(KP1_732050807, T19, T16);
            R0[WS(rs, 11)] = T1g + T1d;
            R0[WS(rs, 5)]  = T1d - T1g;
            R0[WS(rs, 7)]  = T1a + T15;
            R0[WS(rs, 1)]  = T15 - T1a;
        }
    }
}

template <>
struct r2cb_traits<24, 13>
{
    static constexpr long_t flops           = 122;
    static constexpr long_t operations      = 86;
    static constexpr long_t memory_accesses = 35;
    static constexpr long_t stack_vars      = 78;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 13 -name
 * r2cb -standalone */

/*
 * This function contains 86 FP additions, 36 FP multiplications,
 * (or, 50 additions, 0 multiplications, 36 fused multiply/add),
 * 78 stack variables, 5 constants, and 35 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 13>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T16, T4, Tt, TN, T17, T9, T1a, Tu, Tg, T3, Tm, TK, Tn, TI,
            TZ;
        SIMD_FLOAT To, TX, Tz, TE, T7, Tc, TB, TS, Ts, T19, TL, TM, Ti, Tj, Tk;
        SIMD_FLOAT TH, Te, Tf, Ty, T1, T2, Tq, Tr, Tl, TG, T5, Tx, T6, Ta, Tb;
        SIMD_FLOAT TP, Tp, T18, T1b, TO, T8, TR, Td, TA, Tv, TD, TQ, T11, TT,
            T12;
        SIMD_FLOAT Th, TC, Tw, TY, TF, T13, TU, TJ, T10, T14, TV, T15, TW;
        T16 = Cr[WS(cs, 6)];
        TL  = Cr[WS(cs, 2)];
        TM  = Cr[WS(cs, 10)];
        Ti  = Ci[WS(cs, 6)];
        Tj  = Ci[WS(cs, 10)];
        Tk  = Ci[WS(cs, 2)];
        TH  = Ci[WS(cs, 4)];
        Te  = Cr[WS(cs, 12)];
        Tf  = Cr[WS(cs, 4)];
        Ty  = Ci[WS(cs, 8)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 8)];
        T4  = Ci[WS(cs, 3)];
        Tt  = Cr[WS(cs, 3)];
        TN  = TL - TM;
        T17 = TM + TL;
        T9  = Ci[WS(cs, 9)];
        T1a = Tj - Tk;
        Tl  = Tj + Tk;
        Tu  = Cr[WS(cs, 9)];
        TG  = Te - Tf;
        Tg  = SIMD_FMADD(KP2_000000000, Tf, Te);
        T5  = Ci[WS(cs, 5)];
        T3  = SIMD_FMADD(KP2_000000000, T2, T1);
        Tx  = T1 - T2;
        T6  = Ci[WS(cs, 11)];
        Ta  = Ci[WS(cs, 7)];
        Tb  = Ci[WS(cs, 1)];
        Tq  = Cr[WS(cs, 1)];
        Tr  = Cr[WS(cs, 7)];
        Tm  = Ti - Tl;
        TK  = SIMD_FMADD(KP2_000000000, Ti, Tl);
        Tn  = Cr[WS(cs, 11)];
        TI  = SIMD_FNMADD(KP1_732050807, TH, TG);
        TZ  = SIMD_FMADD(KP1_732050807, TH, TG);
        To  = Cr[WS(cs, 5)];
        TX  = SIMD_FNMADD(KP1_732050807, Ty, Tx);
        Tz  = SIMD_FMADD(KP1_732050807, Ty, Tx);
        TE  = T5 + T6;
        T7  = T5 - T6;
        Tc  = Ta - Tb;
        TB  = Tb + Ta;
        TS  = Tq - Tr;
        Ts  = Tq + Tr;
        T19 = SIMD_FNMADD(KP2_000000000, T16, T17);
        TP  = Tn - To;
        Tp  = Tn + To;
        T18 = Tz + TI;
        T1b = TX + TZ;
        TO  = SIMD_FMADD(KP2_000000000, T4, T7);
        T8  = T4 - T7;
        TR  = SIMD_FMADD(KP2_000000000, T9, Tc);
        Td  = T9 - Tc;
        TA  = SIMD_FNMADD(KP2_000000000, Tu, Ts);
        Tv  = (Tp - Ts) + (Tt - Tu);
        TD  = SIMD_FNMADD(KP2_000000000, Tt, Tp);
        TQ  = SIMD_FNMADD(KP1_732050807, TP, TO);
        T11 = SIMD_FMADD(KP1_732050807, TP, TO);
        TT  = SIMD_FMADD(KP1_732050807, TS, TR);
        T12 = SIMD_FNMADD(KP1_732050807, TS, TR);
        Th  = SIMD_FMADD(KP1_414213562, T8 + Td, T3) - Tg;
        R0[WS(rs, 5)] =
            T3 + SIMD_FMADD(KP2_000000000, Td - (T8 + T16) - T17, Tg);
        TC = SIMD_FMADD(KP1_732050807, TB, TA);
        Tw = SIMD_FMADD(KP707106781, Tv, Tm);
        TY = SIMD_FMADD(KP1_732050807, TE, TD);
        TF = SIMD_FNMADD(KP1_732050807, TE, TD);
        R0[WS(rs, 9)] =
            T1b + T11 - (T12 - (SIMD_FNMADD(KP1_732050807, T1a, T19)));
        T13           = T11 + T12;
        R0[WS(rs, 1)] = T18 + TQ - (TT - (SIMD_FMADD(KP1_732050807, T1a, T19)));
        TU            = TQ + TT;
        R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, Tw, Th);
        R0[WS(rs, 8)] = SIMD_FNMADD(KP2_000000000, Tw, Th);
        R0[WS(rs, 7)] = T18 + TF + TC - (SIMD_FMADD(KP1_732050807, T1a, T19));
        TJ            = SIMD_FMADD(KP707106781, TC - TF, Tz) - TI;
        R0[WS(rs, 3)] = T1b - (SIMD_FNMADD(KP1_732050807, T1a, T19)) -
                        (SIMD_FNMADD(KP1_732050807, TB, TA)) - TY;
        T10 = SIMD_FMADD(KP707106781, TY - (SIMD_FNMADD(KP1_732050807, TB, TA)),
                         TX) -
              TZ;
        T14            = SIMD_FMADD(KP408248290, T13, TN);
        TV             = SIMD_FMADD(KP408248290, TU, TN);
        T15            = SIMD_FNMADD(KP1_732050807, T14, TK);
        TW             = SIMD_FMADD(KP1_732050807, TV, TK);
        R0[WS(rs, 6)]  = T15 + T10;
        R0[0]          = T10 - T15;
        R0[WS(rs, 10)] = TW + TJ;
        R0[WS(rs, 4)]  = TJ - TW;
    }
}

template <>
struct r2cb_traits<24, 14>
{
    static constexpr long_t flops           = 118;
    static constexpr long_t operations      = 84;
    static constexpr long_t memory_accesses = 34;
    static constexpr long_t stack_vars      = 76;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 14 -name
 * r2cb -standalone */

/*
 * This function contains 84 FP additions, 34 FP multiplications,
 * (or, 50 additions, 0 multiplications, 34 fused multiply/add),
 * 76 stack variables, 5 constants, and 34 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 14>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tc, T7, TT, Tk, T14, Td, TF, TS, T3, T6, TC, T13, TP, Tn, TG;
        SIMD_FLOAT Ty, TH, Tq, TX, Ta, Tz, T10, Tg, TJ, Tv, TQ, Tt, Tu, Ti, Tj;
        SIMD_FLOAT TN, TD, TE, Tm, T1, T2, Tp, T4, T5, TO, Tl, T8, To, T9, Te;
        SIMD_FLOAT Tf, Tr, TI, Tb, Tx, TA, TR, Th, Ts, TZ, TU, TW, TL, TB, TK;
        SIMD_FLOAT Tw, TM, T11, TV, T18, TY, T15, T19, T12, T16, T17;
        Tc            = Cr[WS(cs, 6)];
        Ti            = Cr[WS(cs, 10)];
        Tj            = Cr[WS(cs, 2)];
        TN            = Ci[WS(cs, 6)];
        TD            = Ci[WS(cs, 10)];
        TE            = Ci[WS(cs, 2)];
        Tm            = Ci[WS(cs, 8)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        Tp            = Ci[WS(cs, 4)];
        T4            = Cr[WS(cs, 12)];
        T5            = Cr[WS(cs, 4)];
        T7            = Ci[WS(cs, 9)];
        TT            = Cr[WS(cs, 9)];
        Tk            = Ti + Tj;
        T14           = Ti - Tj;
        Td            = Ci[WS(cs, 3)];
        TF            = TD - TE;
        TO            = TD + TE;
        TS            = Cr[WS(cs, 3)];
        Tl            = T1 - T2;
        T3            = SIMD_FMADD(KP2_000000000, T2, T1);
        T8            = Ci[WS(cs, 7)];
        T6            = SIMD_FMADD(KP2_000000000, T5, T4);
        To            = T4 - T5;
        T9            = Ci[WS(cs, 1)];
        Te            = Ci[WS(cs, 5)];
        TC            = SIMD_FNMADD(KP2_000000000, Tc, Tk);
        Tf            = Ci[WS(cs, 11)];
        Tt            = Cr[WS(cs, 11)];
        T13           = SIMD_FMADD(KP2_000000000, TN, TO);
        TP            = TN - TO;
        Tu            = Cr[WS(cs, 5)];
        Tn            = SIMD_FMADD(KP1_732050807, Tm, Tl);
        TG            = SIMD_FNMADD(KP1_732050807, Tm, Tl);
        Ty            = Cr[WS(cs, 1)];
        TH            = SIMD_FMADD(KP1_732050807, Tp, To);
        Tq            = SIMD_FNMADD(KP1_732050807, Tp, To);
        TX            = T9 + T8;
        Ta            = T8 - T9;
        Tz            = Cr[WS(cs, 7)];
        T10           = Te + Tf;
        Tg            = Te - Tf;
        TJ            = SIMD_FNMADD(KP1_732050807, TF, TC);
        Tv            = Tt - Tu;
        TQ            = Tt + Tu;
        Tr            = Tn + Tq;
        TI            = TG + TH;
        Tb            = T7 - Ta;
        Tx            = SIMD_FMADD(KP2_000000000, T7, Ta);
        TA            = Ty - Tz;
        TR            = Ty + Tz;
        Th            = Td - Tg;
        Ts            = SIMD_FMADD(KP2_000000000, Td, Tg);
        TZ            = SIMD_FNMADD(KP2_000000000, TS, TQ);
        TU            = (TQ - TR) + (TS - TT);
        TW            = SIMD_FNMADD(KP2_000000000, TT, TR);
        TL            = SIMD_FNMADD(KP1_732050807, TA, Tx);
        TB            = SIMD_FMADD(KP1_732050807, TA, Tx);
        TK            = SIMD_FMADD(KP1_732050807, Tv, Ts);
        Tw            = SIMD_FNMADD(KP1_732050807, Tv, Ts);
        TM            = SIMD_FMADD(KP1_414213562, Th + Tb, T3) - T6;
        R0[WS(rs, 4)] = T3 + SIMD_FMADD(KP2_000000000, Tb - (Tc + Th) - Tk, T6);
        T11           = SIMD_FNMADD(KP1_732050807, T10, TZ);
        TV            = SIMD_FMADD(KP707106781, TU, TP);
        T18           = SIMD_FNMADD(KP1_732050807, TX, TW);
        TY            = SIMD_FMADD(KP1_732050807, TX, TW);
        R0[WS(rs, 8)] = TI + TJ + TK - TL;
        R0[0]         = Tr + Tw - (TB - (SIMD_FMADD(KP1_732050807, TF, TC)));
        T15           = Tw + TB;
        R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, TV, TM);
        R0[WS(rs, 7)] = SIMD_FNMADD(KP2_000000000, TV, TM);
        R0[WS(rs, 2)] = TI - T18 - (SIMD_FMADD(KP1_732050807, T10, TZ)) - TJ;
        T19           = TL + (TK - (SIMD_FMADD(KP1_732050807, T10, TZ))) + T18;
        R0[WS(rs, 6)] = Tr + T11 + TY - (SIMD_FMADD(KP1_732050807, TF, TC));
        T12           = SIMD_FMADD(KP707106781, TY - T11, Tn) - Tq;
        T16           = SIMD_FNMADD(KP408248290, T15, T14);
        R0[WS(rs, 5)] =
            TG +
            SIMD_FMADD(KP1_732050807, SIMD_FNMADD(KP408248290, T19, T14), T13) -
            TH;
        T17           = SIMD_FNMADD(KP1_732050807, T16, T13);
        R0[WS(rs, 9)] = T17 + T12;
        R0[WS(rs, 3)] = T12 - T17;
    }
}

template <>
struct r2cb_traits<24, 15>
{
    static constexpr long_t flops           = 115;
    static constexpr long_t operations      = 81;
    static constexpr long_t memory_accesses = 33;
    static constexpr long_t stack_vars      = 72;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 15 -name
 * r2cb -standalone */

/*
 * This function contains 81 FP additions, 34 FP multiplications,
 * (or, 47 additions, 0 multiplications, 34 fused multiply/add),
 * 72 stack variables, 5 constants, and 33 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 15>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_414213562, +1.414213562373095048801688724209698078569671875);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT TN, T4, Tn, TM, T11, Tc, TP, To, T3, Tg, TO, Tm, T10, TF, TX;
        SIMD_FLOAT Tp, TY, TI, TU, T7, Tq, TS, Tb, TQ, Tu, TB, Ts, Tt, TK, TL;
        SIMD_FLOAT Ti, Tj, Tk, TE, T1, T2, TH, Te, Tf, Tl, TD, T5, TG, T6, T9;
        SIMD_FLOAT Ta, TJ, Tx, T8, Ty, Tr, TA, Td, TR, Tz, Tv, TT, TC, T12, Th;
        SIMD_FLOAT TW, Tw, TV, T15, T13, TZ, T14;
        TN  = Cr[WS(cs, 6)];
        TK  = Cr[WS(cs, 10)];
        TL  = Cr[WS(cs, 2)];
        Ti  = Ci[WS(cs, 6)];
        Tj  = Ci[WS(cs, 10)];
        Tk  = Ci[WS(cs, 2)];
        TE  = Ci[WS(cs, 8)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 8)];
        TH  = Ci[WS(cs, 4)];
        Te  = Cr[WS(cs, 12)];
        Tf  = Cr[WS(cs, 4)];
        T4  = Ci[WS(cs, 3)];
        Tn  = Cr[WS(cs, 3)];
        TM  = TK + TL;
        T11 = TK - TL;
        Tc  = Ci[WS(cs, 9)];
        TP  = Tj - Tk;
        Tl  = Tj + Tk;
        To  = Cr[WS(cs, 9)];
        TD  = T1 - T2;
        T3  = SIMD_FMADD(KP2_000000000, T2, T1);
        T5  = Ci[WS(cs, 5)];
        Tg  = SIMD_FMADD(KP2_000000000, Tf, Te);
        TG  = Te - Tf;
        T6  = Ci[WS(cs, 11)];
        T9  = Ci[WS(cs, 1)];
        TO  = SIMD_FNMADD(KP2_000000000, TN, TM);
        Ta  = Ci[WS(cs, 7)];
        Ts  = Cr[WS(cs, 1)];
        Tm  = Ti - Tl;
        T10 = SIMD_FMADD(KP2_000000000, Ti, Tl);
        Tt  = Cr[WS(cs, 7)];
        TF  = SIMD_FNMADD(KP1_732050807, TE, TD);
        TX  = SIMD_FMADD(KP1_732050807, TE, TD);
        Tp  = Cr[WS(cs, 11)];
        TY  = SIMD_FNMADD(KP1_732050807, TH, TG);
        TI  = SIMD_FMADD(KP1_732050807, TH, TG);
        TU  = T6 + T5;
        T7  = T5 - T6;
        Tq  = Cr[WS(cs, 5)];
        TS  = Ta + T9;
        Tb  = T9 - Ta;
        TQ  = SIMD_FNMADD(KP1_732050807, TP, TO);
        Tu  = Ts + Tt;
        TB  = Ts - Tt;
        TJ  = TF + TI;
        Tx  = SIMD_FMADD(KP2_000000000, T4, T7);
        T8  = T4 - T7;
        Ty  = Tp - Tq;
        Tr  = Tp + Tq;
        TA  = SIMD_FNMADD(KP2_000000000, Tc, Tb);
        Td  = Tb + Tc;
        TR  = SIMD_FNMADD(KP2_000000000, To, Tu);
        Tz  = SIMD_FMADD(KP1_732050807, Ty, Tx);
        Tv  = (Tn - To) + (Tr - Tu);
        TT  = SIMD_FNMADD(KP2_000000000, Tn, Tr);
        TC  = SIMD_FMADD(KP1_732050807, TB, TA);
        T12 = SIMD_FMADD(KP1_732050807, TB, Tx) -
              (SIMD_FMADD(KP1_732050807, Ty, TA));
        Th            = SIMD_FMADD(KP1_414213562, T8 + Td, T3) - Tg;
        R0[WS(rs, 3)] = T3 + SIMD_FMADD(KP2_000000000, Td - TM - (T8 + TN), Tg);
        TW            = SIMD_FMADD(KP1_732050807, TS, TR);
        Tw            = SIMD_FMADD(KP707106781, Tv, Tm);
        R0[WS(rs, 1)] = TJ - TQ - (SIMD_FNMADD(KP1_732050807, TS, TR)) -
                        (SIMD_FMADD(KP1_732050807, TU, TT));
        TV            = SIMD_FNMADD(KP1_732050807, TU, TT);
        R0[WS(rs, 7)] = Tz + TC + TJ + TQ;
        T15           = TC - (SIMD_FNMADD(KP1_732050807, TS, TR)) -
              (Tz - (SIMD_FMADD(KP1_732050807, TU, TT)));
        T13           = SIMD_FNMADD(KP408248290, T12, T11);
        R0[WS(rs, 6)] = SIMD_FNMADD(KP2_000000000, Tw, Th);
        R0[0]         = SIMD_FMADD(KP2_000000000, Tw, Th);
        R0[WS(rs, 5)] =
            (SIMD_FNMADD(KP1_732050807, TP, TV)) + TW + TX + TY - TO;
        TZ = SIMD_FMADD(KP707106781, TW - TV, TX) - TY;
        R0[WS(rs, 4)] =
            T10 +
            SIMD_FMADD(KP1_732050807, SIMD_FMADD(KP408248290, T15, T11), TF) -
            TI;
        T14           = SIMD_FNMADD(KP1_732050807, T13, T10);
        R0[WS(rs, 8)] = TZ + T14;
        R0[WS(rs, 2)] = TZ - T14;
    }
}

template <>
struct r2cb_traits<24, 16>
{
    static constexpr long_t flops           = 113;
    static constexpr long_t operations      = 80;
    static constexpr long_t memory_accesses = 32;
    static constexpr long_t stack_vars      = 68;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 16 -name
 * r2cb -standalone */

/*
 * This function contains 80 FP additions, 33 FP multiplications,
 * (or, 47 additions, 0 multiplications, 33 fused multiply/add),
 * 68 stack variables, 4 constants, and 32 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 16>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tv, TH, Tf, TP, Tu, TJ, Tn, Tz, TG, TM, TY, TZ, Tw, TI, Tc;
        SIMD_FLOAT TB, T5, Td, Ta, TC, Tj, TO, Tr, TL, TA, TR, Tm, Tk, Tl, Ts;
        SIMD_FLOAT Tt, Tx, Ty, T4, T1, T2, T9, T6, T7, Tp, Tq, T3, Th, T8, Ti;
        SIMD_FLOAT TK, Te, Tb, T10, TQ, T11, TN, To, Tg, TV, TW, TS, T12, TD,
            TE;
        SIMD_FLOAT TX, TT, TF, TU;
        Tv  = Cr[WS(cs, 6)];
        Ts  = Cr[WS(cs, 10)];
        Tt  = Cr[WS(cs, 2)];
        TH  = Ci[WS(cs, 6)];
        Tx  = Ci[WS(cs, 10)];
        Ty  = Ci[WS(cs, 2)];
        T4  = Ci[WS(cs, 8)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 8)];
        T9  = Ci[WS(cs, 4)];
        T6  = Cr[WS(cs, 12)];
        T7  = Cr[WS(cs, 4)];
        Tf  = Cr[WS(cs, 9)];
        TP  = Ci[WS(cs, 9)];
        Tu  = Ts + Tt;
        TJ  = Ts - Tt;
        Tn  = Cr[WS(cs, 3)];
        Tz  = Tx - Ty;
        TG  = Tx + Ty;
        TM  = Ci[WS(cs, 3)];
        T3  = T1 - T2;
        TY  = SIMD_FMADD(KP2_000000000, T2, T1);
        Th  = Ci[WS(cs, 1)];
        TZ  = SIMD_FMADD(KP2_000000000, T7, T6);
        T8  = T6 - T7;
        Ti  = Ci[WS(cs, 7)];
        Tp  = Ci[WS(cs, 11)];
        Tw  = SIMD_FNMADD(KP2_000000000, Tv, Tu);
        Tq  = Ci[WS(cs, 5)];
        Tk  = Cr[WS(cs, 11)];
        TI  = SIMD_FMADD(KP2_000000000, TH, TG);
        Tl  = Cr[WS(cs, 5)];
        Tc  = Cr[WS(cs, 1)];
        TB  = SIMD_FMADD(KP1_732050807, T4, T3);
        T5  = SIMD_FNMADD(KP1_732050807, T4, T3);
        Td  = Cr[WS(cs, 7)];
        Ta  = SIMD_FMADD(KP1_732050807, T9, T8);
        TC  = SIMD_FNMADD(KP1_732050807, T9, T8);
        Tj  = Th + Ti;
        TO  = Th - Ti;
        Tr  = Tp + Tq;
        TL  = Tq - Tp;
        TA  = SIMD_FNMADD(KP1_732050807, Tz, Tw);
        TR  = Tk - Tl;
        Tm  = Tk + Tl;
        TK  = Tc - Td;
        Te  = Tc + Td;
        Tb  = T5 + Ta;
        T10 = TO + TP;
        TQ  = SIMD_FNMADD(KP2_000000000, TP, TO);
        T11 = TM - TL;
        TN  = SIMD_FMADD(KP2_000000000, TM, TL);
        To  = SIMD_FNMADD(KP2_000000000, Tn, Tm);
        Tg  = SIMD_FNMADD(KP2_000000000, Tf, Te);
        TV  = SIMD_FMADD(KP1_732050807, TK, TQ);
        TW  = SIMD_FMADD(KP1_732050807, TR, TN);
        TS  = SIMD_FMADD(KP1_732050807, TK, TN) -
             (SIMD_FMADD(KP1_732050807, TR, TQ));
        T12 = (Te - Tm) + (Tf + T11 + T10 - Tn);
        R0[WS(rs, 2)] =
            TY + SIMD_FMADD(KP2_000000000, T10 - (Tv + T11) - Tu, TZ);
        TD    = SIMD_FNMADD(KP1_732050807, Tr, To);
        R0[0] = Tb - (SIMD_FNMADD(KP1_732050807, Tj, Tg)) -
                (SIMD_FMADD(KP1_732050807, Tr, To)) - TA;
        TE            = SIMD_FMADD(KP1_732050807, Tj, Tg);
        R0[WS(rs, 6)] = Tb + TA + TW + TV;
        TX            = TV - (TW - (SIMD_FMADD(KP1_732050807, Tr, To))) -
             (SIMD_FNMADD(KP1_732050807, Tj, Tg));
        TT = SIMD_FNMADD(KP408248290, TS, TJ);
        R0[WS(rs, 5)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, T12, TG), TY) -
            (SIMD_FMADD(KP2_000000000, TH, TZ));
        R0[WS(rs, 4)] =
            TB + TC + (SIMD_FNMADD(KP1_732050807, Tz, TD)) + TE - Tw;
        TF = SIMD_FMADD(KP707106781, TE - TD, TB) - TC;
        R0[WS(rs, 3)] =
            T5 +
            SIMD_FMADD(KP1_732050807, SIMD_FMADD(KP408248290, TX, TJ), TI) - Ta;
        TU            = SIMD_FNMADD(KP1_732050807, TT, TI);
        R0[WS(rs, 7)] = TF + TU;
        R0[WS(rs, 1)] = TF - TU;
    }
}

template <>
struct r2cb_traits<24, 17>
{
    static constexpr long_t flops           = 104;
    static constexpr long_t operations      = 76;
    static constexpr long_t memory_accesses = 31;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 17 -name
 * r2cb -standalone */

/*
 * This function contains 75 FP additions, 29 FP multiplications,
 * (or, 47 additions, 1 multiplications, 28 fused multiply/add),
 * 66 stack variables, 4 constants, and 31 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 17>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT TX, Tx, T9, TH, TB, TY, Ti, TZ, Tw, TE, TW, TS, Ty, Ts, TR;
        SIMD_FLOAT T10, T5, TN, TG, Td, TD, Tm, Th, TJ, T8, TC, T4, Tb, T3, Tc;
        SIMD_FLOAT Tk, Tl, Tf, Tg, T6, T7, Tz, TA, Tu, Tv, Tr, To, Tp, T1, T2;
        SIMD_FLOAT Tq, TU, TI, TT, TF, Tj, Ta, TO, TP, TK, TV, Tn, Te, TQ, TL;
        SIMD_FLOAT Tt, TM;
        TX  = Cr[WS(cs, 6)];
        Tz  = Cr[WS(cs, 10)];
        TA  = Cr[WS(cs, 2)];
        Tx  = Ci[WS(cs, 6)];
        Tu  = Ci[WS(cs, 10)];
        Tv  = Ci[WS(cs, 2)];
        Tr  = Ci[WS(cs, 4)];
        To  = Cr[WS(cs, 12)];
        Tp  = Cr[WS(cs, 4)];
        T4  = Ci[WS(cs, 8)];
        T1  = Cr[0];
        T2  = Cr[WS(cs, 8)];
        T9  = Cr[WS(cs, 9)];
        TH  = Ci[WS(cs, 9)];
        TB  = Tz - TA;
        TY  = Tz + TA;
        Ti  = Cr[WS(cs, 3)];
        TZ  = KP1_732050807 * (Tv - Tu);
        Tw  = Tu + Tv;
        TE  = Ci[WS(cs, 3)];
        Tq  = To - Tp;
        TW  = SIMD_FMADD(KP2_000000000, Tp, To);
        Tb  = Ci[WS(cs, 1)];
        TS  = SIMD_FMADD(KP2_000000000, T2, T1);
        T3  = T1 - T2;
        Tc  = Ci[WS(cs, 7)];
        Tk  = Ci[WS(cs, 11)];
        Tl  = Ci[WS(cs, 5)];
        Tf  = Cr[WS(cs, 11)];
        Tg  = Cr[WS(cs, 5)];
        Ty  = SIMD_FMADD(KP2_000000000, Tx, Tw);
        T6  = Cr[WS(cs, 1)];
        T7  = Cr[WS(cs, 7)];
        Ts  = SIMD_FNMADD(KP1_732050807, Tr, Tq);
        TR  = SIMD_FMADD(KP1_732050807, Tr, Tq);
        T10 = SIMD_FNMADD(KP2_000000000, TX, TY);
        T5  = SIMD_FMADD(KP1_732050807, T4, T3);
        TN  = SIMD_FNMADD(KP1_732050807, T4, T3);
        TG  = Tb - Tc;
        Td  = Tb + Tc;
        TD  = Tl - Tk;
        Tm  = Tk + Tl;
        Th  = Tf + Tg;
        TJ  = Tf - Tg;
        T8  = T6 + T7;
        TC  = T6 - T7;
        TU  = TG + TH;
        TI  = SIMD_FNMADD(KP2_000000000, TH, TG);
        TT  = TE - TD;
        TF  = SIMD_FMADD(KP2_000000000, TE, TD);
        Tj  = SIMD_FNMADD(KP2_000000000, Ti, Th);
        Ta  = SIMD_FNMADD(KP2_000000000, T9, T8);
        TO  = SIMD_FMADD(KP1_732050807, TC, TI);
        TP  = SIMD_FMADD(KP1_732050807, TJ, TF);
        TK  = SIMD_FMADD(KP1_732050807, TC, TF) -
             (SIMD_FMADD(KP1_732050807, TJ, TI));
        TV            = (T8 - Th) + (TT + TU - (Ti - T9));
        R0[WS(rs, 1)] = TS + SIMD_FMADD(KP2_000000000, TU - (TT + TX) - TY, TW);
        Tn            = SIMD_FNMADD(KP1_732050807, Tm, Tj);
        Te            = SIMD_FMADD(KP1_732050807, Td, Ta);
        R0[WS(rs, 5)] = TN + TR + TZ + TP + TO + T10;
        TQ            = SIMD_FMADD(KP1_732050807, Tm + Td, TO) - (Ta + TP - Tj);
        TL            = SIMD_FNMADD(KP408248290, TK, TB);
        R0[WS(rs, 4)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, TV, Tw), TS) -
            (SIMD_FMADD(KP2_000000000, Tx, TW));
        R0[WS(rs, 3)] = T5 + Ts + TZ + Tn + Te - T10;
        Tt            = SIMD_FMADD(KP707106781, Te - Tn, T5) - Ts;
        R0[WS(rs, 2)] =
            TN +
            SIMD_FMADD(KP1_732050807, SIMD_FMADD(KP408248290, TQ, TB), Ty) - TR;
        TM            = SIMD_FNMADD(KP1_732050807, TL, Ty);
        R0[WS(rs, 6)] = Tt + TM;
        R0[0]         = Tt - TM;
    }
}

template <>
struct r2cb_traits<24, 18>
{
    static constexpr long_t flops           = 102;
    static constexpr long_t operations      = 75;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 62;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 18 -name
 * r2cb -standalone */

/*
 * This function contains 74 FP additions, 28 FP multiplications,
 * (or, 47 additions, 1 multiplications, 27 fused multiply/add),
 * 62 stack variables, 4 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 18>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tc, TG, TP, TM, T6, T3, TI, Tk, TF, Tu, TO, Ty, Ta, Td, Tl;
        SIMD_FLOAT To, TS, TT, Tr, TD, TL, TQ, T9, TK, TH, TJ, Tg, Tn, Tq, TB;
        SIMD_FLOAT Tp, Tm, TC, T7, T8, Te, Tf, T4, T5, T1, T2, Ti, Tj, Ts, Tt;
        SIMD_FLOAT Tw, Tx, TN, Tb, TA, TU, Tv, Th, TV, TE, Tz, TW, TR;
        Tc            = Cr[WS(cs, 6)];
        TG            = Ci[WS(cs, 6)];
        Tn            = Ci[WS(cs, 8)];
        Tq            = Ci[WS(cs, 4)];
        T4            = Cr[WS(cs, 12)];
        T5            = Cr[WS(cs, 4)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 8)];
        Ti            = Cr[WS(cs, 10)];
        Tj            = Cr[WS(cs, 2)];
        Ts            = Ci[WS(cs, 2)];
        Tt            = Ci[WS(cs, 10)];
        TP            = Cr[WS(cs, 3)];
        Tw            = Cr[WS(cs, 11)];
        Tx            = Cr[WS(cs, 5)];
        TM            = Cr[WS(cs, 9)];
        TB            = Cr[WS(cs, 1)];
        Tp            = T4 - T5;
        T6            = SIMD_FMADD(KP2_000000000, T5, T4);
        Tm            = T1 - T2;
        T3            = SIMD_FMADD(KP2_000000000, T2, T1);
        TI            = Ti - Tj;
        Tk            = Ti + Tj;
        TF            = Tt + Ts;
        Tu            = KP1_732050807 * (Ts - Tt);
        TC            = Cr[WS(cs, 7)];
        TO            = Tw + Tx;
        Ty            = Tw - Tx;
        Ta            = Ci[WS(cs, 9)];
        T7            = Ci[WS(cs, 1)];
        T8            = Ci[WS(cs, 7)];
        Td            = Ci[WS(cs, 3)];
        Te            = Ci[WS(cs, 5)];
        Tf            = Ci[WS(cs, 11)];
        Tl            = SIMD_FNMADD(KP2_000000000, Tc, Tk);
        To            = SIMD_FNMADD(KP1_732050807, Tn, Tm);
        TS            = SIMD_FMADD(KP1_732050807, Tn, Tm);
        TT            = SIMD_FNMADD(KP1_732050807, Tq, Tp);
        Tr            = SIMD_FMADD(KP1_732050807, Tq, Tp);
        TD            = TB - TC;
        TL            = TB + TC;
        TQ            = SIMD_FNMADD(KP2_000000000, TP, TO);
        T9            = T7 - T8;
        TK            = T8 + T7;
        TH            = SIMD_FMADD(KP2_000000000, TG, TF);
        TJ            = Tf + Te;
        Tg            = Te - Tf;
        TN            = SIMD_FNMADD(KP2_000000000, TM, TL);
        Tb            = T9 + Ta;
        TA            = SIMD_FNMADD(KP2_000000000, Ta, T9);
        TU            = SIMD_FNMADD(KP1_732050807, TJ, TQ);
        Tv            = SIMD_FMADD(KP2_000000000, Td, Tg);
        Th            = Td - Tg;
        TV            = SIMD_FMADD(KP1_732050807, TK, TN);
        TE            = SIMD_FMADD(KP1_732050807, TD, TA);
        Tz            = SIMD_FMADD(KP1_732050807, Ty, Tv);
        TW            = (Th + Tb - (TP - TM)) + (TL - TO);
        R0[0]         = T3 + SIMD_FMADD(KP2_000000000, Tb - (Tc + Th) - Tk, T6);
        R0[WS(rs, 5)] = TS +
                        SIMD_FMADD(KP707106781,
                                   SIMD_FMADD(KP1_732050807, TD, Tv) + TV -
                                       (SIMD_FMADD(KP1_732050807, Ty, TA)) - TU,
                                   TH) -
                        (SIMD_FMADD(KP1_732050807, TI, TT));
        R0[WS(rs, 2)] = TS + TT + Tu + TU + TV - Tl;
        R0[WS(rs, 4)] = Tl + To + Tr + Tu + Tz + TE;
        TR            = SIMD_FMADD(KP1_732050807, TJ + TK, TE) - (Tz + TN - TQ);
        R0[WS(rs, 3)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, TW, TF), T3) -
            (SIMD_FMADD(KP2_000000000, TG, T6));
        R0[WS(rs, 1)] =
            To +
            SIMD_FMADD(KP1_732050807, SIMD_FMADD(KP408248290, TR, TI), TH) - Tr;
    }
}

template <>
struct r2cb_traits<24, 19>
{
    static constexpr long_t flops           = 94;
    static constexpr long_t operations      = 70;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 58;
    static constexpr long_t constants       = 4;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 19 -name
 * r2cb -standalone */

/*
 * This function contains 69 FP additions, 25 FP multiplications,
 * (or, 45 additions, 1 multiplications, 24 fused multiply/add),
 * 58 stack variables, 4 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 19>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT Tq, Tp, T1, Tl, Tk, TQ, Tn, TS, TK, Tj, TB, Tm, Tb, TD, Tg;
        SIMD_FLOAT Tc, T7, Tt, TL, TP, TH, Tu, TC, Ta, Tv, Ts, TG, T6, T2, TF;
        SIMD_FLOAT Tr, T5, T8, T9, T3, T4, TI, TR, TJ, Th, Ti, Te, Tf, Tz, Td;
        SIMD_FLOAT Tx, TE, Tw, TN, To, TA, Ty, TM, TO;
        Tq = Ci[WS(cs, 6)];
        Ts = Ci[WS(cs, 8)];
        TG = Ci[WS(cs, 4)];
        T6 = Cr[WS(cs, 4)];
        Tp = Cr[WS(cs, 12)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 8)];
        T3 = Ci[WS(cs, 10)];
        T4 = Ci[WS(cs, 2)];
        TI = Cr[WS(cs, 10)];
        TR = Cr[WS(cs, 6)];
        TJ = Cr[WS(cs, 2)];
        Tl = Cr[WS(cs, 3)];
        Th = Cr[WS(cs, 11)];
        Ti = Cr[WS(cs, 5)];
        Tk = Ci[WS(cs, 3)];
        TF = Tp - T6;
        Te = Ci[WS(cs, 5)];
        Tr = T1 - T2;
        Tf = Ci[WS(cs, 11)];
        T5 = T3 + T4;
        TQ = KP1_732050807 * (T4 - T3);
        Tn = Cr[WS(cs, 9)];
        TS = SIMD_FMSUB(KP2_000000000, TR, TJ) - TI;
        TK = TI - TJ;
        T8 = Cr[WS(cs, 1)];
        Tj = Th + Ti;
        TB = Th - Ti;
        T9 = Cr[WS(cs, 7)];
        Tm = Ci[WS(cs, 9)];
        Tb = Ci[WS(cs, 1)];
        TD = Tf + Te;
        Tg = Te - Tf;
        Tc = Ci[WS(cs, 7)];
        T7 = T2 + T5 - T6;
        Tt = SIMD_FMADD(KP1_732050807, Ts, Tr);
        TL = SIMD_FNMADD(KP1_732050807, Ts, Tr);
        TP = SIMD_FMADD(KP1_732050807, TG, TF);
        TH = SIMD_FNMADD(KP1_732050807, TG, TF);
        Tu = SIMD_FMADD(KP2_000000000, Tq, T5);
        TC = SIMD_FNMADD(KP2_000000000, Tl, Tj);
        Ta = T8 + T9;
        Tv = T8 - T9;
        Tz = SIMD_FMADD(KP2_000000000, Tk, Tg);
        Td = Tb - Tc;
        Tx = Tb + Tc;
        TE = SIMD_FNMADD(KP1_732050807, TD, TC);
        Tw = SIMD_FNMADD(KP2_000000000, Tn, Ta);
        TN = SIMD_FMADD(KP1_732050807, TB, Tz);
        To = (Ta + Td - Tg - Tj) + (Tk - (Tl - Tm - Tn));
        TA = SIMD_FNMADD(KP2_000000000, Tm, Td);
        Ty = SIMD_FMADD(KP1_732050807, Tx, Tw);
        R0[WS(rs, 2)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, To, T7), T1) -
            (SIMD_FMADD(KP2_000000000, Tq, Tp));
        TM            = SIMD_FMADD(KP1_732050807, Tv, TA);
        R0[WS(rs, 4)] = Tt +
                        SIMD_FMADD(KP707106781,
                                   SIMD_FMADD(KP1_732050807, Tv, Ty) + Tz -
                                       (SIMD_FMADD(KP1_732050807, TB, TA)) - TE,
                                   Tu) -
                        (SIMD_FMADD(KP1_732050807, TK, TH));
        R0[WS(rs, 1)] = Tt + TH + TQ + TE + Ty + TS;
        R0[WS(rs, 3)] = TL + TP + TQ + TN + TM - TS;
        TO            = SIMD_FMADD(KP1_732050807, TD + Tx, TM) - (Tw + TN - TC);
        R0[0]         = TL +
                SIMD_FMADD(KP1_732050807, SIMD_FMADD(KP408248290, TO, TK), Tu) -
                TP;
    }
}

template <>
struct r2cb_traits<24, 20>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 58;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 57;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 20 -name
 * r2cb -standalone */

/*
 * This function contains 58 FP additions, 20 FP multiplications,
 * (or, 38 additions, 0 multiplications, 20 fused multiply/add),
 * 57 stack variables, 5 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 20>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP408248290, +0.408248290463863016366214012450981898660991247);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, T1, T9, TH, T6, Tl, TE, T3, Tu, TF, T8, Th, TA, Tm, Te;
        SIMD_FLOAT TO, Tn, Tr, Ts, Tv, Tw, T5, TL, Tk, TB, Ta, T2, T7, Ti, Tj;
        SIMD_FLOAT Tf, Tg, Tb, Td, Tc, TC, To, TI, Tt, TD, Tx, TM, Tp, TJ, TG;
        SIMD_FLOAT Ty, TN, Tq, TK, Tz, TP, TQ;
        T4 = Ci[WS(cs, 8)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 8)];
        T9 = Ci[WS(cs, 4)];
        TH = Ci[WS(cs, 6)];
        T6 = Cr[WS(cs, 12)];
        T7 = Cr[WS(cs, 4)];
        Tf = Ci[WS(cs, 2)];
        Tg = Ci[WS(cs, 10)];
        Tb = Cr[WS(cs, 6)];
        Td = Cr[WS(cs, 10)];
        Tc = Cr[WS(cs, 2)];
        Tl = Cr[WS(cs, 3)];
        TE = Ci[WS(cs, 3)];
        T3 = T1 - T2;
        Tu = Cr[WS(cs, 9)];
        TF = Ci[WS(cs, 9)];
        Ti = Cr[WS(cs, 11)];
        T8 = T6 - T7;
        Tj = Cr[WS(cs, 5)];
        Th = Tf - Tg;
        TA = Tg + Tf;
        Tm = Ci[WS(cs, 11)];
        Te = SIMD_FMSUB(KP2_000000000, Tb, Tc) - Td;
        TO = Tc - Td;
        Tn = Ci[WS(cs, 5)];
        Tr = Cr[WS(cs, 1)];
        Ts = Cr[WS(cs, 7)];
        Tv = Ci[WS(cs, 1)];
        Tw = Ci[WS(cs, 7)];
        T5 = SIMD_FMADD(KP1_732050807, T4, T3);
        TL = Tj - Ti;
        Tk = Ti + Tj;
        TB = T2 + TA - T7;
        Ta = SIMD_FNMADD(KP1_732050807, T9, T8);
        TC = Tn - Tm;
        To = Tm + Tn;
        TI = Tr - Ts;
        Tt = Tr + Ts;
        TD = Tw - Tv;
        Tx = Tv + Tw;
        TM = SIMD_FMADD(KP866025403, TL, TF);
        Tp = SIMD_FMADD(KP866025403, To, Tl);
        TJ = SIMD_FMADD(KP866025403, TI, TE);
        TG = (Tt - (TC + TD) - Tk) + (TE + TF - (Tl - Tu));
        Ty = SIMD_FMSUB(KP866025403, Tx, Tu);
        TN = SIMD_FMADD(KP2_000000000, TM, TD);
        Tq = SIMD_FNMADD(KP2_000000000, Tp, Tk);
        TK = SIMD_FMADD(KP2_000000000, TJ, TC);
        R0[WS(rs, 1)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, TG, TB), T1) -
            (SIMD_FMADD(KP2_000000000, TH, T6));
        Tz            = SIMD_FMADD(KP2_000000000, Ty, Tt);
        R0[WS(rs, 2)] = T3 + SIMD_FMADD(KP1_732050807, T9 + Th, T8) + TK -
                        (SIMD_FMADD(KP1_732050807, T4, Te) + TN);
        R0[0] = T5 + Ta + SIMD_FMADD(KP1_732050807, Th, Te) + Tq + Tz;
        TP    = Tz + TK + TN - Tq;
        TQ    = SIMD_FMADD(KP408248290, TP, TO);
        R0[WS(rs, 3)] =
            T5 +
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP866025403, TQ, TH), TA) - Ta;
    }
}

template <>
struct r2cb_traits<24, 21>
{
    static constexpr long_t flops           = 63;
    static constexpr long_t operations      = 48;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 51;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 21 -name
 * r2cb -standalone */

/*
 * This function contains 48 FP additions, 15 FP multiplications,
 * (or, 33 additions, 0 multiplications, 15 fused multiply/add),
 * 51 stack variables, 5 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 21>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP577350269, +0.577350269189625764509148780501957455647601751);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP707106781, +0.707106781186547524400844362104849039284835938);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT TC, TA, TB, T5, Tr, T1, T6, T7, TG, Tj, T4, TD, Tk, TF, Td;
        SIMD_FLOAT Te, Tz, Tl, Tn, Ta, Tm, To, Tg, Th, T2, T3, TE, Ty, T8, T9;
        SIMD_FLOAT Tf, Tv, Tb, Tp, Ts, TH, Ti, Tw, Tc, Tt, Tq, Tx, Tu, TI, TJ;
        SIMD_FLOAT TK;
        TC = Cr[WS(cs, 6)];
        TA = Cr[WS(cs, 10)];
        TB = Cr[WS(cs, 2)];
        T2 = Ci[WS(cs, 10)];
        T3 = Ci[WS(cs, 2)];
        T5 = Cr[WS(cs, 4)];
        TE = Ci[WS(cs, 8)];
        Tr = Cr[WS(cs, 12)];
        T1 = Cr[0];
        Ty = Ci[WS(cs, 4)];
        T6 = Cr[WS(cs, 8)];
        T7 = Ci[WS(cs, 6)];
        T8 = Cr[WS(cs, 9)];
        T9 = Cr[WS(cs, 3)];
        TG = TB - TA;
        Tj = Ci[WS(cs, 3)];
        T4 = T2 + T3;
        TD = T3 - T2;
        Tk = Ci[WS(cs, 9)];
        TF = SIMD_FMADD(KP1_732050807, TE, T5) - Tr;
        Td = Ci[WS(cs, 1)];
        Te = Ci[WS(cs, 7)];
        Tz = SIMD_FMADD(KP1_732050807, Ty, T1) - T6;
        Tl = Cr[WS(cs, 1)];
        Tn = Cr[WS(cs, 7)];
        Ta = T8 - T9;
        Tm = Cr[WS(cs, 11)];
        To = Cr[WS(cs, 5)];
        Tg = Ci[WS(cs, 5)];
        Th = Ci[WS(cs, 11)];
        Tf = Td - Te;
        Tv = Tl - Tn;
        Tb = SIMD_FMSUB(KP707106781, Ta, T7);
        Tp = Tl - (Tm - Tn) - To;
        Ts = Tm - To;
        TH = Tg + (Th + Te) + Td;
        Ti = Tg - Th;
        Tw = SIMD_FMADD(KP866025403, Tv, Tj);
        Tc = (T4 - (T5 - T6)) + Tb;
        Tt = SIMD_FMSUB(KP866025403, Ts, Tk);
        Tq = (Tf - Ti) + (Tj + Tk) + Tp;
        Tx = SIMD_FMADD(KP2_000000000, Tw, Ti);
        Tu = SIMD_FMADD(KP2_000000000, Tt, Tf);
        R0[0] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP707106781, Tq, Tc), T1) - Tr;
        TI = Tp + (Tx - Tu);
        R0[WS(rs, 1)] =
            Tu + Tx + Tz + TA +
            SIMD_FMADD(KP2_000000000, SIMD_FMSUB(KP866025403, TD, TC), TB) - TF;
        TJ = SIMD_FMADD(KP577350269, TI, TH);
        TK = SIMD_FMADD(KP707106781, TJ, TG);
        R0[WS(rs, 2)] =
            T4 + TF +
            SIMD_FNMADD(KP2_000000000, SIMD_FNMADD(KP866025403, TK, Tb), Tz);
    }
}

template <>
struct r2cb_traits<24, 22>
{
    static constexpr long_t flops           = 47;
    static constexpr long_t operations      = 38;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 42;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 22 -name
 * r2cb -standalone */

/*
 * This function contains 38 FP additions, 9 FP multiplications,
 * (or, 29 additions, 0 multiplications, 9 fused multiply/add),
 * 42 stack variables, 7 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 22>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP896575472, +0.896575472168053524103891048961601421871534073);
    DK(KP816496580, +0.816496580927726032732428024901963797321982494);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT Tq, T9, Ta, Tb, Tc, To, Tl, Tm, Ts, Tj, Ti, T4, Tk, Tf, T8;
        SIMD_FLOAT Th, Tp, Td, Tt, Tw, Te, Tu, T1, T3, T2, T5, T7, T6, Tn, Tr;
        SIMD_FLOAT Tg, Tv, Tx, Ty, Tz;
        Tq    = Ci[WS(cs, 6)];
        T9    = Cr[WS(cs, 10)];
        Ta    = Cr[WS(cs, 2)];
        T1    = Cr[WS(cs, 12)];
        T3    = Ci[WS(cs, 8)];
        T2    = Cr[WS(cs, 4)];
        T5    = Cr[0];
        T7    = Cr[WS(cs, 8)];
        T6    = Ci[WS(cs, 4)];
        Tb    = Ci[WS(cs, 5)];
        Tc    = Ci[WS(cs, 1)];
        To    = Ci[WS(cs, 11)];
        Tl    = Cr[WS(cs, 7)];
        Tm    = Cr[WS(cs, 5)];
        Ts    = Ta - T9;
        Tj    = Cr[WS(cs, 11)];
        Ti    = Ci[WS(cs, 10)];
        T4    = T1 + SIMD_FNMSUB(KP1_732050807, T3, T2);
        Tk    = Cr[WS(cs, 1)];
        Tf    = Cr[WS(cs, 6)];
        T8    = SIMD_FMADD(KP1_732050807, T6, T5) - T7;
        Th    = Ci[WS(cs, 2)];
        Tp    = Ci[WS(cs, 7)];
        Td    = Ci[WS(cs, 3)];
        Tt    = Cr[WS(cs, 3)];
        Tw    = (To + Tc) + (Tm - Tl);
        Te    = Ci[WS(cs, 9)];
        Tu    = Cr[WS(cs, 9)];
        Tn    = (Th - Ti) + Tj + Tk - Tl - Tm;
        Tr    = (Tb + Tp) + (Tk - Tj);
        Tg    = Td - Te - Tf;
        Tv    = (Td + Te) + (Tt - Tu);
        R0[0] = T4 + T8 + T9 + Ta + Tb +
                SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP866025403, Tn, Tg), Tc) -
                To - Tp;
        Tx = SIMD_FMADD(KP366025403, Tw, Tv);
        Ty = SIMD_FMADD(KP816496580, Tx, Ts);
        Tz = SIMD_FMADD(KP896575472, Ty, Tr);
        R0[WS(rs, 1)] =
            T8 + Ti +
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP965925826, Tz, Tq), Th) - T4;
    }
}

template <>
struct r2cb_traits<24, 23>
{
    static constexpr long_t flops           = 27;
    static constexpr long_t operations      = 22;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 35;
    static constexpr long_t constants       = 5;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 24 -skip-k 23 -name
 * r2cb -standalone */

/*
 * This function contains 22 FP additions, 5 FP multiplications,
 * (or, 17 additions, 0 multiplications, 5 fused multiply/add),
 * 35 stack variables, 5 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 24 && SkippedOutputs == 23>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP965925826, +0.965925826289068286749743199728897367633904839);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP896575472, +0.896575472168053524103891048961601421871534073);
    DK(KP816496580, +0.816496580927726032732428024901963797321982494);
    DK(KP366025403, +0.366025403784438646763723170752936183471402627);
    {
        SIMD_FLOAT T1, T3, Tu, T2, Tt, T5, T4, T6, T9, T7, T8, Tg, Th, Ti, Tj;
        SIMD_FLOAT Tl, To, Tm, Tf, Tn, Tb, Te, Tc, Td, Ta, Tk, Tp, Tq, Tr, Ts;
        T1    = Cr[0];
        T3    = Ci[WS(cs, 10)];
        Tu    = Cr[WS(cs, 12)];
        T2    = Cr[WS(cs, 4)];
        Tt    = Cr[WS(cs, 8)];
        T5    = Ci[WS(cs, 6)];
        T4    = Ci[WS(cs, 2)];
        Tb    = Ci[WS(cs, 8)];
        Te    = Cr[WS(cs, 10)];
        Tc    = Ci[WS(cs, 4)];
        Td    = Cr[WS(cs, 2)];
        T6    = Ci[WS(cs, 5)];
        T9    = Cr[WS(cs, 11)];
        T7    = Cr[WS(cs, 1)];
        T8    = Ci[WS(cs, 7)];
        Tg    = Cr[WS(cs, 3)];
        Th    = Ci[WS(cs, 3)];
        Ti    = Ci[WS(cs, 9)];
        Tj    = Cr[WS(cs, 9)];
        Tl    = Cr[WS(cs, 5)];
        To    = Cr[WS(cs, 7)];
        Tm    = Ci[WS(cs, 11)];
        Tf    = Tb + Tc + Td - Te;
        Tn    = Ci[WS(cs, 1)];
        Ta    = T6 + T7 + T8 - T9;
        Tk    = Tg + Th + Ti - Tj;
        Tp    = Tl + Tm + Tn - To;
        Tq    = SIMD_FMADD(KP366025403, Tp, Tk);
        Tr    = SIMD_FMADD(KP816496580, Tq, Tf);
        Ts    = SIMD_FMADD(KP896575472, Tr, Ta);
        R0[0] = T1 + T2 + T3 +
                SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP965925826, Ts, T5), T4) -
                (Tt + Tu);
    }
}

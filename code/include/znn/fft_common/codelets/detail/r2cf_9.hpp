//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<9, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 6;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 6 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1            = R0[0];
        Cr[WS(cs, 3)] = T1;
        Cr[WS(cs, 2)] = T1;
        Cr[WS(cs, 1)] = T1;
        Cr[WS(cs, 4)] = T1;
        Cr[0]         = T1;
    }
}

template <>
struct r2cf_traits<9, 2>
{
    static constexpr long_t flops           = 13;
    static constexpr long_t operations      = 9;
    static constexpr long_t memory_accesses = 11;
    static constexpr long_t stack_vars      = 10;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 5 FP additions, 8 FP multiplications,
 * (or, 1 additions, 4 multiplications, 4 fused multiply/add),
 * 10 stack variables, 8 constants, and 11 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP766044443, +0.766044443118978035202392650555416673935832457);
    DK(KP173648177, +0.173648177666930348851716626769314796000375677);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP342020143, +0.342020143325668733044099614682259580763083368);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP642787609, +0.642787609686539326322643409907263432907559884);
    {
        SIMD_FLOAT T1, T2;
        T1            = R0[WS(rs, 1)];
        T2            = R0[0];
        Ci[WS(cs, 1)] = -(KP642787609 * T1);
        Ci[WS(cs, 2)] = -(KP984807753 * T1);
        Ci[WS(cs, 3)] = -(KP866025403 * T1);
        Ci[WS(cs, 4)] = -(KP342020143 * T1);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP939692620, T1, T2);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP173648177, T1, T2);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP766044443, T1, T2);
        Cr[0]         = T2 + T1;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, T1, T2);
    }
}

template <>
struct r2cf_traits<9, 3>
{
    static constexpr long_t flops           = 27;
    static constexpr long_t operations      = 17;
    static constexpr long_t memory_accesses = 12;
    static constexpr long_t stack_vars      = 19;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 13 FP additions, 14 FP multiplications,
 * (or, 3 additions, 4 multiplications, 10 fused multiply/add),
 * 19 stack variables, 12 constants, and 12 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP766044443, +0.766044443118978035202392650555416673935832457);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP226681596, +0.226681596905677465811651808188092531873167623);
    DK(KP815207469, +0.815207469095904627298647952427796244129086440);
    DK(KP184792530, +0.184792530904095372701352047572203755870913560);
    DK(KP347296355, +0.347296355333860697703433253538629592000751354);
    DK(KP532088886, +0.532088886237956070404785301110833347871664914);
    DK(KP642787609, +0.642787609686539326322643409907263432907559884);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP652703644, +0.652703644666139302296566746461370407999248646);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    {
        SIMD_FLOAT T3, T1, T2, T6, T5, T7, T4;
        T3            = R0[0];
        T1            = R0[WS(rs, 1)];
        T2            = R0[WS(rs, 2)];
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FMADD(KP652703644, T1, T2)));
        Ci[WS(cs, 3)] = KP866025403 * (T2 - T1);
        Ci[WS(cs, 4)] = KP642787609 * (SIMD_FNMADD(KP532088886, T1, T2));
        Ci[WS(cs, 2)] = -(KP984807753 * (SIMD_FMADD(KP347296355, T2, T1)));
        T6            = SIMD_FMSUB(KP184792530, T1, T2);
        T5            = SIMD_FMSUB(KP815207469, T2, T1);
        T7            = T1 + T2;
        T4            = SIMD_FMADD(KP226681596, T2, T1);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP939692620, T6, T3);
        Cr[WS(cs, 4)] = SIMD_FMADD(KP939692620, T5, T3);
        Cr[0]         = T7 + T3;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, T7, T3);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP766044443, T4, T3);
    }
}

template <>
struct r2cf_traits<9, 4>
{
    static constexpr long_t flops           = 36;
    static constexpr long_t operations      = 22;
    static constexpr long_t memory_accesses = 13;
    static constexpr long_t stack_vars      = 24;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 18 FP additions, 18 FP multiplications,
 * (or, 4 additions, 4 multiplications, 14 fused multiply/add),
 * 24 stack variables, 11 constants, and 13 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP766044443, +0.766044443118978035202392650555416673935832457);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP226681596, +0.226681596905677465811651808188092531873167623);
    DK(KP184792530, +0.184792530904095372701352047572203755870913560);
    DK(KP815207469, +0.815207469095904627298647952427796244129086440);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP394930843, +0.394930843634698457567117349190734585290304520);
    DK(KP742227198, +0.742227198968559155270550602729364177291055874);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T7, T2, T3, Tc, T8, T6, T5, Ta, Tb, T9, Td, T4;
        T1            = R0[WS(rs, 1)];
        T7            = R0[0];
        T2            = R0[WS(rs, 3)];
        T3            = R0[WS(rs, 2)];
        Tc            = T2 + T7;
        T8            = SIMD_FNMADD(KP500000000, T2, T7);
        T6            = SIMD_FMADD(KP742227198, T1, T2);
        T5            = SIMD_FMADD(KP394930843, T1, T2);
        Ci[WS(cs, 3)] = KP866025403 * (T3 - T1);
        Ta            = SIMD_FMSUB(KP815207469, T3, T1);
        Tb            = SIMD_FMSUB(KP184792530, T1, T3);
        T9            = SIMD_FMADD(KP226681596, T3, T1);
        Td            = T1 + T3;
        T4            = SIMD_FNMADD(KP394930843, T3, T2);
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FMADD(KP879385241, T6, T3)));
        Ci[WS(cs, 4)] = -(KP866025403 * (SIMD_FNMADD(KP742227198, T3, T5)));
        Cr[WS(cs, 4)] = SIMD_FMADD(KP939692620, Ta, T8);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP939692620, Tb, T8);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP766044443, T9, T8);
        Cr[0]         = Td + Tc;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, Td, Tc);
        Ci[WS(cs, 2)] = -(KP984807753 * (SIMD_FNMADD(KP879385241, T4, T1)));
    }
}

template <>
struct r2cf_traits<9, 5>
{
    static constexpr long_t flops           = 51;
    static constexpr long_t operations      = 30;
    static constexpr long_t memory_accesses = 14;
    static constexpr long_t stack_vars      = 38;
    static constexpr long_t constants       = 16;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 5 -name r2cf
 * -standalone */

/*
 * This function contains 26 FP additions, 25 FP multiplications,
 * (or, 5 additions, 4 multiplications, 21 fused multiply/add),
 * 38 stack variables, 16 constants, and 14 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 5>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP605069156, +0.605069156365301542432882650809265414709695480);
    DK(KP907603734, +0.907603734547952313649323976213898122064543220);
    DK(KP817787731, +0.817787731270451643874434538792061687915445082);
    DK(KP673648177, +0.673648177666930348851716626769314796000375677);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP184792530, +0.184792530904095372701352047572203755870913560);
    DK(KP742227198, +0.742227198968559155270550602729364177291055874);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP532088886, +0.532088886237956070404785301110833347871664914);
    DK(KP815207469, +0.815207469095904627298647952427796244129086440);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T2, Te, T4, T1, T3, Tl, Tf, T7, Tb, T8, T5, Tm, T6, Tg, Tc;
        SIMD_FLOAT Tj, T9, Ta, Th, Tk, Td, Ti;
        T2            = R0[WS(rs, 3)];
        Te            = R0[0];
        T4            = R0[WS(rs, 2)];
        T1            = R0[WS(rs, 1)];
        T3            = R0[WS(rs, 4)];
        Tl            = T2 + Te;
        Tf            = SIMD_FNMADD(KP500000000, T2, Te);
        T7            = T1 + T3;
        Tb            = SIMD_FMSUB(KP815207469, T1, T3);
        T8            = SIMD_FNMADD(KP500000000, T3, T1);
        T5            = SIMD_FNMADD(KP532088886, T4, T3);
        Tm            = T7 + T4;
        Ci[WS(cs, 3)] = KP866025403 * (T4 - T7);
        T6            = SIMD_FMADD(KP742227198, T5, T2);
        Tg            = SIMD_FMADD(KP184792530, T4, Tb);
        Tc            = SIMD_FNMADD(KP184792530, T4, Tb);
        Tj            = SIMD_FMADD(KP203604859, T8, T3);
        T9            = SIMD_FMADD(KP968908795, T8, T3);
        Cr[0]         = Tm + Tl;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, Tm, Tl);
        Ci[WS(cs, 2)] = -(KP984807753 * (SIMD_FNMADD(KP879385241, T6, T1)));
        Cr[WS(cs, 1)] = SIMD_FMADD(KP939692620, Tg, Tf);
        Ta            = SIMD_FMADD(KP673648177, T9, T4);
        Th            = SIMD_FMADD(KP817787731, Tg, T9);
        Tk            = SIMD_FNMADD(KP907603734, Tj, T4);
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FMADD(KP879385241, T2, Ta)));
        Td            = SIMD_FNMADD(KP605069156, Ta, Tc);
        Ti            = SIMD_FNMADD(KP673648177, Th, T4);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP939692620, Tk, Tf);
        Ci[WS(cs, 4)] = -(KP866025403 * (SIMD_FMADD(KP939692620, Td, T2)));
        Cr[WS(cs, 4)] = SIMD_FMADD(KP852868531, Ti, Tf);
    }
}

template <>
struct r2cf_traits<9, 6>
{
    static constexpr long_t flops           = 62;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 15;
    static constexpr long_t stack_vars      = 47;
    static constexpr long_t constants       = 18;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 6 -name r2cf
 * -standalone */

/*
 * This function contains 32 FP additions, 30 FP multiplications,
 * (or, 6 additions, 4 multiplications, 26 fused multiply/add),
 * 47 stack variables, 18 constants, and 15 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 6>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP550901214, +0.550901214888713100765522248820456802666416215);
    DK(KP605069156, +0.605069156365301542432882650809265414709695480);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP898197570, +0.898197570222573798468955502359086394667167570);
    DK(KP673648177, +0.673648177666930348851716626769314796000375677);
    DK(KP789861687, +0.789861687269396915134234698381469170580609040);
    DK(KP907603734, +0.907603734547952313649323976213898122064543220);
    DK(KP226681596, +0.226681596905677465811651808188092531873167623);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP532088886, +0.532088886237956070404785301110833347871664914);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP815207469, +0.815207469095904627298647952427796244129086440);
    DK(KP347296355, +0.347296355333860697703433253538629592000751354);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T9, Tk, T1, T2, T4, T5, Tl, Ts, Ta, T3, Ti, Te, Tj, T6, Tf;
        SIMD_FLOAT Tb, Tt, T7, Tm, Tq, Tg, Tc, T8, Tp, Tn, Td, Th, Tr, To;
        T9            = R0[WS(rs, 3)];
        Tk            = R0[0];
        T1            = R0[WS(rs, 2)];
        T2            = R0[WS(rs, 5)];
        T4            = R0[WS(rs, 4)];
        T5            = R0[WS(rs, 1)];
        Tl            = SIMD_FNMADD(KP500000000, T9, Tk);
        Ts            = T9 + Tk;
        Ta            = SIMD_FNMADD(KP500000000, T2, T1);
        T3            = SIMD_FNMADD(KP347296355, T2, T1);
        Ti            = T1 + T2;
        Te            = SIMD_FMSUB(KP815207469, T5, T4);
        Tj            = T5 + T4;
        T6            = SIMD_FNMADD(KP500000000, T4, T5);
        Tf            = SIMD_FMSUB(KP203604859, Ta, T2);
        Tb            = SIMD_FNMADD(KP532088886, Ta, T4);
        Tt            = Tj + Ti;
        Ci[WS(cs, 3)] = KP866025403 * (Ti - Tj);
        T7            = SIMD_FMADD(KP968908795, T6, T4);
        Tm            = SIMD_FMADD(KP226681596, T6, T2);
        Tq            = SIMD_FMADD(KP907603734, Tf, Te);
        Tg            = SIMD_FNMADD(KP907603734, Tf, Te);
        Tc            = SIMD_FNMADD(KP789861687, Tb, T2);
        Cr[0]         = Tt + Ts;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, Tt, Ts);
        T8            = SIMD_FMADD(KP673648177, T7, T3);
        Tp            = SIMD_FNMADD(KP673648177, T7, T3);
        Tn            = SIMD_FMADD(KP898197570, Tm, T4);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP939692620, Tq, Tl);
        Td            = SIMD_FNMADD(KP939692620, Tc, T9);
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FMADD(KP879385241, T9, T8)));
        Th            = SIMD_FNMADD(KP605069156, T8, Tg);
        Tr            = SIMD_FNMADD(KP550901214, Tq, Tp);
        To            = SIMD_FNMADD(KP907603734, Tn, T1);
        Ci[WS(cs, 2)] = -(KP984807753 * (SIMD_FNMADD(KP879385241, Td, T5)));
        Ci[WS(cs, 4)] = -(KP866025403 * (SIMD_FMADD(KP939692620, Th, T9)));
        Cr[WS(cs, 4)] = SIMD_FMADD(KP852868531, Tr, Tl);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP939692620, To, Tl);
    }
}

template <>
struct r2cf_traits<9, 7>
{
    static constexpr long_t flops           = 64;
    static constexpr long_t operations      = 38;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 50;
    static constexpr long_t constants       = 18;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 7 -name r2cf
 * -standalone */

/*
 * This function contains 34 FP additions, 30 FP multiplications,
 * (or, 8 additions, 4 multiplications, 26 fused multiply/add),
 * 50 stack variables, 18 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 7>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP605069156, +0.605069156365301542432882650809265414709695480);
    DK(KP550901214, +0.550901214888713100765522248820456802666416215);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP898197570, +0.898197570222573798468955502359086394667167570);
    DK(KP673648177, +0.673648177666930348851716626769314796000375677);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP907603734, +0.907603734547952313649323976213898122064543220);
    DK(KP226681596, +0.226681596905677465811651808188092531873167623);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP394930843, +0.394930843634698457567117349190734585290304520);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP789861687, +0.789861687269396915134234698381469170580609040);
    DK(KP815207469, +0.815207469095904627298647952427796244129086440);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP347296355, +0.347296355333860697703433253538629592000751354);
    {
        SIMD_FLOAT Tm, T1, T2, T7, T8, T4, T5, Te, T3, Ta, T9, Tn, Tf, T6, Ti;
        SIMD_FLOAT Tc, Tj, To, Tv, Tb, Tw, Tg, Tp, Tk, Tt, Td, Ts, Th, Tq, Tu;
        SIMD_FLOAT Tl, Tr;
        Tm            = R0[0];
        T1            = R0[WS(rs, 2)];
        T2            = R0[WS(rs, 5)];
        T7            = R0[WS(rs, 6)];
        T8            = R0[WS(rs, 3)];
        T4            = R0[WS(rs, 1)];
        T5            = R0[WS(rs, 4)];
        Te            = SIMD_FNMADD(KP347296355, T2, T1);
        T3            = T1 + T2;
        Ta            = SIMD_FNMADD(KP500000000, T2, T1);
        T9            = T7 - T8;
        Tn            = T7 + T8;
        Tf            = SIMD_FNMADD(KP500000000, T5, T4);
        T6            = T4 + T5;
        Ti            = SIMD_FMSUB(KP815207469, T4, T5);
        Tc            = SIMD_FMSUB(KP789861687, T5, T2);
        Tj            = SIMD_FMSUB(KP203604859, Ta, T2);
        To            = SIMD_FNMADD(KP500000000, Tn, Tm);
        Tv            = Tn + Tm;
        Tb            = SIMD_FMADD(KP394930843, Ta, T9);
        Tw            = T6 + T3;
        Ci[WS(cs, 3)] = KP866025403 * (T3 - T6);
        Tg            = SIMD_FMADD(KP968908795, Tf, T5);
        Tp            = SIMD_FMADD(KP226681596, Tf, T2);
        Tk            = SIMD_FNMADD(KP907603734, Tj, Ti);
        Tt            = SIMD_FMADD(KP907603734, Tj, Ti);
        Td            = SIMD_FNMADD(KP939692620, Tc, Tb);
        Cr[0]         = Tw + Tv;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, Tw, Tv);
        Ts            = SIMD_FNMADD(KP673648177, Tg, Te);
        Th            = SIMD_FMADD(KP673648177, Tg, Te);
        Tq            = SIMD_FMADD(KP898197570, Tp, T5);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP939692620, Tt, To);
        Ci[WS(cs, 2)] = -(KP984807753 * (SIMD_FMADD(KP879385241, Td, T4)));
        Tu            = SIMD_FNMADD(KP550901214, Tt, Ts);
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FNMADD(KP879385241, T9, Th)));
        Tl            = SIMD_FNMADD(KP605069156, Th, Tk);
        Tr            = SIMD_FNMADD(KP907603734, Tq, T1);
        Cr[WS(cs, 4)] = SIMD_FMADD(KP852868531, Tu, To);
        Ci[WS(cs, 4)] = KP866025403 * (SIMD_FNMADD(KP939692620, Tl, T9));
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP939692620, Tr, To);
    }
}

template <>
struct r2cf_traits<9, 8>
{
    static constexpr long_t flops           = 66;
    static constexpr long_t operations      = 40;
    static constexpr long_t memory_accesses = 17;
    static constexpr long_t stack_vars      = 52;
    static constexpr long_t constants       = 17;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 8 -name r2cf
 * -standalone */

/*
 * This function contains 36 FP additions, 30 FP multiplications,
 * (or, 10 additions, 4 multiplications, 26 fused multiply/add),
 * 52 stack variables, 17 constants, and 17 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 8>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP666666666, +0.666666666666666666666666666666666666666666667);
    DK(KP907603734, +0.907603734547952313649323976213898122064543220);
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP673648177, +0.673648177666930348851716626769314796000375677);
    DK(KP898197570, +0.898197570222573798468955502359086394667167570);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP226681596, +0.226681596905677465811651808188092531873167623);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP726681596, +0.726681596905677465811651808188092531873167623);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP184792530, +0.184792530904095372701352047572203755870913560);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP394930843, +0.394930843634698457567117349190734585290304520);
    DK(KP347296355, +0.347296355333860697703433253538629592000751354);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tp, T7, Ta, Tb, T1, T2, T4, T5, Tc, Tq, Td, T3, Ti, Tf, T6;
        SIMD_FLOAT Tr, Ty, Te, Tl, Tg, T8, T9, Th, Tm, Tj, Ts, Tz, Tw, Tn, Tt;
        SIMD_FLOAT Tk, Tv, Tu, Tx, To;
        Tp            = R0[0];
        T7            = R0[WS(rs, 1)];
        Ta            = R0[WS(rs, 6)];
        Tb            = R0[WS(rs, 3)];
        T1            = R0[WS(rs, 2)];
        T2            = R0[WS(rs, 5)];
        T4            = R0[WS(rs, 4)];
        T5            = R0[WS(rs, 7)];
        Tc            = Ta - Tb;
        Tq            = Ta + Tb;
        Td            = SIMD_FNMADD(KP500000000, T2, T1);
        T3            = T1 + T2;
        Ti            = SIMD_FNMADD(KP347296355, T2, T1);
        Tf            = T4 - T5;
        T6            = T4 + T5;
        Tr            = SIMD_FNMADD(KP500000000, Tq, Tp);
        Ty            = Tq + Tp;
        Te            = SIMD_FMADD(KP394930843, Td, Tc);
        Tl            = SIMD_FMSUB(KP203604859, Td, T2);
        Tg            = SIMD_FMSUB(KP184792530, Tf, T2);
        T8            = T6 + T7;
        T9            = SIMD_FMSUB(KP500000000, T6, T7);
        Th            = SIMD_FNMADD(KP939692620, Tg, Te);
        Tm            = SIMD_FMADD(KP726681596, Tf, T9);
        Tj            = SIMD_FNMADD(KP968908795, T9, Tf);
        Ts            = SIMD_FNMADD(KP226681596, T9, T2);
        Tz            = T8 + T3;
        Ci[WS(cs, 3)] = KP866025403 * (T3 - T8);
        Ci[WS(cs, 2)] = KP984807753 * (SIMD_FNMADD(KP879385241, Th, T9));
        Tw            = SIMD_FNMADD(KP898197570, Tm, Tl);
        Tn            = SIMD_FMADD(KP898197570, Tm, Tl);
        Tt            = SIMD_FMADD(KP898197570, Ts, Tf);
        Tk            = SIMD_FMADD(KP673648177, Tj, Ti);
        Tv            = SIMD_FNMADD(KP673648177, Tj, Ti);
        Cr[0]         = Tz + Ty;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, Tz, Ty);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP852868531, Tw, Tr);
        Tu            = SIMD_FNMADD(KP907603734, Tt, T1);
        Tx            = SIMD_FNMADD(KP500000000, Tw, Tv);
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FNMADD(KP879385241, Tc, Tk)));
        To            = SIMD_FMADD(KP666666666, Tk, Tn);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP939692620, Tu, Tr);
        Cr[WS(cs, 4)] = SIMD_FMADD(KP852868531, Tx, Tr);
        Ci[WS(cs, 4)] = KP866025403 * (SIMD_FMADD(KP852868531, To, Tc));
    }
}

template <>
struct r2cf_traits<9, 9>
{
    static constexpr long_t flops           = 68;
    static constexpr long_t operations      = 42;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 56;
    static constexpr long_t constants       = 18;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 9 -first-k 9 -name r2cf
 * -standalone */

/*
 * This function contains 38 FP additions, 30 FP multiplications,
 * (or, 12 additions, 4 multiplications, 26 fused multiply/add),
 * 56 stack variables, 18 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && ProvidedElements == 9>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP666666666, +0.666666666666666666666666666666666666666666667);
    DK(KP852868531, +0.852868531952443209628250963940074071936020296);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP907603734, +0.907603734547952313649323976213898122064543220);
    DK(KP673648177, +0.673648177666930348851716626769314796000375677);
    DK(KP898197570, +0.898197570222573798468955502359086394667167570);
    DK(KP939692620, +0.939692620785908384054109277324731469936208134);
    DK(KP347296355, +0.347296355333860697703433253538629592000751354);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP152703644, +0.152703644666139302296566746461370407999248646);
    DK(KP394930843, +0.394930843634698457567117349190734585290304520);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP726681596, +0.726681596905677465811651808188092531873167623);
    DK(KP586256827, +0.586256827714544512072145703099641959914944179);
    DK(KP184792530, +0.184792530904095372701352047572203755870913560);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T3, T6, Tb, T7, T8, Tc, Td, To, T4, Tk, T9, Ti, Te;
        SIMD_FLOAT Tp, T5, Tl, Ta, Tu, Tf, Th, Tq, Ty, Tm, Tt, Tj, Tx, Tg, Tr;
        SIMD_FLOAT Tv, TB, Tz, Tn, Tw, Ts, TA, TC;
        T1            = R0[0];
        T2            = R0[WS(rs, 3)];
        T3            = R0[WS(rs, 6)];
        T6            = R0[WS(rs, 1)];
        Tb            = R0[WS(rs, 2)];
        T7            = R0[WS(rs, 4)];
        T8            = R0[WS(rs, 7)];
        Tc            = R0[WS(rs, 5)];
        Td            = R0[WS(rs, 8)];
        To            = T3 - T2;
        T4            = T2 + T3;
        Tk            = T7 - T8;
        T9            = T7 + T8;
        Ti            = Td - Tc;
        Te            = Tc + Td;
        Tp            = SIMD_FNMADD(KP500000000, T4, T1);
        T5            = T1 + T4;
        Tl            = SIMD_FMSUB(KP500000000, T9, T6);
        Ta            = T6 + T9;
        Tu            = SIMD_FMADD(KP184792530, Tk, Ti);
        Tf            = Tb + Te;
        Th            = SIMD_FNMADD(KP500000000, Te, Tb);
        Tq            = SIMD_FMADD(KP586256827, Tl, Ti);
        Ty            = SIMD_FMADD(KP726681596, Tk, Tl);
        Tm            = SIMD_FNMADD(KP968908795, Tl, Tk);
        Tt            = SIMD_FMADD(KP394930843, Th, To);
        Tj            = SIMD_FNMADD(KP152703644, Ti, Th);
        Tx            = SIMD_FMADD(KP203604859, Th, Ti);
        Tg            = Ta + Tf;
        Ci[WS(cs, 3)] = KP866025403 * (Tf - Ta);
        Tr            = SIMD_FNMADD(KP347296355, Tq, Tk);
        Tv            = SIMD_FNMADD(KP939692620, Tu, Tt);
        TB            = SIMD_FMADD(KP898197570, Ty, Tx);
        Tz            = SIMD_FNMADD(KP898197570, Ty, Tx);
        Tn            = SIMD_FMADD(KP673648177, Tm, Tj);
        Tw            = SIMD_FNMADD(KP673648177, Tm, Tj);
        Cr[0]         = T5 + Tg;
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP500000000, Tg, T5);
        Ts            = SIMD_FNMADD(KP907603734, Tr, Th);
        Ci[WS(cs, 2)] = KP984807753 * (SIMD_FNMADD(KP879385241, Tv, Tl));
        Cr[WS(cs, 1)] = SIMD_FMADD(KP852868531, Tz, Tp);
        TA            = SIMD_FNMADD(KP500000000, Tz, Tw);
        Ci[WS(cs, 1)] = -(KP984807753 * (SIMD_FNMADD(KP879385241, To, Tn)));
        TC            = SIMD_FMADD(KP666666666, Tn, TB);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP939692620, Ts, Tp);
        Cr[WS(cs, 4)] = SIMD_FMADD(KP852868531, TA, Tp);
        Ci[WS(cs, 4)] = KP866025403 * (SIMD_FMADD(KP852868531, TC, To));
    }
}

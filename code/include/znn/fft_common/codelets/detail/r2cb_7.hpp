//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<7, 0>
{
    static constexpr long_t flops           = 46;
    static constexpr long_t operations      = 24;
    static constexpr long_t memory_accesses = 14;
    static constexpr long_t stack_vars      = 30;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 0 -name r2cb
 * -standalone */

/*
 * This function contains 24 FP additions, 22 FP multiplications,
 * (or, 2 additions, 0 multiplications, 22 fused multiply/add),
 * 30 stack variables, 7 constants, and 14 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T9, Tb, Ta, T2, T4, T3, Th, Tm, Tc, Te, T5, Tj, T6, Ti;
        SIMD_FLOAT Tn, Td, Tf, Tk, T7, Tg, Tl, T8;
        T1            = Cr[0];
        T9            = Ci[WS(cs, 2)];
        Tb            = Ci[WS(cs, 3)];
        Ta            = Ci[WS(cs, 1)];
        T2            = Cr[WS(cs, 1)];
        T4            = Cr[WS(cs, 3)];
        T3            = Cr[WS(cs, 2)];
        Th            = SIMD_FMADD(KP554958132, T9, Tb);
        Tm            = SIMD_FMSUB(KP554958132, Ta, T9);
        Tc            = SIMD_FMADD(KP554958132, Tb, Ta);
        Te            = SIMD_FNMADD(KP356895867, T2, T4);
        T5            = T2 + T3 + T4;
        Tj            = SIMD_FNMADD(KP356895867, T4, T3);
        T6            = SIMD_FNMADD(KP356895867, T3, T2);
        Ti            = SIMD_FNMADD(KP801937735, Th, Ta);
        Tn            = SIMD_FMADD(KP801937735, Tm, Tb);
        Td            = SIMD_FMADD(KP801937735, Tc, T9);
        Tf            = SIMD_FNMADD(KP692021471, Te, T3);
        R0[0]         = SIMD_FMADD(KP2_000000000, T5, T1);
        Tk            = SIMD_FNMADD(KP692021471, Tj, T2);
        T7            = SIMD_FNMADD(KP692021471, T6, T4);
        Tg            = SIMD_FNMADD(KP1_801937735, Tf, T1);
        Tl            = SIMD_FNMADD(KP1_801937735, Tk, T1);
        T8            = SIMD_FNMADD(KP1_801937735, T7, T1);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_949855824, Ti, Tg);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_949855824, Ti, Tg);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, Tn, Tl);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP1_949855824, Tn, Tl);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_949855824, Td, T8);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_949855824, Td, T8);
    }
}

template <>
struct r2cb_traits<7, 1>
{
    static constexpr long_t flops           = 42;
    static constexpr long_t operations      = 21;
    static constexpr long_t memory_accesses = 13;
    static constexpr long_t stack_vars      = 28;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 1 -name r2cb
 * -standalone */

/*
 * This function contains 21 FP additions, 21 FP multiplications,
 * (or, 0 additions, 0 multiplications, 21 fused multiply/add),
 * 28 stack variables, 6 constants, and 13 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T8, Ta, T9, T2, T4, T3, Tg, Tl, Tb, Ti, Td, T5, Th, Tm;
        SIMD_FLOAT Tc, Tj, Te, T6, Tk, Tf, T7;
        T1            = Cr[0];
        T8            = Ci[WS(cs, 2)];
        Ta            = Ci[WS(cs, 3)];
        T9            = Ci[WS(cs, 1)];
        T2            = Cr[WS(cs, 3)];
        T4            = Cr[WS(cs, 2)];
        T3            = Cr[WS(cs, 1)];
        Tg            = SIMD_FMADD(KP554958132, T8, Ta);
        Tl            = SIMD_FMSUB(KP554958132, T9, T8);
        Tb            = SIMD_FMADD(KP554958132, Ta, T9);
        Ti            = SIMD_FNMADD(KP356895867, T2, T4);
        Td            = SIMD_FNMADD(KP356895867, T3, T2);
        T5            = SIMD_FNMADD(KP356895867, T4, T3);
        Th            = SIMD_FNMADD(KP801937735, Tg, T9);
        Tm            = SIMD_FMADD(KP801937735, Tl, Ta);
        Tc            = SIMD_FMADD(KP801937735, Tb, T8);
        Tj            = SIMD_FNMADD(KP692021471, Ti, T3);
        Te            = SIMD_FNMADD(KP692021471, Td, T4);
        T6            = SIMD_FNMADD(KP692021471, T5, T2);
        Tk            = SIMD_FNMADD(KP1_801937735, Tj, T1);
        Tf            = SIMD_FNMADD(KP1_801937735, Te, T1);
        T7            = SIMD_FNMADD(KP1_801937735, T6, T1);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, Tm, Tk);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_949855824, Tm, Tk);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, Th, Tf);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_949855824, Th, Tf);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_949855824, Tc, T7);
        R0[0]         = SIMD_FNMADD(KP1_949855824, Tc, T7);
    }
}

template <>
struct r2cb_traits<7, 2>
{
    static constexpr long_t flops           = 40;
    static constexpr long_t operations      = 20;
    static constexpr long_t memory_accesses = 12;
    static constexpr long_t stack_vars      = 33;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 2 -name r2cb
 * -standalone */

/*
 * This function contains 20 FP additions, 20 FP multiplications,
 * (or, 0 additions, 0 multiplications, 20 fused multiply/add),
 * 33 stack variables, 11 constants, and 12 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T2, T4, T3, T6, T5, T7, Tg, Tl, Ti, Td, T8, Th, Tm, Tj;
        SIMD_FLOAT Te, T9, Tk, Tf, Ta, Tb, Tc;
        T1            = Cr[0];
        T2            = Ci[WS(cs, 2)];
        T4            = Ci[WS(cs, 1)];
        T3            = Cr[WS(cs, 3)];
        T6            = Ci[WS(cs, 3)];
        T5            = Cr[WS(cs, 1)];
        T7            = Cr[WS(cs, 2)];
        Tg            = SIMD_FMSUB(KP554958132, T4, T2);
        Tl            = SIMD_FMADD(KP554958132, T2, T6);
        Ti            = SIMD_FNMADD(KP356895867, T5, T3);
        Td            = SIMD_FNMADD(KP356895867, T3, T7);
        T8            = SIMD_FNMADD(KP512858431, T7, T6);
        Th            = SIMD_FMADD(KP801937735, Tg, T6);
        Tm            = SIMD_FNMADD(KP801937735, Tl, T4);
        Tj            = SIMD_FNMADD(KP692021471, Ti, T7);
        Te            = SIMD_FNMADD(KP692021471, Td, T5);
        T9            = SIMD_FMADD(KP695895486, T8, T5);
        Tk            = SIMD_FNMADD(KP1_801937735, Tj, T1);
        Tf            = SIMD_FNMADD(KP1_801937735, Te, T1);
        Ta            = SIMD_FMADD(KP797473388, T9, T4);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, Tm, Tk);
        R0[0]         = SIMD_FNMADD(KP1_949855824, Tm, Tk);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, Th, Tf);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_949855824, Th, Tf);
        Tb            = SIMD_FNMADD(KP867767478, Ta, T3);
        Tc            = SIMD_FNMADD(KP924138961, Tb, T2);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, Tc, T1);
    }
}

template <>
struct r2cb_traits<7, 3>
{
    static constexpr long_t flops           = 38;
    static constexpr long_t operations      = 19;
    static constexpr long_t memory_accesses = 11;
    static constexpr long_t stack_vars      = 33;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 3 -name r2cb
 * -standalone */

/*
 * This function contains 19 FP additions, 19 FP multiplications,
 * (or, 0 additions, 0 multiplications, 19 fused multiply/add),
 * 33 stack variables, 11 constants, and 11 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, Ta, T2, T9, T3, T8, T4, Tb, Td, Ti, T5, Tc, Te, Tj, T6;
        SIMD_FLOAT Tf, Tk, T7, Tg, Tl, Th, Tm;
        T1            = Cr[0];
        Ta            = Ci[WS(cs, 1)];
        T2            = Cr[WS(cs, 1)];
        T9            = Ci[WS(cs, 2)];
        T3            = Cr[WS(cs, 2)];
        T8            = Ci[WS(cs, 3)];
        T4            = Cr[WS(cs, 3)];
        Tb            = SIMD_FMSUB(KP554958132, Ta, T9);
        Td            = SIMD_FMADD(KP512858431, T2, T9);
        Ti            = SIMD_FNMADD(KP512858431, T3, T8);
        T5            = SIMD_FNMADD(KP356895867, T4, T3);
        Tc            = SIMD_FMADD(KP801937735, Tb, T8);
        Te            = SIMD_FNMADD(KP695895486, Td, T4);
        Tj            = SIMD_FMADD(KP695895486, Ti, T2);
        T6            = SIMD_FNMADD(KP692021471, T5, T2);
        Tf            = SIMD_FNMADD(KP797473388, Te, T8);
        Tk            = SIMD_FMADD(KP797473388, Tj, Ta);
        T7            = SIMD_FNMADD(KP1_801937735, T6, T1);
        Tg            = SIMD_FMADD(KP867767478, Tf, T3);
        Tl            = SIMD_FNMADD(KP867767478, Tk, T4);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, Tc, T7);
        R0[0]         = SIMD_FNMADD(KP1_949855824, Tc, T7);
        Th            = SIMD_FNMADD(KP924138961, Tg, Ta);
        Tm            = SIMD_FNMADD(KP924138961, Tl, T9);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, Th, T1);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, Tm, T1);
    }
}

template <>
struct r2cb_traits<7, 4>
{
    static constexpr long_t flops           = 36;
    static constexpr long_t operations      = 18;
    static constexpr long_t memory_accesses = 10;
    static constexpr long_t stack_vars      = 28;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 4 -name r2cb
 * -standalone */

/*
 * This function contains 18 FP additions, 18 FP multiplications,
 * (or, 0 additions, 0 multiplications, 18 fused multiply/add),
 * 28 stack variables, 6 constants, and 10 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT T1, T2, T5, T6, T7, T3, T4, Td, T8, Ti, Te, T9, Tj, Tf, Ta;
        SIMD_FLOAT Tk, Tg, Tb, Tl, Th, Tc, Tm;
        T1            = Cr[0];
        T2            = Ci[WS(cs, 3)];
        T5            = Cr[WS(cs, 2)];
        T6            = Ci[WS(cs, 1)];
        T7            = Cr[WS(cs, 3)];
        T3            = Cr[WS(cs, 1)];
        T4            = Ci[WS(cs, 2)];
        Td            = SIMD_FNMADD(KP512858431, T5, T2);
        T8            = SIMD_FNMADD(KP512858431, T7, T6);
        Ti            = SIMD_FMADD(KP512858431, T3, T4);
        Te            = SIMD_FMADD(KP695895486, Td, T3);
        T9            = SIMD_FMADD(KP695895486, T8, T5);
        Tj            = SIMD_FNMADD(KP695895486, Ti, T7);
        Tf            = SIMD_FMADD(KP797473388, Te, T6);
        Ta            = SIMD_FNMADD(KP797473388, T9, T4);
        Tk            = SIMD_FNMADD(KP797473388, Tj, T2);
        Tg            = SIMD_FNMADD(KP867767478, Tf, T7);
        Tb            = SIMD_FMADD(KP867767478, Ta, T3);
        Tl            = SIMD_FMADD(KP867767478, Tk, T5);
        Th            = SIMD_FNMADD(KP924138961, Tg, T4);
        Tc            = SIMD_FNMADD(KP924138961, Tb, T2);
        Tm            = SIMD_FNMADD(KP924138961, Tl, T6);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, Th, T1);
        R0[0]         = SIMD_FMADD(KP1_949855824, Tc, T1);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, Tm, T1);
    }
}

template <>
struct r2cb_traits<7, 5>
{
    static constexpr long_t flops           = 24;
    static constexpr long_t operations      = 12;
    static constexpr long_t memory_accesses = 9;
    static constexpr long_t stack_vars      = 23;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 5 -name r2cb
 * -standalone */

/*
 * This function contains 12 FP additions, 12 FP multiplications,
 * (or, 0 additions, 0 multiplications, 12 fused multiply/add),
 * 23 stack variables, 6 constants, and 9 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT T1, T2, T5, T3, T4, T6, T7, Td, T8, Te, T9, Tf, Ta, Tg, Tb;
        SIMD_FLOAT Th, Tc;
        T1            = Cr[0];
        T2            = Ci[WS(cs, 1)];
        T5            = Cr[WS(cs, 3)];
        T3            = Cr[WS(cs, 2)];
        T4            = Ci[WS(cs, 3)];
        T6            = Ci[WS(cs, 2)];
        T7            = Cr[WS(cs, 1)];
        Td            = SIMD_FNMADD(KP512858431, T3, T4);
        T8            = SIMD_FMADD(KP512858431, T7, T6);
        Te            = SIMD_FMADD(KP695895486, Td, T7);
        T9            = SIMD_FNMADD(KP695895486, T8, T5);
        Tf            = SIMD_FMADD(KP797473388, Te, T2);
        Ta            = SIMD_FNMADD(KP797473388, T9, T4);
        Tg            = SIMD_FNMADD(KP867767478, Tf, T5);
        Tb            = SIMD_FMADD(KP867767478, Ta, T3);
        Th            = SIMD_FNMADD(KP924138961, Tg, T6);
        Tc            = SIMD_FNMADD(KP924138961, Tb, T2);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, Th, T1);
        R0[0]         = SIMD_FMADD(KP1_949855824, Tc, T1);
    }
}

template <>
struct r2cb_traits<7, 6>
{
    static constexpr long_t flops           = 12;
    static constexpr long_t operations      = 6;
    static constexpr long_t memory_accesses = 8;
    static constexpr long_t stack_vars      = 18;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 7 -skip-k 6 -name r2cb
 * -standalone */

/*
 * This function contains 6 FP additions, 6 FP multiplications,
 * (or, 0 additions, 0 multiplications, 6 fused multiply/add),
 * 18 stack variables, 6 constants, and 8 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 7 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT T1, T3, T2, T4, T5, T6, T7, T8, T9, Ta, Tb, Tc;
        T1    = Cr[0];
        T3    = Cr[WS(cs, 3)];
        T2    = Ci[WS(cs, 2)];
        T4    = Ci[WS(cs, 1)];
        T5    = Cr[WS(cs, 1)];
        T6    = Ci[WS(cs, 3)];
        T7    = Cr[WS(cs, 2)];
        T8    = SIMD_FNMADD(KP512858431, T7, T6);
        T9    = SIMD_FMADD(KP695895486, T8, T5);
        Ta    = SIMD_FMADD(KP797473388, T9, T4);
        Tb    = SIMD_FNMADD(KP867767478, Ta, T3);
        Tc    = SIMD_FNMADD(KP924138961, Tb, T2);
        R0[0] = SIMD_FMADD(KP1_949855824, Tc, T1);
    }
}

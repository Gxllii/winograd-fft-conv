//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cf_traits<14, 1>
{
    static constexpr long_t flops           = 0;
    static constexpr long_t operations      = 0;
    static constexpr long_t memory_accesses = 9;
    static constexpr long_t stack_vars      = 1;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 1 -name r2cf
 * -standalone */

/*
 * This function contains 0 FP additions, 0 FP multiplications,
 * (or, 0 additions, 0 multiplications, 0 fused multiply/add),
 * 1 stack variables, 0 constants, and 9 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 1>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    {
        SIMD_FLOAT T1;
        T1            = R0[0];
        Cr[WS(cs, 3)] = T1;
        Cr[WS(cs, 5)] = T1;
        Cr[WS(cs, 4)] = T1;
        Cr[WS(cs, 2)] = T1;
        Cr[WS(cs, 1)] = T1;
        Cr[WS(cs, 7)] = T1;
        Cr[WS(cs, 6)] = T1;
        Cr[0]         = T1;
    }
}

template <>
struct r2cf_traits<14, 2>
{
    static constexpr long_t flops           = 20;
    static constexpr long_t operations      = 14;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 8;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 2 -name r2cf
 * -standalone */

/*
 * This function contains 8 FP additions, 12 FP multiplications,
 * (or, 2 additions, 6 multiplications, 6 fused multiply/add),
 * 8 stack variables, 6 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 2>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP433883739, +0.433883739117558120475768332848358754609990728);
    DK(KP781831482, +0.781831482468029808708444526674057750232334519);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP623489801, +0.623489801858733530525004884004239810632274731);
    DK(KP222520933, +0.222520933956314404288902564496794759466355569);
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    {
        SIMD_FLOAT T1, T2;
        T1            = R0[0];
        T2            = R0[WS(rs, 1)];
        Cr[WS(cs, 1)] = SIMD_FMADD(KP900968867, T2, T1);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP222520933, T2, T1);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP623489801, T2, T1);
        Cr[WS(cs, 7)] = T1 - T2;
        Cr[0]         = T1 + T2;
        Cr[WS(cs, 2)] = SIMD_FMADD(KP623489801, T2, T1);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP222520933, T2, T1);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, T2, T1);
        Ci[WS(cs, 3)] = -(KP974927912 * T2);
        Ci[WS(cs, 2)] = -(KP781831482 * T2);
        Ci[WS(cs, 4)] = -(KP974927912 * T2);
        Ci[WS(cs, 6)] = -(KP433883739 * T2);
        Ci[WS(cs, 5)] = -(KP781831482 * T2);
        Ci[WS(cs, 1)] = -(KP433883739 * T2);
    }
}

template <>
struct r2cf_traits<14, 3>
{
    static constexpr long_t flops           = 46;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 17;
    static constexpr long_t stack_vars      = 19;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 3 -name r2cf
 * -standalone */

/*
 * This function contains 22 FP additions, 24 FP multiplications,
 * (or, 4 additions, 6 multiplications, 18 fused multiply/add),
 * 19 stack variables, 10 constants, and 17 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 3>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP623489801, +0.623489801858733530525004884004239810632274731);
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP246979603, +0.246979603717467061050009768008479621264549462);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP781831482, +0.781831482468029808708444526674057750232334519);
    DK(KP445041867, +0.445041867912628808577805128993589518932711138);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    {
        SIMD_FLOAT T1, T2, T3, T6, T7, T8, T9, T5, T4;
        T1            = R0[0];
        T2            = R0[WS(rs, 1)];
        T3            = R0[WS(rs, 2)];
        Cr[WS(cs, 7)] = T1 + T3 - T2;
        Cr[0]         = T1 + T3 + T2;
        Ci[WS(cs, 5)] = KP974927912 * (SIMD_FNMADD(KP801937735, T2, T3));
        Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FMADD(KP801937735, T2, T3)));
        Ci[WS(cs, 3)] = -(KP974927912 * (SIMD_FMADD(KP445041867, T3, T2)));
        Ci[WS(cs, 1)] = -(KP781831482 * (SIMD_FMADD(KP554958132, T2, T3)));
        Ci[WS(cs, 4)] = KP974927912 * (SIMD_FMSUB(KP445041867, T3, T2));
        Ci[WS(cs, 6)] = KP781831482 * (SIMD_FNMADD(KP554958132, T2, T3));
        T6            = SIMD_FMSUB(KP246979603, T2, T3);
        T7            = SIMD_FMADD(KP356895867, T3, T2);
        T8            = SIMD_FNMADD(KP356895867, T3, T2);
        T9            = SIMD_FMADD(KP692021471, T3, T2);
        T5            = SIMD_FMADD(KP246979603, T2, T3);
        T4            = SIMD_FMSUB(KP692021471, T3, T2);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP900968867, T6, T1);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP623489801, T7, T1);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP623489801, T8, T1);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP900968867, T9, T1);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, T5, T1);
        Cr[WS(cs, 6)] = SIMD_FMADD(KP900968867, T4, T1);
    }
}

template <>
struct r2cf_traits<14, 4>
{
    static constexpr long_t flops           = 60;
    static constexpr long_t operations      = 36;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 24;
    static constexpr long_t constants       = 8;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 4 -name r2cf
 * -standalone */

/*
 * This function contains 30 FP additions, 30 FP multiplications,
 * (or, 6 additions, 6 multiplications, 24 fused multiply/add),
 * 24 stack variables, 8 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 4>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP246979603, +0.246979603717467061050009768008479621264549462);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP445041867, +0.445041867912628808577805128993589518932711138);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    {
        SIMD_FLOAT T1, T2, T3, T4, T5, T8, Tg, Td, Tc, T9, Te, Tf, T6, T7, Tb;
        SIMD_FLOAT Ta;
        T1            = R0[0];
        T2            = R0[WS(rs, 2)];
        T3            = R0[WS(rs, 1)];
        T4            = R0[WS(rs, 3)];
        Cr[WS(cs, 7)] = T1 + T2 - T3 - T4;
        Cr[0]         = T1 + T2 + T4 + T3;
        T5            = SIMD_FMSUB(KP356895867, T3, T4);
        T8            = SIMD_FMADD(KP445041867, T3, T4);
        Tg            = SIMD_FMSUB(KP801937735, T4, T3);
        Td            = SIMD_FMADD(KP246979603, T4, T3);
        Tc            = SIMD_FMADD(KP554958132, T4, T3);
        T9            = SIMD_FMSUB(KP692021471, T3, T4);
        Tb            = SIMD_FNMADD(KP246979603, T2, T9);
        Ta            = SIMD_FMADD(KP246979603, T2, T9);
        Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Tc, T2)));
        Ci[WS(cs, 5)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tc, T2));
        Te            = SIMD_FNMADD(KP692021471, T2, Td);
        Tf            = SIMD_FMADD(KP692021471, T2, Td);
        Ci[WS(cs, 3)] = KP974927912 * (SIMD_FNMADD(KP445041867, T2, Tg));
        Ci[WS(cs, 4)] = KP974927912 * (SIMD_FMADD(KP445041867, T2, Tg));
        Ci[WS(cs, 6)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, T2, T8)));
        Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, T2, T8)));
        T6            = SIMD_FMADD(KP692021471, T5, T2);
        T7            = SIMD_FMSUB(KP692021471, T5, T2);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Ta, T1);
        Cr[WS(cs, 2)] = SIMD_FMADD(KP900968867, Tb, T1);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP900968867, Tf, T1);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, Te, T1);
        Cr[WS(cs, 3)] = SIMD_FMADD(KP900968867, T7, T1);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, T6, T1);
    }
}

template <>
struct r2cf_traits<14, 5>
{
    static constexpr long_t flops           = 74;
    static constexpr long_t operations      = 44;
    static constexpr long_t memory_accesses = 19;
    static constexpr long_t stack_vars      = 32;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 5 -name r2cf
 * -standalone */

/*
 * This function contains 38 FP additions, 36 FP multiplications,
 * (or, 8 additions, 6 multiplications, 30 fused multiply/add),
 * 32 stack variables, 7 constants, and 19 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 5>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP445041867, +0.445041867912628808577805128993589518932711138);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T2, T6, T3, T4, Td, Tg, Te, Tc, T9, T5, Tm, T7, Tb, Tl;
        SIMD_FLOAT Tj, Ta, Th, To, Tk, Ti, Tp, Tf, Tn, T8;
        T1            = R0[0];
        T2            = R0[WS(rs, 2)];
        T6            = R0[WS(rs, 1)];
        T3            = R0[WS(rs, 4)];
        T4            = R0[WS(rs, 3)];
        Td            = SIMD_FNMADD(KP554958132, T6, T2);
        Tg            = SIMD_FNMADD(KP356895867, T2, T6);
        Te            = SIMD_FMADD(KP356895867, T2, T6);
        Tc            = SIMD_FMADD(KP554958132, T6, T2);
        T9            = T3 + T4;
        T5            = T3 - T4;
        Tj            = SIMD_FMADD(KP554958132, T9, T6);
        Ta            = SIMD_FNMADD(KP356895867, T6, T9);
        Th            = SIMD_FNMADD(KP692021471, Tg, T9);
        To            = SIMD_FNMADD(KP554958132, T2, T9);
        Tk            = SIMD_FNMADD(KP356895867, T9, T2);
        Cr[0]         = T1 + T2 + T9 + T6;
        Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Tc, T9)));
        Tm            = SIMD_FNMADD(KP356895867, T5, T2);
        Ti            = SIMD_FNMADD(KP445041867, T5, T2);
        Tp            = SIMD_FNMADD(KP554958132, T2, T5);
        Tf            = SIMD_FMADD(KP692021471, Te, T5);
        Cr[WS(cs, 7)] = T1 + T2 + T5 - T6;
        Ci[WS(cs, 6)] = KP974927912 * (SIMD_FMADD(KP801937735, Td, T5));
        T7            = SIMD_FMADD(KP356895867, T6, T5);
        Ci[WS(cs, 5)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tj, T2));
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, Th, T1);
        Ci[WS(cs, 3)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, To, T6)));
        Tb            = SIMD_FNMADD(KP692021471, Ta, T2);
        Tl            = SIMD_FNMADD(KP692021471, Tk, T6);
        Ci[WS(cs, 4)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Tp, T6)));
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Tf, T1);
        Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FMADD(KP801937735, T6, Ti)));
        Tn            = SIMD_FMADD(KP692021471, Tm, T6);
        T8            = SIMD_FNMADD(KP692021471, T7, T2);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, Tb, T1);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, Tl, T1);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP900968867, Tn, T1);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, T8, T1);
    }
}

template <>
struct r2cf_traits<14, 6>
{
    static constexpr long_t flops           = 76;
    static constexpr long_t operations      = 46;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 34;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 6 -name r2cf
 * -standalone */

/*
 * This function contains 40 FP additions, 36 FP multiplications,
 * (or, 10 additions, 6 multiplications, 30 fused multiply/add),
 * 34 stack variables, 6 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 6>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    {
        SIMD_FLOAT T1, T8, T5, T6, T2, T3, T7, Tc, T4, Tb, Te, Ta, Tk, To, Ti;
        SIMD_FLOAT Tq, Td, Tm, T9, Tl, Tn, Tr, Tf, Tj, Tg, Th, Tp, Ts;
        T1            = R0[0];
        T8            = R0[WS(rs, 1)];
        T5            = R0[WS(rs, 4)];
        T6            = R0[WS(rs, 3)];
        T2            = R0[WS(rs, 2)];
        T3            = R0[WS(rs, 5)];
        T7            = T5 - T6;
        Tc            = T5 + T6;
        T4            = T2 - T3;
        Tb            = T2 + T3;
        Td            = SIMD_FNMADD(KP356895867, T8, Tc);
        Tm            = SIMD_FMADD(KP554958132, Tc, T8);
        T9            = SIMD_FMADD(KP356895867, T8, T7);
        Tl            = SIMD_FMSUB(KP554958132, T7, T8);
        Tn            = SIMD_FNMADD(KP356895867, Tc, Tb);
        Tr            = SIMD_FNMADD(KP554958132, Tb, Tc);
        Tf            = SIMD_FMADD(KP554958132, T8, Tb);
        Tj            = SIMD_FNMADD(KP356895867, Tb, T8);
        Cr[0]         = T1 + Tb + Tc + T8;
        Tg            = SIMD_FNMADD(KP554958132, T8, T4);
        Th            = SIMD_FMADD(KP356895867, T4, T8);
        Tp            = SIMD_FNMADD(KP356895867, T7, T4);
        Ts            = SIMD_FNMADD(KP554958132, T4, T7);
        Cr[WS(cs, 7)] = T1 + T4 + T7 - T8;
        Ci[WS(cs, 5)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tm, Tb));
        Te            = SIMD_FNMADD(KP692021471, Td, Tb);
        Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Tl, T4)));
        Ta            = SIMD_FNMADD(KP692021471, T9, T4);
        Ci[WS(cs, 3)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Tr, T8)));
        Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Tf, Tc)));
        Tk            = SIMD_FNMADD(KP692021471, Tj, Tc);
        To            = SIMD_FNMADD(KP692021471, Tn, T8);
        Ci[WS(cs, 6)] = KP974927912 * (SIMD_FMADD(KP801937735, Tg, T7));
        Ci[WS(cs, 4)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Ts, T8)));
        Ti            = SIMD_FMADD(KP692021471, Th, T7);
        Tq            = SIMD_FMADD(KP692021471, Tp, T8);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, Te, T1);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Ta, T1);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, Tk, T1);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, To, T1);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Ti, T1);
        Cr[WS(cs, 1)] = SIMD_FMADD(KP900968867, Tq, T1);
    }
}

template <>
struct r2cf_traits<14, 7>
{
    static constexpr long_t flops           = 78;
    static constexpr long_t operations      = 48;
    static constexpr long_t memory_accesses = 21;
    static constexpr long_t stack_vars      = 37;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 7 -name r2cf
 * -standalone */

/*
 * This function contains 42 FP additions, 36 FP multiplications,
 * (or, 12 additions, 6 multiplications, 30 fused multiply/add),
 * 37 stack variables, 6 constants, and 21 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 7>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT Tb, T1, T2, T7, T8, T4, T5, Tl, T3, Tm, T9, Tk, T6, To, Td;
        SIMD_FLOAT Tr, Tu, Ti, Tf, Ts, Tn, Tg, Tc, Tp, Tq, Tv, Tt, Th, Tj, Te;
        SIMD_FLOAT Ta;
        Tb            = R0[0];
        T1            = R0[WS(rs, 4)];
        T2            = R0[WS(rs, 3)];
        T7            = R0[WS(rs, 6)];
        T8            = R0[WS(rs, 1)];
        T4            = R0[WS(rs, 2)];
        T5            = R0[WS(rs, 5)];
        Tl            = T1 + T2;
        T3            = T1 - T2;
        Tm            = T7 + T8;
        T9            = T7 - T8;
        Tk            = T4 + T5;
        T6            = T4 - T5;
        Ts            = SIMD_FMADD(KP554958132, Tl, Tm);
        Tn            = SIMD_FNMADD(KP356895867, Tm, Tl);
        Tg            = SIMD_FMADD(KP554958132, T3, T9);
        Tc            = SIMD_FNMADD(KP356895867, T9, T3);
        Tp            = SIMD_FMADD(KP554958132, Tm, Tk);
        Tq            = SIMD_FNMADD(KP356895867, Tk, Tm);
        Cr[0]         = Tb + Tk + Tl + Tm;
        Tv            = SIMD_FNMADD(KP554958132, Tk, Tl);
        Tt            = SIMD_FNMADD(KP356895867, Tl, Tk);
        Th            = SIMD_FNMADD(KP356895867, T3, T6);
        Tj            = SIMD_FNMADD(KP554958132, T6, T3);
        Cr[WS(cs, 7)] = Tb + T6 + T3 + T9;
        Te            = SIMD_FNMADD(KP356895867, T6, T9);
        Ta            = SIMD_FMADD(KP554958132, T9, T6);
        Ci[WS(cs, 5)] = KP974927912 * (SIMD_FNMADD(KP801937735, Ts, Tk));
        To            = SIMD_FNMADD(KP692021471, Tn, Tk);
        Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Tg, T6)));
        Td            = SIMD_FNMADD(KP692021471, Tc, T6);
        Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Tp, Tl)));
        Ci[WS(cs, 3)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Tv, Tm)));
        Tr            = SIMD_FNMADD(KP692021471, Tq, Tl);
        Tu            = SIMD_FNMADD(KP692021471, Tt, Tm);
        Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tj, T9));
        Ci[WS(cs, 6)] = KP974927912 * (SIMD_FMADD(KP801937735, Ta, T3));
        Ti            = SIMD_FNMADD(KP692021471, Th, T9);
        Tf            = SIMD_FNMADD(KP692021471, Te, T3);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, To, Tb);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Td, Tb);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, Tr, Tb);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, Tu, Tb);
        Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Ti, Tb);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Tf, Tb);
    }
}

template <>
struct r2cf_traits<14, 8>
{
    static constexpr long_t flops           = 80;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 40;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 8 -name r2cf
 * -standalone */

/*
 * This function contains 44 FP additions, 36 FP multiplications,
 * (or, 14 additions, 6 multiplications, 30 fused multiply/add),
 * 40 stack variables, 6 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 8>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    {
        SIMD_FLOAT Tb, Tc, T1, T2, T7, T8, T4, T5, Td, Tm, T3, To, T9, Tp, T6;
        SIMD_FLOAT Tn, Tr, Tf, Tu, Tx, Tk, Th, Tq, Tv, Te, Ti, Tt, Ts, Tw, Ty;
        SIMD_FLOAT Tl, Tj, Ta, Tg;
        Tb            = R0[0];
        Tc            = R0[WS(rs, 7)];
        T1            = R0[WS(rs, 4)];
        T2            = R0[WS(rs, 3)];
        T7            = R0[WS(rs, 6)];
        T8            = R0[WS(rs, 1)];
        T4            = R0[WS(rs, 2)];
        T5            = R0[WS(rs, 5)];
        Td            = Tb - Tc;
        Tm            = Tb + Tc;
        T3            = T1 - T2;
        To            = T1 + T2;
        T9            = T7 - T8;
        Tp            = T7 + T8;
        T6            = T4 - T5;
        Tn            = T4 + T5;
        Tq            = SIMD_FNMADD(KP356895867, Tp, To);
        Tv            = SIMD_FMADD(KP554958132, To, Tp);
        Te            = SIMD_FNMADD(KP356895867, T9, T3);
        Ti            = SIMD_FMADD(KP554958132, T3, T9);
        Tt            = SIMD_FNMADD(KP356895867, Tn, Tp);
        Ts            = SIMD_FMADD(KP554958132, Tp, Tn);
        Cr[0]         = Tm + Tn + To + Tp;
        Tw            = SIMD_FNMADD(KP356895867, To, Tn);
        Ty            = SIMD_FNMADD(KP554958132, Tn, To);
        Tl            = SIMD_FNMADD(KP554958132, T6, T3);
        Tj            = SIMD_FNMADD(KP356895867, T3, T6);
        Cr[WS(cs, 7)] = Td + T6 + T3 + T9;
        Ta            = SIMD_FMADD(KP554958132, T9, T6);
        Tg            = SIMD_FNMADD(KP356895867, T6, T9);
        Ci[WS(cs, 5)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tv, Tn));
        Tr            = SIMD_FNMADD(KP692021471, Tq, Tn);
        Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Ti, T6)));
        Tf            = SIMD_FNMADD(KP692021471, Te, T6);
        Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Ts, To)));
        Ci[WS(cs, 3)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Ty, Tp)));
        Tu            = SIMD_FNMADD(KP692021471, Tt, To);
        Tx            = SIMD_FNMADD(KP692021471, Tw, Tp);
        Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tl, T9));
        Ci[WS(cs, 6)] = KP974927912 * (SIMD_FMADD(KP801937735, Ta, T3));
        Tk            = SIMD_FNMADD(KP692021471, Tj, T9);
        Th            = SIMD_FNMADD(KP692021471, Tg, T3);
        Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, Tr, Tm);
        Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Tf, Td);
        Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, Tu, Tm);
        Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, Tx, Tm);
        Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Tk, Td);
        Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Th, Td);
    }
}

template <>
struct r2cf_traits<14, 9>
{
    static constexpr long_t flops           = 84;
    static constexpr long_t operations      = 54;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 45;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 9 -name r2cf
 * -standalone */

/*
 * This function contains 48 FP additions, 36 FP multiplications,
 * (or, 18 additions, 6 multiplications, 30 fused multiply/add),
 * 45 stack variables, 6 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 9>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T2, Ta, Tb, Tc, T4, T5, T7, T8;
        T1 = R0[0];
        T2 = R0[WS(rs, 7)];
        Ta = R0[WS(rs, 6)];
        Tb = R0[WS(rs, 8)];
        Tc = R0[WS(rs, 1)];
        T4 = R0[WS(rs, 2)];
        T5 = R0[WS(rs, 5)];
        T7 = R0[WS(rs, 4)];
        T8 = R0[WS(rs, 3)];
        {
            SIMD_FLOAT Tw, T3, Tr, Td, Tm, T6, Tl, T9, Ts, Tx, Tn, Te, Tq, TC,
                Tv;
            SIMD_FLOAT Tj, TD, Tk, Tz, TB, Ti, Tg, Tt, Tu, Ty, TA, Tp, To, Th,
                Tf;
            Tw            = T1 + T2;
            T3            = T1 - T2;
            Tr            = Tb + Tc;
            Td            = Tb - Tc;
            Tm            = T4 + T5;
            T6            = T4 - T5;
            Tl            = T7 + T8;
            T9            = T7 - T8;
            Ts            = Ta - Tr;
            Tx            = Ta + Tr;
            Tn            = Td - Ta;
            Te            = Ta + Td;
            Tq            = SIMD_FNMADD(KP554958132, Tm, Tl);
            TC            = SIMD_FNMADD(KP356895867, Tl, Tm);
            Tv            = SIMD_FNMADD(KP554958132, T6, T9);
            Tj            = SIMD_FNMADD(KP356895867, T9, T6);
            Tt            = SIMD_FMADD(KP554958132, T9, Ts);
            Tu            = SIMD_FMADD(KP554958132, Ts, T6);
            Ty            = SIMD_FNMADD(KP356895867, Tx, Tl);
            TA            = SIMD_FNMADD(KP356895867, Tm, Tx);
            Cr[0]         = Tw + Tm + Tl + Tx;
            Tp            = SIMD_FNMADD(KP554958132, Tl, Tn);
            To            = SIMD_FNMADD(KP554958132, Tn, Tm);
            Th            = SIMD_FNMADD(KP356895867, T6, Te);
            Tf            = SIMD_FNMADD(KP356895867, Te, T9);
            Cr[WS(cs, 7)] = T3 + T6 + T9 + Te;
            Ci[WS(cs, 3)] = KP974927912 * (SIMD_FMADD(KP801937735, Tq, Tn));
            TD            = SIMD_FNMADD(KP692021471, TC, Tx);
            Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tv, Ts));
            Tk            = SIMD_FNMADD(KP692021471, Tj, Te);
            Ci[WS(cs, 2)] = -(KP974927912 * (SIMD_FNMADD(KP801937735, Tt, T6)));
            Ci[WS(cs, 6)] = KP974927912 * (SIMD_FMADD(KP801937735, Tu, T9));
            Tz            = SIMD_FNMADD(KP692021471, Ty, Tm);
            TB            = SIMD_FNMADD(KP692021471, TA, Tl);
            Ci[WS(cs, 5)] = KP974927912 * (SIMD_FMADD(KP801937735, Tp, Tm));
            Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, To, Tl)));
            Ti            = SIMD_FNMADD(KP692021471, Th, T9);
            Tg            = SIMD_FNMADD(KP692021471, Tf, T6);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, TD, Tw);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Tk, T3);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, Tz, Tw);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, TB, Tw);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Ti, T3);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Tg, T3);
        }
    }
}

template <>
struct r2cf_traits<14, 10>
{
    static constexpr long_t flops           = 88;
    static constexpr long_t operations      = 58;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 50;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 10 -name r2cf
 * -standalone */

/*
 * This function contains 52 FP additions, 36 FP multiplications,
 * (or, 22 additions, 6 multiplications, 30 fused multiply/add),
 * 50 stack variables, 6 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 10>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T2, T9, Ta, T7, T4, T5, Tc, Td, Te, T3, TA, Tb, Tn;
        T1 = R0[0];
        T2 = R0[WS(rs, 7)];
        T9 = R0[WS(rs, 4)];
        Ta = R0[WS(rs, 3)];
        T7 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 2)];
        T5 = R0[WS(rs, 9)];
        Tc = R0[WS(rs, 6)];
        Td = R0[WS(rs, 8)];
        Te = R0[WS(rs, 1)];
        T3 = T1 - T2;
        TA = T1 + T2;
        Tb = T9 - Ta;
        Tn = T9 + Ta;
        {
            SIMD_FLOAT T6, Tt, Tf, Tv, TB, Tu, T8, To, TC, Tw, Tg, Tp, TI, Tm,
                TE;
            SIMD_FLOAT TG, Tk, Ti, Tz, TH, Ts, Tl, Tx, Ty, TD, TF, Tr, Tq, Tj,
                Th;
            T6            = T4 - T5;
            Tt            = T4 + T5;
            Tf            = Td - Te;
            Tv            = Td + Te;
            TB            = Tt + T7;
            Tu            = T7 - Tt;
            T8            = T6 - T7;
            To            = T6 + T7;
            TC            = Tc + Tv;
            Tw            = Tc - Tv;
            Tg            = Tc + Tf;
            Tp            = Tf - Tc;
            Tz            = SIMD_FMADD(KP554958132, Tu, Tb);
            TH            = SIMD_FNMADD(KP356895867, Tn, TB);
            Ts            = SIMD_FNMADD(KP554958132, To, Tn);
            Tl            = SIMD_FNMADD(KP356895867, Tb, T8);
            Tx            = SIMD_FMADD(KP554958132, Tb, Tw);
            Ty            = SIMD_FNMADD(KP554958132, Tw, Tu);
            TD            = SIMD_FNMADD(KP356895867, TC, Tn);
            TF            = SIMD_FNMADD(KP356895867, TB, TC);
            Cr[0]         = TA + TB + Tn + TC;
            Tr            = SIMD_FNMADD(KP554958132, Tn, Tp);
            Tq            = SIMD_FNMADD(KP554958132, Tp, To);
            Tj            = SIMD_FNMADD(KP356895867, T8, Tg);
            Th            = SIMD_FNMADD(KP356895867, Tg, Tb);
            Cr[WS(cs, 7)] = T3 + T8 + Tb + Tg;
            Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tz, Tw));
            TI            = SIMD_FNMADD(KP692021471, TH, TC);
            Ci[WS(cs, 3)] = KP974927912 * (SIMD_FMADD(KP801937735, Ts, Tp));
            Tm            = SIMD_FNMADD(KP692021471, Tl, Tg);
            Ci[WS(cs, 2)] = KP974927912 * (SIMD_FMADD(KP801937735, Tx, Tu));
            Ci[WS(cs, 6)] = KP974927912 * (SIMD_FNMADD(KP801937735, Ty, Tb));
            TE            = SIMD_FNMADD(KP692021471, TD, TB);
            TG            = SIMD_FNMADD(KP692021471, TF, Tn);
            Ci[WS(cs, 5)] = KP974927912 * (SIMD_FMADD(KP801937735, Tr, To));
            Ci[WS(cs, 1)] = -(KP974927912 * (SIMD_FMADD(KP801937735, Tq, Tn)));
            Tk            = SIMD_FNMADD(KP692021471, Tj, Tb);
            Ti            = SIMD_FNMADD(KP692021471, Th, T8);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, TI, TA);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Tm, T3);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, TE, TA);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, TG, TA);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Tk, T3);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Ti, T3);
        }
    }
}

template <>
struct r2cf_traits<14, 11>
{
    static constexpr long_t flops           = 92;
    static constexpr long_t operations      = 62;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 55;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 11 -name r2cf
 * -standalone */

/*
 * This function contains 56 FP additions, 36 FP multiplications,
 * (or, 26 additions, 6 multiplications, 30 fused multiply/add),
 * 55 stack variables, 6 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 11>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T2, Te, Tf, Tg, T7, T4, T5, T9, Ta, Tb, TE, T3, Tx, Th;
        SIMD_FLOAT Tv, T6, Tz, Tc;
        T1 = R0[0];
        T2 = R0[WS(rs, 7)];
        Te = R0[WS(rs, 6)];
        Tf = R0[WS(rs, 8)];
        Tg = R0[WS(rs, 1)];
        T7 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 2)];
        T5 = R0[WS(rs, 9)];
        T9 = R0[WS(rs, 4)];
        Ta = R0[WS(rs, 10)];
        Tb = R0[WS(rs, 3)];
        TE = T1 + T2;
        T3 = T1 - T2;
        Tx = Tf + Tg;
        Th = Tf - Tg;
        Tv = T4 + T5;
        T6 = T4 - T5;
        Tz = Ta + Tb;
        Tc = Ta - Tb;
        {
            SIMD_FLOAT Ty, TH, Tr, Ti, Tw, TF, Tq, T8, TA, TG, Tp, Td, TL, Tm,
                TJ;
            SIMD_FLOAT TN, To, Tk, TC, TK, Ts, Tl, TB, TD, TI, TM, Tt, Tu, Tn,
                Tj;
            Ty            = Te - Tx;
            TH            = Te + Tx;
            Tr            = Th - Te;
            Ti            = Te + Th;
            Tw            = T7 - Tv;
            TF            = Tv + T7;
            Tq            = T6 + T7;
            T8            = T6 - T7;
            TA            = T9 - Tz;
            TG            = T9 + Tz;
            Tp            = Tc - T9;
            Td            = T9 + Tc;
            TC            = SIMD_FNMADD(KP554958132, Ty, Tw);
            TK            = SIMD_FNMADD(KP356895867, TF, TH);
            Ts            = SIMD_FNMADD(KP554958132, Tr, Tq);
            Tl            = SIMD_FNMADD(KP356895867, T8, Ti);
            TB            = SIMD_FMADD(KP554958132, TA, Ty);
            TD            = SIMD_FMADD(KP554958132, Tw, TA);
            TI            = SIMD_FNMADD(KP356895867, TH, TG);
            TM            = SIMD_FNMADD(KP356895867, TG, TF);
            Cr[0]         = TE + TF + TG + TH;
            Tt            = SIMD_FMADD(KP554958132, Tp, Tr);
            Tu            = SIMD_FMADD(KP554958132, Tq, Tp);
            Tn            = SIMD_FNMADD(KP356895867, Td, T8);
            Tj            = SIMD_FNMADD(KP356895867, Ti, Td);
            Cr[WS(cs, 7)] = T3 + T8 + Td + Ti;
            Ci[WS(cs, 6)] = KP974927912 * (SIMD_FNMADD(KP801937735, TC, TA));
            TL            = SIMD_FNMADD(KP692021471, TK, TG);
            Ci[WS(cs, 1)] = KP974927912 * (SIMD_FNMADD(KP801937735, Ts, Tp));
            Tm            = SIMD_FNMADD(KP692021471, Tl, Td);
            Ci[WS(cs, 2)] = KP974927912 * (SIMD_FMADD(KP801937735, TB, Tw));
            Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, TD, Ty));
            TJ            = SIMD_FNMADD(KP692021471, TI, TF);
            TN            = SIMD_FNMADD(KP692021471, TM, TH);
            Ci[WS(cs, 5)] = KP974927912 * (SIMD_FMADD(KP801937735, Tt, Tq));
            Ci[WS(cs, 3)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tu, Tr));
            To            = SIMD_FNMADD(KP692021471, Tn, Ti);
            Tk            = SIMD_FNMADD(KP692021471, Tj, T8);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, TL, TE);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Tm, T3);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, TJ, TE);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, TN, TE);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, To, T3);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Tk, T3);
        }
    }
}

template <>
struct r2cf_traits<14, 12>
{
    static constexpr long_t flops           = 94;
    static constexpr long_t operations      = 64;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 58;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 12 -name r2cf
 * -standalone */

/*
 * This function contains 58 FP additions, 36 FP multiplications,
 * (or, 28 additions, 6 multiplications, 30 fused multiply/add),
 * 58 stack variables, 6 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 12>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T1, T2, Tg, Th, Ti, T7, T4, T5, T9, Ta, Tc, Td, T3, TH, Tj;
        SIMD_FLOAT Tz, T6, Tx, Tb, TB, Te, TC;
        T1 = R0[0];
        T2 = R0[WS(rs, 7)];
        Tg = R0[WS(rs, 6)];
        Th = R0[WS(rs, 8)];
        Ti = R0[WS(rs, 1)];
        T7 = R0[WS(rs, 5)];
        T4 = R0[WS(rs, 2)];
        T5 = R0[WS(rs, 9)];
        T9 = R0[WS(rs, 4)];
        Ta = R0[WS(rs, 11)];
        Tc = R0[WS(rs, 10)];
        Td = R0[WS(rs, 3)];
        T3 = T1 - T2;
        TH = T1 + T2;
        Tj = Th - Ti;
        Tz = Th + Ti;
        T6 = T4 - T5;
        Tx = T4 + T5;
        Tb = T9 - Ta;
        TB = T9 + Ta;
        Te = Tc - Td;
        TC = Tc + Td;
        {
            SIMD_FLOAT TK, TA, Tk, Tt, TI, Ty, T8, Ts, TJ, TD, Tf, Tr, TO, To,
                TM;
            SIMD_FLOAT TQ, Tq, Tm, TF, TN, Tu, Tn, TE, TG, TL, TP, Tv, Tw, Tp,
                Tl;
            TK            = Tg + Tz;
            TA            = Tg - Tz;
            Tk            = Tg + Tj;
            Tt            = Tj - Tg;
            TI            = Tx + T7;
            Ty            = T7 - Tx;
            T8            = T6 - T7;
            Ts            = T6 + T7;
            TJ            = TB + TC;
            TD            = TB - TC;
            Tf            = Tb + Te;
            Tr            = Te - Tb;
            TF            = SIMD_FNMADD(KP554958132, TA, Ty);
            TN            = SIMD_FNMADD(KP356895867, TI, TK);
            Tu            = SIMD_FNMADD(KP554958132, Tt, Ts);
            Tn            = SIMD_FNMADD(KP356895867, T8, Tk);
            TE            = SIMD_FMADD(KP554958132, TD, TA);
            TG            = SIMD_FMADD(KP554958132, Ty, TD);
            TL            = SIMD_FNMADD(KP356895867, TK, TJ);
            TP            = SIMD_FNMADD(KP356895867, TJ, TI);
            Cr[0]         = TH + TI + TJ + TK;
            Tv            = SIMD_FMADD(KP554958132, Tr, Tt);
            Tw            = SIMD_FMADD(KP554958132, Ts, Tr);
            Tp            = SIMD_FNMADD(KP356895867, Tf, T8);
            Tl            = SIMD_FNMADD(KP356895867, Tk, Tf);
            Cr[WS(cs, 7)] = T3 + T8 + Tf + Tk;
            Ci[WS(cs, 6)] = KP974927912 * (SIMD_FNMADD(KP801937735, TF, TD));
            TO            = SIMD_FNMADD(KP692021471, TN, TJ);
            Ci[WS(cs, 1)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tu, Tr));
            To            = SIMD_FNMADD(KP692021471, Tn, Tf);
            Ci[WS(cs, 2)] = KP974927912 * (SIMD_FMADD(KP801937735, TE, Ty));
            Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, TG, TA));
            TM            = SIMD_FNMADD(KP692021471, TL, TI);
            TQ            = SIMD_FNMADD(KP692021471, TP, TK);
            Ci[WS(cs, 5)] = KP974927912 * (SIMD_FMADD(KP801937735, Tv, Ts));
            Ci[WS(cs, 3)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tw, Tt));
            Tq            = SIMD_FNMADD(KP692021471, Tp, Tk);
            Tm            = SIMD_FNMADD(KP692021471, Tl, T8);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, TO, TH);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, To, T3);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, TM, TH);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, TQ, TH);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Tq, T3);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Tm, T3);
        }
    }
}

template <>
struct r2cf_traits<14, 13>
{
    static constexpr long_t flops           = 96;
    static constexpr long_t operations      = 66;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 61;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 13 -name r2cf
 * -standalone */

/*
 * This function contains 60 FP additions, 36 FP multiplications,
 * (or, 30 additions, 6 multiplications, 30 fused multiply/add),
 * 61 stack variables, 6 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 13>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT Ti, Tj, Tk, T4, T5, T7, T8, Tb, Tc, Te, Tf, TK, T3, T1, T2;
        SIMD_FLOAT TC, Tl, TA, T6, Tz, T9, TE, Td, TF, Tg;
        T1 = R0[0];
        T2 = R0[WS(rs, 7)];
        Ti = R0[WS(rs, 6)];
        Tj = R0[WS(rs, 8)];
        Tk = R0[WS(rs, 1)];
        T4 = R0[WS(rs, 2)];
        T5 = R0[WS(rs, 9)];
        T7 = R0[WS(rs, 12)];
        T8 = R0[WS(rs, 5)];
        Tb = R0[WS(rs, 4)];
        Tc = R0[WS(rs, 11)];
        Te = R0[WS(rs, 10)];
        Tf = R0[WS(rs, 3)];
        TK = T1 + T2;
        T3 = T1 - T2;
        TC = Tj + Tk;
        Tl = Tj - Tk;
        TA = T4 + T5;
        T6 = T4 - T5;
        Tz = T7 + T8;
        T9 = T7 - T8;
        TE = Tb + Tc;
        Td = Tb - Tc;
        TF = Te + Tf;
        Tg = Te - Tf;
        {
            SIMD_FLOAT TD, TN, Tv, Tm, TB, TL, Tu, Ta, TG, TM, Tt, Th, TR, Tq,
                TP;
            SIMD_FLOAT TT, Ts, To, TI, TQ, Tw, Tp, TH, TJ, TO, TS, Tx, Ty, Tr,
                Tn;
            TD            = Ti - TC;
            TN            = Ti + TC;
            Tv            = Tl - Ti;
            Tm            = Ti + Tl;
            TB            = Tz - TA;
            TL            = TA + Tz;
            Tu            = T6 - T9;
            Ta            = T6 + T9;
            TG            = TE - TF;
            TM            = TE + TF;
            Tt            = Tg - Td;
            Th            = Td + Tg;
            TI            = SIMD_FNMADD(KP554958132, TD, TB);
            TQ            = SIMD_FNMADD(KP356895867, TL, TN);
            Tw            = SIMD_FNMADD(KP554958132, Tv, Tu);
            Tp            = SIMD_FNMADD(KP356895867, Ta, Tm);
            TH            = SIMD_FMADD(KP554958132, TG, TD);
            TJ            = SIMD_FMADD(KP554958132, TB, TG);
            TO            = SIMD_FNMADD(KP356895867, TN, TM);
            TS            = SIMD_FNMADD(KP356895867, TM, TL);
            Cr[0]         = TK + TL + TM + TN;
            Tx            = SIMD_FMADD(KP554958132, Tt, Tv);
            Ty            = SIMD_FMADD(KP554958132, Tu, Tt);
            Tr            = SIMD_FNMADD(KP356895867, Th, Ta);
            Tn            = SIMD_FNMADD(KP356895867, Tm, Th);
            Cr[WS(cs, 7)] = T3 + Ta + Th + Tm;
            Ci[WS(cs, 6)] = KP974927912 * (SIMD_FNMADD(KP801937735, TI, TG));
            TR            = SIMD_FNMADD(KP692021471, TQ, TM);
            Ci[WS(cs, 1)] = KP974927912 * (SIMD_FNMADD(KP801937735, Tw, Tt));
            Tq            = SIMD_FNMADD(KP692021471, Tp, Th);
            Ci[WS(cs, 2)] = KP974927912 * (SIMD_FMADD(KP801937735, TH, TB));
            Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, TJ, TD));
            TP            = SIMD_FNMADD(KP692021471, TO, TL);
            TT            = SIMD_FNMADD(KP692021471, TS, TN);
            Ci[WS(cs, 5)] = KP974927912 * (SIMD_FMADD(KP801937735, Tx, Tu));
            Ci[WS(cs, 3)] = KP974927912 * (SIMD_FNMADD(KP801937735, Ty, Tv));
            Ts            = SIMD_FNMADD(KP692021471, Tr, Tm);
            To            = SIMD_FNMADD(KP692021471, Tn, Ta);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, TR, TK);
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Tq, T3);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, TP, TK);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, TT, TK);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Ts, T3);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, To, T3);
        }
    }
}

template <>
struct r2cf_traits<14, 14>
{
    static constexpr long_t flops           = 98;
    static constexpr long_t operations      = 68;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 64;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cf.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -n 14 -first-k 14 -name r2cf
 * -standalone */

/*
 * This function contains 62 FP additions, 36 FP multiplications,
 * (or, 32 additions, 6 multiplications, 30 fused multiply/add),
 * 64 stack variables, 6 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t ProvidedElements, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && ProvidedElements == 14>::type
r2cf(SIMD_FLOAT const* __restrict R0, SIMD_FLOAT* __restrict Cr,
     SIMD_FLOAT* __restrict Ci)
{
    DK(KP900968867, +0.900968867902419126236102319507445051165919162);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP974927912, +0.974927912181823607018131682993931217232785801);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT Te, TN, T3, TE, Tk, TF, Tn, TC, T6, TB, T9, TH, Td, Tf, T1;
        SIMD_FLOAT T2, Ti, Tj, Tl, Tm, T4, T5, T7, T8, Tb, Tc;
        T1 = R0[0];
        T2 = R0[WS(rs, 7)];
        Ti = R0[WS(rs, 6)];
        Tj = R0[WS(rs, 13)];
        Tl = R0[WS(rs, 8)];
        Tm = R0[WS(rs, 1)];
        T4 = R0[WS(rs, 2)];
        T5 = R0[WS(rs, 9)];
        T7 = R0[WS(rs, 12)];
        T8 = R0[WS(rs, 5)];
        Tb = R0[WS(rs, 4)];
        Tc = R0[WS(rs, 11)];
        Te = R0[WS(rs, 10)];
        TN = T1 + T2;
        T3 = T1 - T2;
        TE = Ti + Tj;
        Tk = Ti - Tj;
        TF = Tl + Tm;
        Tn = Tl - Tm;
        TC = T4 + T5;
        T6 = T4 - T5;
        TB = T7 + T8;
        T9 = T7 - T8;
        TH = Tb + Tc;
        Td = Tb - Tc;
        Tf = R0[WS(rs, 3)];
        {
            SIMD_FLOAT TQ, TG, To, Tx, TO, TD, Ta, Tw, Tg, TI, TL, TT, Ty, Tr,
                TP;
            SIMD_FLOAT TJ, Th, Tv, TA, Ts, Tt, Tp, TS, TW, TK, TM, TR, TV, TU,
                Tz;
            SIMD_FLOAT Tu, Tq;
            TQ            = TE + TF;
            TG            = TE - TF;
            To            = Tk + Tn;
            Tx            = Tn - Tk;
            TO            = TC + TB;
            TD            = TB - TC;
            Ta            = T6 + T9;
            Tw            = T6 - T9;
            Tg            = Te - Tf;
            TI            = Te + Tf;
            TL            = SIMD_FNMADD(KP554958132, TG, TD);
            TT            = SIMD_FNMADD(KP356895867, TO, TQ);
            Ty            = SIMD_FNMADD(KP554958132, Tx, Tw);
            Tr            = SIMD_FNMADD(KP356895867, Ta, To);
            TP            = TH + TI;
            TJ            = TH - TI;
            Th            = Td + Tg;
            Tv            = Tg - Td;
            TK            = SIMD_FMADD(KP554958132, TJ, TG);
            TM            = SIMD_FMADD(KP554958132, TD, TJ);
            Ci[WS(cs, 6)] = KP974927912 * (SIMD_FNMADD(KP801937735, TL, TJ));
            TR            = SIMD_FNMADD(KP356895867, TQ, TP);
            TV            = SIMD_FNMADD(KP356895867, TP, TO);
            TU            = SIMD_FNMADD(KP692021471, TT, TP);
            Cr[0]         = TN + TO + TP + TQ;
            Tz            = SIMD_FMADD(KP554958132, Tv, Tx);
            Ci[WS(cs, 1)] = KP974927912 * (SIMD_FNMADD(KP801937735, Ty, Tv));
            TA            = SIMD_FMADD(KP554958132, Tw, Tv);
            Ts            = SIMD_FNMADD(KP692021471, Tr, Th);
            Tt            = SIMD_FNMADD(KP356895867, Th, Ta);
            Tp            = SIMD_FNMADD(KP356895867, To, Th);
            Cr[WS(cs, 7)] = T3 + Ta + Th + To;
            Ci[WS(cs, 2)] = KP974927912 * (SIMD_FMADD(KP801937735, TK, TD));
            Ci[WS(cs, 4)] = KP974927912 * (SIMD_FNMADD(KP801937735, TM, TG));
            TS            = SIMD_FNMADD(KP692021471, TR, TO);
            TW            = SIMD_FNMADD(KP692021471, TV, TQ);
            Cr[WS(cs, 2)] = SIMD_FNMADD(KP900968867, TU, TN);
            Ci[WS(cs, 5)] = KP974927912 * (SIMD_FMADD(KP801937735, Tz, Tw));
            Ci[WS(cs, 3)] = KP974927912 * (SIMD_FNMADD(KP801937735, TA, Tx));
            Cr[WS(cs, 5)] = SIMD_FNMADD(KP900968867, Ts, T3);
            Tu            = SIMD_FNMADD(KP692021471, Tt, To);
            Tq            = SIMD_FNMADD(KP692021471, Tp, Ta);
            Cr[WS(cs, 4)] = SIMD_FNMADD(KP900968867, TS, TN);
            Cr[WS(cs, 6)] = SIMD_FNMADD(KP900968867, TW, TN);
            Cr[WS(cs, 1)] = SIMD_FNMADD(KP900968867, Tu, T3);
            Cr[WS(cs, 3)] = SIMD_FNMADD(KP900968867, Tq, T3);
        }
    }
}

//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<2, 0>
{
    static constexpr long_t flops           = 2;
    static constexpr long_t operations      = 2;
    static constexpr long_t memory_accesses = 4;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 2 -skip-k 0 -name r2cb
 * -standalone */

/*
 * This function contains 2 FP additions, 0 FP multiplications,
 * (or, 2 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 4 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 2 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    {
        SIMD_FLOAT T1, T2;
        T1            = Cr[0];
        T2            = Cr[WS(cs, 1)];
        R0[0]         = T1 + T2;
        R0[WS(rs, 1)] = T1 - T2;
    }
}

template <>
struct r2cb_traits<2, 1>
{
    static constexpr long_t flops           = 1;
    static constexpr long_t operations      = 1;
    static constexpr long_t memory_accesses = 3;
    static constexpr long_t stack_vars      = 2;
    static constexpr long_t constants       = 0;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 2 -skip-k 1 -name r2cb
 * -standalone */

/*
 * This function contains 1 FP additions, 0 FP multiplications,
 * (or, 1 additions, 0 multiplications, 0 fused multiply/add),
 * 2 stack variables, 0 constants, and 3 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 2 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    {
        SIMD_FLOAT T1, T2;
        T1    = Cr[0];
        T2    = Cr[WS(cs, 1)];
        R0[0] = T1 - T2;
    }
}

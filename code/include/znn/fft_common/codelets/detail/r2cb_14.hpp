//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<14, 0>
{
    static constexpr long_t flops           = 106;
    static constexpr long_t operations      = 62;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 67;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 0 -name
 * r2cb -standalone */

/*
 * This function contains 62 FP additions, 44 FP multiplications,
 * (or, 18 additions, 0 multiplications, 44 fused multiply/add),
 * 67 stack variables, 7 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T7, Te, T3, TK, To, TM, Tu, TL, Tr, Tf, T6, Th, Tc, T8, T1;
        SIMD_FLOAT T2, Tm, Tn, Ts, Tt, Tp, Tq, T4, T5, Ta, Tb;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        Tm = Ci[WS(cs, 4)];
        Tn = Ci[WS(cs, 3)];
        Ts = Ci[WS(cs, 6)];
        Tt = Ci[WS(cs, 1)];
        Tp = Ci[WS(cs, 2)];
        Tq = Ci[WS(cs, 5)];
        T4 = Cr[WS(cs, 2)];
        T5 = Cr[WS(cs, 5)];
        Ta = Cr[WS(cs, 6)];
        Tb = Cr[WS(cs, 1)];
        T7 = Cr[WS(cs, 4)];
        Te = T1 + T2;
        T3 = T1 - T2;
        TK = Tm + Tn;
        To = Tm - Tn;
        TM = Ts + Tt;
        Tu = Ts - Tt;
        TL = Tp + Tq;
        Tr = Tp - Tq;
        Tf = T4 + T5;
        T6 = T4 - T5;
        Th = Ta + Tb;
        Tc = Ta - Tb;
        T8 = Cr[WS(cs, 3)];
        {
            SIMD_FLOAT TS, TA, TN, TX, TF, Tv, Tx, TP, T9, Tg, TT, TB, TO, TY,
                TG;
            SIMD_FLOAT Tw, Ty, Ti, TC, Tj, TQ, Td, TH, TU, Tz, TD, Tk, TR, TI,
                TV;
            SIMD_FLOAT TE, Tl, TJ, TW;
            TS             = SIMD_FMADD(KP554958132, TK, TM);
            TA             = SIMD_FMADD(KP554958132, To, Tu);
            TN             = SIMD_FMADD(KP554958132, TM, TL);
            TX             = SIMD_FNMADD(KP554958132, TL, TK);
            TF             = SIMD_FNMADD(KP554958132, Tr, To);
            Tv             = SIMD_FMADD(KP554958132, Tu, Tr);
            Tx             = SIMD_FNMADD(KP356895867, Tf, Th);
            TP             = SIMD_FNMADD(KP356895867, T6, Tc);
            T9             = T7 - T8;
            Tg             = T7 + T8;
            TT             = SIMD_FNMADD(KP801937735, TS, TL);
            TB             = SIMD_FNMADD(KP801937735, TA, Tr);
            TO             = SIMD_FMADD(KP801937735, TN, TK);
            TY             = SIMD_FNMADD(KP801937735, TX, TM);
            TG             = SIMD_FNMADD(KP801937735, TF, Tu);
            Tw             = SIMD_FMADD(KP801937735, Tv, To);
            Ty             = SIMD_FNMADD(KP692021471, Tx, Tg);
            Ti             = Tf + Tg + Th;
            TC             = SIMD_FNMADD(KP356895867, Th, Tg);
            Tj             = SIMD_FNMADD(KP356895867, Tg, Tf);
            TQ             = SIMD_FNMADD(KP692021471, TP, T9);
            Td             = T6 + T9 + Tc;
            TH             = SIMD_FNMADD(KP356895867, T9, T6);
            TU             = SIMD_FNMADD(KP356895867, Tc, T9);
            Tz             = SIMD_FNMADD(KP1_801937735, Ty, Te);
            R0[0]          = SIMD_FMADD(KP2_000000000, Ti, Te);
            TD             = SIMD_FNMADD(KP692021471, TC, Tf);
            Tk             = SIMD_FNMADD(KP692021471, Tj, Th);
            TR             = SIMD_FNMADD(KP1_801937735, TQ, T3);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP2_000000000, Td, T3);
            TI             = SIMD_FNMADD(KP692021471, TH, Tc);
            TV             = SIMD_FNMADD(KP692021471, TU, T6);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_949855824, TB, Tz);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_949855824, TB, Tz);
            TE             = SIMD_FNMADD(KP1_801937735, TD, Te);
            Tl             = SIMD_FNMADD(KP1_801937735, Tk, Te);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_949855824, TT, TR);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_949855824, TT, TR);
            TJ             = SIMD_FNMADD(KP1_801937735, TI, T3);
            TW             = SIMD_FNMADD(KP1_801937735, TV, T3);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_949855824, TG, TE);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP1_949855824, TG, TE);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_949855824, Tw, Tl);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_949855824, Tw, Tl);
            R0[WS(rs, 13)] = SIMD_FMADD(KP1_949855824, TO, TJ);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_949855824, TO, TJ);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_949855824, TY, TW);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_949855824, TY, TW);
        }
    }
}

template <>
struct r2cb_traits<14, 1>
{
    static constexpr long_t flops           = 102;
    static constexpr long_t operations      = 59;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 1 -name
 * r2cb -standalone */

/*
 * This function contains 59 FP additions, 43 FP multiplications,
 * (or, 16 additions, 0 multiplications, 43 fused multiply/add),
 * 66 stack variables, 7 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    {
        SIMD_FLOAT T7, Te, T3, TJ, Tn, TL, Tt, TK, Tq, Tf, T6, Th, Tc, T8, T1;
        SIMD_FLOAT T2, Tl, Tm, Tr, Ts, To, Tp, T4, T5, Ta, Tb;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        Tl = Ci[WS(cs, 4)];
        Tm = Ci[WS(cs, 3)];
        Tr = Ci[WS(cs, 6)];
        Ts = Ci[WS(cs, 1)];
        To = Ci[WS(cs, 2)];
        Tp = Ci[WS(cs, 5)];
        T4 = Cr[WS(cs, 6)];
        T5 = Cr[WS(cs, 1)];
        Ta = Cr[WS(cs, 4)];
        Tb = Cr[WS(cs, 3)];
        T7 = Cr[WS(cs, 2)];
        Te = T1 + T2;
        T3 = T1 - T2;
        TJ = Tl + Tm;
        Tn = Tl - Tm;
        TL = Tr + Ts;
        Tt = Tr - Ts;
        TK = To + Tp;
        Tq = To - Tp;
        Tf = T4 + T5;
        T6 = T4 - T5;
        Th = Ta + Tb;
        Tc = Ta - Tb;
        T8 = Cr[WS(cs, 5)];
        {
            SIMD_FLOAT TR, Tz, TM, TW, TE, Tu, TB, TT, T9, Tg, TS, TA, TN, TX,
                TF;
            SIMD_FLOAT Tv, TC, Tw, Ti, TU, Td, TG, TO, TD, Tx, Tj, TV, TH, TP,
                Ty;
            SIMD_FLOAT Tk, TI, TQ;
            TR             = SIMD_FMADD(KP554958132, TJ, TL);
            Tz             = SIMD_FMADD(KP554958132, Tn, Tt);
            TM             = SIMD_FMADD(KP554958132, TL, TK);
            TW             = SIMD_FNMADD(KP554958132, TK, TJ);
            TE             = SIMD_FNMADD(KP554958132, Tq, Tn);
            Tu             = SIMD_FMADD(KP554958132, Tt, Tq);
            TB             = SIMD_FNMADD(KP356895867, Tf, Th);
            TT             = SIMD_FNMADD(KP356895867, T6, Tc);
            T9             = T7 - T8;
            Tg             = T7 + T8;
            TS             = SIMD_FNMADD(KP801937735, TR, TK);
            TA             = SIMD_FNMADD(KP801937735, Tz, Tq);
            TN             = SIMD_FMADD(KP801937735, TM, TJ);
            TX             = SIMD_FNMADD(KP801937735, TW, TL);
            TF             = SIMD_FNMADD(KP801937735, TE, Tt);
            Tv             = SIMD_FMADD(KP801937735, Tu, Tn);
            TC             = SIMD_FNMADD(KP692021471, TB, Tg);
            Tw             = SIMD_FNMADD(KP356895867, Tg, Tf);
            Ti             = SIMD_FNMADD(KP356895867, Th, Tg);
            TU             = SIMD_FNMADD(KP692021471, TT, T9);
            Td             = T6 + T9 + Tc;
            TG             = SIMD_FNMADD(KP356895867, Tc, T9);
            TO             = SIMD_FNMADD(KP356895867, T9, T6);
            TD             = SIMD_FNMADD(KP1_801937735, TC, Te);
            Tx             = SIMD_FNMADD(KP692021471, Tw, Th);
            Tj             = SIMD_FNMADD(KP692021471, Ti, Tf);
            TV             = SIMD_FNMADD(KP1_801937735, TU, T3);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP2_000000000, Td, T3);
            TH             = SIMD_FNMADD(KP692021471, TG, T6);
            TP             = SIMD_FNMADD(KP692021471, TO, Tc);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_949855824, TF, TD);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_949855824, TF, TD);
            Ty             = SIMD_FNMADD(KP1_801937735, Tx, Te);
            Tk             = SIMD_FNMADD(KP1_801937735, Tj, Te);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_949855824, TX, TV);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_949855824, TX, TV);
            TI             = SIMD_FNMADD(KP1_801937735, TH, T3);
            TQ             = SIMD_FNMADD(KP1_801937735, TP, T3);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_949855824, TA, Ty);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_949855824, TA, Ty);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_949855824, Tv, Tk);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_949855824, Tv, Tk);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_949855824, TN, TI);
            R0[0]          = SIMD_FNMADD(KP1_949855824, TN, TI);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_949855824, TS, TQ);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_949855824, TS, TQ);
        }
    }
}

template <>
struct r2cb_traits<14, 2>
{
    static constexpr long_t flops           = 100;
    static constexpr long_t operations      = 58;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 71;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 2 -name
 * r2cb -standalone */

/*
 * This function contains 58 FP additions, 42 FP multiplications,
 * (or, 16 additions, 0 multiplications, 42 fused multiply/add),
 * 71 stack variables, 12 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    {
        SIMD_FLOAT Ta, Te, T3, Th, T6, TG, Tn, Tf, T9, TI, Tt, TH, Tq, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Tl, Tm, T7, T8, Tr, Ts, To, Tp;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Cr[WS(cs, 4)];
        T5 = Cr[WS(cs, 3)];
        Tl = Ci[WS(cs, 4)];
        Tm = Ci[WS(cs, 3)];
        T7 = Cr[WS(cs, 6)];
        T8 = Cr[WS(cs, 1)];
        Tr = Ci[WS(cs, 6)];
        Ts = Ci[WS(cs, 1)];
        To = Ci[WS(cs, 2)];
        Tp = Ci[WS(cs, 5)];
        Ta = Cr[WS(cs, 2)];
        Te = T1 + T2;
        T3 = T1 - T2;
        Th = T4 + T5;
        T6 = T4 - T5;
        TG = Tl + Tm;
        Tn = Tl - Tm;
        Tf = T7 + T8;
        T9 = T7 - T8;
        TI = Tr + Ts;
        Tt = Tr - Ts;
        TH = To + Tp;
        Tq = To - Tp;
        Tb = Cr[WS(cs, 5)];
        {
            SIMD_FLOAT TB, TT, TJ, TR, Tz, TW, TE, Tu, Tc, Tg, TS, TA, TX, TF,
                Tv;
            SIMD_FLOAT TC, Tw, Ti, TU, Td, TK, TO, TD, Tx, Tj, TV, TL, TP, Ty,
                Tk;
            SIMD_FLOAT TM, TQ, TN;
            TB             = SIMD_FNMADD(KP356895867, Tf, Th);
            TT             = SIMD_FNMADD(KP356895867, T9, T6);
            TJ             = SIMD_FNMADD(KP512858431, T6, TI);
            TR             = SIMD_FMADD(KP554958132, TG, TI);
            Tz             = SIMD_FMADD(KP554958132, Tn, Tt);
            TW             = SIMD_FNMADD(KP554958132, TH, TG);
            TE             = SIMD_FNMADD(KP554958132, Tq, Tn);
            Tu             = SIMD_FMADD(KP554958132, Tt, Tq);
            Tc             = Ta - Tb;
            Tg             = Ta + Tb;
            TS             = SIMD_FNMADD(KP801937735, TR, TH);
            TA             = SIMD_FNMADD(KP801937735, Tz, Tq);
            TX             = SIMD_FNMADD(KP801937735, TW, TI);
            TF             = SIMD_FNMADD(KP801937735, TE, Tt);
            Tv             = SIMD_FMADD(KP801937735, Tu, Tn);
            TC             = SIMD_FNMADD(KP692021471, TB, Tg);
            Tw             = SIMD_FNMADD(KP356895867, Tg, Tf);
            Ti             = SIMD_FNMADD(KP356895867, Th, Tg);
            TU             = SIMD_FNMADD(KP692021471, TT, Tc);
            Td             = T6 + T9 + Tc;
            TK             = SIMD_FMADD(KP695895486, TJ, Tc);
            TO             = SIMD_FNMADD(KP356895867, Tc, T9);
            TD             = SIMD_FNMADD(KP1_801937735, TC, Te);
            Tx             = SIMD_FNMADD(KP692021471, Tw, Th);
            Tj             = SIMD_FNMADD(KP692021471, Ti, Tf);
            TV             = SIMD_FNMADD(KP1_801937735, TU, T3);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP2_000000000, Td, T3);
            TL             = SIMD_FMADD(KP797473388, TK, TH);
            TP             = SIMD_FNMADD(KP692021471, TO, T6);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_949855824, TF, TD);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_949855824, TF, TD);
            Ty             = SIMD_FNMADD(KP1_801937735, Tx, Te);
            Tk             = SIMD_FNMADD(KP1_801937735, Tj, Te);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_949855824, TX, TV);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_949855824, TX, TV);
            TM             = SIMD_FNMADD(KP867767478, TL, T9);
            TQ             = SIMD_FNMADD(KP1_801937735, TP, T3);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_949855824, TA, Ty);
            R0[0]          = SIMD_FNMADD(KP1_949855824, TA, Ty);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_949855824, Tv, Tk);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_949855824, Tv, Tk);
            TN             = SIMD_FNMADD(KP924138961, TM, TG);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_949855824, TS, TQ);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_949855824, TS, TQ);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_949855824, TN, T3);
        }
    }
}

template <>
struct r2cb_traits<14, 3>
{
    static constexpr long_t flops           = 98;
    static constexpr long_t operations      = 57;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 71;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 3 -name
 * r2cb -standalone */

/*
 * This function contains 57 FP additions, 41 FP multiplications,
 * (or, 16 additions, 0 multiplications, 41 fused multiply/add),
 * 71 stack variables, 12 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    {
        SIMD_FLOAT Ta, Te, T3, Tf, T6, TL, Tt, Tg, T9, TK, Tq, TJ, Tn, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Tr, Ts, T7, T8, To, Tp, Tl, Tm, Tw;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Cr[WS(cs, 2)];
        T5 = Cr[WS(cs, 5)];
        Tr = Ci[WS(cs, 2)];
        Ts = Ci[WS(cs, 5)];
        T7 = Cr[WS(cs, 4)];
        T8 = Cr[WS(cs, 3)];
        To = Ci[WS(cs, 4)];
        Tp = Ci[WS(cs, 3)];
        Tl = Ci[WS(cs, 6)];
        Tm = Ci[WS(cs, 1)];
        Ta = Cr[WS(cs, 6)];
        Te = T1 + T2;
        T3 = T1 - T2;
        Tf = T4 + T5;
        T6 = T4 - T5;
        TL = Tr + Ts;
        Tt = Tr - Ts;
        Tg = T7 + T8;
        T9 = T7 - T8;
        TK = To + Tp;
        Tq = To - Tp;
        TJ = Tl + Tm;
        Tn = Tl - Tm;
        Tb = Cr[WS(cs, 1)];
        Tw = SIMD_FNMADD(KP356895867, Tg, Tf);
        {
            SIMD_FLOAT TM, TB, Tu, TO, TW, Tz, Th, Tc, TN, Tv, TP, TX, TA, Tx,
                TC;
            SIMD_FLOAT Ti, Td, TG, TT, TQ, Ty, TD, Tj, TH, TU, TR, TE, Tk, TI,
                TV;
            SIMD_FLOAT TS, TF;
            TM             = SIMD_FNMADD(KP554958132, TL, TK);
            TB             = SIMD_FMADD(KP512858431, Tf, Tq);
            Tu             = SIMD_FNMADD(KP554958132, Tt, Tq);
            TO             = SIMD_FNMADD(KP512858431, T9, TJ);
            TW             = SIMD_FMADD(KP554958132, TK, TJ);
            Tz             = SIMD_FMADD(KP554958132, Tn, Tt);
            Th             = Ta + Tb;
            Tc             = Ta - Tb;
            TN             = SIMD_FNMADD(KP801937735, TM, TJ);
            Tv             = SIMD_FNMADD(KP801937735, Tu, Tn);
            TP             = SIMD_FMADD(KP695895486, TO, T6);
            TX             = SIMD_FNMADD(KP801937735, TW, TL);
            TA             = SIMD_FMADD(KP801937735, Tz, Tq);
            Tx             = SIMD_FNMADD(KP692021471, Tw, Th);
            TC             = SIMD_FNMADD(KP695895486, TB, Th);
            Ti             = SIMD_FNMADD(KP356895867, Th, Tg);
            Td             = T6 + T9 + Tc;
            TG             = SIMD_FNMADD(KP356895867, Tc, T9);
            TT             = SIMD_FNMADD(KP356895867, T6, Tc);
            TQ             = SIMD_FMADD(KP797473388, TP, TL);
            Ty             = SIMD_FNMADD(KP1_801937735, Tx, Te);
            TD             = SIMD_FNMADD(KP797473388, TC, Tn);
            Tj             = SIMD_FNMADD(KP692021471, Ti, Tf);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP2_000000000, Td, T3);
            TH             = SIMD_FNMADD(KP692021471, TG, T6);
            TU             = SIMD_FNMADD(KP692021471, TT, T9);
            TR             = SIMD_FNMADD(KP867767478, TQ, Tc);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_949855824, TA, Ty);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_949855824, TA, Ty);
            TE             = SIMD_FMADD(KP867767478, TD, Tg);
            Tk             = SIMD_FNMADD(KP1_801937735, Tj, Te);
            TI             = SIMD_FNMADD(KP1_801937735, TH, T3);
            TV             = SIMD_FNMADD(KP1_801937735, TU, T3);
            TS             = SIMD_FNMADD(KP924138961, TR, TK);
            TF             = SIMD_FNMADD(KP924138961, TE, Tt);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_949855824, Tv, Tk);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_949855824, Tv, Tk);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_949855824, TN, TI);
            R0[0]          = SIMD_FNMADD(KP1_949855824, TN, TI);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_949855824, TX, TV);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_949855824, TX, TV);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_949855824, TS, T3);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_949855824, TF, Te);
        }
    }
}

template <>
struct r2cb_traits<14, 4>
{
    static constexpr long_t flops           = 96;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 71;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 4 -name
 * r2cb -standalone */

/*
 * This function contains 56 FP additions, 40 FP multiplications,
 * (or, 16 additions, 0 multiplications, 40 fused multiply/add),
 * 71 stack variables, 12 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    {
        SIMD_FLOAT Ta, Te, T3, Tf, T6, TI, Tt, Tg, T9, TH, Tq, TG, Tn, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Tr, Ts, T7, T8, To, Tp, Tl, Tm, Tw;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Cr[WS(cs, 2)];
        T5 = Cr[WS(cs, 5)];
        Tr = Ci[WS(cs, 2)];
        Ts = Ci[WS(cs, 5)];
        T7 = Cr[WS(cs, 4)];
        T8 = Cr[WS(cs, 3)];
        To = Ci[WS(cs, 4)];
        Tp = Ci[WS(cs, 3)];
        Tl = Ci[WS(cs, 6)];
        Tm = Ci[WS(cs, 1)];
        Ta = Cr[WS(cs, 6)];
        Te = T1 + T2;
        T3 = T1 - T2;
        Tf = T4 + T5;
        T6 = T4 - T5;
        TI = Tr + Ts;
        Tt = Tr - Ts;
        Tg = T7 + T8;
        T9 = T7 - T8;
        TH = To + Tp;
        Tq = To - Tp;
        TG = Tl + Tm;
        Tn = Tl - Tm;
        Tb = Cr[WS(cs, 1)];
        Tw = SIMD_FNMADD(KP356895867, Tg, Tf);
        {
            SIMD_FLOAT TB, Tu, TO, TW, Tz, Tc, Th, Tv, TP, TX, TA, Tx, TC, Ti,
                Td;
            SIMD_FLOAT TJ, TT, TQ, Ty, TD, Tj, TK, TU, TR, TE, Tk, TL, TV, TS,
                TF;
            SIMD_FLOAT TM, TN;
            TB            = SIMD_FMADD(KP512858431, Tf, Tq);
            Tu            = SIMD_FNMADD(KP554958132, Tt, Tq);
            TO            = SIMD_FNMADD(KP512858431, T9, TG);
            TW            = SIMD_FMADD(KP554958132, TH, TG);
            Tz            = SIMD_FMADD(KP554958132, Tn, Tt);
            Tc            = Ta - Tb;
            Th            = Ta + Tb;
            Tv            = SIMD_FNMADD(KP801937735, Tu, Tn);
            TP            = SIMD_FMADD(KP695895486, TO, T6);
            TX            = SIMD_FNMADD(KP801937735, TW, TI);
            TA            = SIMD_FMADD(KP801937735, Tz, Tq);
            Tx            = SIMD_FNMADD(KP692021471, Tw, Th);
            TC            = SIMD_FNMADD(KP695895486, TB, Th);
            Ti            = SIMD_FNMADD(KP356895867, Th, Tg);
            Td            = T6 + T9 + Tc;
            TJ            = SIMD_FNMADD(KP512858431, Tc, TI);
            TT            = SIMD_FNMADD(KP356895867, T6, Tc);
            TQ            = SIMD_FMADD(KP797473388, TP, TI);
            Ty            = SIMD_FNMADD(KP1_801937735, Tx, Te);
            TD            = SIMD_FNMADD(KP797473388, TC, Tn);
            Tj            = SIMD_FNMADD(KP692021471, Ti, Tf);
            R0[WS(rs, 3)] = SIMD_FMADD(KP2_000000000, Td, T3);
            TK            = SIMD_FMADD(KP695895486, TJ, T9);
            TU            = SIMD_FNMADD(KP692021471, TT, T9);
            TR            = SIMD_FNMADD(KP867767478, TQ, Tc);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, TA, Ty);
            R0[WS(rs, 4)] = SIMD_FNMADD(KP1_949855824, TA, Ty);
            TE            = SIMD_FMADD(KP867767478, TD, Tg);
            Tk            = SIMD_FNMADD(KP1_801937735, Tj, Te);
            TL            = SIMD_FNMADD(KP797473388, TK, TH);
            TV            = SIMD_FNMADD(KP1_801937735, TU, T3);
            TS            = SIMD_FNMADD(KP924138961, TR, TH);
            TF            = SIMD_FNMADD(KP924138961, TE, Tt);
            R0[0]         = SIMD_FMADD(KP1_949855824, Tv, Tk);
            R0[WS(rs, 6)] = SIMD_FNMADD(KP1_949855824, Tv, Tk);
            TM            = SIMD_FMADD(KP867767478, TL, T6);
            R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, TX, TV);
            R0[WS(rs, 5)] = SIMD_FNMADD(KP1_949855824, TX, TV);
            R0[WS(rs, 9)] = SIMD_FMADD(KP1_949855824, TS, T3);
            R0[WS(rs, 8)] = SIMD_FMADD(KP1_949855824, TF, Te);
            TN            = SIMD_FNMADD(KP924138961, TM, TG);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_949855824, TN, T3);
        }
    }
}

template <>
struct r2cb_traits<14, 5>
{
    static constexpr long_t flops           = 94;
    static constexpr long_t operations      = 55;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 71;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 5 -name
 * r2cb -standalone */

/*
 * This function contains 55 FP additions, 39 FP multiplications,
 * (or, 16 additions, 0 multiplications, 39 fused multiply/add),
 * 71 stack variables, 12 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT Ta, TC, T3, TE, T6, TH, Tg, TG, T9, TF, Tm, TD, Tj, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Te, Tf, T7, T8, Tk, Tl, Th, Ti;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Cr[WS(cs, 4)];
        T5 = Cr[WS(cs, 3)];
        Te = Ci[WS(cs, 4)];
        Tf = Ci[WS(cs, 3)];
        T7 = Cr[WS(cs, 6)];
        T8 = Cr[WS(cs, 1)];
        Tk = Ci[WS(cs, 6)];
        Tl = Ci[WS(cs, 1)];
        Th = Ci[WS(cs, 2)];
        Ti = Ci[WS(cs, 5)];
        Ta = Cr[WS(cs, 2)];
        TC = T1 + T2;
        T3 = T1 - T2;
        TE = T4 + T5;
        T6 = T4 - T5;
        TH = Te - Tf;
        Tg = Te + Tf;
        TG = T7 + T8;
        T9 = T7 - T8;
        TF = Tl - Tk;
        Tm = Tk + Tl;
        TD = Th - Ti;
        Tj = Th + Ti;
        Tb = Cr[WS(cs, 5)];
        {
            SIMD_FLOAT Tn, Tv, TT, TR, Tx, TI, Tc, Tw, TU, TS, Ty, TJ, TO, Td,
                To;
            SIMD_FLOAT Ts, TV, Tz, TK, TP, Tp, Tt, TW, TA, TL, TQ, Tq, Tu, TX,
                TB;
            SIMD_FLOAT TM, Tr, TN;
            Tn            = SIMD_FNMADD(KP512858431, T6, Tm);
            Tv            = SIMD_FMADD(KP554958132, Tg, Tm);
            TT            = SIMD_FMADD(KP512858431, TG, TD);
            TR            = SIMD_FNMADD(KP554958132, TF, TD);
            Tx            = SIMD_FNMADD(KP512858431, T9, Tj);
            TI            = Ta + Tb;
            Tc            = Ta - Tb;
            Tw            = SIMD_FNMADD(KP801937735, Tv, Tj);
            TU            = SIMD_FNMADD(KP695895486, TT, TE);
            TS            = SIMD_FMADD(KP801937735, TR, TH);
            Ty            = SIMD_FMADD(KP695895486, Tx, T6);
            TJ            = SIMD_FMADD(KP512858431, TI, TH);
            TO            = SIMD_FNMADD(KP356895867, TE, TI);
            Td            = T6 + T9 + Tc;
            To            = SIMD_FMADD(KP695895486, Tn, Tc);
            Ts            = SIMD_FNMADD(KP356895867, Tc, T9);
            TV            = SIMD_FMADD(KP797473388, TU, TH);
            Tz            = SIMD_FNMADD(KP797473388, Ty, Tg);
            TK            = SIMD_FNMADD(KP695895486, TJ, TG);
            TP            = SIMD_FNMADD(KP692021471, TO, TG);
            R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, Td, T3);
            Tp            = SIMD_FMADD(KP797473388, To, Tj);
            Tt            = SIMD_FNMADD(KP692021471, Ts, T6);
            TW            = SIMD_FNMADD(KP867767478, TV, TI);
            TA            = SIMD_FMADD(KP867767478, Tz, Tc);
            TL            = SIMD_FMADD(KP797473388, TK, TF);
            TQ            = SIMD_FNMADD(KP1_801937735, TP, TC);
            Tq            = SIMD_FNMADD(KP867767478, Tp, T9);
            Tu            = SIMD_FNMADD(KP1_801937735, Tt, T3);
            TX            = SIMD_FNMADD(KP924138961, TW, TF);
            TB            = SIMD_FNMADD(KP924138961, TA, Tm);
            TM            = SIMD_FNMADD(KP867767478, TL, TE);
            R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, TS, TQ);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP1_949855824, TS, TQ);
            Tr            = SIMD_FNMADD(KP924138961, Tq, Tg);
            R0[0]         = SIMD_FMADD(KP1_949855824, Tw, Tu);
            R0[WS(rs, 4)] = SIMD_FNMADD(KP1_949855824, Tw, Tu);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_949855824, TX, TC);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_949855824, TB, T3);
            TN            = SIMD_FNMADD(KP924138961, TM, TD);
            R0[WS(rs, 8)] = SIMD_FMADD(KP1_949855824, Tr, T3);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_949855824, TN, TC);
        }
    }
}

template <>
struct r2cb_traits<14, 6>
{
    static constexpr long_t flops           = 92;
    static constexpr long_t operations      = 54;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 71;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 6 -name
 * r2cb -standalone */

/*
 * This function contains 54 FP additions, 38 FP multiplications,
 * (or, 16 additions, 0 multiplications, 38 fused multiply/add),
 * 71 stack variables, 12 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP692021471, +0.692021471630095869627814897002069140197260599);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP356895867, +0.356895867892209443894399510021300583399127187);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP801937735, +0.801937735804838252472204639014890102331838324);
    DK(KP554958132, +0.554958132087371191422194871006410481067288862);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT Ta, Te, T3, Tm, T6, TH, Tl, Tq, T9, TG, Th, TI, Tp, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Tj, Tk, T7, T8, Tf, Tg, Tn, To;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Cr[WS(cs, 6)];
        T5 = Cr[WS(cs, 1)];
        Tj = Ci[WS(cs, 1)];
        Tk = Ci[WS(cs, 6)];
        T7 = Cr[WS(cs, 2)];
        T8 = Cr[WS(cs, 5)];
        Tf = Ci[WS(cs, 2)];
        Tg = Ci[WS(cs, 5)];
        Tn = Ci[WS(cs, 4)];
        To = Ci[WS(cs, 3)];
        Ta = Cr[WS(cs, 4)];
        Te = T1 + T2;
        T3 = T1 - T2;
        Tm = T4 + T5;
        T6 = T4 - T5;
        TH = Tk + Tj;
        Tl = Tj - Tk;
        Tq = T7 + T8;
        T9 = T7 - T8;
        TG = Tf + Tg;
        Th = Tf - Tg;
        TI = Tn + To;
        Tp = Tn - To;
        Tb = Cr[WS(cs, 3)];
        {
            SIMD_FLOAT TT, TB, Tz, TJ, Tr, Ti, Tc, TA, TK, Ts, TC, Tw, Td, TO,
                TU;
            SIMD_FLOAT TL, Tt, TD, Tx, TP, TV, TM, Tu, TE, Ty, TQ, TW, TN, Tv,
                TF;
            SIMD_FLOAT TR, TX, TS;
            TT            = SIMD_FNMADD(KP512858431, T6, TG);
            TB            = SIMD_FMADD(KP512858431, Tm, Th);
            Tz            = SIMD_FNMADD(KP554958132, Tl, Th);
            TJ            = SIMD_FNMADD(KP512858431, T9, TI);
            Tr            = SIMD_FMADD(KP512858431, Tq, Tp);
            Ti            = Ta + Tb;
            Tc            = Ta - Tb;
            TA            = SIMD_FMADD(KP801937735, Tz, Tp);
            TK            = SIMD_FMADD(KP695895486, TJ, T6);
            Ts            = SIMD_FNMADD(KP695895486, Tr, Tm);
            TC            = SIMD_FNMADD(KP695895486, TB, Ti);
            Tw            = SIMD_FNMADD(KP356895867, Ti, Tq);
            Td            = T6 + T9 + Tc;
            TO            = SIMD_FNMADD(KP512858431, Tc, TH);
            TU            = SIMD_FMADD(KP695895486, TT, Tc);
            TL            = SIMD_FMADD(KP797473388, TK, TH);
            Tt            = SIMD_FMADD(KP797473388, Ts, Tl);
            TD            = SIMD_FMADD(KP797473388, TC, Tp);
            Tx            = SIMD_FNMADD(KP692021471, Tw, Tm);
            R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, Td, T3);
            TP            = SIMD_FMADD(KP695895486, TO, T9);
            TV            = SIMD_FNMADD(KP797473388, TU, TI);
            TM            = SIMD_FNMADD(KP867767478, TL, Tc);
            Tu            = SIMD_FNMADD(KP867767478, Tt, Ti);
            TE            = SIMD_FNMADD(KP867767478, TD, Tq);
            Ty            = SIMD_FNMADD(KP1_801937735, Tx, Te);
            TQ            = SIMD_FMADD(KP797473388, TP, TG);
            TW            = SIMD_FMADD(KP867767478, TV, T9);
            TN            = SIMD_FMADD(KP924138961, TM, TG);
            Tv            = SIMD_FNMADD(KP924138961, Tu, Th);
            TF            = SIMD_FNMADD(KP924138961, TE, Tl);
            R0[0]         = SIMD_FMADD(KP1_949855824, TA, Ty);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP1_949855824, TA, Ty);
            TR            = SIMD_FNMADD(KP867767478, TQ, T6);
            TX            = SIMD_FNMADD(KP924138961, TW, TH);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP1_949855824, TN, T3);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_949855824, Tv, Te);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, TF, Te);
            TS            = SIMD_FNMADD(KP924138961, TR, TI);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_949855824, TX, T3);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_949855824, TS, T3);
        }
    }
}

template <>
struct r2cb_traits<14, 7>
{
    static constexpr long_t flops           = 90;
    static constexpr long_t operations      = 53;
    static constexpr long_t memory_accesses = 21;
    static constexpr long_t stack_vars      = 66;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 7 -name
 * r2cb -standalone */

/*
 * This function contains 53 FP additions, 37 FP multiplications,
 * (or, 16 additions, 0 multiplications, 37 fused multiply/add),
 * 66 stack variables, 7 constants, and 21 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 7>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT Ta, Te, T3, Tm, T6, TG, Tl, Tq, T9, TI, Th, TH, Tp, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Tj, Tk, T7, T8, Tf, Tg, Tn, To;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Cr[WS(cs, 2)];
        T5 = Cr[WS(cs, 5)];
        Tj = Ci[WS(cs, 2)];
        Tk = Ci[WS(cs, 5)];
        T7 = Cr[WS(cs, 4)];
        T8 = Cr[WS(cs, 3)];
        Tf = Ci[WS(cs, 3)];
        Tg = Ci[WS(cs, 4)];
        Tn = Ci[WS(cs, 1)];
        To = Ci[WS(cs, 6)];
        Ta = Cr[WS(cs, 6)];
        Te = T1 + T2;
        T3 = T1 - T2;
        Tm = T4 + T5;
        T6 = T4 - T5;
        TG = Tj + Tk;
        Tl = Tj - Tk;
        Tq = T7 + T8;
        T9 = T7 - T8;
        TI = Tg + Tf;
        Th = Tf - Tg;
        TH = To + Tn;
        Tp = Tn - To;
        Tb = Cr[WS(cs, 1)];
        {
            SIMD_FLOAT TJ, Tw, TO, Tr, Tc, Ti, TP, Ts, TB, Tx, Td, TK, TT, TQ,
                Tt;
            SIMD_FLOAT TC, Ty, TL, TU, TR, Tu, TD, Tz, TM, TV, TS, Tv, TE, TA,
                TN;
            SIMD_FLOAT TW, TF, TX;
            TJ            = SIMD_FNMADD(KP512858431, T6, TI);
            Tw            = SIMD_FNMADD(KP512858431, Tm, Th);
            TO            = SIMD_FNMADD(KP512858431, T9, TH);
            Tr            = SIMD_FNMADD(KP512858431, Tq, Tp);
            Tc            = Ta - Tb;
            Ti            = Ta + Tb;
            TP            = SIMD_FMADD(KP695895486, TO, T6);
            Ts            = SIMD_FMADD(KP695895486, Tr, Tm);
            TB            = SIMD_FMADD(KP512858431, Ti, Tl);
            Tx            = SIMD_FMADD(KP695895486, Tw, Ti);
            Td            = T6 + T9 + Tc;
            TK            = SIMD_FMADD(KP695895486, TJ, Tc);
            TT            = SIMD_FNMADD(KP512858431, Tc, TG);
            TQ            = SIMD_FMADD(KP797473388, TP, TG);
            Tt            = SIMD_FNMADD(KP797473388, Ts, Tl);
            TC            = SIMD_FNMADD(KP695895486, TB, Tq);
            Ty            = SIMD_FMADD(KP797473388, Tx, Tp);
            R0[0]         = SIMD_FMADD(KP2_000000000, Td, T3);
            TL            = SIMD_FMADD(KP797473388, TK, TH);
            TU            = SIMD_FMADD(KP695895486, TT, T9);
            TR            = SIMD_FNMADD(KP867767478, TQ, Tc);
            Tu            = SIMD_FMADD(KP867767478, Tt, Ti);
            TD            = SIMD_FNMADD(KP797473388, TC, Th);
            Tz            = SIMD_FNMADD(KP867767478, Ty, Tq);
            TM            = SIMD_FNMADD(KP867767478, TL, T9);
            TV            = SIMD_FNMADD(KP797473388, TU, TI);
            TS            = SIMD_FNMADD(KP924138961, TR, TI);
            Tv            = SIMD_FNMADD(KP924138961, Tu, Th);
            TE            = SIMD_FMADD(KP867767478, TD, Tm);
            TA            = SIMD_FNMADD(KP924138961, Tz, Tl);
            TN            = SIMD_FMADD(KP924138961, TM, TG);
            TW            = SIMD_FMADD(KP867767478, TV, T6);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_949855824, TS, T3);
            R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, Tv, Te);
            TF            = SIMD_FNMADD(KP924138961, TE, Tp);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_949855824, TA, Te);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP1_949855824, TN, T3);
            TX            = SIMD_FNMADD(KP924138961, TW, TH);
            R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, TF, Te);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, TX, T3);
        }
    }
}

template <>
struct r2cb_traits<14, 8>
{
    static constexpr long_t flops           = 86;
    static constexpr long_t operations      = 50;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 64;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 8 -name
 * r2cb -standalone */

/*
 * This function contains 50 FP additions, 36 FP multiplications,
 * (or, 14 additions, 0 multiplications, 36 fused multiply/add),
 * 64 stack variables, 6 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 8>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT Ta, TB, T3, TG, T6, TD, Tl, TF, T9, TE, Ti, TH, Tf, Tb, T1;
        SIMD_FLOAT T2, T4, T5, Tj, Tk, T7, T8, Tg, Th, Td, Te;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T4 = Ci[WS(cs, 3)];
        T5 = Ci[WS(cs, 4)];
        Tj = Cr[WS(cs, 4)];
        Tk = Cr[WS(cs, 3)];
        T7 = Cr[WS(cs, 6)];
        T8 = Cr[WS(cs, 1)];
        Tg = Ci[WS(cs, 1)];
        Th = Ci[WS(cs, 6)];
        Td = Cr[WS(cs, 2)];
        Te = Cr[WS(cs, 5)];
        Ta = Ci[WS(cs, 2)];
        TB = T1 - T2;
        T3 = T1 + T2;
        TG = T5 + T4;
        T6 = T4 - T5;
        TD = Tk - Tj;
        Tl = Tj + Tk;
        TF = T8 - T7;
        T9 = T7 + T8;
        TE = Th + Tg;
        Ti = Tg - Th;
        TH = Te - Td;
        Tf = Td + Te;
        Tb = Ci[WS(cs, 5)];
        {
            SIMD_FLOAT TN, Tm, TI, Tr, Tc, TC, TO, Tn, TJ, Ts, TS, Tw, TP, To,
                TK;
            SIMD_FLOAT Tt, TT, Tx, TQ, Tp, TL, Tu, TU, Ty, TR, Tq, TM, Tv, TV,
                Tz;
            SIMD_FLOAT TW, TA;
            TN            = SIMD_FMADD(KP512858431, TD, TE);
            Tm            = SIMD_FNMADD(KP512858431, Tl, Ti);
            TI            = SIMD_FMADD(KP512858431, TH, TG);
            Tr            = SIMD_FNMADD(KP512858431, Tf, T6);
            Tc            = Ta - Tb;
            TC            = Ta + Tb;
            TO            = SIMD_FNMADD(KP695895486, TN, TH);
            Tn            = SIMD_FMADD(KP695895486, Tm, Tf);
            TJ            = SIMD_FNMADD(KP695895486, TI, TF);
            Ts            = SIMD_FMADD(KP695895486, Tr, T9);
            TS            = SIMD_FMADD(KP512858431, TF, TC);
            Tw            = SIMD_FMADD(KP512858431, T9, Tc);
            TP            = SIMD_FNMADD(KP797473388, TO, TC);
            To            = SIMD_FNMADD(KP797473388, Tn, Tc);
            TK            = SIMD_FNMADD(KP797473388, TJ, TE);
            Tt            = SIMD_FMADD(KP797473388, Ts, Ti);
            TT            = SIMD_FNMADD(KP695895486, TS, TD);
            Tx            = SIMD_FNMADD(KP695895486, Tw, Tl);
            TQ            = SIMD_FMADD(KP867767478, TP, TF);
            Tp            = SIMD_FMADD(KP867767478, To, T9);
            TL            = SIMD_FMADD(KP867767478, TK, TD);
            Tu            = SIMD_FNMADD(KP867767478, Tt, Tl);
            TU            = SIMD_FMADD(KP797473388, TT, TG);
            Ty            = SIMD_FNMADD(KP797473388, Tx, T6);
            TR            = SIMD_FMADD(KP924138961, TQ, TG);
            Tq            = SIMD_FNMADD(KP924138961, Tp, T6);
            TM            = SIMD_FNMADD(KP924138961, TL, TC);
            Tv            = SIMD_FNMADD(KP924138961, Tu, Tc);
            TV            = SIMD_FNMADD(KP867767478, TU, TH);
            Tz            = SIMD_FMADD(KP867767478, Ty, Tf);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_949855824, TR, TB);
            R0[0]         = SIMD_FMADD(KP1_949855824, Tq, T3);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_949855824, TM, TB);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, Tv, T3);
            TW            = SIMD_FMADD(KP924138961, TV, TE);
            TA            = SIMD_FNMADD(KP924138961, Tz, Ti);
            R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, TW, TB);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, TA, T3);
        }
    }
}

template <>
struct r2cb_traits<14, 9>
{
    static constexpr long_t flops           = 74;
    static constexpr long_t operations      = 44;
    static constexpr long_t memory_accesses = 19;
    static constexpr long_t stack_vars      = 59;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 9 -name
 * r2cb -standalone */

/*
 * This function contains 44 FP additions, 30 FP multiplications,
 * (or, 14 additions, 0 multiplications, 30 fused multiply/add),
 * 59 stack variables, 6 constants, and 19 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 9>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT T7, TB, T3, Tc, TC, T8, TH, Tf, TG, T6, TD, Tl, TE, Ti, T1;
        SIMD_FLOAT T2, Ta, Tb, Td, Te, T4, T5, Tj, Tk, Tg, Th, T9, TF, TI, Tw;
        SIMD_FLOAT TN, Tm, Tr, TJ, Tx, TO, Tn, Ts, TK, Ty, TP, To, Tt, TL, Tz;
        SIMD_FLOAT TQ, Tp, Tu, TM, TA, TR, Tq, Tv;
        T1            = Cr[0];
        T2            = Cr[WS(cs, 7)];
        Ta            = Ci[WS(cs, 6)];
        Tb            = Ci[WS(cs, 1)];
        Td            = Cr[WS(cs, 1)];
        Te            = Cr[WS(cs, 6)];
        T4            = Ci[WS(cs, 2)];
        T5            = Ci[WS(cs, 5)];
        Tj            = Cr[WS(cs, 5)];
        Tk            = Cr[WS(cs, 2)];
        Tg            = Ci[WS(cs, 4)];
        Th            = Ci[WS(cs, 3)];
        T7            = Cr[WS(cs, 3)];
        TB            = T1 + T2;
        T3            = T1 - T2;
        Tc            = Ta + Tb;
        TC            = Tb - Ta;
        T8            = Cr[WS(cs, 4)];
        TH            = Te + Td;
        Tf            = Td - Te;
        TG            = T4 - T5;
        T6            = T4 + T5;
        TD            = Tk + Tj;
        Tl            = Tj - Tk;
        TE            = Tg - Th;
        Ti            = Tg + Th;
        T9            = T7 - T8;
        TF            = T8 + T7;
        TI            = SIMD_FMADD(KP512858431, TH, TG);
        Tw            = SIMD_FMADD(KP512858431, Tf, T6);
        TN            = SIMD_FMADD(KP512858431, TD, TE);
        Tm            = SIMD_FMADD(KP512858431, Tl, Ti);
        Tr            = SIMD_FMADD(KP512858431, T9, Tc);
        TJ            = SIMD_FNMADD(KP695895486, TI, TF);
        Tx            = SIMD_FNMADD(KP695895486, Tw, T9);
        TO            = SIMD_FNMADD(KP695895486, TN, TH);
        Tn            = SIMD_FNMADD(KP695895486, Tm, Tf);
        Ts            = SIMD_FNMADD(KP695895486, Tr, Tl);
        TK            = SIMD_FMADD(KP797473388, TJ, TE);
        Ty            = SIMD_FMADD(KP797473388, Tx, Ti);
        TP            = SIMD_FMADD(KP797473388, TO, TC);
        To            = SIMD_FNMADD(KP797473388, Tn, Tc);
        Tt            = SIMD_FNMADD(KP797473388, Ts, T6);
        TL            = SIMD_FNMADD(KP867767478, TK, TD);
        Tz            = SIMD_FNMADD(KP867767478, Ty, Tl);
        TQ            = SIMD_FNMADD(KP867767478, TP, TF);
        Tp            = SIMD_FMADD(KP867767478, To, T9);
        Tu            = SIMD_FMADD(KP867767478, Tt, Tf);
        TM            = SIMD_FNMADD(KP924138961, TL, TC);
        TA            = SIMD_FMADD(KP924138961, Tz, Tc);
        TR            = SIMD_FNMADD(KP924138961, TQ, TG);
        Tq            = SIMD_FNMADD(KP924138961, Tp, T6);
        Tv            = SIMD_FMADD(KP924138961, Tu, Ti);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, TM, TB);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, TA, T3);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, TR, TB);
        R0[0]         = SIMD_FNMADD(KP1_949855824, Tq, T3);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_949855824, Tv, T3);
    }
}

template <>
struct r2cb_traits<14, 10>
{
    static constexpr long_t flops           = 62;
    static constexpr long_t operations      = 38;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 54;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 10 -name
 * r2cb -standalone */

/*
 * This function contains 38 FP additions, 24 FP multiplications,
 * (or, 14 additions, 0 multiplications, 24 fused multiply/add),
 * 54 stack variables, 6 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 10>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT T7, Tw, T3, T6, Tx, T8, Tz, Tc, TA, Tf, TC, Tl, TB, Ti, T1;
        SIMD_FLOAT T2, Td, Te, Tj, Tk, Tg, Th, T4, T5, Ta, Tb, T9, Ty, Tr, TD;
        SIMD_FLOAT Tm, TI, Ts, TE, Tn, TJ, Tt, TF, To, TK, Tu, TG, Tp, TL, Tv;
        SIMD_FLOAT TH, Tq, TM;
        T1            = Cr[0];
        T2            = Cr[WS(cs, 7)];
        T4            = Ci[WS(cs, 6)];
        T5            = Ci[WS(cs, 1)];
        Ta            = Ci[WS(cs, 4)];
        Tb            = Ci[WS(cs, 3)];
        Td            = Cr[WS(cs, 4)];
        Te            = Cr[WS(cs, 3)];
        Tj            = Cr[WS(cs, 1)];
        Tk            = Cr[WS(cs, 6)];
        Tg            = Ci[WS(cs, 2)];
        Th            = Ci[WS(cs, 5)];
        T7            = Cr[WS(cs, 2)];
        Tw            = T1 + T2;
        T3            = T1 - T2;
        T6            = T4 + T5;
        Tx            = T5 - T4;
        T8            = Cr[WS(cs, 5)];
        Tz            = Ta - Tb;
        Tc            = Ta + Tb;
        TA            = Td + Te;
        Tf            = Td - Te;
        TC            = Tk + Tj;
        Tl            = Tj - Tk;
        TB            = Tg - Th;
        Ti            = Tg + Th;
        T9            = T7 - T8;
        Ty            = T7 + T8;
        Tr            = SIMD_FNMADD(KP512858431, Tf, T6);
        TD            = SIMD_FMADD(KP512858431, TC, TB);
        Tm            = SIMD_FMADD(KP512858431, Tl, Ti);
        TI            = SIMD_FMADD(KP512858431, Ty, Tz);
        Ts            = SIMD_FMADD(KP695895486, Tr, T9);
        TE            = SIMD_FNMADD(KP695895486, TD, TA);
        Tn            = SIMD_FMADD(KP695895486, Tm, Tf);
        TJ            = SIMD_FNMADD(KP695895486, TI, TC);
        Tt            = SIMD_FMADD(KP797473388, Ts, Ti);
        TF            = SIMD_FMADD(KP797473388, TE, Tz);
        To            = SIMD_FNMADD(KP797473388, Tn, Tc);
        TK            = SIMD_FMADD(KP797473388, TJ, Tx);
        Tu            = SIMD_FMADD(KP867767478, Tt, Tl);
        TG            = SIMD_FNMADD(KP867767478, TF, Ty);
        Tp            = SIMD_FMADD(KP867767478, To, T9);
        TL            = SIMD_FNMADD(KP867767478, TK, TA);
        Tv            = SIMD_FMADD(KP924138961, Tu, Tc);
        TH            = SIMD_FNMADD(KP924138961, TG, Tx);
        Tq            = SIMD_FNMADD(KP924138961, Tp, T6);
        TM            = SIMD_FNMADD(KP924138961, TL, TB);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_949855824, Tv, T3);
        R0[0]         = SIMD_FMADD(KP1_949855824, TH, Tw);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_949855824, Tq, T3);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, TM, Tw);
    }
}

template <>
struct r2cb_traits<14, 11>
{
    static constexpr long_t flops           = 51;
    static constexpr long_t operations      = 32;
    static constexpr long_t memory_accesses = 17;
    static constexpr long_t stack_vars      = 46;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 11 -name
 * r2cb -standalone */

/*
 * This function contains 32 FP additions, 19 FP multiplications,
 * (or, 13 additions, 0 multiplications, 19 fused multiply/add),
 * 46 stack variables, 6 constants, and 17 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 11>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    {
        SIMD_FLOAT T1, T2, T7, Te, Tf, T8, T9, Tb, Tc, Th, To, Ti, Tt, T6, Ts;
        SIMD_FLOAT T3, T4, T5, Tg, Tr, Tp, Ta, Td, Tu, Tj, Tq, TA, Tv, Tk, TB;
        SIMD_FLOAT Tw, Tl, TC, Tx, Tm, TD, Ty, Tn, TE, Tz;
        T1            = Cr[0];
        T2            = Cr[WS(cs, 7)];
        T3            = Ci[WS(cs, 2)];
        T4            = Ci[WS(cs, 5)];
        T5            = Cr[WS(cs, 4)];
        T7            = Cr[WS(cs, 3)];
        Te            = Ci[WS(cs, 3)];
        Tf            = Ci[WS(cs, 4)];
        T8            = Ci[WS(cs, 1)];
        T9            = Ci[WS(cs, 6)];
        Tb            = Cr[WS(cs, 6)];
        Tc            = Cr[WS(cs, 1)];
        Th            = Cr[WS(cs, 2)];
        To            = T1 - T2;
        Ti            = Cr[WS(cs, 5)];
        Tt            = T3 + T4;
        T6            = T3 - (SIMD_FMADD(KP924138961, T5, T4));
        Ts            = T5 - T7;
        Tg            = Te - Tf;
        Tr            = Te + Tf;
        Tp            = T8 + T9;
        Ta            = T8 - T9;
        Td            = Tb + Tc;
        Tu            = Tc - Tb;
        Tj            = Th + Ti;
        Tq            = Th - Ti;
        TA            = SIMD_FNMADD(KP512858431, Ts, Tp);
        Tv            = SIMD_FMADD(KP512858431, Tu, Tt);
        Tk            = SIMD_FNMADD(KP512858431, Tj, Tg);
        TB            = SIMD_FMADD(KP695895486, TA, Tq);
        Tw            = SIMD_FMADD(KP695895486, Tv, Ts);
        Tl            = SIMD_FMADD(KP695895486, Tk, Td);
        TC            = SIMD_FMADD(KP797473388, TB, Tt);
        Tx            = SIMD_FNMADD(KP797473388, Tw, Tr);
        Tm            = SIMD_FMADD(KP797473388, Tl, Ta);
        TD            = SIMD_FMADD(KP867767478, TC, Tu);
        Ty            = SIMD_FMADD(KP867767478, Tx, Tq);
        Tn            = SIMD_FNMADD(KP867767478, Tm, T7);
        TE            = SIMD_FMADD(KP924138961, TD, Tr);
        Tz            = SIMD_FNMADD(KP924138961, Ty, Tp);
        R0[WS(rs, 1)] = T1 + SIMD_FMADD(KP1_949855824,
                                        SIMD_FNMADD(KP924138961, Tn, T6), T2);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_949855824, TE, To);
        R0[0]         = SIMD_FMADD(KP1_949855824, Tz, To);
    }
}

template <>
struct r2cb_traits<14, 12>
{
    static constexpr long_t flops           = 41;
    static constexpr long_t operations      = 26;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 39;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 12 -name
 * r2cb -standalone */

/*
 * This function contains 26 FP additions, 15 FP multiplications,
 * (or, 11 additions, 0 multiplications, 15 fused multiply/add),
 * 39 stack variables, 7 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 12>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_801937735, +1.801937735804838252472204639014890102331838324);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    {
        SIMD_FLOAT T1, T2, T3, T4, T5, T9, Te, Tf, T6, Ta, Tb, Tc, Th, Ti, Tp;
        SIMD_FLOAT Ts, Tg, To, T7, Tr, Td, Tq, Tj, T8, Tt, Tk, Tu, Tl, Tv, Tm;
        SIMD_FLOAT Tw, Tn;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 7)];
        T3 = Ci[WS(cs, 2)];
        T4 = Ci[WS(cs, 5)];
        T5 = Cr[WS(cs, 3)];
        T9 = Cr[WS(cs, 4)];
        Te = Ci[WS(cs, 3)];
        Tf = Ci[WS(cs, 4)];
        T6 = Ci[WS(cs, 6)];
        Ta = Ci[WS(cs, 1)];
        Tb = Cr[WS(cs, 6)];
        Tc = Cr[WS(cs, 1)];
        Th = Cr[WS(cs, 2)];
        Ti = Cr[WS(cs, 5)];
        Tp = T3 + T4;
        Ts = T5 - T9;
        Tg = Te - Tf;
        To = Te + Tf;
        T7 = SIMD_FMADD(KP867767478, T6, T5);
        Tr = T6 + Ta;
        Td = Tb + Tc;
        Tq = Th - Ti;
        Tj = Th + Ti;
        T8 = T3 - (SIMD_FMADD(KP924138961, T7, T4));
        Tt = SIMD_FMADD(KP512858431, Ts, Tr);
        Tk = SIMD_FNMADD(KP512858431, Tj, Tg);
        Tu = SIMD_FMADD(KP695895486, Tt, Tq);
        Tl = SIMD_FMADD(KP695895486, Tk, Td);
        Tv = SIMD_FMADD(KP797473388, Tu, Tp);
        Tm = SIMD_FMADD(KP797473388, Tl, Ta);
        Tw = SIMD_FMADD(KP867767478, Tv, Tc);
        Tn = SIMD_FNMADD(KP867767478, Tm, T9);
        R0[WS(rs, 1)] =
            SIMD_FMADD(KP1_949855824, SIMD_FMADD(KP924138961, Tw, To), T1) -
            (SIMD_FMADD(KP1_801937735, Tb, T2));
        R0[0] = T1 +
                SIMD_FMADD(KP1_949855824, SIMD_FNMADD(KP924138961, Tn, T8), T2);
    }
}

template <>
struct r2cb_traits<14, 13>
{
    static constexpr long_t flops           = 19;
    static constexpr long_t operations      = 13;
    static constexpr long_t memory_accesses = 15;
    static constexpr long_t stack_vars      = 30;
    static constexpr long_t constants       = 6;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 14 -skip-k 13 -name
 * r2cb -standalone */

/*
 * This function contains 13 FP additions, 6 FP multiplications,
 * (or, 7 additions, 0 multiplications, 6 fused multiply/add),
 * 30 stack variables, 6 constants, and 15 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 14 && SkippedOutputs == 13>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP924138961, +0.924138961091093314542963749712412773983469263);
    DK(KP1_949855824, +1.949855824363647214036263365987862434465571601);
    DK(KP867767478, +0.867767478235116240951536665696717509219981456);
    DK(KP797473388, +0.797473388882403961415688254214434877743320657);
    DK(KP695895486, +0.695895486700943376465352387651397991244687582);
    DK(KP512858431, +0.512858431636276949746649808137724830241051169);
    {
        SIMD_FLOAT T1, To, T2, T3, T8, T9, T5, T6, Tb, Tc, Th, Ti, Te, Tf, T4;
        SIMD_FLOAT Ta, T7, Td, Tj, Tg, Tk, Tl, Tm, Tn;
        T1 = Cr[0];
        To = Cr[WS(cs, 7)];
        T2 = Ci[WS(cs, 4)];
        T3 = Ci[WS(cs, 3)];
        T8 = Ci[WS(cs, 2)];
        T9 = Ci[WS(cs, 5)];
        T5 = Cr[WS(cs, 1)];
        T6 = Cr[WS(cs, 6)];
        Tb = Cr[WS(cs, 2)];
        Tc = Cr[WS(cs, 5)];
        Th = Cr[WS(cs, 3)];
        Ti = Cr[WS(cs, 4)];
        Te = Ci[WS(cs, 6)];
        Tf = Ci[WS(cs, 1)];
        T4 = T2 + T3;
        Ta = T8 + T9;
        T7 = T5 - T6;
        Td = Tb - Tc;
        Tj = Th - Ti;
        Tg = Te + Tf;
        Tk = SIMD_FMADD(KP512858431, Tj, Tg);
        Tl = SIMD_FMADD(KP695895486, Tk, Td);
        Tm = SIMD_FMADD(KP797473388, Tl, Ta);
        Tn = SIMD_FMADD(KP867767478, Tm, T7);
        R0[0] =
            SIMD_FMADD(KP1_949855824, SIMD_FMADD(KP924138961, Tn, T4), T1) - To;
    }
}

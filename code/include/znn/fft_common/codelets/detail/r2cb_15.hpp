//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<15, 0>
{
    static constexpr long_t flops           = 107;
    static constexpr long_t operations      = 64;
    static constexpr long_t memory_accesses = 30;
    static constexpr long_t stack_vars      = 73;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 0 -name
 * r2cb -standalone */

/*
 * This function contains 64 FP additions, 43 FP multiplications,
 * (or, 21 additions, 0 multiplications, 43 fused multiply/add),
 * 73 stack variables, 9 constants, and 30 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Tg, T4, TA, T9, TF, T5, T6, Ta, Tb, To, Tp, Tj, Tf, T3, Tk;
        SIMD_FLOAT T1, T2, TD, T7, TI, Tc, TG, Tq, Th, Tt, TB, Tl, T8, Ti, Td;
        SIMD_FLOAT Tn, TH, TY;
        Tg = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T4 = Cr[WS(cs, 3)];
        TA = Ci[WS(cs, 3)];
        T9 = Cr[WS(cs, 6)];
        TF = Ci[WS(cs, 6)];
        T5 = Cr[WS(cs, 7)];
        T6 = Cr[WS(cs, 2)];
        Ta = Cr[WS(cs, 4)];
        Tb = Cr[WS(cs, 1)];
        To = Ci[WS(cs, 4)];
        Tp = Ci[WS(cs, 1)];
        Tj = Ci[WS(cs, 7)];
        Tf = T1 - T2;
        T3 = SIMD_FMADD(KP2_000000000, T2, T1);
        Tk = Ci[WS(cs, 2)];
        TD = T5 - T6;
        T7 = T5 + T6;
        TI = Ta - Tb;
        Tc = Ta + Tb;
        TG = Tp - To;
        Tq = To + Tp;
        Th = SIMD_FMADD(KP1_732050807, Tg, Tf);
        Tt = SIMD_FNMADD(KP1_732050807, Tg, Tf);
        TB = Tj + Tk;
        Tl = Tj - Tk;
        T8 = T4 + T7;
        Ti = SIMD_FNMADD(KP2_000000000, T4, T7);
        Td = T9 + Tc;
        Tn = SIMD_FNMADD(KP2_000000000, T9, Tc);
        TH = SIMD_FNMADD(KP500000000, TG, TF);
        TY = TG + TF;
        {
            SIMD_FLOAT TZ, TC, Tu, Tm, TW, Te, Tv, Tr, TJ, TQ, T12, T10, TE, TR,
                TV;
            SIMD_FLOAT Tw, Ty, Ts, TO, TM, TK, TU, TS, T11, TX, Tx, TN, Tz, TL,
                TP;
            SIMD_FLOAT TT;
            TZ             = TA - TB;
            TC             = SIMD_FMADD(KP500000000, TB, TA);
            Tu             = SIMD_FNMADD(KP1_732050807, Tl, Ti);
            Tm             = SIMD_FMADD(KP1_732050807, Tl, Ti);
            TW             = T8 - Td;
            Te             = T8 + Td;
            Tv             = SIMD_FNMADD(KP1_732050807, Tq, Tn);
            Tr             = SIMD_FMADD(KP1_732050807, Tq, Tn);
            TJ             = SIMD_FMADD(KP866025403, TI, TH);
            TQ             = SIMD_FNMADD(KP866025403, TI, TH);
            T12            = SIMD_FMADD(KP618033988, TY, TZ);
            T10            = SIMD_FNMADD(KP618033988, TZ, TY);
            TE             = SIMD_FMADD(KP866025403, TD, TC);
            TR             = SIMD_FNMADD(KP866025403, TD, TC);
            TV             = SIMD_FNMADD(KP500000000, Te, T3);
            R0[0]          = SIMD_FMADD(KP2_000000000, Te, T3);
            Tw             = Tu + Tv;
            Ty             = Tv - Tu;
            Ts             = Tm + Tr;
            TO             = Tr - Tm;
            TM             = SIMD_FNMADD(KP618033988, TE, TJ);
            TK             = SIMD_FMADD(KP618033988, TJ, TE);
            TU             = SIMD_FMADD(KP618033988, TQ, TR);
            TS             = SIMD_FNMADD(KP618033988, TR, TQ);
            T11            = SIMD_FMADD(KP1_118033988, TW, TV);
            TX             = SIMD_FNMADD(KP1_118033988, TW, TV);
            R0[WS(rs, 10)] = Tt - Tw;
            Tx             = SIMD_FMADD(KP250000000, Tw, Tt);
            R0[WS(rs, 5)]  = Th - Ts;
            TN             = SIMD_FMADD(KP250000000, Ts, Th);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_902113032, T10, TX);
            Tz             = SIMD_FMADD(KP559016994, Ty, Tx);
            TL             = SIMD_FNMADD(KP559016994, Ty, Tx);
            TP             = SIMD_FNMADD(KP559016994, TO, TN);
            TT             = SIMD_FMADD(KP559016994, TO, TN);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_902113032, TK, Tz);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_902113032, TK, Tz);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, TM, TL);
            R0[WS(rs, 13)] = SIMD_FNMADD(KP1_902113032, TM, TL);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_902113032, TS, TP);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_902113032, TS, TP);
            R0[WS(rs, 14)] = SIMD_FMADD(KP1_902113032, TU, TT);
            R0[WS(rs, 11)] = SIMD_FNMADD(KP1_902113032, TU, TT);
        }
    }
}

template <>
struct r2cb_traits<15, 1>
{
    static constexpr long_t flops           = 105;
    static constexpr long_t operations      = 63;
    static constexpr long_t memory_accesses = 29;
    static constexpr long_t stack_vars      = 73;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 1 -name
 * r2cb -standalone */

/*
 * This function contains 63 FP additions, 42 FP multiplications,
 * (or, 21 additions, 0 multiplications, 42 fused multiply/add),
 * 73 stack variables, 9 constants, and 29 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, T9, Tw, Ti, TB, T6, T7, Tf, Tg, Tk, Tl, Tb, T3;
        SIMD_FLOAT Tc, T8, Tz, Th, TE, Tm, TC, T5, Tp, Td, Tx, Ta, TR, Tj, TS;
        SIMD_FLOAT TY, TD, Ty, TZ;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T9 = Cr[WS(cs, 3)];
        Tw = Ci[WS(cs, 3)];
        Ti = Cr[WS(cs, 6)];
        TB = Ci[WS(cs, 6)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Tf = Cr[WS(cs, 4)];
        Tg = Cr[WS(cs, 1)];
        Tk = Ci[WS(cs, 4)];
        Tl = Ci[WS(cs, 1)];
        Tb = Ci[WS(cs, 7)];
        T3 = T1 - T2;
        Tc = Ci[WS(cs, 2)];
        T8 = T6 + T7;
        Tz = T6 - T7;
        Th = Tf + Tg;
        TE = Tf - Tg;
        Tm = Tk + Tl;
        TC = Tl - Tk;
        T5 = SIMD_FMADD(KP1_732050807, T4, T3);
        Tp = SIMD_FNMADD(KP1_732050807, T4, T3);
        Td = Tb - Tc;
        Tx = Tb + Tc;
        Ta = SIMD_FNMADD(KP2_000000000, T9, T8);
        TR = T9 + T8;
        Tj = SIMD_FNMADD(KP2_000000000, Ti, Th);
        TS = Ti + Th;
        TY = TC + TB;
        TD = SIMD_FNMADD(KP500000000, TC, TB);
        Ty = SIMD_FMADD(KP500000000, Tx, Tw);
        TZ = Tw - Tx;
        {
            SIMD_FLOAT Te, Tq, TT, TW, Tn, Tr, TF, TM, T12, T10, TA, TN, TU, Ts,
                Tu;
            SIMD_FLOAT To, TK, TQ, TO, TI, TG, TV, Tt, TJ, TX, T11, TH, Tv, TP,
                TL;
            Te             = SIMD_FMADD(KP1_732050807, Td, Ta);
            Tq             = SIMD_FNMADD(KP1_732050807, Td, Ta);
            TT             = TR + TS;
            TW             = TR - TS;
            Tn             = SIMD_FMADD(KP1_732050807, Tm, Tj);
            Tr             = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            TF             = SIMD_FMADD(KP866025403, TE, TD);
            TM             = SIMD_FNMADD(KP866025403, TE, TD);
            T12            = SIMD_FMADD(KP618033988, TY, TZ);
            T10            = SIMD_FNMADD(KP618033988, TZ, TY);
            TA             = SIMD_FMADD(KP866025403, Tz, Ty);
            TN             = SIMD_FNMADD(KP866025403, Tz, Ty);
            TU             = SIMD_FNMADD(KP250000000, TT, T2);
            Ts             = Tq + Tr;
            Tu             = Tr - Tq;
            To             = Te + Tn;
            TK             = Tn - Te;
            TQ             = SIMD_FMADD(KP618033988, TM, TN);
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TI             = SIMD_FNMADD(KP618033988, TA, TF);
            TG             = SIMD_FMADD(KP618033988, TF, TA);
            TV             = SIMD_FMADD(KP2_000000000, TU, T1);
            R0[WS(rs, 9)]  = Tp - Ts;
            Tt             = SIMD_FMADD(KP250000000, Ts, Tp);
            R0[WS(rs, 4)]  = T5 - To;
            TJ             = SIMD_FMADD(KP250000000, To, T5);
            TX             = SIMD_FNMADD(KP1_118033988, TW, TV);
            T11            = SIMD_FMADD(KP1_118033988, TW, TV);
            TH             = SIMD_FNMADD(KP559016994, Tu, Tt);
            Tv             = SIMD_FMADD(KP559016994, Tu, Tt);
            TP             = SIMD_FMADD(KP559016994, TK, TJ);
            TL             = SIMD_FNMADD(KP559016994, TK, TJ);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_902113032, TG, Tv);
            R0[0]          = SIMD_FNMADD(KP1_902113032, TG, Tv);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 12)] = SIMD_FNMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 13)] = SIMD_FMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP1_902113032, TQ, TP);
        }
    }
}

template <>
struct r2cb_traits<15, 2>
{
    static constexpr long_t flops           = 103;
    static constexpr long_t operations      = 62;
    static constexpr long_t memory_accesses = 28;
    static constexpr long_t stack_vars      = 74;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 2 -name
 * r2cb -standalone */

/*
 * This function contains 62 FP additions, 41 FP multiplications,
 * (or, 21 additions, 0 multiplications, 41 fused multiply/add),
 * 74 stack variables, 10 constants, and 28 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP475528258, +0.475528258147576786058219666689691071702849317);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, T9, TB, Ti, Tw, T6, T7, Tb, Tc, Tf, Tg, Tk, T3;
        SIMD_FLOAT Tl, T8, TE, Td, TC, Th, Tz, T5, Tp, Tm, Tx, Ta, TR, TD, TZ;
        SIMD_FLOAT Tj, TS, TY, Ty;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T9 = Cr[WS(cs, 3)];
        TB = Ci[WS(cs, 3)];
        Ti = Cr[WS(cs, 6)];
        Tw = Ci[WS(cs, 6)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Tb = Ci[WS(cs, 7)];
        Tc = Ci[WS(cs, 2)];
        Tf = Cr[WS(cs, 4)];
        Tg = Cr[WS(cs, 1)];
        Tk = Ci[WS(cs, 4)];
        T3 = T1 - T2;
        Tl = Ci[WS(cs, 1)];
        T8 = T6 + T7;
        TE = T6 - T7;
        Td = Tb - Tc;
        TC = Tb + Tc;
        Th = Tf + Tg;
        Tz = Tf - Tg;
        T5 = SIMD_FMADD(KP1_732050807, T4, T3);
        Tp = SIMD_FNMADD(KP1_732050807, T4, T3);
        Tm = Tk + Tl;
        Tx = Tl - Tk;
        Ta = SIMD_FNMADD(KP2_000000000, T9, T8);
        TR = T9 + T8;
        TD = SIMD_FMADD(KP500000000, TC, TB);
        TZ = TB - TC;
        Tj = SIMD_FNMADD(KP2_000000000, Ti, Th);
        TS = Ti + Th;
        TY = Tx + Tw;
        Ty = SIMD_FNMADD(KP500000000, Tx, Tw);
        {
            SIMD_FLOAT Te, Tq, TN, TF, TT, TW, Tn, Tr, TM, TA, T12, T10, TU, TK,
                Ts;
            SIMD_FLOAT To, Tu, TI, TG, TO, TV, TP, TJ, Tt, TX, T11, TQ, TL, TH,
                Tv;
            Te             = SIMD_FMADD(KP1_732050807, Td, Ta);
            Tq             = SIMD_FNMADD(KP1_732050807, Td, Ta);
            TN             = SIMD_FMADD(KP866025403, TE, TD);
            TF             = SIMD_FNMADD(KP866025403, TE, TD);
            TT             = TR + TS;
            TW             = TR - TS;
            Tn             = SIMD_FMADD(KP1_732050807, Tm, Tj);
            Tr             = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            TM             = SIMD_FMADD(KP866025403, Tz, Ty);
            TA             = SIMD_FNMADD(KP866025403, Tz, Ty);
            T12            = SIMD_FMADD(KP618033988, TY, TZ);
            T10            = SIMD_FNMADD(KP618033988, TZ, TY);
            TU             = SIMD_FNMADD(KP250000000, TT, T2);
            TK             = Tr - Tq;
            Ts             = Tq + Tr;
            To             = Te + Tn;
            Tu             = Tn - Te;
            TI             = SIMD_FMADD(KP618033988, TA, TF);
            TG             = SIMD_FNMADD(KP618033988, TF, TA);
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TV             = SIMD_FMADD(KP2_000000000, TU, T1);
            TP             = SIMD_FMADD(KP475528258, TK, TM);
            R0[WS(rs, 8)]  = Tp - Ts;
            TJ             = SIMD_FMADD(KP250000000, Ts, Tp);
            R0[WS(rs, 3)]  = T5 - To;
            Tt             = SIMD_FMADD(KP250000000, To, T5);
            TX             = SIMD_FNMADD(KP1_118033988, TW, TV);
            T11            = SIMD_FMADD(KP1_118033988, TW, TV);
            TQ             = SIMD_FMADD(KP618033988, TP, TN);
            TL             = SIMD_FNMADD(KP559016994, TK, TJ);
            TH             = SIMD_FMADD(KP559016994, Tu, Tt);
            Tv             = SIMD_FNMADD(KP559016994, Tu, Tt);
            R0[WS(rs, 7)]  = SIMD_FMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 1)]  = SIMD_FNMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 2)]  = SIMD_FMADD(KP1_902113032, TQ, TJ);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_902113032, TO, TL);
            R0[WS(rs, 11)] = SIMD_FNMADD(KP1_902113032, TO, TL);
            R0[0]          = SIMD_FMADD(KP1_902113032, TG, Tv);
            R0[WS(rs, 6)]  = SIMD_FNMADD(KP1_902113032, TG, Tv);
            R0[WS(rs, 12)] = SIMD_FMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_902113032, TI, TH);
        }
    }
}

template <>
struct r2cb_traits<15, 3>
{
    static constexpr long_t flops           = 101;
    static constexpr long_t operations      = 61;
    static constexpr long_t memory_accesses = 27;
    static constexpr long_t stack_vars      = 75;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 3 -name
 * r2cb -standalone */

/*
 * This function contains 61 FP additions, 40 FP multiplications,
 * (or, 21 additions, 0 multiplications, 40 fused multiply/add),
 * 75 stack variables, 11 constants, and 27 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP475528258, +0.475528258147576786058219666689691071702849317);
    DK(KP293892626, +0.293892626146236564584352977319536384298826219);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT Tw, T1, T2, T3, Tn, T8, Ti, T4, T5, To, Tp, T9, Ta, Tj, Tv;
        SIMD_FLOAT Tk, T6, TH, Tq, TC, Tb, TK, Tx, TR, Tl, Tz, TB, T7, TG, Tr;
        SIMD_FLOAT Ty, Tc, Tm, TJ;
        Tw = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T3 = Cr[WS(cs, 3)];
        Tn = Ci[WS(cs, 3)];
        T8 = Cr[WS(cs, 6)];
        Ti = Ci[WS(cs, 6)];
        T4 = Cr[WS(cs, 7)];
        T5 = Cr[WS(cs, 2)];
        To = Ci[WS(cs, 7)];
        Tp = Ci[WS(cs, 2)];
        T9 = Cr[WS(cs, 4)];
        Ta = Cr[WS(cs, 1)];
        Tj = Ci[WS(cs, 1)];
        Tv = T1 - T2;
        Tk = Ci[WS(cs, 4)];
        T6 = T4 + T5;
        TH = T4 - T5;
        Tq = To + Tp;
        TC = To - Tp;
        Tb = T9 + Ta;
        TK = T9 - Ta;
        Tx = SIMD_FNMADD(KP1_732050807, Tw, Tv);
        TR = SIMD_FMADD(KP1_732050807, Tw, Tv);
        Tl = Tj - Tk;
        Tz = Tj + Tk;
        TB = SIMD_FNMADD(KP2_000000000, T3, T6);
        T7 = T3 + T6;
        TG = SIMD_FMADD(KP500000000, Tq, Tn);
        Tr = Tn - Tq;
        Ty = SIMD_FNMADD(KP2_000000000, T8, Tb);
        Tc = T8 + Tb;
        Tm = Ti + Tl;
        TJ = SIMD_FNMADD(KP500000000, Tl, Ti);
        {
            SIMD_FLOAT TD, TT, TZ, TI, Td, Tg, TA, TS, TL, TW, Tu, Ts, Te, TX,
                TU;
            SIMD_FLOAT TM, TE, T12, TQ, Tf, TY, TV, TN, TF, Th, Tt, T10, T11,
                TO, TP;
            TD             = SIMD_FNMADD(KP1_732050807, TC, TB);
            TT             = SIMD_FMADD(KP1_732050807, TC, TB);
            TZ             = SIMD_FNMADD(KP866025403, TH, TG);
            TI             = SIMD_FMADD(KP866025403, TH, TG);
            Td             = T7 + Tc;
            Tg             = T7 - Tc;
            TA             = SIMD_FNMADD(KP1_732050807, Tz, Ty);
            TS             = SIMD_FMADD(KP1_732050807, Tz, Ty);
            TL             = SIMD_FMADD(KP866025403, TK, TJ);
            TW             = SIMD_FNMADD(KP866025403, TK, TJ);
            Tu             = SIMD_FMADD(KP618033988, Tm, Tr);
            Ts             = SIMD_FNMADD(KP618033988, Tr, Tm);
            Te             = SIMD_FNMADD(KP250000000, Td, T2);
            TX             = TS - TT;
            TU             = TS + TT;
            TM             = TA - TD;
            TE             = TA + TD;
            T12            = SIMD_FMADD(KP618033988, TW, TZ);
            TQ             = SIMD_FNMADD(KP618033988, TI, TL);
            Tf             = SIMD_FMADD(KP2_000000000, Te, T1);
            TY             = SIMD_FMADD(KP293892626, TX, TW);
            R0[WS(rs, 2)]  = TR - TU;
            TV             = SIMD_FMADD(KP250000000, TU, TR);
            TN             = SIMD_FMADD(KP475528258, TM, TL);
            R0[WS(rs, 7)]  = Tx - TE;
            TF             = SIMD_FMADD(KP250000000, TE, Tx);
            Th             = SIMD_FNMADD(KP1_118033988, Tg, Tf);
            Tt             = SIMD_FMADD(KP1_118033988, Tg, Tf);
            T10            = SIMD_FNMADD(KP618033988, TZ, TY);
            T11            = SIMD_FMADD(KP559016994, TX, TV);
            TO             = SIMD_FMADD(KP618033988, TN, TI);
            TP             = SIMD_FNMADD(KP559016994, TM, TF);
            R0[WS(rs, 6)]  = SIMD_FMADD(KP1_902113032, Tu, Tt);
            R0[WS(rs, 3)]  = SIMD_FNMADD(KP1_902113032, Tu, Tt);
            R0[WS(rs, 9)]  = SIMD_FMADD(KP1_902113032, Ts, Th);
            R0[0]          = SIMD_FNMADD(KP1_902113032, Ts, Th);
            R0[WS(rs, 5)]  = SIMD_FNMADD(KP1_902113032, T10, TV);
            R0[WS(rs, 11)] = SIMD_FMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 8)]  = SIMD_FNMADD(KP1_902113032, T12, T11);
            R0[WS(rs, 1)]  = SIMD_FMADD(KP1_902113032, TO, TF);
            R0[WS(rs, 10)] = SIMD_FNMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 4)]  = SIMD_FMADD(KP1_902113032, TQ, TP);
        }
    }
}

template <>
struct r2cb_traits<15, 4>
{
    static constexpr long_t flops           = 99;
    static constexpr long_t operations      = 60;
    static constexpr long_t memory_accesses = 26;
    static constexpr long_t stack_vars      = 76;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 4 -name
 * r2cb -standalone */

/*
 * This function contains 60 FP additions, 39 FP multiplications,
 * (or, 21 additions, 0 multiplications, 39 fused multiply/add),
 * 76 stack variables, 12 constants, and 26 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP475528258, +0.475528258147576786058219666689691071702849317);
    DK(KP293892626, +0.293892626146236564584352977319536384298826219);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, T9, Tu, Ti, Tz, T6, T7, Tb, Tc, Tf, Tg, Tk, T3;
        SIMD_FLOAT Tl, T8, Tx, Td, Tv, Th, TC, T5, Tp, Tm, TA, Ta, TR, Tw, TY;
        SIMD_FLOAT Tj, TS, TZ, TB;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T9 = Cr[WS(cs, 3)];
        Tu = Ci[WS(cs, 3)];
        Ti = Cr[WS(cs, 6)];
        Tz = Ci[WS(cs, 6)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Tb = Ci[WS(cs, 7)];
        Tc = Ci[WS(cs, 2)];
        Tf = Cr[WS(cs, 4)];
        Tg = Cr[WS(cs, 1)];
        Tk = Ci[WS(cs, 4)];
        T3 = T1 - T2;
        Tl = Ci[WS(cs, 1)];
        T8 = T6 + T7;
        Tx = T6 - T7;
        Td = Tb - Tc;
        Tv = Tb + Tc;
        Th = Tf + Tg;
        TC = Tf - Tg;
        T5 = SIMD_FNMADD(KP1_732050807, T4, T3);
        Tp = SIMD_FMADD(KP1_732050807, T4, T3);
        Tm = Tk + Tl;
        TA = Tl - Tk;
        Ta = SIMD_FNMADD(KP2_000000000, T9, T8);
        TR = T8 + T9;
        Tw = SIMD_FMADD(KP500000000, Tv, Tu);
        TY = Tu - Tv;
        Tj = SIMD_FNMADD(KP2_000000000, Ti, Th);
        TS = Th + Ti;
        TZ = TA + Tz;
        TB = SIMD_FNMADD(KP500000000, TA, Tz);
        {
            SIMD_FLOAT Te, Tq, TN, Ty, TT, TW, Tn, Tr, TD, TK, T10, T11, TU, TL,
                Ts;
            SIMD_FLOAT TE, To, TQ, TI, T12, TV, TM, TJ, TF, Tt, TX, TO, TP, TG,
                TH;
            Te             = SIMD_FNMADD(KP1_732050807, Td, Ta);
            Tq             = SIMD_FMADD(KP1_732050807, Td, Ta);
            TN             = SIMD_FNMADD(KP866025403, Tx, Tw);
            Ty             = SIMD_FMADD(KP866025403, Tx, Tw);
            TT             = TR + TS;
            TW             = TR - TS;
            Tn             = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            Tr             = SIMD_FMADD(KP1_732050807, Tm, Tj);
            TD             = SIMD_FMADD(KP866025403, TC, TB);
            TK             = SIMD_FNMADD(KP866025403, TC, TB);
            T10            = SIMD_FMADD(KP618033988, TZ, TY);
            T11            = SIMD_FMADD(KP951056516, TW, TY);
            TU             = SIMD_FNMADD(KP250000000, TT, T2);
            TL             = Tr - Tq;
            Ts             = Tq + Tr;
            TE             = Tn - Te;
            To             = Te + Tn;
            TQ             = SIMD_FMADD(KP618033988, TK, TN);
            TI             = SIMD_FNMADD(KP618033988, Ty, TD);
            T12            = SIMD_FNMADD(KP618033988, T11, TZ);
            TV             = SIMD_FMADD(KP2_000000000, TU, T1);
            TM             = SIMD_FMADD(KP293892626, TL, TK);
            R0[WS(rs, 1)]  = Tp - Ts;
            TJ             = SIMD_FMADD(KP250000000, Ts, Tp);
            TF             = SIMD_FMADD(KP475528258, TE, TD);
            R0[WS(rs, 6)]  = T5 - To;
            Tt             = SIMD_FMADD(KP250000000, To, T5);
            TX             = SIMD_FMADD(KP1_118033988, TW, TV);
            R0[WS(rs, 8)]  = SIMD_FMADD(KP1_902113032, T12, TV);
            TO             = SIMD_FNMADD(KP618033988, TN, TM);
            TP             = SIMD_FMADD(KP559016994, TL, TJ);
            TG             = SIMD_FMADD(KP618033988, TF, Ty);
            TH             = SIMD_FNMADD(KP559016994, TE, Tt);
            R0[WS(rs, 5)]  = SIMD_FMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 2)]  = SIMD_FNMADD(KP1_902113032, T10, TX);
            R0[WS(rs, 4)]  = SIMD_FNMADD(KP1_902113032, TO, TJ);
            R0[WS(rs, 10)] = SIMD_FMADD(KP1_902113032, TQ, TP);
            R0[WS(rs, 7)]  = SIMD_FNMADD(KP1_902113032, TQ, TP);
            R0[0]          = SIMD_FMADD(KP1_902113032, TG, Tt);
            R0[WS(rs, 3)]  = SIMD_FMADD(KP1_902113032, TI, TH);
            R0[WS(rs, 9)]  = SIMD_FNMADD(KP1_902113032, TI, TH);
        }
    }
}

template <>
struct r2cb_traits<15, 5>
{
    static constexpr long_t flops           = 92;
    static constexpr long_t operations      = 56;
    static constexpr long_t memory_accesses = 25;
    static constexpr long_t stack_vars      = 74;
    static constexpr long_t constants       = 14;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 5 -name
 * r2cb -standalone */

/*
 * This function contains 56 FP additions, 36 FP multiplications,
 * (or, 20 additions, 0 multiplications, 36 fused multiply/add),
 * 74 stack variables, 14 constants, and 25 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP293892626, +0.293892626146236564584352977319536384298826219);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, T9, Tz, Ti, TD, T6, T7, Tb, Tc, Tf, Tg, Tk, T3;
        SIMD_FLOAT Tl, T8, TN, Td, TA, Th, TL, T5, Tp, Tm, TC;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T9 = Cr[WS(cs, 3)];
        Tz = Ci[WS(cs, 3)];
        Ti = Cr[WS(cs, 6)];
        TD = Ci[WS(cs, 6)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Tb = Ci[WS(cs, 7)];
        Tc = Ci[WS(cs, 2)];
        Tf = Cr[WS(cs, 4)];
        Tg = Cr[WS(cs, 1)];
        Tk = Ci[WS(cs, 4)];
        T3 = T1 - T2;
        Tl = Ci[WS(cs, 1)];
        T8 = T6 + T7;
        TN = T7 - T6;
        Td = Tb - Tc;
        TA = Tb + Tc;
        Th = Tf + Tg;
        TL = Tf - Tg;
        T5 = SIMD_FMADD(KP1_732050807, T4, T3);
        Tp = SIMD_FNMADD(KP1_732050807, T4, T3);
        Tm = Tk + Tl;
        TC = Tl - Tk;
        {
            SIMD_FLOAT Ta, Ts, TB, TM, Tj, Tt, TE, TK, Te, Tr, TO, TV, Tu, Tx,
                Tn;
            SIMD_FLOAT Tq, TS, TF, TP, TG, Tv, TI, TT, To, TY, TQ, TH, Tw, TJ,
                TU;
            SIMD_FLOAT TR, Ty, TW, TX;
            Ta            = SIMD_FNMADD(KP2_000000000, T9, T8);
            Ts            = T8 + T9;
            TB            = Tz - TA;
            TM            = SIMD_FMADD(KP500000000, TA, Tz);
            Tj            = SIMD_FNMADD(KP2_000000000, Ti, Th);
            Tt            = Th + Ti;
            TE            = TC + TD;
            TK            = SIMD_FNMADD(KP500000000, TC, TD);
            Te            = SIMD_FMADD(KP1_732050807, Td, Ta);
            Tr            = SIMD_FNMADD(KP1_732050807, Td, Ta);
            TO            = SIMD_FNMADD(KP866025403, TN, TM);
            TV            = SIMD_FMADD(KP866025403, TN, TM);
            Tu            = Ts + Tt;
            Tx            = Ts - Tt;
            Tn            = SIMD_FMADD(KP1_732050807, Tm, Tj);
            Tq            = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            TS            = SIMD_FNMADD(KP866025403, TL, TK);
            TF            = SIMD_FMADD(KP618033988, TE, TB);
            TP            = SIMD_FNMADD(KP713644179, TO, TL);
            TG            = SIMD_FMADD(KP951056516, Tx, TB);
            Tv            = SIMD_FNMADD(KP250000000, Tu, T2);
            TI            = SIMD_FNMADD(KP381966011, Tq, Tr);
            R0[WS(rs, 5)] = Tp - Tq - Tr;
            TT            = Tn - Te;
            To            = Te + Tn;
            TY            = SIMD_FMADD(KP618033988, TS, TV);
            TQ            = SIMD_FMADD(KP866025403, TP, TK);
            TH            = SIMD_FNMADD(KP618033988, TG, TE);
            Tw            = SIMD_FMADD(KP2_000000000, Tv, T1);
            TJ            = SIMD_FMADD(KP809016994, TI, Tp);
            TU            = SIMD_FMADD(KP293892626, TT, TS);
            R0[0]         = T5 - To;
            TR            = SIMD_FMADD(KP250000000, To, T5);
            Ty            = SIMD_FMADD(KP1_118033988, Tx, Tw);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_902113032, TH, Tw);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_902113032, TQ, TJ);
            R0[WS(rs, 8)] = SIMD_FNMADD(KP1_902113032, TQ, TJ);
            TW            = SIMD_FNMADD(KP618033988, TV, TU);
            TX            = SIMD_FMADD(KP559016994, TT, TR);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, TF, Ty);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_902113032, TF, Ty);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP1_902113032, TW, TR);
            R0[WS(rs, 9)] = SIMD_FMADD(KP1_902113032, TY, TX);
            R0[WS(rs, 6)] = SIMD_FNMADD(KP1_902113032, TY, TX);
        }
    }
}

template <>
struct r2cb_traits<15, 6>
{
    static constexpr long_t flops           = 91;
    static constexpr long_t operations      = 55;
    static constexpr long_t memory_accesses = 24;
    static constexpr long_t stack_vars      = 75;
    static constexpr long_t constants       = 15;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 6 -name
 * r2cb -standalone */

/*
 * This function contains 55 FP additions, 36 FP multiplications,
 * (or, 19 additions, 0 multiplications, 36 fused multiply/add),
 * 75 stack variables, 15 constants, and 24 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_118033988, +1.118033988749894848204586834365638117720309180);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP144337567, +0.144337567297406441127287195125489363911900438);
    DK(KP293892626, +0.293892626146236564584352977319536384298826219);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT Tw, T1, T2, Ti, Tn, T3, T4, T5, To, Tp, Tj, Tk, T8, T9, Tv;
        SIMD_FLOAT Ta, T6, TJ, Tq, TC, Tl, Tz, Tx, TH, Tb;
        Tw = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        Ti = Ci[WS(cs, 3)];
        Tn = Ci[WS(cs, 6)];
        T3 = Cr[WS(cs, 3)];
        T4 = Cr[WS(cs, 7)];
        T5 = Cr[WS(cs, 2)];
        To = Ci[WS(cs, 1)];
        Tp = Ci[WS(cs, 4)];
        Tj = Ci[WS(cs, 7)];
        Tk = Ci[WS(cs, 2)];
        T8 = Cr[WS(cs, 6)];
        T9 = Cr[WS(cs, 4)];
        Tv = T1 - T2;
        Ta = Cr[WS(cs, 1)];
        T6 = T4 + T5;
        TJ = T5 - T4;
        Tq = To - Tp;
        TC = To + Tp;
        Tl = Tj + Tk;
        Tz = Tj - Tk;
        Tx = SIMD_FNMADD(KP1_732050807, Tw, Tv);
        TH = T9 - Ta;
        Tb = T9 + Ta;
        {
            SIMD_FLOAT T7, Ty, TG, Tr, TI, Tm, Tc, TB, TN, TA, TS, TK, TV, Ts,
                Tg;
            SIMD_FLOAT Td, TO, TD, TY, TL, Tt, Te, TT, TP, TE, TM, Tu, Tf, TU,
                TQ;
            SIMD_FLOAT TF, Th, TW, TR, TX;
            T7            = T3 + T6;
            Ty            = SIMD_FNMADD(KP2_000000000, T3, T6);
            TG            = SIMD_FNMADD(KP500000000, Tq, Tn);
            Tr            = Tn + Tq;
            TI            = SIMD_FMADD(KP500000000, Tl, Ti);
            Tm            = Ti - Tl;
            Tc            = T8 + Tb;
            TB            = SIMD_FNMADD(KP2_000000000, T8, Tb);
            TN            = SIMD_FMADD(KP1_732050807, Tz, Ty);
            TA            = SIMD_FNMADD(KP1_732050807, Tz, Ty);
            TS            = SIMD_FNMADD(KP866025403, TH, TG);
            TK            = SIMD_FNMADD(KP866025403, TJ, TI);
            TV            = SIMD_FMADD(KP866025403, TJ, TI);
            Ts            = SIMD_FMADD(KP618033988, Tr, Tm);
            Tg            = T7 - Tc;
            Td            = T7 + Tc;
            TO            = SIMD_FMADD(KP1_732050807, TC, TB);
            TD            = SIMD_FNMADD(KP1_732050807, TC, TB);
            TY            = SIMD_FMADD(KP618033988, TS, TV);
            TL            = SIMD_FNMADD(KP713644179, TK, TH);
            Tt            = SIMD_FMADD(KP951056516, Tg, Tm);
            Te            = SIMD_FNMADD(KP250000000, Td, T2);
            TT            = TO - TN;
            TP            = TN + TO;
            TE            = SIMD_FNMADD(KP381966011, TD, TA);
            R0[WS(rs, 4)] = Tx - TD - TA;
            TM            = SIMD_FMADD(KP866025403, TL, TG);
            Tu            = SIMD_FNMADD(KP618033988, Tt, Tr);
            Tf            = SIMD_FMADD(KP2_000000000, Te, T1);
            TU            = SIMD_FMADD(KP293892626, TT, TS);
            TQ            = SIMD_FMADD(KP144337567, TP, Tw);
            TF            = SIMD_FMADD(KP809016994, TE, Tx);
            Th            = SIMD_FMADD(KP1_118033988, Tg, Tf);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_902113032, Tu, Tf);
            TW            = SIMD_FNMADD(KP618033988, TV, TU);
            TR            = SIMD_FMADD(KP1_732050807, TQ, Tv);
            R0[WS(rs, 7)] = SIMD_FNMADD(KP1_902113032, TM, TF);
            R0[WS(rs, 1)] = SIMD_FMADD(KP1_902113032, TM, TF);
            R0[WS(rs, 3)] = SIMD_FMADD(KP1_902113032, Ts, Th);
            R0[0]         = SIMD_FNMADD(KP1_902113032, Ts, Th);
            TX            = SIMD_FMADD(KP559016994, TT, TR);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP1_902113032, TW, TR);
            R0[WS(rs, 8)] = SIMD_FMADD(KP1_902113032, TY, TX);
            R0[WS(rs, 5)] = SIMD_FNMADD(KP1_902113032, TY, TX);
        }
    }
}

template <>
struct r2cb_traits<15, 7>
{
    static constexpr long_t flops           = 89;
    static constexpr long_t operations      = 54;
    static constexpr long_t memory_accesses = 23;
    static constexpr long_t stack_vars      = 74;
    static constexpr long_t constants       = 14;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 7 -name
 * r2cb -standalone */

/*
 * This function contains 54 FP additions, 35 FP multiplications,
 * (or, 19 additions, 0 multiplications, 35 fused multiply/add),
 * 74 stack variables, 14 constants, and 23 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 7>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP809016994, +0.809016994374947424102293417182819058860154590);
    DK(KP144337567, +0.144337567297406441127287195125489363911900438);
    DK(KP293892626, +0.293892626146236564584352977319536384298826219);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, Tq, Tu, Tk, Tl, Tb, Tc, T9, T6, T7, Ti, Tf, T3;
        SIMD_FLOAT Tg, Tm, Tr, Td, Tv, T8, Tx, T5, Tt, Th, Ts, TS, Tw, TT;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        Tq = Ci[WS(cs, 6)];
        Tu = Ci[WS(cs, 3)];
        Tk = Ci[WS(cs, 4)];
        Tl = Ci[WS(cs, 1)];
        Tb = Ci[WS(cs, 2)];
        Tc = Ci[WS(cs, 7)];
        T9 = Cr[WS(cs, 3)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Ti = Cr[WS(cs, 6)];
        Tf = Cr[WS(cs, 4)];
        T3 = T1 - T2;
        Tg = Cr[WS(cs, 1)];
        Tm = Tk + Tl;
        Tr = Tl - Tk;
        Td = Tb - Tc;
        Tv = Tc + Tb;
        T8 = T6 + T7;
        Tx = T7 - T6;
        T5 = SIMD_FNMADD(KP1_732050807, T4, T3);
        Tt = Tf - Tg;
        Th = Tf + Tg;
        Ts = SIMD_FNMADD(KP500000000, Tr, Tq);
        TS = Tr + Tq;
        Tw = SIMD_FMADD(KP500000000, Tv, Tu);
        TT = Tu - Tv;
        {
            SIMD_FLOAT TO, Ta, TN, Tj, TG, Ty, TJ, Te, TC, TP, TU, Tn, TB, TM,
                Tz;
            SIMD_FLOAT TV, TX, TQ, TH, TD, To, TA, TW, TY, TR, TI, TE, Tp, TK,
                TF;
            SIMD_FLOAT TL;
            TO            = T8 + T9;
            Ta            = SIMD_FNMADD(KP2_000000000, T9, T8);
            TN            = Th + Ti;
            Tj            = SIMD_FNMADD(KP2_000000000, Ti, Th);
            TG            = SIMD_FNMADD(KP866025403, Tt, Ts);
            Ty            = SIMD_FNMADD(KP866025403, Tx, Tw);
            TJ            = SIMD_FMADD(KP866025403, Tx, Tw);
            Te            = SIMD_FMADD(KP1_732050807, Td, Ta);
            TC            = SIMD_FNMADD(KP1_732050807, Td, Ta);
            TP            = TN + TO;
            TU            = TO - TN;
            Tn            = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            TB            = SIMD_FMADD(KP1_732050807, Tm, Tj);
            TM            = SIMD_FMADD(KP618033988, TG, TJ);
            Tz            = SIMD_FNMADD(KP713644179, Ty, Tt);
            TV            = SIMD_FMADD(KP951056516, TU, TT);
            TX            = SIMD_FMADD(KP951056516, TU, TS);
            TQ            = SIMD_FNMADD(KP250000000, TP, T2);
            TH            = TB - TC;
            TD            = TB + TC;
            To            = SIMD_FNMADD(KP381966011, Tn, Te);
            R0[WS(rs, 3)] = T5 - Te - Tn;
            TA            = SIMD_FMADD(KP866025403, Tz, Ts);
            TW            = SIMD_FNMADD(KP618033988, TV, TS);
            TY            = SIMD_FMADD(KP618033988, TX, TT);
            TR            = SIMD_FMADD(KP2_000000000, TQ, T1);
            TI            = SIMD_FMADD(KP293892626, TH, TG);
            TE            = SIMD_FMADD(KP144337567, TD, T4);
            Tp            = SIMD_FMADD(KP809016994, To, T5);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_902113032, TY, TR);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_902113032, TW, TR);
            TK            = SIMD_FNMADD(KP618033988, TJ, TI);
            TF            = SIMD_FMADD(KP1_732050807, TE, T3);
            R0[0]         = SIMD_FMADD(KP1_902113032, TA, Tp);
            R0[WS(rs, 6)] = SIMD_FNMADD(KP1_902113032, TA, Tp);
            TL            = SIMD_FMADD(KP559016994, TH, TF);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_902113032, TK, TF);
            R0[WS(rs, 7)] = SIMD_FMADD(KP1_902113032, TM, TL);
            R0[WS(rs, 4)] = SIMD_FNMADD(KP1_902113032, TM, TL);
        }
    }
}

template <>
struct r2cb_traits<15, 8>
{
    static constexpr long_t flops           = 87;
    static constexpr long_t operations      = 53;
    static constexpr long_t memory_accesses = 22;
    static constexpr long_t stack_vars      = 74;
    static constexpr long_t constants       = 14;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 8 -name
 * r2cb -standalone */

/*
 * This function contains 53 FP additions, 34 FP multiplications,
 * (or, 19 additions, 0 multiplications, 34 fused multiply/add),
 * 74 stack variables, 14 constants, and 22 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 8>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP559016994, +0.559016994374947424102293417182819058860154590);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP144337567, +0.144337567297406441127287195125489363911900438);
    DK(KP293892626, +0.293892626146236564584352977319536384298826219);
    DK(KP688190960, +0.688190960235586769103604790955443839762949668);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, Tt, TA, Tk, Tl, Tb, Tc, T9, T6, T7, Ti, Tf, T3;
        SIMD_FLOAT Tg, Tm, Tu, Td, TB, T8, TD, T5, Tw, Th, Tv, TS, TC, TT;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        Tt = Ci[WS(cs, 6)];
        TA = Ci[WS(cs, 3)];
        Tk = Ci[WS(cs, 4)];
        Tl = Ci[WS(cs, 1)];
        Tb = Ci[WS(cs, 2)];
        Tc = Ci[WS(cs, 7)];
        T9 = Cr[WS(cs, 3)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Ti = Cr[WS(cs, 6)];
        Tf = Cr[WS(cs, 4)];
        T3 = T1 - T2;
        Tg = Cr[WS(cs, 1)];
        Tm = Tk + Tl;
        Tu = Tl - Tk;
        Td = Tb - Tc;
        TB = Tc + Tb;
        T8 = T6 + T7;
        TD = T7 - T6;
        T5 = SIMD_FNMADD(KP1_732050807, T4, T3);
        Tw = Tg - Tf;
        Th = Tf + Tg;
        Tv = SIMD_FNMADD(KP500000000, Tu, Tt);
        TS = Tu + Tt;
        TC = SIMD_FMADD(KP500000000, TB, TA);
        TT = TA - TB;
        {
            SIMD_FLOAT TO, Ta, TN, Tj, Tx, TI, TE, Tp, Te, TP, TU, To, Tn, TH,
                TV;
            SIMD_FLOAT TX, TQ, TJ, Tq, Ty, TW, TY, TR, TK, Tz, Tr, TL, TF, Ts,
                TM;
            SIMD_FLOAT TG;
            TO            = T8 + T9;
            Ta            = SIMD_FNMADD(KP2_000000000, T9, T8);
            TN            = Th + Ti;
            Tj            = SIMD_FNMADD(KP2_000000000, Ti, Th);
            Tx            = SIMD_FMADD(KP866025403, Tw, Tv);
            TI            = SIMD_FNMADD(KP866025403, TD, TC);
            TE            = SIMD_FMADD(KP866025403, TD, TC);
            Tp            = SIMD_FNMADD(KP1_732050807, Td, Ta);
            Te            = SIMD_FMADD(KP1_732050807, Td, Ta);
            TP            = TN + TO;
            TU            = TO - TN;
            To            = SIMD_FMADD(KP1_732050807, Tm, Tj);
            Tn            = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            TH            = SIMD_FMADD(KP618033988, Tx, TE);
            TV            = SIMD_FMADD(KP951056516, TU, TT);
            TX            = SIMD_FMADD(KP951056516, TU, TS);
            TQ            = SIMD_FNMADD(KP250000000, TP, T2);
            R0[WS(rs, 2)] = T5 - Te - Tn;
            TJ            = SIMD_FNMADD(KP381966011, Tn, Te);
            Tq            = To + Tp;
            Ty            = To - Tp;
            TW            = SIMD_FNMADD(KP618033988, TV, TS);
            TY            = SIMD_FMADD(KP618033988, TX, TT);
            TR            = SIMD_FMADD(KP2_000000000, TQ, T1);
            TK            = SIMD_FMADD(KP688190960, TJ, TI);
            Tz            = SIMD_FMADD(KP293892626, Ty, Tx);
            Tr            = SIMD_FMADD(KP144337567, Tq, T4);
            R0[WS(rs, 1)] = SIMD_FMADD(KP1_902113032, TY, TR);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, TW, TR);
            TL            = SIMD_FMADD(KP713644179, TK, Tw);
            TF            = SIMD_FNMADD(KP618033988, TE, Tz);
            Ts            = SIMD_FMADD(KP1_732050807, Tr, T3);
            TM            = SIMD_FNMADD(KP866025403, TL, Tv);
            TG            = SIMD_FMADD(KP559016994, Ty, Ts);
            R0[0]         = SIMD_FNMADD(KP1_902113032, TF, Ts);
            R0[WS(rs, 5)] = SIMD_FNMADD(KP1_902113032, TM, T5);
            R0[WS(rs, 6)] = SIMD_FMADD(KP1_902113032, TH, TG);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP1_902113032, TH, TG);
        }
    }
}

template <>
struct r2cb_traits<15, 9>
{
    static constexpr long_t flops           = 79;
    static constexpr long_t operations      = 48;
    static constexpr long_t memory_accesses = 21;
    static constexpr long_t stack_vars      = 68;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 9 -name
 * r2cb -standalone */

/*
 * This function contains 48 FP additions, 31 FP multiplications,
 * (or, 17 additions, 0 multiplications, 31 fused multiply/add),
 * 68 stack variables, 12 constants, and 21 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 9>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP467086179, +0.467086179481357848225559311774022664814643913);
    DK(KP688190960, +0.688190960235586769103604790955443839762949668);
    DK(KP618033988, +0.618033988749894848204586834365638117720309180);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP250000000, +0.250000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT Tw, T1, T2, Tg, Tl, T3, T4, T5, Tm, Tn, Th, Ti, T8, T9, Tv;
        SIMD_FLOAT Ta, T6, TH, To, Tz, Tj, TC, Tx, TF, Tb;
        Tw = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        Tg = Ci[WS(cs, 3)];
        Tl = Ci[WS(cs, 6)];
        T3 = Cr[WS(cs, 3)];
        T4 = Cr[WS(cs, 7)];
        T5 = Cr[WS(cs, 2)];
        Tm = Ci[WS(cs, 1)];
        Tn = Ci[WS(cs, 4)];
        Th = Ci[WS(cs, 7)];
        Ti = Ci[WS(cs, 2)];
        T8 = Cr[WS(cs, 6)];
        T9 = Cr[WS(cs, 4)];
        Tv = T1 - T2;
        Ta = Cr[WS(cs, 1)];
        T6 = T4 + T5;
        TH = T5 - T4;
        To = Tm - Tn;
        Tz = Tm + Tn;
        Tj = Th + Ti;
        TC = Ti - Th;
        Tx = SIMD_FNMADD(KP1_732050807, Tw, Tv);
        TF = Ta - T9;
        Tb = T9 + Ta;
        {
            SIMD_FLOAT T7, TB, TE, Tp, TG, Tk, Tc, Ty, TD, TO, TS, TI, Tq, Td,
                TA;
            SIMD_FLOAT TN, TT, Tr, Tt, Te, TJ, TP, TU, Ts, Tu, Tf, TK, TQ, TL,
                TR;
            SIMD_FLOAT TM;
            T7            = T3 + T6;
            TB            = SIMD_FNMADD(KP2_000000000, T3, T6);
            TE            = SIMD_FNMADD(KP500000000, To, Tl);
            Tp            = Tl + To;
            TG            = SIMD_FMADD(KP500000000, Tj, Tg);
            Tk            = Tg - Tj;
            Tc            = T8 + Tb;
            Ty            = SIMD_FNMADD(KP2_000000000, T8, Tb);
            TD            = SIMD_FMADD(KP1_732050807, TC, TB);
            TO            = SIMD_FNMADD(KP1_732050807, TC, TB);
            TS            = SIMD_FMADD(KP866025403, TF, TE);
            TI            = SIMD_FNMADD(KP866025403, TH, TG);
            Tq            = T7 - Tc;
            Td            = T7 + Tc;
            TA            = SIMD_FNMADD(KP1_732050807, Tz, Ty);
            TN            = SIMD_FMADD(KP1_732050807, Tz, Ty);
            TT            = SIMD_FMADD(KP713644179, TS, TH);
            Tr            = SIMD_FMADD(KP951056516, Tq, Tp);
            Tt            = SIMD_FMADD(KP951056516, Tq, Tk);
            Te            = SIMD_FNMADD(KP250000000, Td, T2);
            R0[WS(rs, 1)] = Tx - TA - TD;
            TJ            = SIMD_FNMADD(KP381966011, TA, TD);
            TP            = SIMD_FNMADD(KP381966011, TO, TN);
            TU            = SIMD_FMADD(KP866025403, TT, TG);
            Ts            = SIMD_FMADD(KP618033988, Tr, Tk);
            Tu            = SIMD_FNMADD(KP618033988, Tt, Tp);
            Tf            = SIMD_FMADD(KP2_000000000, Te, T1);
            TK            = SIMD_FMADD(KP688190960, TJ, TI);
            TQ            = SIMD_FMADD(KP467086179, TP, Tw);
            R0[WS(rs, 3)] = SIMD_FMADD(KP1_902113032, Tu, Tf);
            R0[0]         = SIMD_FMADD(KP1_902113032, Ts, Tf);
            TL            = SIMD_FMADD(KP713644179, TK, TF);
            TR            = SIMD_FMADD(KP1_732050807, TQ, Tv);
            TM            = SIMD_FNMADD(KP866025403, TL, TE);
            R0[WS(rs, 5)] = SIMD_FMADD(KP1_902113032, TU, TR);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP1_902113032, TU, TR);
            R0[WS(rs, 4)] = SIMD_FNMADD(KP1_902113032, TM, Tx);
        }
    }
}

template <>
struct r2cb_traits<15, 10>
{
    static constexpr long_t flops           = 72;
    static constexpr long_t operations      = 43;
    static constexpr long_t memory_accesses = 20;
    static constexpr long_t stack_vars      = 64;
    static constexpr long_t constants       = 13;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 10 -name
 * r2cb -standalone */

/*
 * This function contains 43 FP additions, 29 FP multiplications,
 * (or, 14 additions, 0 multiplications, 29 fused multiply/add),
 * 64 stack variables, 13 constants, and 20 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 10>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP467086179, +0.467086179481357848225559311774022664814643913);
    DK(KP688190960, +0.688190960235586769103604790955443839762949668);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP381966011, +0.381966011250105151795413165634361882279690820);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, To, Tt, Tk, Tl, Tb, Tc, T9, T6, T7, Ti, Tf, T3;
        SIMD_FLOAT Tg, Tm, Tp, Td, Ts;
        T4 = Ci[WS(cs, 5)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        To = Ci[WS(cs, 6)];
        Tt = Ci[WS(cs, 3)];
        Tk = Ci[WS(cs, 4)];
        Tl = Ci[WS(cs, 1)];
        Tb = Ci[WS(cs, 2)];
        Tc = Ci[WS(cs, 7)];
        T9 = Cr[WS(cs, 3)];
        T6 = Cr[WS(cs, 7)];
        T7 = Cr[WS(cs, 2)];
        Ti = Cr[WS(cs, 6)];
        Tf = Cr[WS(cs, 4)];
        T3 = T1 - T2;
        Tg = Cr[WS(cs, 1)];
        Tm = Tk + Tl;
        Tp = Tk - Tl;
        Td = Tb - Tc;
        Ts = Tc + Tb;
        {
            SIMD_FLOAT T8, TC, T5, TA, Th, Tz, Tq, TB, Ta, Tr, Tu, Tj, TN, TD,
                TJ;
            SIMD_FLOAT Te, Tv, Tn, TI, TO, Tw, TE, TK, TP, Tx, TF, TL, Ty, TG,
                TM;
            SIMD_FLOAT TH;
            T8            = T6 + T7;
            TC            = T7 - T6;
            T5            = SIMD_FNMADD(KP1_732050807, T4, T3);
            TA            = Tg - Tf;
            Th            = Tf + Tg;
            Tz            = SIMD_FMADD(KP500000000, Tp, To);
            Tq            = To - Tp;
            TB            = SIMD_FMADD(KP500000000, Ts, Tt);
            Ta            = SIMD_FNMADD(KP2_000000000, T9, T8);
            Tr            = T8 + T9;
            Tu            = Ti + (SIMD_FNMADD(KP1_902113032, Tt, Th));
            Tj            = SIMD_FNMADD(KP2_000000000, Ti, Th);
            TN            = SIMD_FMADD(KP866025403, TA, Tz);
            TD            = SIMD_FNMADD(KP866025403, TC, TB);
            TJ            = SIMD_FNMADD(KP1_732050807, Td, Ta);
            Te            = SIMD_FMADD(KP1_732050807, Td, Ta);
            Tv            = SIMD_FMADD(KP525731112, Tu, Ts);
            Tn            = SIMD_FNMADD(KP1_732050807, Tm, Tj);
            TI            = SIMD_FMADD(KP1_732050807, Tm, Tj);
            TO            = SIMD_FMADD(KP713644179, TN, TC);
            Tw            = SIMD_FNMADD(KP726542528, Tv, Tr);
            R0[0]         = T5 - Te - Tn;
            TE            = SIMD_FNMADD(KP381966011, Tn, Te);
            TK            = SIMD_FNMADD(KP381966011, TJ, TI);
            TP            = SIMD_FMADD(KP866025403, TO, TB);
            Tx            = SIMD_FNMADD(KP850650808, Tw, Tq);
            TF            = SIMD_FMADD(KP688190960, TE, TD);
            TL            = SIMD_FMADD(KP467086179, TK, T4);
            Ty            = SIMD_FMADD(KP951056516, Tx, T2);
            TG            = SIMD_FMADD(KP713644179, TF, TA);
            TM            = SIMD_FMADD(KP1_732050807, TL, T3);
            R0[WS(rs, 2)] = SIMD_FMADD(KP2_000000000, Ty, T1);
            TH            = SIMD_FNMADD(KP866025403, TG, Tz);
            R0[WS(rs, 4)] = SIMD_FMADD(KP1_902113032, TP, TM);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_902113032, TP, TM);
            R0[WS(rs, 3)] = SIMD_FNMADD(KP1_902113032, TH, T5);
        }
    }
}

template <>
struct r2cb_traits<15, 11>
{
    static constexpr long_t flops           = 70;
    static constexpr long_t operations      = 41;
    static constexpr long_t memory_accesses = 19;
    static constexpr long_t stack_vars      = 65;
    static constexpr long_t constants       = 14;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 11 -name
 * r2cb -standalone */

/*
 * This function contains 41 FP additions, 29 FP multiplications,
 * (or, 12 additions, 0 multiplications, 29 fused multiply/add),
 * 65 stack variables, 14 constants, and 19 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 11>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP838939048, +0.838939048243212646470504469024752945383806265);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP441056358, +0.441056358833071665134357874911739163331831352);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP713644179, +0.713644179546179863883939686092175747963372150);
    DK(KP934172358, +0.934172358962715696451118623548045329629287827);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, T3, Ts, T4, T5, Tk, Th, Ti, Tf, Tc, Td, T7, Tq, T9;
        SIMD_FLOAT Ta, T6, TC, Tj, Tw;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        T3 = Ci[WS(cs, 6)];
        Ts = Ci[WS(cs, 5)];
        T4 = Ci[WS(cs, 4)];
        T5 = Ci[WS(cs, 1)];
        Tk = Cr[WS(cs, 6)];
        Th = Cr[WS(cs, 1)];
        Ti = Cr[WS(cs, 4)];
        Tf = Ci[WS(cs, 3)];
        Tc = Ci[WS(cs, 2)];
        Td = Ci[WS(cs, 7)];
        T7 = Cr[WS(cs, 3)];
        Tq = T1 - T2;
        T9 = Cr[WS(cs, 7)];
        Ta = Cr[WS(cs, 2)];
        T6 = T4 - T5;
        TC = T4 + T5;
        Tj = Th + Ti;
        Tw = Th - Ti;
        {
            SIMD_FLOAT Te, Tx, Tb, Tz, Tr, T8, TB, Tl, Ty, Tg, Tt, TN, TD, Tm,
                TA;
            SIMD_FLOAT TI, Tu, TO, Tn, TE, TJ, Tv, TP, To, TF, TK, Tp, TG, TL,
                TH;
            SIMD_FLOAT TM;
            Te            = Tc + Td;
            Tx            = Tc - Td;
            Tb            = T9 + Ta;
            Tz            = Ta - T9;
            Tr            = SIMD_FMADD(KP500000000, T6, T3);
            T8            = T3 - (SIMD_FMADD(KP850650808, T7, T6));
            TB            = SIMD_FMSUB(KP500000000, Tj, Tk);
            Tl            = Tj + Tk;
            Ty            = SIMD_FMADD(KP500000000, Te, Tf);
            Tg            = Te - Tf;
            Tt            = SIMD_FNMADD(KP500000000, Tb, T7);
            TN            = SIMD_FMADD(KP866025403, Tw, Tr);
            TD            = SIMD_FNMADD(KP866025403, TC, TB);
            Tm            = SIMD_FMADD(KP525731112, Tl, Tg);
            TA            = SIMD_FNMADD(KP866025403, Tz, Ty);
            TI            = SIMD_FMADD(KP866025403, Tx, Tt);
            Tu            = SIMD_FMADD(KP934172358, Tt, Ts);
            TO            = SIMD_FMADD(KP713644179, TN, Tz);
            Tn            = SIMD_FNMADD(KP726542528, Tm, Tb);
            TE            = SIMD_FNMADD(KP525731112, TD, TA);
            TJ            = SIMD_FMADD(KP441056358, TI, TC);
            Tv            = SIMD_FMADD(KP910592997, Tu, Tr);
            TP            = SIMD_FMADD(KP866025403, TO, Ty);
            To            = SIMD_FNMADD(KP850650808, Tn, T8);
            TF            = SIMD_FMADD(KP838939048, TE, Tx);
            TK            = SIMD_FMADD(KP866025403, TJ, TB);
            Tp            = SIMD_FMADD(KP951056516, To, T2);
            TG            = SIMD_FMADD(KP850650808, TF, Tw);
            TL            = SIMD_FMADD(KP934172358, TK, Ts);
            R0[WS(rs, 1)] = SIMD_FMADD(KP2_000000000, Tp, T1);
            TH            = SIMD_FNMADD(KP866025403, TG, Tv);
            TM            = SIMD_FMADD(KP1_732050807, TL, Tq);
            R0[WS(rs, 2)] = SIMD_FNMADD(KP1_902113032, TH, Tq);
            R0[WS(rs, 3)] = SIMD_FMADD(KP1_902113032, TP, TM);
            R0[0]         = SIMD_FNMADD(KP1_902113032, TP, TM);
        }
    }
}

template <>
struct r2cb_traits<15, 12>
{
    static constexpr long_t flops           = 67;
    static constexpr long_t operations      = 40;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 64;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 12 -name
 * r2cb -standalone */

/*
 * This function contains 40 FP additions, 27 FP multiplications,
 * (or, 13 additions, 0 multiplications, 27 fused multiply/add),
 * 64 stack variables, 12 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 12>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP838939048, +0.838939048243212646470504469024752945383806265);
    DK(KP726542528, +0.726542528005360885895466757480618749616092393);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP934172358, +0.934172358962715696451118623548045329629287827);
    DK(KP982246946, +0.982246946376846022815670275235202826693934316);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T1, T2, Tt, Ti, Tj, Tk, T3, T4, T5, T8, T9, Ta, Tg, Tr, Td;
        SIMD_FLOAT Te, Tl, Tx, T6, TD, Tb, TA;
        T1 = Cr[0];
        T2 = Cr[WS(cs, 5)];
        Tt = Ci[WS(cs, 5)];
        Ti = Cr[WS(cs, 6)];
        Tj = Cr[WS(cs, 4)];
        Tk = Cr[WS(cs, 1)];
        T3 = Ci[WS(cs, 6)];
        T4 = Ci[WS(cs, 1)];
        T5 = Ci[WS(cs, 4)];
        T8 = Cr[WS(cs, 3)];
        T9 = Cr[WS(cs, 7)];
        Ta = Cr[WS(cs, 2)];
        Tg = Ci[WS(cs, 3)];
        Tr = T1 - T2;
        Td = Ci[WS(cs, 7)];
        Te = Ci[WS(cs, 2)];
        Tl = Tj + Tk;
        Tx = Tk - Tj;
        T6 = T4 - T5;
        TD = T4 + T5;
        Tb = T9 + Ta;
        TA = T9 - Ta;
        {
            SIMD_FLOAT Tf, Ty, TC, Tm, Ts, T7, Tu, Tc, Tz, Th, TE, TJ, TK, TL,
                Tv;
            SIMD_FLOAT Tn, TB, TM, Tw, To, TF, TN, Tp, TG, TO, Tq, TH, TP, TI,
                TQ;
            Tf            = Td + Te;
            Ty            = Te - Td;
            TC            = SIMD_FNMADD(KP500000000, Tl, Ti);
            Tm            = Ti + Tl;
            Ts            = SIMD_FNMADD(KP500000000, T6, T3);
            T7            = T3 + T6;
            Tu            = SIMD_FNMADD(KP500000000, Tb, T8);
            Tc            = T8 + Tb;
            Tz            = SIMD_FMADD(KP500000000, Tf, Tg);
            Th            = Tf - Tg;
            TE            = SIMD_FMADD(KP866025403, TD, TC);
            TJ            = SIMD_FMADD(KP982246946, TC, TA);
            TK            = SIMD_FMADD(KP866025403, Tx, Ts);
            TL            = SIMD_FMADD(KP866025403, Ty, Tu);
            Tv            = SIMD_FMADD(KP934172358, Tu, Tt);
            Tn            = SIMD_FMADD(KP525731112, Tm, Th);
            TB            = SIMD_FMADD(KP866025403, TA, Tz);
            TM            = SIMD_FMADD(KP525731112, TL, TK);
            Tw            = SIMD_FMADD(KP910592997, Tv, Ts);
            To            = SIMD_FNMADD(KP726542528, Tn, Tc);
            TF            = SIMD_FMADD(KP525731112, TE, TB);
            TN            = SIMD_FMADD(KP838939048, TM, TD);
            Tp            = SIMD_FNMADD(KP850650808, To, T7);
            TG            = SIMD_FMADD(KP838939048, TF, Ty);
            TO            = SIMD_FNMADD(KP850650808, TN, TJ);
            Tq            = SIMD_FMADD(KP951056516, Tp, T2);
            TH            = SIMD_FMADD(KP850650808, TG, Tx);
            TP            = SIMD_FNMADD(KP951056516, TO, Tt);
            R0[0]         = SIMD_FMADD(KP2_000000000, Tq, T1);
            TI            = SIMD_FNMADD(KP866025403, TH, Tw);
            TQ            = SIMD_FMADD(KP910592997, TP, Tz);
            R0[WS(rs, 1)] = SIMD_FNMADD(KP1_902113032, TI, Tr);
            R0[WS(rs, 2)] = SIMD_FMADD(KP1_902113032, TQ, Tr);
        }
    }
}

template <>
struct r2cb_traits<15, 13>
{
    static constexpr long_t flops           = 53;
    static constexpr long_t operations      = 31;
    static constexpr long_t memory_accesses = 17;
    static constexpr long_t stack_vars      = 54;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 13 -name
 * r2cb -standalone */

/*
 * This function contains 31 FP additions, 22 FP multiplications,
 * (or, 9 additions, 0 multiplications, 22 fused multiply/add),
 * 54 stack variables, 10 constants, and 17 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 13>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_902113032, +1.902113032590307144232878666758764286811397268);
    DK(KP951056516, +0.951056516295153572116439333379382143405698634);
    DK(KP850650808, +0.850650808352039932181540497063011072240401404);
    DK(KP838939048, +0.838939048243212646470504469024752945383806265);
    DK(KP525731112, +0.525731112119133606025669084847876607285497932);
    DK(KP910592997, +0.910592997310029334643087372129977886038870291);
    DK(KP982246946, +0.982246946376846022815670275235202826693934316);
    DK(KP934172358, +0.934172358962715696451118623548045329629287827);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T9, Tn, Tk, Tl, Ta, Tb, Tc, T4, T5, T6, Ts, T3, Th, Ti, T1;
        SIMD_FLOAT T2, To, Tm, Td, Tq, T7, Tv, Tt, Tj, Tp, Te, T8, Tu, Tr, TD;
        SIMD_FLOAT Tf, TC, Tw, TB, Tg, TE, Tx, TF, Ty, TG, Tz, TH, TA, TI;
        T1            = Cr[0];
        T2            = Cr[WS(cs, 5)];
        T9            = Ci[WS(cs, 5)];
        Tn            = Ci[WS(cs, 3)];
        Tk            = Ci[WS(cs, 2)];
        Tl            = Ci[WS(cs, 7)];
        Ta            = Cr[WS(cs, 3)];
        Tb            = Cr[WS(cs, 7)];
        Tc            = Cr[WS(cs, 2)];
        T4            = Ci[WS(cs, 6)];
        T5            = Ci[WS(cs, 4)];
        T6            = Ci[WS(cs, 1)];
        Ts            = Cr[WS(cs, 6)];
        T3            = T1 - T2;
        Th            = Cr[WS(cs, 1)];
        Ti            = Cr[WS(cs, 4)];
        To            = Tk + Tl;
        Tm            = Tk - Tl;
        Td            = Tb + Tc;
        Tq            = Tb - Tc;
        T7            = T5 - T6;
        Tv            = T5 + T6;
        Tt            = Th + Ti;
        Tj            = Th - Ti;
        Tp            = SIMD_FMADD(KP500000000, To, Tn);
        Te            = SIMD_FNMADD(KP500000000, Td, Ta);
        T8            = SIMD_FMADD(KP500000000, T7, T4);
        Tu            = SIMD_FNMADD(KP500000000, Tt, Ts);
        Tr            = SIMD_FMADD(KP866025403, Tq, Tp);
        TD            = SIMD_FMADD(KP866025403, Tm, Te);
        Tf            = SIMD_FMADD(KP934172358, Te, T9);
        TC            = SIMD_FMADD(KP866025403, Tj, T8);
        Tw            = SIMD_FMADD(KP866025403, Tv, Tu);
        TB            = SIMD_FMADD(KP982246946, Tu, Tq);
        Tg            = SIMD_FMADD(KP910592997, Tf, T8);
        TE            = SIMD_FMADD(KP525731112, TD, TC);
        Tx            = SIMD_FMADD(KP525731112, Tw, Tr);
        TF            = SIMD_FMADD(KP838939048, TE, Tv);
        Ty            = SIMD_FMADD(KP838939048, Tx, Tm);
        TG            = SIMD_FNMADD(KP850650808, TF, TB);
        Tz            = SIMD_FMADD(KP850650808, Ty, Tj);
        TH            = SIMD_FNMADD(KP951056516, TG, T9);
        TA            = SIMD_FNMADD(KP866025403, Tz, Tg);
        TI            = SIMD_FMADD(KP910592997, TH, Tp);
        R0[0]         = SIMD_FNMADD(KP1_902113032, TA, T3);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_902113032, TI, T3);
    }
}

template <>
struct r2cb_traits<15, 14>
{
    static constexpr long_t flops           = 27;
    static constexpr long_t operations      = 14;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 39;
    static constexpr long_t constants       = 13;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 15 -skip-k 14 -name
 * r2cb -standalone */

/*
 * This function contains 14 FP additions, 13 FP multiplications,
 * (or, 1 additions, 0 multiplications, 13 fused multiply/add),
 * 39 stack variables, 13 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 15 && SkippedOutputs == 14>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP983535511, +0.983535511173030266213404305935887145714871317);
    DK(KP1_989043790, +1.989043790736546673845383889961140763041584177);
    DK(KP972303684, +0.972303684619449709393519001037977162180669900);
    DK(KP960558538, +0.960558538835654864003725013100637347092729815);
    DK(KP947982825, +0.947982825090294367738356822658292563650787109);
    DK(KP934172358, +0.934172358962715696451118623548045329629287827);
    DK(KP918577521, +0.918577521417276878019474360822877141096525952);
    DK(KP900404044, +0.900404044297839945120477203885371702076466211);
    DK(KP878431275, +0.878431275907353803701901925796005230464624667);
    DK(KP691981708, +0.691981708437649184433296392491391063039885882);
    DK(KP759747122, +0.759747122949427584133927340467895204762135354);
    DK(KP672816364, +0.672816364803188054521422117265518728531948445);
    DK(KP502754139, +0.502754139781758203815989792012626808663356430);
    {
        SIMD_FLOAT T1, T7, Tq, T6, T2, T4, T5, T3, T8, T9, Ta, Tb, Tc, Td, Te;
        SIMD_FLOAT Tf, Tg, Th, Ti, Tj, Tk, Tl, Tm, Tn, To, Tp;
        T1 = Cr[0];
        T7 = Cr[WS(cs, 6)];
        Tq = Cr[WS(cs, 5)];
        T6 = Ci[WS(cs, 5)];
        T2 = Ci[WS(cs, 4)];
        T4 = Ci[WS(cs, 3)];
        T5 = Cr[WS(cs, 1)];
        T3 = Cr[WS(cs, 7)];
        T8 = Ci[WS(cs, 2)];
        T9 = Cr[WS(cs, 2)];
        Ta = Ci[WS(cs, 6)];
        Tb = Ci[WS(cs, 1)];
        Tc = Cr[WS(cs, 3)];
        Td = Ci[WS(cs, 7)];
        Te = Cr[WS(cs, 4)];
        Tf = SIMD_FNMADD(KP502754139, Te, Td);
        Tg = SIMD_FMADD(KP672816364, Tf, Tc);
        Th = SIMD_FMADD(KP759747122, Tg, Tb);
        Ti = SIMD_FMADD(KP691981708, Th, Ta);
        Tj = SIMD_FMADD(KP878431275, Ti, T9);
        Tk = SIMD_FMADD(KP900404044, Tj, T8);
        Tl = SIMD_FNMADD(KP918577521, Tk, T7);
        Tm = SIMD_FNMADD(KP934172358, Tl, T6);
        Tn = SIMD_FMADD(KP947982825, Tm, T5);
        To = SIMD_FMADD(KP960558538, Tn, T4);
        Tp = SIMD_FNMADD(KP972303684, To, T3);
        R0[0] =
            SIMD_FMADD(KP1_989043790, SIMD_FNMADD(KP983535511, Tp, T2), T1) -
            Tq;
    }
}

//
// Copyright (C) 2018 Aleksandar Zlateski <zlateski@mit.edu>
// Copyright (C) 2018 Zhen Jia <zhenj@princeton.edu>
// ---------------------------------------------------------------
//
// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program.  If not, see <http://www.gnu.org/licenses/>.
//
#pragma once
template <>
struct r2cb_traits<9, 0>
{
    static constexpr long_t flops           = 56;
    static constexpr long_t operations      = 32;
    static constexpr long_t memory_accesses = 18;
    static constexpr long_t stack_vars      = 44;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 0 -name r2cb
 * -standalone */

/*
 * This function contains 32 FP additions, 24 FP multiplications,
 * (or, 8 additions, 0 multiplications, 24 fused multiply/add),
 * 44 stack variables, 12 constants, and 18 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 0>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_326827896, +1.326827896337876792410842639271782594433726619);
    DK(KP1_705737063, +1.705737063904886419256501927880148143872040591);
    DK(KP766044443, +0.766044443118978035202392650555416673935832457);
    DK(KP1_532088886, +1.532088886237956070404785301110833347871664914);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Ta, T1, T2, T4, Th, T5, T6, Td, Te, T3, T9, Tk, T7, Ti, Tf;
        SIMD_FLOAT Tb, Tp, Tc, T8, Tw, Tj, Tr, Tg, Tv, Tq, Tl, Ts, Tu, Tm, To;
        SIMD_FLOAT Tt, Tn;
        Ta            = Ci[WS(cs, 3)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 3)];
        T4            = Cr[WS(cs, 1)];
        Th            = Ci[WS(cs, 1)];
        T5            = Cr[WS(cs, 4)];
        T6            = Cr[WS(cs, 2)];
        Td            = Ci[WS(cs, 4)];
        Te            = Ci[WS(cs, 2)];
        T3            = SIMD_FMADD(KP2_000000000, T2, T1);
        T9            = T1 - T2;
        Tk            = T6 - T5;
        T7            = T5 + T6;
        Ti            = Td - Te;
        Tf            = Td + Te;
        Tb            = SIMD_FNMADD(KP1_732050807, Ta, T9);
        Tp            = SIMD_FMADD(KP1_732050807, Ta, T9);
        Tc            = SIMD_FNMADD(KP500000000, T7, T4);
        T8            = T4 + T7;
        Tw            = Ti + Th;
        Tj            = SIMD_FNMADD(KP500000000, Ti, Th);
        Tr            = SIMD_FMADD(KP866025403, Tf, Tc);
        Tg            = SIMD_FNMADD(KP866025403, Tf, Tc);
        Tv            = T3 - T8;
        R0[0]         = SIMD_FMADD(KP2_000000000, T8, T3);
        Tq            = SIMD_FMADD(KP866025403, Tk, Tj);
        Tl            = SIMD_FNMADD(KP866025403, Tk, Tj);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_732050807, Tw, Tv);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP1_732050807, Tw, Tv);
        Ts            = SIMD_FNMADD(KP176326980, Tr, Tq);
        Tu            = SIMD_FMADD(KP176326980, Tq, Tr);
        Tm            = SIMD_FNMADD(KP839099631, Tl, Tg);
        To            = SIMD_FMADD(KP839099631, Tg, Tl);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_969615506, Ts, Tp);
        Tt            = SIMD_FMADD(KP984807753, Ts, Tp);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_532088886, Tm, Tb);
        Tn            = SIMD_FNMADD(KP766044443, Tm, Tb);
        R0[WS(rs, 5)] = SIMD_FNMADD(KP1_705737063, Tu, Tt);
        R0[WS(rs, 8)] = SIMD_FMADD(KP1_705737063, Tu, Tt);
        R0[WS(rs, 4)] = SIMD_FNMADD(KP1_326827896, To, Tn);
        R0[WS(rs, 7)] = SIMD_FMADD(KP1_326827896, To, Tn);
    }
}

template <>
struct r2cb_traits<9, 1>
{
    static constexpr long_t flops           = 54;
    static constexpr long_t operations      = 31;
    static constexpr long_t memory_accesses = 17;
    static constexpr long_t stack_vars      = 42;
    static constexpr long_t constants       = 12;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 1 -name r2cb
 * -standalone */

/*
 * This function contains 31 FP additions, 23 FP multiplications,
 * (or, 8 additions, 0 multiplications, 23 fused multiply/add),
 * 42 stack variables, 12 constants, and 17 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 1>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_326827896, +1.326827896337876792410842639271782594433726619);
    DK(KP1_705737063, +1.705737063904886419256501927880148143872040591);
    DK(KP766044443, +0.766044443118978035202392650555416673935832457);
    DK(KP1_532088886, +1.532088886237956070404785301110833347871664914);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, T6, Tf, T7, T8, Tb, Tc, T3, T9, Ti, Td, Tg, T5;
        SIMD_FLOAT Tn, Tt, Ta, Th, Tu, Te, Tp, Tj, To, Ts, Tq, Tm, Tk, Tr, Tl;
        T4            = Ci[WS(cs, 3)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 3)];
        T6            = Cr[WS(cs, 1)];
        Tf            = Ci[WS(cs, 1)];
        T7            = Cr[WS(cs, 4)];
        T8            = Cr[WS(cs, 2)];
        Tb            = Ci[WS(cs, 4)];
        Tc            = Ci[WS(cs, 2)];
        T3            = T1 - T2;
        T9            = T7 + T8;
        Ti            = T8 - T7;
        Td            = Tb + Tc;
        Tg            = Tb - Tc;
        T5            = SIMD_FNMADD(KP1_732050807, T4, T3);
        Tn            = SIMD_FMADD(KP1_732050807, T4, T3);
        Tt            = SIMD_FMADD(KP2_000000000, T2, T1) - T9 - T6;
        Ta            = SIMD_FNMADD(KP500000000, T9, T6);
        Th            = SIMD_FNMADD(KP500000000, Tg, Tf);
        Tu            = Tg + Tf;
        Te            = SIMD_FNMADD(KP866025403, Td, Ta);
        Tp            = SIMD_FMADD(KP866025403, Td, Ta);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_732050807, Tu, Tt);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_732050807, Tu, Tt);
        Tj            = SIMD_FNMADD(KP866025403, Ti, Th);
        To            = SIMD_FMADD(KP866025403, Ti, Th);
        Ts            = SIMD_FMADD(KP176326980, To, Tp);
        Tq            = SIMD_FNMADD(KP176326980, Tp, To);
        Tm            = SIMD_FMADD(KP839099631, Te, Tj);
        Tk            = SIMD_FNMADD(KP839099631, Tj, Te);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_969615506, Tq, Tn);
        Tr            = SIMD_FMADD(KP984807753, Tq, Tn);
        R0[0]         = SIMD_FMADD(KP1_532088886, Tk, T5);
        Tl            = SIMD_FNMADD(KP766044443, Tk, T5);
        R0[WS(rs, 4)] = SIMD_FNMADD(KP1_705737063, Ts, Tr);
        R0[WS(rs, 7)] = SIMD_FMADD(KP1_705737063, Ts, Tr);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP1_326827896, Tm, Tl);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_326827896, Tm, Tl);
    }
}

template <>
struct r2cb_traits<9, 2>
{
    static constexpr long_t flops           = 52;
    static constexpr long_t operations      = 30;
    static constexpr long_t memory_accesses = 16;
    static constexpr long_t stack_vars      = 41;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 2 -name r2cb
 * -standalone */

/*
 * This function contains 30 FP additions, 22 FP multiplications,
 * (or, 8 additions, 0 multiplications, 22 fused multiply/add),
 * 41 stack variables, 11 constants, and 16 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 2>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_326827896, +1.326827896337876792410842639271782594433726619);
    DK(KP1_705737063, +1.705737063904886419256501927880148143872040591);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP442275965, +0.442275965445958930803614213090594198144575540);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    {
        SIMD_FLOAT T4, T1, T2, T6, Tf, T7, T8, Tb, Tc, T3, T9, Ti, Td, Tg, T5;
        SIMD_FLOAT Tu, Ta, Tt, Th, To, Te, Tn, Tj, Tp, Ts, Tk, Tm, Tq, Tl, Tr;
        T4            = Ci[WS(cs, 3)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 3)];
        T6            = Ci[WS(cs, 1)];
        Tf            = Cr[WS(cs, 1)];
        T7            = Ci[WS(cs, 4)];
        T8            = Ci[WS(cs, 2)];
        Tb            = Cr[WS(cs, 2)];
        Tc            = Cr[WS(cs, 4)];
        T3            = T1 - T2;
        T9            = T7 - T8;
        Ti            = T7 + T8;
        Td            = Tb - Tc;
        Tg            = Tb + Tc;
        T5            = SIMD_FMADD(KP1_732050807, T4, T3);
        Tu            = T6 + T9;
        Ta            = SIMD_FNMADD(KP500000000, T9, T6);
        Tt            = SIMD_FMADD(KP2_000000000, T2, T1) - Tf - Tg;
        Th            = SIMD_FNMADD(KP500000000, Tg, Tf);
        To            = SIMD_FNMADD(KP866025403, Td, Ta);
        Te            = SIMD_FMADD(KP866025403, Td, Ta);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_732050807, Tu, Tt);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_732050807, Tu, Tt);
        Tn            = SIMD_FNMADD(KP866025403, Ti, Th);
        Tj            = SIMD_FMADD(KP866025403, Ti, Th);
        Tp            = SIMD_FNMADD(KP839099631, To, Tn);
        Ts            = SIMD_FMADD(KP839099631, Tn, To);
        Tk            = SIMD_FNMADD(KP176326980, Tj, Te);
        Tm            = SIMD_FMADD(KP176326980, Te, Tj);
        Tq            = SIMD_FMADD(KP442275965, Tp, T4);
        R0[0]         = SIMD_FNMADD(KP1_969615506, Tk, T5);
        Tl            = SIMD_FMADD(KP984807753, Tk, T5);
        Tr            = SIMD_FNMADD(KP1_732050807, Tq, T3);
        R0[WS(rs, 3)] = SIMD_FNMADD(KP1_705737063, Tm, Tl);
        R0[WS(rs, 6)] = SIMD_FMADD(KP1_705737063, Tm, Tl);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_326827896, Ts, Tr);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_326827896, Ts, Tr);
    }
}

template <>
struct r2cb_traits<9, 3>
{
    static constexpr long_t flops           = 50;
    static constexpr long_t operations      = 29;
    static constexpr long_t memory_accesses = 15;
    static constexpr long_t stack_vars      = 40;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 3 -name r2cb
 * -standalone */

/*
 * This function contains 29 FP additions, 21 FP multiplications,
 * (or, 8 additions, 0 multiplications, 21 fused multiply/add),
 * 40 stack variables, 10 constants, and 15 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 3>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_326827896, +1.326827896337876792410842639271782594433726619);
    DK(KP1_705737063, +1.705737063904886419256501927880148143872040591);
    DK(KP442275965, +0.442275965445958930803614213090594198144575540);
    DK(KP568579021, +0.568579021301628806418833975960049381290680197);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Te, T1, T2, T3, T8, T4, T5, T9, Ta, Td, T6, Tj, Tb, Tg, T7;
        SIMD_FLOAT Tf, Ti, Tc, Th, Tq, Tk, Tp, Tu, Tr, To, Tl, Ts, Tm, Tt, Tn;
        Te            = Ci[WS(cs, 3)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 3)];
        T3            = Cr[WS(cs, 1)];
        T8            = Ci[WS(cs, 1)];
        T4            = Cr[WS(cs, 4)];
        T5            = Cr[WS(cs, 2)];
        T9            = Ci[WS(cs, 4)];
        Ta            = Ci[WS(cs, 2)];
        Td            = T1 - T2;
        T6            = T4 + T5;
        Tj            = T4 - T5;
        Tb            = T9 - Ta;
        Tg            = T9 + Ta;
        T7            = SIMD_FMADD(KP2_000000000, T2, T1) - T3 - T6;
        Tf            = SIMD_FNMADD(KP500000000, T6, T3);
        Ti            = SIMD_FNMADD(KP500000000, Tb, T8);
        Tc            = T8 + Tb;
        Th            = SIMD_FNMADD(KP866025403, Tg, Tf);
        Tq            = SIMD_FMADD(KP866025403, Tg, Tf);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_732050807, Tc, T7);
        R0[0]         = SIMD_FNMADD(KP1_732050807, Tc, T7);
        Tk            = SIMD_FMADD(KP866025403, Tj, Ti);
        Tp            = SIMD_FNMADD(KP866025403, Tj, Ti);
        Tu            = SIMD_FMADD(KP176326980, Tp, Tq);
        Tr            = SIMD_FNMADD(KP176326980, Tq, Tp);
        To            = SIMD_FMADD(KP839099631, Th, Tk);
        Tl            = SIMD_FNMADD(KP839099631, Tk, Th);
        Ts            = SIMD_FMADD(KP568579021, Tr, Te);
        Tm            = SIMD_FMADD(KP442275965, Tl, Te);
        Tt            = SIMD_FMADD(KP1_732050807, Ts, Td);
        Tn            = SIMD_FNMADD(KP1_732050807, Tm, Td);
        R0[WS(rs, 5)] = SIMD_FMADD(KP1_705737063, Tu, Tt);
        R0[WS(rs, 2)] = SIMD_FNMADD(KP1_705737063, Tu, Tt);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_326827896, To, Tn);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_326827896, To, Tn);
    }
}

template <>
struct r2cb_traits<9, 4>
{
    static constexpr long_t flops           = 48;
    static constexpr long_t operations      = 28;
    static constexpr long_t memory_accesses = 14;
    static constexpr long_t stack_vars      = 39;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 4 -name r2cb
 * -standalone */

/*
 * This function contains 28 FP additions, 20 FP multiplications,
 * (or, 8 additions, 0 multiplications, 20 fused multiply/add),
 * 39 stack variables, 10 constants, and 14 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 4>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_326827896, +1.326827896337876792410842639271782594433726619);
    DK(KP1_705737063, +1.705737063904886419256501927880148143872040591);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP442275965, +0.442275965445958930803614213090594198144575540);
    DK(KP568579021, +0.568579021301628806418833975960049381290680197);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, T1, T2, T5, Te, T6, T7, Ta, Tb, T3, T8, Th, Tc, Tf, T9;
        SIMD_FLOAT Tt, Tg, To, Td, Ti, Tn, Ts, Tp, Tm, Tj, Tq, Tk, Tr, Tl;
        T4 = Ci[WS(cs, 3)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 3)];
        T5 = Cr[WS(cs, 1)];
        Te = Ci[WS(cs, 1)];
        T6 = Cr[WS(cs, 4)];
        T7 = Cr[WS(cs, 2)];
        Ta = Ci[WS(cs, 4)];
        Tb = Ci[WS(cs, 2)];
        T3 = T1 - T2;
        T8 = T6 + T7;
        Th = T6 - T7;
        Tc = Ta + Tb;
        Tf = Tb - Ta;
        T9 = SIMD_FNMADD(KP500000000, T8, T5);
        Tt = Te - Tf;
        Tg = SIMD_FMADD(KP500000000, Tf, Te);
        To = SIMD_FMADD(KP866025403, Tc, T9);
        Td = SIMD_FNMADD(KP866025403, Tc, T9);
        R0[WS(rs, 2)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP866025403, Tt, T2), T1) -
            T5 - T8;
        Ti            = SIMD_FMADD(KP866025403, Th, Tg);
        Tn            = SIMD_FNMADD(KP866025403, Th, Tg);
        Ts            = SIMD_FMADD(KP176326980, Tn, To);
        Tp            = SIMD_FNMADD(KP176326980, To, Tn);
        Tm            = SIMD_FMADD(KP839099631, Td, Ti);
        Tj            = SIMD_FNMADD(KP839099631, Ti, Td);
        Tq            = SIMD_FMADD(KP568579021, Tp, T4);
        Tk            = SIMD_FMADD(KP442275965, Tj, T4);
        Tr            = SIMD_FMADD(KP1_732050807, Tq, T3);
        Tl            = SIMD_FNMADD(KP1_732050807, Tk, T3);
        R0[WS(rs, 4)] = SIMD_FMADD(KP1_705737063, Ts, Tr);
        R0[WS(rs, 1)] = SIMD_FNMADD(KP1_705737063, Ts, Tr);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_326827896, Tm, Tl);
        R0[0]         = SIMD_FNMADD(KP1_326827896, Tm, Tl);
    }
}

template <>
struct r2cb_traits<9, 5>
{
    static constexpr long_t flops           = 42;
    static constexpr long_t operations      = 25;
    static constexpr long_t memory_accesses = 13;
    static constexpr long_t stack_vars      = 38;
    static constexpr long_t constants       = 11;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 5 -name r2cb
 * -standalone */

/*
 * This function contains 25 FP additions, 17 FP multiplications,
 * (or, 8 additions, 0 multiplications, 17 fused multiply/add),
 * 38 stack variables, 11 constants, and 13 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 5>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_705737063, +1.705737063904886419256501927880148143872040591);
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP568579021, +0.568579021301628806418833975960049381290680197);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP176326980, +0.176326980708464973471090386868618986121633062);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T4, T1, T2, T5, Te, T6, T7, Ta, Tb, T3, T8, Th, Tc, Tf, T9;
        SIMD_FLOAT Tr, Tg, Td, Tn, Ti, To, Tm, Tj, Tp, Tk, Tq, Tl;
        T4 = Ci[WS(cs, 3)];
        T1 = Cr[0];
        T2 = Cr[WS(cs, 3)];
        T5 = Ci[WS(cs, 1)];
        Te = Cr[WS(cs, 1)];
        T6 = Ci[WS(cs, 2)];
        T7 = Ci[WS(cs, 4)];
        Ta = Cr[WS(cs, 4)];
        Tb = Cr[WS(cs, 2)];
        T3 = T1 - T2;
        T8 = T6 - T7;
        Th = T6 + T7;
        Tc = Ta - Tb;
        Tf = Ta + Tb;
        T9 = SIMD_FMADD(KP500000000, T8, T5);
        Tr = T5 - T8;
        Tg = SIMD_FNMADD(KP500000000, Tf, Te);
        R0[WS(rs, 1)] =
            SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP866025403, Tr, T2), T1) -
            Tf - Te;
        Td            = SIMD_FNMADD(KP866025403, Tc, T9);
        Tn            = SIMD_FNMADD(KP866025403, Th, Tg);
        Ti            = SIMD_FMADD(KP866025403, Th, Tg);
        To            = SIMD_FMADD(KP203604859, Tn, Tc);
        Tm            = SIMD_FMADD(KP176326980, Td, Ti);
        Tj            = SIMD_FNMADD(KP176326980, Ti, Td);
        Tp            = SIMD_FNMADD(KP984807753, To, T4);
        Tk            = SIMD_FMADD(KP568579021, Tj, T4);
        Tq            = SIMD_FNMADD(KP879385241, Tp, T9);
        Tl            = SIMD_FMADD(KP1_732050807, Tk, T3);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_969615506, Tq, T3);
        R0[WS(rs, 3)] = SIMD_FMADD(KP1_705737063, Tm, Tl);
        R0[0]         = SIMD_FNMADD(KP1_705737063, Tm, Tl);
    }
}

template <>
struct r2cb_traits<9, 6>
{
    static constexpr long_t flops           = 36;
    static constexpr long_t operations      = 22;
    static constexpr long_t memory_accesses = 12;
    static constexpr long_t stack_vars      = 35;
    static constexpr long_t constants       = 10;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 6 -name r2cb
 * -standalone */

/*
 * This function contains 22 FP additions, 14 FP multiplications,
 * (or, 8 additions, 0 multiplications, 14 fused multiply/add),
 * 35 stack variables, 10 constants, and 12 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 6>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP884551930, +0.884551930891917861607228426181188396289151079);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP2_000000000, +2.000000000000000000000000000000000000000000000);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT Te, T1, T2, T3, T8, T4, T5, T9, Ta, Tc, T6, Th, Tb, Tf, Td;
        SIMD_FLOAT T7, Tg, Tm, Ti, Tn, Tj, To, Tk, Tp, Tl;
        Te    = Ci[WS(cs, 3)];
        T1    = Cr[0];
        T2    = Cr[WS(cs, 3)];
        T3    = Ci[WS(cs, 1)];
        T8    = Cr[WS(cs, 1)];
        T4    = Ci[WS(cs, 4)];
        T5    = Ci[WS(cs, 2)];
        T9    = Cr[WS(cs, 4)];
        Ta    = Cr[WS(cs, 2)];
        Tc    = T1 - T2;
        T6    = T4 - T5;
        Th    = T4 + T5;
        Tb    = T9 + Ta;
        Tf    = T9 - Ta;
        Td    = SIMD_FNMADD(KP500000000, T6, T3);
        T7    = T3 + T6;
        Tg    = SIMD_FNMADD(KP500000000, Tb, T8);
        R0[0] = SIMD_FMADD(KP2_000000000, SIMD_FMADD(KP866025403, T7, T2), T1) -
                T8 - Tb;
        Tm            = SIMD_FNMADD(KP866025403, Tf, Td);
        Ti            = SIMD_FNMADD(KP866025403, Th, Tg);
        Tn            = SIMD_FMADD(KP968908795, Tm, Th);
        Tj            = SIMD_FMADD(KP203604859, Ti, Tf);
        To            = SIMD_FMADD(KP866025403, Tn, Tg);
        Tk            = SIMD_FNMADD(KP984807753, Tj, Te);
        Tp            = SIMD_FMADD(KP884551930, To, Te);
        Tl            = SIMD_FNMADD(KP879385241, Tk, Td);
        R0[WS(rs, 2)] = SIMD_FMADD(KP1_732050807, Tp, Tc);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_969615506, Tl, Tc);
    }
}

template <>
struct r2cb_traits<9, 7>
{
    static constexpr long_t flops           = 29;
    static constexpr long_t operations      = 17;
    static constexpr long_t memory_accesses = 11;
    static constexpr long_t stack_vars      = 33;
    static constexpr long_t constants       = 9;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 7 -name r2cb
 * -standalone */

/*
 * This function contains 17 FP additions, 12 FP multiplications,
 * (or, 5 additions, 0 multiplications, 12 fused multiply/add),
 * 33 stack variables, 9 constants, and 11 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 7>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP1_732050807, +1.732050807568877293527446341505872366942805254);
    DK(KP879385241, +0.879385241571816768108218554649462939872416269);
    DK(KP884551930, +0.884551930891917861607228426181188396289151079);
    DK(KP984807753, +0.984807753012208059366743024589523013670643252);
    DK(KP203604859, +0.203604859554852403062088995281827210665664861);
    DK(KP968908795, +0.968908795874236621082202410917456709164223497);
    DK(KP866025403, +0.866025403784438646763723170752936183471402627);
    DK(KP500000000, +0.500000000000000000000000000000000000000000000);
    {
        SIMD_FLOAT T9, T1, T2, T4, Td, T5, T6, Ta, Tb, T3, T7, Tg, Tc, Te, T8;
        SIMD_FLOAT Tf, Tl, Th, Tm, Ti, Tn, Tj, To, Tk;
        T9            = Ci[WS(cs, 3)];
        T1            = Cr[0];
        T2            = Cr[WS(cs, 3)];
        T4            = Ci[WS(cs, 1)];
        Td            = Cr[WS(cs, 1)];
        T5            = Ci[WS(cs, 2)];
        T6            = Ci[WS(cs, 4)];
        Ta            = Cr[WS(cs, 4)];
        Tb            = Cr[WS(cs, 2)];
        T3            = T1 - T2;
        T7            = T5 - T6;
        Tg            = T6 + T5;
        Tc            = Ta - Tb;
        Te            = Ta + Tb;
        T8            = SIMD_FMADD(KP500000000, T7, T4);
        Tf            = SIMD_FNMADD(KP500000000, Te, Td);
        Tl            = SIMD_FNMADD(KP866025403, Tc, T8);
        Th            = SIMD_FNMADD(KP866025403, Tg, Tf);
        Tm            = SIMD_FMADD(KP968908795, Tl, Tg);
        Ti            = SIMD_FMADD(KP203604859, Th, Tc);
        Tn            = SIMD_FMADD(KP866025403, Tm, Tf);
        Tj            = SIMD_FNMADD(KP984807753, Ti, T9);
        To            = SIMD_FMADD(KP884551930, Tn, T9);
        Tk            = SIMD_FNMADD(KP879385241, Tj, T8);
        R0[WS(rs, 1)] = SIMD_FMADD(KP1_732050807, To, T3);
        R0[0]         = SIMD_FMADD(KP1_969615506, Tk, T3);
    }
}

template <>
struct r2cb_traits<9, 8>
{
    static constexpr long_t flops           = 15;
    static constexpr long_t operations      = 8;
    static constexpr long_t memory_accesses = 10;
    static constexpr long_t stack_vars      = 21;
    static constexpr long_t constants       = 7;
};
/* Generated by: ./gen_r2cb.native -fma -reorder-insns -schedule-for-pipeline
 * -compact -variables 30 -pipeline-latency 12 -sign 1 -n 9 -skip-k 8 -name r2cb
 * -standalone */

/*
 * This function contains 8 FP additions, 7 FP multiplications,
 * (or, 1 additions, 0 multiplications, 7 fused multiply/add),
 * 21 stack variables, 7 constants, and 10 memory accesses
 */
template <long_t TransformSize, long_t SkippedOutputs, long_t rs, long_t cs>
inline __attribute__((always_inline))
typename std::enable_if<TransformSize == 9 && SkippedOutputs == 8>::type
r2cb(SIMD_FLOAT* __restrict R0, SIMD_FLOAT const* __restrict Cr,
     SIMD_FLOAT const* __restrict Ci)
{
    DK(KP954188894, +0.954188894138671133499268364187245676532219158);
    DK(KP1_969615506, +1.969615506024416118733486049179046027341286503);
    DK(KP921604985, +0.921604985106876291294238937037692821924647985);
    DK(KP884551930, +0.884551930891917861607228426181188396289151079);
    DK(KP839099631, +0.839099631177280011763127298123181364687434283);
    DK(KP532088886, +0.532088886237956070404785301110833347871664914);
    DK(KP507713305, +0.507713305942872492617108842495900175404533673);
    {
        SIMD_FLOAT T1, T4, Te, T3, T2, T5, T6, T7, T8, T9, Ta, Tb, Tc, Td;
        T1 = Cr[0];
        T4 = Ci[WS(cs, 3)];
        Te = Cr[WS(cs, 3)];
        T3 = Cr[WS(cs, 4)];
        T2 = Ci[WS(cs, 2)];
        T5 = Cr[WS(cs, 1)];
        T6 = Ci[WS(cs, 1)];
        T7 = Ci[WS(cs, 4)];
        T8 = Cr[WS(cs, 2)];
        T9 = SIMD_FMADD(KP507713305, T8, T7);
        Ta = SIMD_FMADD(KP532088886, T9, T6);
        Tb = SIMD_FMADD(KP839099631, Ta, T5);
        Tc = SIMD_FMADD(KP884551930, Tb, T4);
        Td = SIMD_FNMADD(KP921604985, Tc, T3);
        R0[0] =
            SIMD_FMADD(KP1_969615506, SIMD_FNMADD(KP954188894, Td, T2), T1) -
            Te;
    }
}
